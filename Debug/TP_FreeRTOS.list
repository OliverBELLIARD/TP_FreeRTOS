
TP_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e4c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000638  0800a030  0800a030  0000b030  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a668  0800a668  0000c1dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a668  0800a668  0000b668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a670  0800a670  0000c1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a670  0800a670  0000b670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a674  0800a674  0000b674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800a678  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000051d0  200001dc  0800a854  0000c1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200053ac  0800a854  0000c3ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000177e0  00000000  00000000  0000c20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000375f  00000000  00000000  000239ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001598  00000000  00000000  00027150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010af  00000000  00000000  000286e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002124e  00000000  00000000  00029797  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018608  00000000  00000000  0004a9e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d00ae  00000000  00000000  00062fed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013309b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f5c  00000000  00000000  001330e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0013a03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a014 	.word	0x0800a014

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e0 	.word	0x200001e0
 800021c:	0800a014 	.word	0x0800a014

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001034:	b5b0      	push	{r4, r5, r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800103a:	4b09      	ldr	r3, [pc, #36]	@ (8001060 <MX_FREERTOS_Init+0x2c>)
 800103c:	1d3c      	adds	r4, r7, #4
 800103e:	461d      	mov	r5, r3
 8001040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001044:	682b      	ldr	r3, [r5, #0]
 8001046:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f003 f8f6 	bl	800423e <osThreadCreate>
 8001052:	4603      	mov	r3, r0
 8001054:	4a03      	ldr	r2, [pc, #12]	@ (8001064 <MX_FREERTOS_Init+0x30>)
 8001056:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001058:	bf00      	nop
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bdb0      	pop	{r4, r5, r7, pc}
 8001060:	0800a03c 	.word	0x0800a03c
 8001064:	200001f8 	.word	0x200001f8

08001068 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001070:	2001      	movs	r0, #1
 8001072:	f003 f90b 	bl	800428c <osDelay>
 8001076:	e7fb      	b.n	8001070 <StartDefaultTask+0x8>

08001078 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08a      	sub	sp, #40	@ 0x28
 800107c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107e:	f107 0314 	add.w	r3, r7, #20
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
 800108c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800108e:	4b2b      	ldr	r3, [pc, #172]	@ (800113c <MX_GPIO_Init+0xc4>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001092:	4a2a      	ldr	r2, [pc, #168]	@ (800113c <MX_GPIO_Init+0xc4>)
 8001094:	f043 0304 	orr.w	r3, r3, #4
 8001098:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800109a:	4b28      	ldr	r3, [pc, #160]	@ (800113c <MX_GPIO_Init+0xc4>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109e:	f003 0304 	and.w	r3, r3, #4
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010a6:	4b25      	ldr	r3, [pc, #148]	@ (800113c <MX_GPIO_Init+0xc4>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010aa:	4a24      	ldr	r2, [pc, #144]	@ (800113c <MX_GPIO_Init+0xc4>)
 80010ac:	f043 0320 	orr.w	r3, r3, #32
 80010b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b2:	4b22      	ldr	r3, [pc, #136]	@ (800113c <MX_GPIO_Init+0xc4>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b6:	f003 0320 	and.w	r3, r3, #32
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	4b1f      	ldr	r3, [pc, #124]	@ (800113c <MX_GPIO_Init+0xc4>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c2:	4a1e      	ldr	r2, [pc, #120]	@ (800113c <MX_GPIO_Init+0xc4>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ca:	4b1c      	ldr	r3, [pc, #112]	@ (800113c <MX_GPIO_Init+0xc4>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d6:	4b19      	ldr	r3, [pc, #100]	@ (800113c <MX_GPIO_Init+0xc4>)
 80010d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010da:	4a18      	ldr	r2, [pc, #96]	@ (800113c <MX_GPIO_Init+0xc4>)
 80010dc:	f043 0302 	orr.w	r3, r3, #2
 80010e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010e2:	4b16      	ldr	r3, [pc, #88]	@ (800113c <MX_GPIO_Init+0xc4>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2120      	movs	r1, #32
 80010f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010f6:	f000 fe5b 	bl	8001db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001100:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001104:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	4619      	mov	r1, r3
 8001110:	480b      	ldr	r0, [pc, #44]	@ (8001140 <MX_GPIO_Init+0xc8>)
 8001112:	f000 fccb 	bl	8001aac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001116:	2320      	movs	r3, #32
 8001118:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111a:	2301      	movs	r3, #1
 800111c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	2300      	movs	r3, #0
 8001124:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	4619      	mov	r1, r3
 800112c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001130:	f000 fcbc 	bl	8001aac <HAL_GPIO_Init>

}
 8001134:	bf00      	nop
 8001136:	3728      	adds	r7, #40	@ 0x28
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40021000 	.word	0x40021000
 8001140:	48000800 	.word	0x48000800

08001144 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001148:	f3bf 8f4f 	dsb	sy
}
 800114c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800114e:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <__NVIC_SystemReset+0x24>)
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001156:	4904      	ldr	r1, [pc, #16]	@ (8001168 <__NVIC_SystemReset+0x24>)
 8001158:	4b04      	ldr	r3, [pc, #16]	@ (800116c <__NVIC_SystemReset+0x28>)
 800115a:	4313      	orrs	r3, r2
 800115c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800115e:	f3bf 8f4f 	dsb	sy
}
 8001162:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001164:	bf00      	nop
 8001166:	e7fd      	b.n	8001164 <__NVIC_SystemReset+0x20>
 8001168:	e000ed00 	.word	0xe000ed00
 800116c:	05fa0004 	.word	0x05fa0004

08001170 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001178:	1d39      	adds	r1, r7, #4
 800117a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800117e:	2201      	movs	r2, #1
 8001180:	4803      	ldr	r0, [pc, #12]	@ (8001190 <__io_putchar+0x20>)
 8001182:	f002 f9c1 	bl	8003508 <HAL_UART_Transmit>
	return ch;
 8001186:	687b      	ldr	r3, [r7, #4]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000254 	.word	0x20000254

08001194 <errHandler_xTaskCreate>:
/**
 * @brief  Gestion d'erreurs de création de tâche.
 * @param	BaseType_t	Retour de xTaskCreate.
 */
void errHandler_xTaskCreate(BaseType_t r)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
	/* Vérification si la tâche a été créée avec succès */
	if (pdPASS == r) {
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d103      	bne.n	80011aa <errHandler_xTaskCreate+0x16>
		/* Si la tâche est créée avec succès, démarrer le scheduler */
		printf("Tâche crée avec succès\r\n");
 80011a2:	480b      	ldr	r0, [pc, #44]	@ (80011d0 <errHandler_xTaskCreate+0x3c>)
 80011a4:	f005 fa9c 	bl	80066e0 <puts>
	} else {
		/* Cas improbable : code d'erreur non prévu pour xTaskCreate */
		printf("Erreur inconnue lors de la création de la tâche\r\n");
		Error_Handler();  // Gestion d'erreur générique
	}
}
 80011a8:	e00e      	b.n	80011c8 <errHandler_xTaskCreate+0x34>
	} else if (errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY == r) {
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80011b0:	d105      	bne.n	80011be <errHandler_xTaskCreate+0x2a>
		printf("Erreur: Mémoire insuffisante\r\n");
 80011b2:	4808      	ldr	r0, [pc, #32]	@ (80011d4 <errHandler_xTaskCreate+0x40>)
 80011b4:	f005 fa94 	bl	80066e0 <puts>
		Error_Handler();
 80011b8:	f000 f8fa 	bl	80013b0 <Error_Handler>
}
 80011bc:	e004      	b.n	80011c8 <errHandler_xTaskCreate+0x34>
		printf("Erreur inconnue lors de la création de la tâche\r\n");
 80011be:	4806      	ldr	r0, [pc, #24]	@ (80011d8 <errHandler_xTaskCreate+0x44>)
 80011c0:	f005 fa8e 	bl	80066e0 <puts>
		Error_Handler();  // Gestion d'erreur générique
 80011c4:	f000 f8f4 	bl	80013b0 <Error_Handler>
}
 80011c8:	bf00      	nop
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	0800a050 	.word	0x0800a050
 80011d4:	0800a06c 	.word	0x0800a06c
 80011d8:	0800a08c 	.word	0x0800a08c

080011dc <taskGive>:

/**
 * @note
 * source: https://www.freertos.org/Documentation/02-Kernel/04-API-references/10-Semaphore-and-Mutexes/12-xSemaphoreTake
 */
void taskGive(void *pvParameters) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
    static int delay_ms = 100; // Début du délai à 100 ms
    TaskHandle_t taskTakeHandle = (TaskHandle_t) pvParameters; // Récupère le handle de taskTake
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	60fb      	str	r3, [r7, #12]

    while (1) {
        printf("Avant de notifier taskTake\r\n");
 80011e8:	480b      	ldr	r0, [pc, #44]	@ (8001218 <taskGive+0x3c>)
 80011ea:	f005 fa79 	bl	80066e0 <puts>

        // Envoyer une notification à taskTake
        xTaskNotifyGive(taskTakeHandle);
 80011ee:	2300      	movs	r3, #0
 80011f0:	2202      	movs	r2, #2
 80011f2:	2100      	movs	r1, #0
 80011f4:	68f8      	ldr	r0, [r7, #12]
 80011f6:	f003 fdb7 	bl	8004d68 <xTaskGenericNotify>
        printf("Après avoir notifié taskTake\r\n");
 80011fa:	4808      	ldr	r0, [pc, #32]	@ (800121c <taskGive+0x40>)
 80011fc:	f005 fa70 	bl	80066e0 <puts>

        // Attendre le délai actuel avant d'envoyer une nouvelle notification
        vTaskDelay(delay_ms / portTICK_PERIOD_MS);
 8001200:	4b07      	ldr	r3, [pc, #28]	@ (8001220 <taskGive+0x44>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4618      	mov	r0, r3
 8001206:	f003 fa55 	bl	80046b4 <vTaskDelay>

        // Augmenter le délai de 100 ms à chaque itération
        delay_ms += 100;
 800120a:	4b05      	ldr	r3, [pc, #20]	@ (8001220 <taskGive+0x44>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	3364      	adds	r3, #100	@ 0x64
 8001210:	4a03      	ldr	r2, [pc, #12]	@ (8001220 <taskGive+0x44>)
 8001212:	6013      	str	r3, [r2, #0]
        printf("Avant de notifier taskTake\r\n");
 8001214:	bf00      	nop
 8001216:	e7e7      	b.n	80011e8 <taskGive+0xc>
 8001218:	0800a0f0 	.word	0x0800a0f0
 800121c:	0800a10c 	.word	0x0800a10c
 8001220:	20000000 	.word	0x20000000

08001224 <taskTake>:
    }
}

void taskTake(void *pvParameters) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
    while (1) {
        printf("Avant de recevoir la notification dans taskTake\r\n");
 800122c:	480f      	ldr	r0, [pc, #60]	@ (800126c <taskTake+0x48>)
 800122e:	f005 fa57 	bl	80066e0 <puts>

        // Attendre une notification avec un délai maximum de 1 seconde
        if (ulTaskNotifyTake(pdTRUE, SEMAPHORE_RETRY_TIME / portTICK_PERIOD_MS) > 0)
 8001232:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001236:	2001      	movs	r0, #1
 8001238:	f003 fd4a 	bl	8004cd0 <ulTaskNotifyTake>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d00b      	beq.n	800125a <taskTake+0x36>
        {
            printf("Après avoir reçu la notification dans taskTake\r\n");
 8001242:	480b      	ldr	r0, [pc, #44]	@ (8001270 <taskTake+0x4c>)
 8001244:	f005 fa4c 	bl	80066e0 <puts>

            // Basculer la LED pour indiquer la réception de la notification
            HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001248:	2120      	movs	r1, #32
 800124a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800124e:	f000 fdc7 	bl	8001de0 <HAL_GPIO_TogglePin>
            vTaskDelay(DELAY_1 / portTICK_PERIOD_MS);
 8001252:	2064      	movs	r0, #100	@ 0x64
 8001254:	f003 fa2e 	bl	80046b4 <vTaskDelay>
 8001258:	e7e8      	b.n	800122c <taskTake+0x8>
        }
        else
        {
            // Gestion d'erreur si la notification n'est pas reçue dans le délai spécifié
            printf("taskTake n'a pas reçu la notification après %.3f ms. Resetting...\r\n", (float)SEMAPHORE_RETRY_TIME);
 800125a:	f04f 0200 	mov.w	r2, #0
 800125e:	4b05      	ldr	r3, [pc, #20]	@ (8001274 <taskTake+0x50>)
 8001260:	4805      	ldr	r0, [pc, #20]	@ (8001278 <taskTake+0x54>)
 8001262:	f005 f9d5 	bl	8006610 <iprintf>
            NVIC_SystemReset(); // Réinitialiser le microcontrôleur
 8001266:	f7ff ff6d 	bl	8001144 <__NVIC_SystemReset>
 800126a:	bf00      	nop
 800126c:	0800a12c 	.word	0x0800a12c
 8001270:	0800a160 	.word	0x0800a160
 8001274:	408f4000 	.word	0x408f4000
 8001278:	0800a194 	.word	0x0800a194

0800127c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001282:	f000 fafc 	bl	800187e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001286:	f000 f835 	bl	80012f4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800128a:	f7ff fef5 	bl	8001078 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800128e:	f000 fa29 	bl	80016e4 <MX_USART2_UART_Init>
	errHandler_xTaskCreate(xReturned);
	 */

	/* 1.2 */
	// Créer taskTake en premier pour obtenir son handle
	xReturned = xTaskCreate(
 8001292:	4b12      	ldr	r3, [pc, #72]	@ (80012dc <main+0x60>)
 8001294:	9301      	str	r3, [sp, #4]
 8001296:	2300      	movs	r3, #0
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	2300      	movs	r3, #0
 800129c:	22fa      	movs	r2, #250	@ 0xfa
 800129e:	4910      	ldr	r1, [pc, #64]	@ (80012e0 <main+0x64>)
 80012a0:	4810      	ldr	r0, [pc, #64]	@ (80012e4 <main+0x68>)
 80012a2:	f003 f8bb 	bl	800441c <xTaskCreate>
 80012a6:	6078      	str	r0, [r7, #4]
		"taskTake",
		STACK_SIZE,
		NULL,
		tskIDLE_PRIORITY, // Priorité plus élevée
		&xHandle2);
	errHandler_xTaskCreate(xReturned);
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7ff ff73 	bl	8001194 <errHandler_xTaskCreate>

	// Créer taskGive en passant le handle de taskTake comme paramètre
	xReturned = xTaskCreate(
 80012ae:	4b0b      	ldr	r3, [pc, #44]	@ (80012dc <main+0x60>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a0d      	ldr	r2, [pc, #52]	@ (80012e8 <main+0x6c>)
 80012b4:	9201      	str	r2, [sp, #4]
 80012b6:	2201      	movs	r2, #1
 80012b8:	9200      	str	r2, [sp, #0]
 80012ba:	22fa      	movs	r2, #250	@ 0xfa
 80012bc:	490b      	ldr	r1, [pc, #44]	@ (80012ec <main+0x70>)
 80012be:	480c      	ldr	r0, [pc, #48]	@ (80012f0 <main+0x74>)
 80012c0:	f003 f8ac 	bl	800441c <xTaskCreate>
 80012c4:	6078      	str	r0, [r7, #4]
		"taskGive",
		STACK_SIZE,
		(void *) xHandle2, // Passer le handle de taskTake en paramètre
		1U, // Priorité inférieure
		&xHandle1);
	errHandler_xTaskCreate(xReturned);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff ff64 	bl	8001194 <errHandler_xTaskCreate>

	vTaskStartScheduler();
 80012cc:	f003 fa28 	bl	8004720 <vTaskStartScheduler>

	/* USER CODE END 2 */

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();
 80012d0:	f7ff feb0 	bl	8001034 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 80012d4:	f002 ffac 	bl	8004230 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80012d8:	bf00      	nop
 80012da:	e7fd      	b.n	80012d8 <main+0x5c>
 80012dc:	20000200 	.word	0x20000200
 80012e0:	0800a1dc 	.word	0x0800a1dc
 80012e4:	08001225 	.word	0x08001225
 80012e8:	200001fc 	.word	0x200001fc
 80012ec:	0800a1e8 	.word	0x0800a1e8
 80012f0:	080011dd 	.word	0x080011dd

080012f4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b094      	sub	sp, #80	@ 0x50
 80012f8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012fa:	f107 0318 	add.w	r3, r7, #24
 80012fe:	2238      	movs	r2, #56	@ 0x38
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f005 faec 	bl	80068e0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
 8001314:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001316:	2000      	movs	r0, #0
 8001318:	f000 fd7c 	bl	8001e14 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800131c:	2302      	movs	r3, #2
 800131e:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001320:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001324:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001326:	2340      	movs	r3, #64	@ 0x40
 8001328:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800132a:	2302      	movs	r3, #2
 800132c:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800132e:	2302      	movs	r3, #2
 8001330:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001332:	2304      	movs	r3, #4
 8001334:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8001336:	2355      	movs	r3, #85	@ 0x55
 8001338:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800133a:	2302      	movs	r3, #2
 800133c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800133e:	2302      	movs	r3, #2
 8001340:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001342:	2302      	movs	r3, #2
 8001344:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001346:	f107 0318 	add.w	r3, r7, #24
 800134a:	4618      	mov	r0, r3
 800134c:	f000 fe16 	bl	8001f7c <HAL_RCC_OscConfig>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <SystemClock_Config+0x66>
	{
		Error_Handler();
 8001356:	f000 f82b 	bl	80013b0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800135a:	230f      	movs	r3, #15
 800135c:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800135e:	2303      	movs	r3, #3
 8001360:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	2104      	movs	r1, #4
 8001372:	4618      	mov	r0, r3
 8001374:	f001 f914 	bl	80025a0 <HAL_RCC_ClockConfig>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <SystemClock_Config+0x8e>
	{
		Error_Handler();
 800137e:	f000 f817 	bl	80013b0 <Error_Handler>
	}
}
 8001382:	bf00      	nop
 8001384:	3750      	adds	r7, #80	@ 0x50
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM16) {
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a04      	ldr	r2, [pc, #16]	@ (80013ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d101      	bne.n	80013a2 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800139e:	f000 fa87 	bl	80018b0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40014400 	.word	0x40014400

080013b0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80013b4:	b672      	cpsid	i
}
 80013b6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80013b8:	bf00      	nop
 80013ba:	e7fd      	b.n	80013b8 <Error_Handler+0x8>

080013bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c2:	4b12      	ldr	r3, [pc, #72]	@ (800140c <HAL_MspInit+0x50>)
 80013c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013c6:	4a11      	ldr	r2, [pc, #68]	@ (800140c <HAL_MspInit+0x50>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80013ce:	4b0f      	ldr	r3, [pc, #60]	@ (800140c <HAL_MspInit+0x50>)
 80013d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013da:	4b0c      	ldr	r3, [pc, #48]	@ (800140c <HAL_MspInit+0x50>)
 80013dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013de:	4a0b      	ldr	r2, [pc, #44]	@ (800140c <HAL_MspInit+0x50>)
 80013e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80013e6:	4b09      	ldr	r3, [pc, #36]	@ (800140c <HAL_MspInit+0x50>)
 80013e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013f2:	2200      	movs	r2, #0
 80013f4:	210f      	movs	r1, #15
 80013f6:	f06f 0001 	mvn.w	r0, #1
 80013fa:	f000 fb2f 	bl	8001a5c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80013fe:	f000 fdad 	bl	8001f5c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40021000 	.word	0x40021000

08001410 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08c      	sub	sp, #48	@ 0x30
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001418:	2300      	movs	r3, #0
 800141a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8001420:	4b2c      	ldr	r3, [pc, #176]	@ (80014d4 <HAL_InitTick+0xc4>)
 8001422:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001424:	4a2b      	ldr	r2, [pc, #172]	@ (80014d4 <HAL_InitTick+0xc4>)
 8001426:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800142a:	6613      	str	r3, [r2, #96]	@ 0x60
 800142c:	4b29      	ldr	r3, [pc, #164]	@ (80014d4 <HAL_InitTick+0xc4>)
 800142e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001430:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001438:	f107 020c 	add.w	r2, r7, #12
 800143c:	f107 0310 	add.w	r3, r7, #16
 8001440:	4611      	mov	r1, r2
 8001442:	4618      	mov	r0, r3
 8001444:	f001 fa82 	bl	800294c <HAL_RCC_GetClockConfig>
  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001448:	f001 fa6a 	bl	8002920 <HAL_RCC_GetPCLK2Freq>
 800144c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800144e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001450:	4a21      	ldr	r2, [pc, #132]	@ (80014d8 <HAL_InitTick+0xc8>)
 8001452:	fba2 2303 	umull	r2, r3, r2, r3
 8001456:	0c9b      	lsrs	r3, r3, #18
 8001458:	3b01      	subs	r3, #1
 800145a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 800145c:	4b1f      	ldr	r3, [pc, #124]	@ (80014dc <HAL_InitTick+0xcc>)
 800145e:	4a20      	ldr	r2, [pc, #128]	@ (80014e0 <HAL_InitTick+0xd0>)
 8001460:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8001462:	4b1e      	ldr	r3, [pc, #120]	@ (80014dc <HAL_InitTick+0xcc>)
 8001464:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001468:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 800146a:	4a1c      	ldr	r2, [pc, #112]	@ (80014dc <HAL_InitTick+0xcc>)
 800146c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800146e:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8001470:	4b1a      	ldr	r3, [pc, #104]	@ (80014dc <HAL_InitTick+0xcc>)
 8001472:	2200      	movs	r2, #0
 8001474:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001476:	4b19      	ldr	r3, [pc, #100]	@ (80014dc <HAL_InitTick+0xcc>)
 8001478:	2200      	movs	r2, #0
 800147a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim16);
 800147c:	4817      	ldr	r0, [pc, #92]	@ (80014dc <HAL_InitTick+0xcc>)
 800147e:	f001 fccd 	bl	8002e1c <HAL_TIM_Base_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001488:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800148c:	2b00      	cmp	r3, #0
 800148e:	d11b      	bne.n	80014c8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 8001490:	4812      	ldr	r0, [pc, #72]	@ (80014dc <HAL_InitTick+0xcc>)
 8001492:	f001 fd25 	bl	8002ee0 <HAL_TIM_Base_Start_IT>
 8001496:	4603      	mov	r3, r0
 8001498:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800149c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d111      	bne.n	80014c8 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80014a4:	2019      	movs	r0, #25
 80014a6:	f000 faf3 	bl	8001a90 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2b0f      	cmp	r3, #15
 80014ae:	d808      	bhi.n	80014c2 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80014b0:	2200      	movs	r2, #0
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	2019      	movs	r0, #25
 80014b6:	f000 fad1 	bl	8001a5c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014ba:	4a0a      	ldr	r2, [pc, #40]	@ (80014e4 <HAL_InitTick+0xd4>)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6013      	str	r3, [r2, #0]
 80014c0:	e002      	b.n	80014c8 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80014c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3730      	adds	r7, #48	@ 0x30
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40021000 	.word	0x40021000
 80014d8:	431bde83 	.word	0x431bde83
 80014dc:	20000204 	.word	0x20000204
 80014e0:	40014400 	.word	0x40014400
 80014e4:	20000008 	.word	0x20000008

080014e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014ec:	bf00      	nop
 80014ee:	e7fd      	b.n	80014ec <NMI_Handler+0x4>

080014f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f4:	bf00      	nop
 80014f6:	e7fd      	b.n	80014f4 <HardFault_Handler+0x4>

080014f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014fc:	bf00      	nop
 80014fe:	e7fd      	b.n	80014fc <MemManage_Handler+0x4>

08001500 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001504:	bf00      	nop
 8001506:	e7fd      	b.n	8001504 <BusFault_Handler+0x4>

08001508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800150c:	bf00      	nop
 800150e:	e7fd      	b.n	800150c <UsageFault_Handler+0x4>

08001510 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
	...

08001520 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001524:	4802      	ldr	r0, [pc, #8]	@ (8001530 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001526:	f001 fd45 	bl	8002fb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000204 	.word	0x20000204

08001534 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  return 1;
 8001538:	2301      	movs	r3, #1
}
 800153a:	4618      	mov	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <_kill>:

int _kill(int pid, int sig)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800154e:	f005 fa6f 	bl	8006a30 <__errno>
 8001552:	4603      	mov	r3, r0
 8001554:	2216      	movs	r2, #22
 8001556:	601a      	str	r2, [r3, #0]
  return -1;
 8001558:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800155c:	4618      	mov	r0, r3
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <_exit>:

void _exit (int status)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800156c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff ffe7 	bl	8001544 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001576:	bf00      	nop
 8001578:	e7fd      	b.n	8001576 <_exit+0x12>

0800157a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b086      	sub	sp, #24
 800157e:	af00      	add	r7, sp, #0
 8001580:	60f8      	str	r0, [r7, #12]
 8001582:	60b9      	str	r1, [r7, #8]
 8001584:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
 800158a:	e00a      	b.n	80015a2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800158c:	f3af 8000 	nop.w
 8001590:	4601      	mov	r1, r0
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	1c5a      	adds	r2, r3, #1
 8001596:	60ba      	str	r2, [r7, #8]
 8001598:	b2ca      	uxtb	r2, r1
 800159a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	3301      	adds	r3, #1
 80015a0:	617b      	str	r3, [r7, #20]
 80015a2:	697a      	ldr	r2, [r7, #20]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	dbf0      	blt.n	800158c <_read+0x12>
  }

  return len;
 80015aa:	687b      	ldr	r3, [r7, #4]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3718      	adds	r7, #24
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	e009      	b.n	80015da <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	1c5a      	adds	r2, r3, #1
 80015ca:	60ba      	str	r2, [r7, #8]
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fdce 	bl	8001170 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	3301      	adds	r3, #1
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	697a      	ldr	r2, [r7, #20]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	429a      	cmp	r2, r3
 80015e0:	dbf1      	blt.n	80015c6 <_write+0x12>
  }
  return len;
 80015e2:	687b      	ldr	r3, [r7, #4]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <_close>:

int _close(int file)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001614:	605a      	str	r2, [r3, #4]
  return 0;
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <_isatty>:

int _isatty(int file)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800162c:	2301      	movs	r3, #1
}
 800162e:	4618      	mov	r0, r3
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800163a:	b480      	push	{r7}
 800163c:	b085      	sub	sp, #20
 800163e:	af00      	add	r7, sp, #0
 8001640:	60f8      	str	r0, [r7, #12]
 8001642:	60b9      	str	r1, [r7, #8]
 8001644:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001646:	2300      	movs	r3, #0
}
 8001648:	4618      	mov	r0, r3
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800165c:	4a14      	ldr	r2, [pc, #80]	@ (80016b0 <_sbrk+0x5c>)
 800165e:	4b15      	ldr	r3, [pc, #84]	@ (80016b4 <_sbrk+0x60>)
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001668:	4b13      	ldr	r3, [pc, #76]	@ (80016b8 <_sbrk+0x64>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d102      	bne.n	8001676 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001670:	4b11      	ldr	r3, [pc, #68]	@ (80016b8 <_sbrk+0x64>)
 8001672:	4a12      	ldr	r2, [pc, #72]	@ (80016bc <_sbrk+0x68>)
 8001674:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001676:	4b10      	ldr	r3, [pc, #64]	@ (80016b8 <_sbrk+0x64>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4413      	add	r3, r2
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	429a      	cmp	r2, r3
 8001682:	d207      	bcs.n	8001694 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001684:	f005 f9d4 	bl	8006a30 <__errno>
 8001688:	4603      	mov	r3, r0
 800168a:	220c      	movs	r2, #12
 800168c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800168e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001692:	e009      	b.n	80016a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001694:	4b08      	ldr	r3, [pc, #32]	@ (80016b8 <_sbrk+0x64>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800169a:	4b07      	ldr	r3, [pc, #28]	@ (80016b8 <_sbrk+0x64>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4413      	add	r3, r2
 80016a2:	4a05      	ldr	r2, [pc, #20]	@ (80016b8 <_sbrk+0x64>)
 80016a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016a6:	68fb      	ldr	r3, [r7, #12]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3718      	adds	r7, #24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20008000 	.word	0x20008000
 80016b4:	00000400 	.word	0x00000400
 80016b8:	20000250 	.word	0x20000250
 80016bc:	200053b0 	.word	0x200053b0

080016c0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016c4:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <SystemInit+0x20>)
 80016c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016ca:	4a05      	ldr	r2, [pc, #20]	@ (80016e0 <SystemInit+0x20>)
 80016cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016e8:	4b22      	ldr	r3, [pc, #136]	@ (8001774 <MX_USART2_UART_Init+0x90>)
 80016ea:	4a23      	ldr	r2, [pc, #140]	@ (8001778 <MX_USART2_UART_Init+0x94>)
 80016ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016ee:	4b21      	ldr	r3, [pc, #132]	@ (8001774 <MX_USART2_UART_Init+0x90>)
 80016f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001774 <MX_USART2_UART_Init+0x90>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001774 <MX_USART2_UART_Init+0x90>)
 80016fe:	2200      	movs	r2, #0
 8001700:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001702:	4b1c      	ldr	r3, [pc, #112]	@ (8001774 <MX_USART2_UART_Init+0x90>)
 8001704:	2200      	movs	r2, #0
 8001706:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001708:	4b1a      	ldr	r3, [pc, #104]	@ (8001774 <MX_USART2_UART_Init+0x90>)
 800170a:	220c      	movs	r2, #12
 800170c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800170e:	4b19      	ldr	r3, [pc, #100]	@ (8001774 <MX_USART2_UART_Init+0x90>)
 8001710:	2200      	movs	r2, #0
 8001712:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001714:	4b17      	ldr	r3, [pc, #92]	@ (8001774 <MX_USART2_UART_Init+0x90>)
 8001716:	2200      	movs	r2, #0
 8001718:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800171a:	4b16      	ldr	r3, [pc, #88]	@ (8001774 <MX_USART2_UART_Init+0x90>)
 800171c:	2200      	movs	r2, #0
 800171e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001720:	4b14      	ldr	r3, [pc, #80]	@ (8001774 <MX_USART2_UART_Init+0x90>)
 8001722:	2200      	movs	r2, #0
 8001724:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001726:	4b13      	ldr	r3, [pc, #76]	@ (8001774 <MX_USART2_UART_Init+0x90>)
 8001728:	2200      	movs	r2, #0
 800172a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800172c:	4811      	ldr	r0, [pc, #68]	@ (8001774 <MX_USART2_UART_Init+0x90>)
 800172e:	f001 fe9b 	bl	8003468 <HAL_UART_Init>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001738:	f7ff fe3a 	bl	80013b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800173c:	2100      	movs	r1, #0
 800173e:	480d      	ldr	r0, [pc, #52]	@ (8001774 <MX_USART2_UART_Init+0x90>)
 8001740:	f002 fc94 	bl	800406c <HAL_UARTEx_SetTxFifoThreshold>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800174a:	f7ff fe31 	bl	80013b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800174e:	2100      	movs	r1, #0
 8001750:	4808      	ldr	r0, [pc, #32]	@ (8001774 <MX_USART2_UART_Init+0x90>)
 8001752:	f002 fcc9 	bl	80040e8 <HAL_UARTEx_SetRxFifoThreshold>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800175c:	f7ff fe28 	bl	80013b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001760:	4804      	ldr	r0, [pc, #16]	@ (8001774 <MX_USART2_UART_Init+0x90>)
 8001762:	f002 fc4a 	bl	8003ffa <HAL_UARTEx_DisableFifoMode>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800176c:	f7ff fe20 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001770:	bf00      	nop
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20000254 	.word	0x20000254
 8001778:	40004400 	.word	0x40004400

0800177c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b09a      	sub	sp, #104	@ 0x68
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001784:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001794:	f107 0310 	add.w	r3, r7, #16
 8001798:	2244      	movs	r2, #68	@ 0x44
 800179a:	2100      	movs	r1, #0
 800179c:	4618      	mov	r0, r3
 800179e:	f005 f89f 	bl	80068e0 <memset>
  if(uartHandle->Instance==USART2)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a1f      	ldr	r2, [pc, #124]	@ (8001824 <HAL_UART_MspInit+0xa8>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d136      	bne.n	800181a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80017ac:	2302      	movs	r3, #2
 80017ae:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80017b0:	2300      	movs	r3, #0
 80017b2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017b4:	f107 0310 	add.w	r3, r7, #16
 80017b8:	4618      	mov	r0, r3
 80017ba:	f001 f93f 	bl	8002a3c <HAL_RCCEx_PeriphCLKConfig>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80017c4:	f7ff fdf4 	bl	80013b0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017c8:	4b17      	ldr	r3, [pc, #92]	@ (8001828 <HAL_UART_MspInit+0xac>)
 80017ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017cc:	4a16      	ldr	r2, [pc, #88]	@ (8001828 <HAL_UART_MspInit+0xac>)
 80017ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80017d4:	4b14      	ldr	r3, [pc, #80]	@ (8001828 <HAL_UART_MspInit+0xac>)
 80017d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e0:	4b11      	ldr	r3, [pc, #68]	@ (8001828 <HAL_UART_MspInit+0xac>)
 80017e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e4:	4a10      	ldr	r2, [pc, #64]	@ (8001828 <HAL_UART_MspInit+0xac>)
 80017e6:	f043 0301 	orr.w	r3, r3, #1
 80017ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001828 <HAL_UART_MspInit+0xac>)
 80017ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017f8:	230c      	movs	r3, #12
 80017fa:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fc:	2302      	movs	r3, #2
 80017fe:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001804:	2300      	movs	r3, #0
 8001806:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001808:	2307      	movs	r3, #7
 800180a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001810:	4619      	mov	r1, r3
 8001812:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001816:	f000 f949 	bl	8001aac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800181a:	bf00      	nop
 800181c:	3768      	adds	r7, #104	@ 0x68
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40004400 	.word	0x40004400
 8001828:	40021000 	.word	0x40021000

0800182c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800182c:	480d      	ldr	r0, [pc, #52]	@ (8001864 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800182e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001830:	f7ff ff46 	bl	80016c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001834:	480c      	ldr	r0, [pc, #48]	@ (8001868 <LoopForever+0x6>)
  ldr r1, =_edata
 8001836:	490d      	ldr	r1, [pc, #52]	@ (800186c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001838:	4a0d      	ldr	r2, [pc, #52]	@ (8001870 <LoopForever+0xe>)
  movs r3, #0
 800183a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800183c:	e002      	b.n	8001844 <LoopCopyDataInit>

0800183e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800183e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001840:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001842:	3304      	adds	r3, #4

08001844 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001844:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001846:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001848:	d3f9      	bcc.n	800183e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800184a:	4a0a      	ldr	r2, [pc, #40]	@ (8001874 <LoopForever+0x12>)
  ldr r4, =_ebss
 800184c:	4c0a      	ldr	r4, [pc, #40]	@ (8001878 <LoopForever+0x16>)
  movs r3, #0
 800184e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001850:	e001      	b.n	8001856 <LoopFillZerobss>

08001852 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001852:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001854:	3204      	adds	r2, #4

08001856 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001856:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001858:	d3fb      	bcc.n	8001852 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800185a:	f005 f8ef 	bl	8006a3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800185e:	f7ff fd0d 	bl	800127c <main>

08001862 <LoopForever>:

LoopForever:
    b LoopForever
 8001862:	e7fe      	b.n	8001862 <LoopForever>
  ldr   r0, =_estack
 8001864:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001868:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800186c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001870:	0800a678 	.word	0x0800a678
  ldr r2, =_sbss
 8001874:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001878:	200053ac 	.word	0x200053ac

0800187c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800187c:	e7fe      	b.n	800187c <ADC1_2_IRQHandler>

0800187e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001884:	2300      	movs	r3, #0
 8001886:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001888:	2003      	movs	r0, #3
 800188a:	f000 f8dc 	bl	8001a46 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800188e:	200f      	movs	r0, #15
 8001890:	f7ff fdbe 	bl	8001410 <HAL_InitTick>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d002      	beq.n	80018a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	71fb      	strb	r3, [r7, #7]
 800189e:	e001      	b.n	80018a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018a0:	f7ff fd8c 	bl	80013bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018a4:	79fb      	ldrb	r3, [r7, #7]

}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
	...

080018b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018b4:	4b05      	ldr	r3, [pc, #20]	@ (80018cc <HAL_IncTick+0x1c>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	4b05      	ldr	r3, [pc, #20]	@ (80018d0 <HAL_IncTick+0x20>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4413      	add	r3, r2
 80018be:	4a03      	ldr	r2, [pc, #12]	@ (80018cc <HAL_IncTick+0x1c>)
 80018c0:	6013      	str	r3, [r2, #0]
}
 80018c2:	bf00      	nop
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	200002e8 	.word	0x200002e8
 80018d0:	2000000c 	.word	0x2000000c

080018d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return uwTick;
 80018d8:	4b03      	ldr	r3, [pc, #12]	@ (80018e8 <HAL_GetTick+0x14>)
 80018da:	681b      	ldr	r3, [r3, #0]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	200002e8 	.word	0x200002e8

080018ec <__NVIC_SetPriorityGrouping>:
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001930 <__NVIC_SetPriorityGrouping+0x44>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001902:	68ba      	ldr	r2, [r7, #8]
 8001904:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001908:	4013      	ands	r3, r2
 800190a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001914:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001918:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800191c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800191e:	4a04      	ldr	r2, [pc, #16]	@ (8001930 <__NVIC_SetPriorityGrouping+0x44>)
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	60d3      	str	r3, [r2, #12]
}
 8001924:	bf00      	nop
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <__NVIC_GetPriorityGrouping>:
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001938:	4b04      	ldr	r3, [pc, #16]	@ (800194c <__NVIC_GetPriorityGrouping+0x18>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	0a1b      	lsrs	r3, r3, #8
 800193e:	f003 0307 	and.w	r3, r3, #7
}
 8001942:	4618      	mov	r0, r3
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <__NVIC_EnableIRQ>:
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	2b00      	cmp	r3, #0
 8001960:	db0b      	blt.n	800197a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	f003 021f 	and.w	r2, r3, #31
 8001968:	4907      	ldr	r1, [pc, #28]	@ (8001988 <__NVIC_EnableIRQ+0x38>)
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	095b      	lsrs	r3, r3, #5
 8001970:	2001      	movs	r0, #1
 8001972:	fa00 f202 	lsl.w	r2, r0, r2
 8001976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	e000e100 	.word	0xe000e100

0800198c <__NVIC_SetPriority>:
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	6039      	str	r1, [r7, #0]
 8001996:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199c:	2b00      	cmp	r3, #0
 800199e:	db0a      	blt.n	80019b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	490c      	ldr	r1, [pc, #48]	@ (80019d8 <__NVIC_SetPriority+0x4c>)
 80019a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019aa:	0112      	lsls	r2, r2, #4
 80019ac:	b2d2      	uxtb	r2, r2
 80019ae:	440b      	add	r3, r1
 80019b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80019b4:	e00a      	b.n	80019cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	4908      	ldr	r1, [pc, #32]	@ (80019dc <__NVIC_SetPriority+0x50>)
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	f003 030f 	and.w	r3, r3, #15
 80019c2:	3b04      	subs	r3, #4
 80019c4:	0112      	lsls	r2, r2, #4
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	440b      	add	r3, r1
 80019ca:	761a      	strb	r2, [r3, #24]
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	e000e100 	.word	0xe000e100
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <NVIC_EncodePriority>:
{
 80019e0:	b480      	push	{r7}
 80019e2:	b089      	sub	sp, #36	@ 0x24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	f1c3 0307 	rsb	r3, r3, #7
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	bf28      	it	cs
 80019fe:	2304      	movcs	r3, #4
 8001a00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	3304      	adds	r3, #4
 8001a06:	2b06      	cmp	r3, #6
 8001a08:	d902      	bls.n	8001a10 <NVIC_EncodePriority+0x30>
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3b03      	subs	r3, #3
 8001a0e:	e000      	b.n	8001a12 <NVIC_EncodePriority+0x32>
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43da      	mvns	r2, r3
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	401a      	ands	r2, r3
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a28:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a32:	43d9      	mvns	r1, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a38:	4313      	orrs	r3, r2
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3724      	adds	r7, #36	@ 0x24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b082      	sub	sp, #8
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7ff ff4c 	bl	80018ec <__NVIC_SetPriorityGrouping>
}
 8001a54:	bf00      	nop
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
 8001a68:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a6a:	f7ff ff63 	bl	8001934 <__NVIC_GetPriorityGrouping>
 8001a6e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	68b9      	ldr	r1, [r7, #8]
 8001a74:	6978      	ldr	r0, [r7, #20]
 8001a76:	f7ff ffb3 	bl	80019e0 <NVIC_EncodePriority>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a80:	4611      	mov	r1, r2
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff ff82 	bl	800198c <__NVIC_SetPriority>
}
 8001a88:	bf00      	nop
 8001a8a:	3718      	adds	r7, #24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff ff56 	bl	8001950 <__NVIC_EnableIRQ>
}
 8001aa4:	bf00      	nop
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b087      	sub	sp, #28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001aba:	e15a      	b.n	8001d72 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac8:	4013      	ands	r3, r2
 8001aca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 814c 	beq.w	8001d6c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 0303 	and.w	r3, r3, #3
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d005      	beq.n	8001aec <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d130      	bne.n	8001b4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	2203      	movs	r2, #3
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	4013      	ands	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	68da      	ldr	r2, [r3, #12]
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b22:	2201      	movs	r2, #1
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	091b      	lsrs	r3, r3, #4
 8001b38:	f003 0201 	and.w	r2, r3, #1
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f003 0303 	and.w	r3, r3, #3
 8001b56:	2b03      	cmp	r3, #3
 8001b58:	d017      	beq.n	8001b8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	2203      	movs	r2, #3
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	689a      	ldr	r2, [r3, #8]
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 0303 	and.w	r3, r3, #3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d123      	bne.n	8001bde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	08da      	lsrs	r2, r3, #3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	3208      	adds	r2, #8
 8001b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	220f      	movs	r2, #15
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	691a      	ldr	r2, [r3, #16]
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	08da      	lsrs	r2, r3, #3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3208      	adds	r2, #8
 8001bd8:	6939      	ldr	r1, [r7, #16]
 8001bda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	2203      	movs	r2, #3
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f003 0203 	and.w	r2, r3, #3
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f000 80a6 	beq.w	8001d6c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c20:	4b5b      	ldr	r3, [pc, #364]	@ (8001d90 <HAL_GPIO_Init+0x2e4>)
 8001c22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c24:	4a5a      	ldr	r2, [pc, #360]	@ (8001d90 <HAL_GPIO_Init+0x2e4>)
 8001c26:	f043 0301 	orr.w	r3, r3, #1
 8001c2a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c2c:	4b58      	ldr	r3, [pc, #352]	@ (8001d90 <HAL_GPIO_Init+0x2e4>)
 8001c2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	60bb      	str	r3, [r7, #8]
 8001c36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c38:	4a56      	ldr	r2, [pc, #344]	@ (8001d94 <HAL_GPIO_Init+0x2e8>)
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	089b      	lsrs	r3, r3, #2
 8001c3e:	3302      	adds	r3, #2
 8001c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	f003 0303 	and.w	r3, r3, #3
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	220f      	movs	r2, #15
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	43db      	mvns	r3, r3
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c62:	d01f      	beq.n	8001ca4 <HAL_GPIO_Init+0x1f8>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a4c      	ldr	r2, [pc, #304]	@ (8001d98 <HAL_GPIO_Init+0x2ec>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d019      	beq.n	8001ca0 <HAL_GPIO_Init+0x1f4>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4a4b      	ldr	r2, [pc, #300]	@ (8001d9c <HAL_GPIO_Init+0x2f0>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d013      	beq.n	8001c9c <HAL_GPIO_Init+0x1f0>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4a4a      	ldr	r2, [pc, #296]	@ (8001da0 <HAL_GPIO_Init+0x2f4>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d00d      	beq.n	8001c98 <HAL_GPIO_Init+0x1ec>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a49      	ldr	r2, [pc, #292]	@ (8001da4 <HAL_GPIO_Init+0x2f8>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d007      	beq.n	8001c94 <HAL_GPIO_Init+0x1e8>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a48      	ldr	r2, [pc, #288]	@ (8001da8 <HAL_GPIO_Init+0x2fc>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d101      	bne.n	8001c90 <HAL_GPIO_Init+0x1e4>
 8001c8c:	2305      	movs	r3, #5
 8001c8e:	e00a      	b.n	8001ca6 <HAL_GPIO_Init+0x1fa>
 8001c90:	2306      	movs	r3, #6
 8001c92:	e008      	b.n	8001ca6 <HAL_GPIO_Init+0x1fa>
 8001c94:	2304      	movs	r3, #4
 8001c96:	e006      	b.n	8001ca6 <HAL_GPIO_Init+0x1fa>
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e004      	b.n	8001ca6 <HAL_GPIO_Init+0x1fa>
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	e002      	b.n	8001ca6 <HAL_GPIO_Init+0x1fa>
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e000      	b.n	8001ca6 <HAL_GPIO_Init+0x1fa>
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	697a      	ldr	r2, [r7, #20]
 8001ca8:	f002 0203 	and.w	r2, r2, #3
 8001cac:	0092      	lsls	r2, r2, #2
 8001cae:	4093      	lsls	r3, r2
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cb6:	4937      	ldr	r1, [pc, #220]	@ (8001d94 <HAL_GPIO_Init+0x2e8>)
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	089b      	lsrs	r3, r3, #2
 8001cbc:	3302      	adds	r3, #2
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cc4:	4b39      	ldr	r3, [pc, #228]	@ (8001dac <HAL_GPIO_Init+0x300>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ce8:	4a30      	ldr	r2, [pc, #192]	@ (8001dac <HAL_GPIO_Init+0x300>)
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001cee:	4b2f      	ldr	r3, [pc, #188]	@ (8001dac <HAL_GPIO_Init+0x300>)
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d12:	4a26      	ldr	r2, [pc, #152]	@ (8001dac <HAL_GPIO_Init+0x300>)
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001d18:	4b24      	ldr	r3, [pc, #144]	@ (8001dac <HAL_GPIO_Init+0x300>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	43db      	mvns	r3, r3
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	4013      	ands	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d3c:	4a1b      	ldr	r2, [pc, #108]	@ (8001dac <HAL_GPIO_Init+0x300>)
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d42:	4b1a      	ldr	r3, [pc, #104]	@ (8001dac <HAL_GPIO_Init+0x300>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d66:	4a11      	ldr	r2, [pc, #68]	@ (8001dac <HAL_GPIO_Init+0x300>)
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	fa22 f303 	lsr.w	r3, r2, r3
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f47f ae9d 	bne.w	8001abc <HAL_GPIO_Init+0x10>
  }
}
 8001d82:	bf00      	nop
 8001d84:	bf00      	nop
 8001d86:	371c      	adds	r7, #28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	40021000 	.word	0x40021000
 8001d94:	40010000 	.word	0x40010000
 8001d98:	48000400 	.word	0x48000400
 8001d9c:	48000800 	.word	0x48000800
 8001da0:	48000c00 	.word	0x48000c00
 8001da4:	48001000 	.word	0x48001000
 8001da8:	48001400 	.word	0x48001400
 8001dac:	40010400 	.word	0x40010400

08001db0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	460b      	mov	r3, r1
 8001dba:	807b      	strh	r3, [r7, #2]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dc0:	787b      	ldrb	r3, [r7, #1]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dc6:	887a      	ldrh	r2, [r7, #2]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001dcc:	e002      	b.n	8001dd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001dce:	887a      	ldrh	r2, [r7, #2]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	460b      	mov	r3, r1
 8001dea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	695b      	ldr	r3, [r3, #20]
 8001df0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001df2:	887a      	ldrh	r2, [r7, #2]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4013      	ands	r3, r2
 8001df8:	041a      	lsls	r2, r3, #16
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	43d9      	mvns	r1, r3
 8001dfe:	887b      	ldrh	r3, [r7, #2]
 8001e00:	400b      	ands	r3, r1
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	619a      	str	r2, [r3, #24]
}
 8001e08:	bf00      	nop
 8001e0a:	3714      	adds	r7, #20
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d141      	bne.n	8001ea6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e22:	4b4b      	ldr	r3, [pc, #300]	@ (8001f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001e2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e2e:	d131      	bne.n	8001e94 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e30:	4b47      	ldr	r3, [pc, #284]	@ (8001f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e36:	4a46      	ldr	r2, [pc, #280]	@ (8001f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e3c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e40:	4b43      	ldr	r3, [pc, #268]	@ (8001f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e48:	4a41      	ldr	r2, [pc, #260]	@ (8001f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e4e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e50:	4b40      	ldr	r3, [pc, #256]	@ (8001f54 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2232      	movs	r2, #50	@ 0x32
 8001e56:	fb02 f303 	mul.w	r3, r2, r3
 8001e5a:	4a3f      	ldr	r2, [pc, #252]	@ (8001f58 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e60:	0c9b      	lsrs	r3, r3, #18
 8001e62:	3301      	adds	r3, #1
 8001e64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e66:	e002      	b.n	8001e6e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e6e:	4b38      	ldr	r3, [pc, #224]	@ (8001f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e7a:	d102      	bne.n	8001e82 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1f2      	bne.n	8001e68 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e82:	4b33      	ldr	r3, [pc, #204]	@ (8001f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e8e:	d158      	bne.n	8001f42 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e057      	b.n	8001f44 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e94:	4b2e      	ldr	r3, [pc, #184]	@ (8001f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e9a:	4a2d      	ldr	r2, [pc, #180]	@ (8001f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ea0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001ea4:	e04d      	b.n	8001f42 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001eac:	d141      	bne.n	8001f32 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001eae:	4b28      	ldr	r3, [pc, #160]	@ (8001f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001eb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eba:	d131      	bne.n	8001f20 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ebc:	4b24      	ldr	r3, [pc, #144]	@ (8001f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ec2:	4a23      	ldr	r2, [pc, #140]	@ (8001f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ec4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ec8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ecc:	4b20      	ldr	r3, [pc, #128]	@ (8001f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ed4:	4a1e      	ldr	r2, [pc, #120]	@ (8001f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ed6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eda:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001edc:	4b1d      	ldr	r3, [pc, #116]	@ (8001f54 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2232      	movs	r2, #50	@ 0x32
 8001ee2:	fb02 f303 	mul.w	r3, r2, r3
 8001ee6:	4a1c      	ldr	r2, [pc, #112]	@ (8001f58 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8001eec:	0c9b      	lsrs	r3, r3, #18
 8001eee:	3301      	adds	r3, #1
 8001ef0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ef2:	e002      	b.n	8001efa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001efa:	4b15      	ldr	r3, [pc, #84]	@ (8001f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f06:	d102      	bne.n	8001f0e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1f2      	bne.n	8001ef4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f0e:	4b10      	ldr	r3, [pc, #64]	@ (8001f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f1a:	d112      	bne.n	8001f42 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e011      	b.n	8001f44 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f20:	4b0b      	ldr	r3, [pc, #44]	@ (8001f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f26:	4a0a      	ldr	r2, [pc, #40]	@ (8001f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f2c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001f30:	e007      	b.n	8001f42 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f32:	4b07      	ldr	r3, [pc, #28]	@ (8001f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f3a:	4a05      	ldr	r2, [pc, #20]	@ (8001f50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f3c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f40:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	40007000 	.word	0x40007000
 8001f54:	20000004 	.word	0x20000004
 8001f58:	431bde83 	.word	0x431bde83

08001f5c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001f60:	4b05      	ldr	r3, [pc, #20]	@ (8001f78 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	4a04      	ldr	r2, [pc, #16]	@ (8001f78 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001f66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f6a:	6093      	str	r3, [r2, #8]
}
 8001f6c:	bf00      	nop
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	40007000 	.word	0x40007000

08001f7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b088      	sub	sp, #32
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e2fe      	b.n	800258c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d075      	beq.n	8002086 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f9a:	4b97      	ldr	r3, [pc, #604]	@ (80021f8 <HAL_RCC_OscConfig+0x27c>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 030c 	and.w	r3, r3, #12
 8001fa2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fa4:	4b94      	ldr	r3, [pc, #592]	@ (80021f8 <HAL_RCC_OscConfig+0x27c>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	f003 0303 	and.w	r3, r3, #3
 8001fac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	2b0c      	cmp	r3, #12
 8001fb2:	d102      	bne.n	8001fba <HAL_RCC_OscConfig+0x3e>
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	2b03      	cmp	r3, #3
 8001fb8:	d002      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x44>
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	2b08      	cmp	r3, #8
 8001fbe:	d10b      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc0:	4b8d      	ldr	r3, [pc, #564]	@ (80021f8 <HAL_RCC_OscConfig+0x27c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d05b      	beq.n	8002084 <HAL_RCC_OscConfig+0x108>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d157      	bne.n	8002084 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e2d9      	b.n	800258c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fe0:	d106      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x74>
 8001fe2:	4b85      	ldr	r3, [pc, #532]	@ (80021f8 <HAL_RCC_OscConfig+0x27c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a84      	ldr	r2, [pc, #528]	@ (80021f8 <HAL_RCC_OscConfig+0x27c>)
 8001fe8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fec:	6013      	str	r3, [r2, #0]
 8001fee:	e01d      	b.n	800202c <HAL_RCC_OscConfig+0xb0>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ff8:	d10c      	bne.n	8002014 <HAL_RCC_OscConfig+0x98>
 8001ffa:	4b7f      	ldr	r3, [pc, #508]	@ (80021f8 <HAL_RCC_OscConfig+0x27c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a7e      	ldr	r2, [pc, #504]	@ (80021f8 <HAL_RCC_OscConfig+0x27c>)
 8002000:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002004:	6013      	str	r3, [r2, #0]
 8002006:	4b7c      	ldr	r3, [pc, #496]	@ (80021f8 <HAL_RCC_OscConfig+0x27c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a7b      	ldr	r2, [pc, #492]	@ (80021f8 <HAL_RCC_OscConfig+0x27c>)
 800200c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002010:	6013      	str	r3, [r2, #0]
 8002012:	e00b      	b.n	800202c <HAL_RCC_OscConfig+0xb0>
 8002014:	4b78      	ldr	r3, [pc, #480]	@ (80021f8 <HAL_RCC_OscConfig+0x27c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a77      	ldr	r2, [pc, #476]	@ (80021f8 <HAL_RCC_OscConfig+0x27c>)
 800201a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800201e:	6013      	str	r3, [r2, #0]
 8002020:	4b75      	ldr	r3, [pc, #468]	@ (80021f8 <HAL_RCC_OscConfig+0x27c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a74      	ldr	r2, [pc, #464]	@ (80021f8 <HAL_RCC_OscConfig+0x27c>)
 8002026:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800202a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d013      	beq.n	800205c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002034:	f7ff fc4e 	bl	80018d4 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800203c:	f7ff fc4a 	bl	80018d4 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b64      	cmp	r3, #100	@ 0x64
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e29e      	b.n	800258c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800204e:	4b6a      	ldr	r3, [pc, #424]	@ (80021f8 <HAL_RCC_OscConfig+0x27c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d0f0      	beq.n	800203c <HAL_RCC_OscConfig+0xc0>
 800205a:	e014      	b.n	8002086 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205c:	f7ff fc3a 	bl	80018d4 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002064:	f7ff fc36 	bl	80018d4 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b64      	cmp	r3, #100	@ 0x64
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e28a      	b.n	800258c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002076:	4b60      	ldr	r3, [pc, #384]	@ (80021f8 <HAL_RCC_OscConfig+0x27c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1f0      	bne.n	8002064 <HAL_RCC_OscConfig+0xe8>
 8002082:	e000      	b.n	8002086 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d075      	beq.n	800217e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002092:	4b59      	ldr	r3, [pc, #356]	@ (80021f8 <HAL_RCC_OscConfig+0x27c>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 030c 	and.w	r3, r3, #12
 800209a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800209c:	4b56      	ldr	r3, [pc, #344]	@ (80021f8 <HAL_RCC_OscConfig+0x27c>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	f003 0303 	and.w	r3, r3, #3
 80020a4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	2b0c      	cmp	r3, #12
 80020aa:	d102      	bne.n	80020b2 <HAL_RCC_OscConfig+0x136>
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d002      	beq.n	80020b8 <HAL_RCC_OscConfig+0x13c>
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	2b04      	cmp	r3, #4
 80020b6:	d11f      	bne.n	80020f8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020b8:	4b4f      	ldr	r3, [pc, #316]	@ (80021f8 <HAL_RCC_OscConfig+0x27c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d005      	beq.n	80020d0 <HAL_RCC_OscConfig+0x154>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e25d      	b.n	800258c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020d0:	4b49      	ldr	r3, [pc, #292]	@ (80021f8 <HAL_RCC_OscConfig+0x27c>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	061b      	lsls	r3, r3, #24
 80020de:	4946      	ldr	r1, [pc, #280]	@ (80021f8 <HAL_RCC_OscConfig+0x27c>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80020e4:	4b45      	ldr	r3, [pc, #276]	@ (80021fc <HAL_RCC_OscConfig+0x280>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff f991 	bl	8001410 <HAL_InitTick>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d043      	beq.n	800217c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e249      	b.n	800258c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d023      	beq.n	8002148 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002100:	4b3d      	ldr	r3, [pc, #244]	@ (80021f8 <HAL_RCC_OscConfig+0x27c>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a3c      	ldr	r2, [pc, #240]	@ (80021f8 <HAL_RCC_OscConfig+0x27c>)
 8002106:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800210a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210c:	f7ff fbe2 	bl	80018d4 <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002114:	f7ff fbde 	bl	80018d4 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e232      	b.n	800258c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002126:	4b34      	ldr	r3, [pc, #208]	@ (80021f8 <HAL_RCC_OscConfig+0x27c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800212e:	2b00      	cmp	r3, #0
 8002130:	d0f0      	beq.n	8002114 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002132:	4b31      	ldr	r3, [pc, #196]	@ (80021f8 <HAL_RCC_OscConfig+0x27c>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	061b      	lsls	r3, r3, #24
 8002140:	492d      	ldr	r1, [pc, #180]	@ (80021f8 <HAL_RCC_OscConfig+0x27c>)
 8002142:	4313      	orrs	r3, r2
 8002144:	604b      	str	r3, [r1, #4]
 8002146:	e01a      	b.n	800217e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002148:	4b2b      	ldr	r3, [pc, #172]	@ (80021f8 <HAL_RCC_OscConfig+0x27c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a2a      	ldr	r2, [pc, #168]	@ (80021f8 <HAL_RCC_OscConfig+0x27c>)
 800214e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002152:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002154:	f7ff fbbe 	bl	80018d4 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800215c:	f7ff fbba 	bl	80018d4 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e20e      	b.n	800258c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800216e:	4b22      	ldr	r3, [pc, #136]	@ (80021f8 <HAL_RCC_OscConfig+0x27c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f0      	bne.n	800215c <HAL_RCC_OscConfig+0x1e0>
 800217a:	e000      	b.n	800217e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800217c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0308 	and.w	r3, r3, #8
 8002186:	2b00      	cmp	r3, #0
 8002188:	d041      	beq.n	800220e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d01c      	beq.n	80021cc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002192:	4b19      	ldr	r3, [pc, #100]	@ (80021f8 <HAL_RCC_OscConfig+0x27c>)
 8002194:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002198:	4a17      	ldr	r2, [pc, #92]	@ (80021f8 <HAL_RCC_OscConfig+0x27c>)
 800219a:	f043 0301 	orr.w	r3, r3, #1
 800219e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a2:	f7ff fb97 	bl	80018d4 <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021aa:	f7ff fb93 	bl	80018d4 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e1e7      	b.n	800258c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021bc:	4b0e      	ldr	r3, [pc, #56]	@ (80021f8 <HAL_RCC_OscConfig+0x27c>)
 80021be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d0ef      	beq.n	80021aa <HAL_RCC_OscConfig+0x22e>
 80021ca:	e020      	b.n	800220e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021cc:	4b0a      	ldr	r3, [pc, #40]	@ (80021f8 <HAL_RCC_OscConfig+0x27c>)
 80021ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021d2:	4a09      	ldr	r2, [pc, #36]	@ (80021f8 <HAL_RCC_OscConfig+0x27c>)
 80021d4:	f023 0301 	bic.w	r3, r3, #1
 80021d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021dc:	f7ff fb7a 	bl	80018d4 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021e2:	e00d      	b.n	8002200 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021e4:	f7ff fb76 	bl	80018d4 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d906      	bls.n	8002200 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e1ca      	b.n	800258c <HAL_RCC_OscConfig+0x610>
 80021f6:	bf00      	nop
 80021f8:	40021000 	.word	0x40021000
 80021fc:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002200:	4b8c      	ldr	r3, [pc, #560]	@ (8002434 <HAL_RCC_OscConfig+0x4b8>)
 8002202:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1ea      	bne.n	80021e4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0304 	and.w	r3, r3, #4
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 80a6 	beq.w	8002368 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800221c:	2300      	movs	r3, #0
 800221e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002220:	4b84      	ldr	r3, [pc, #528]	@ (8002434 <HAL_RCC_OscConfig+0x4b8>)
 8002222:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002224:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <HAL_RCC_OscConfig+0x2b4>
 800222c:	2301      	movs	r3, #1
 800222e:	e000      	b.n	8002232 <HAL_RCC_OscConfig+0x2b6>
 8002230:	2300      	movs	r3, #0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00d      	beq.n	8002252 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002236:	4b7f      	ldr	r3, [pc, #508]	@ (8002434 <HAL_RCC_OscConfig+0x4b8>)
 8002238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800223a:	4a7e      	ldr	r2, [pc, #504]	@ (8002434 <HAL_RCC_OscConfig+0x4b8>)
 800223c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002240:	6593      	str	r3, [r2, #88]	@ 0x58
 8002242:	4b7c      	ldr	r3, [pc, #496]	@ (8002434 <HAL_RCC_OscConfig+0x4b8>)
 8002244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002246:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800224e:	2301      	movs	r3, #1
 8002250:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002252:	4b79      	ldr	r3, [pc, #484]	@ (8002438 <HAL_RCC_OscConfig+0x4bc>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800225a:	2b00      	cmp	r3, #0
 800225c:	d118      	bne.n	8002290 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800225e:	4b76      	ldr	r3, [pc, #472]	@ (8002438 <HAL_RCC_OscConfig+0x4bc>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a75      	ldr	r2, [pc, #468]	@ (8002438 <HAL_RCC_OscConfig+0x4bc>)
 8002264:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002268:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800226a:	f7ff fb33 	bl	80018d4 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002270:	e008      	b.n	8002284 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002272:	f7ff fb2f 	bl	80018d4 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e183      	b.n	800258c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002284:	4b6c      	ldr	r3, [pc, #432]	@ (8002438 <HAL_RCC_OscConfig+0x4bc>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800228c:	2b00      	cmp	r3, #0
 800228e:	d0f0      	beq.n	8002272 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d108      	bne.n	80022aa <HAL_RCC_OscConfig+0x32e>
 8002298:	4b66      	ldr	r3, [pc, #408]	@ (8002434 <HAL_RCC_OscConfig+0x4b8>)
 800229a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800229e:	4a65      	ldr	r2, [pc, #404]	@ (8002434 <HAL_RCC_OscConfig+0x4b8>)
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80022a8:	e024      	b.n	80022f4 <HAL_RCC_OscConfig+0x378>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	2b05      	cmp	r3, #5
 80022b0:	d110      	bne.n	80022d4 <HAL_RCC_OscConfig+0x358>
 80022b2:	4b60      	ldr	r3, [pc, #384]	@ (8002434 <HAL_RCC_OscConfig+0x4b8>)
 80022b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022b8:	4a5e      	ldr	r2, [pc, #376]	@ (8002434 <HAL_RCC_OscConfig+0x4b8>)
 80022ba:	f043 0304 	orr.w	r3, r3, #4
 80022be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80022c2:	4b5c      	ldr	r3, [pc, #368]	@ (8002434 <HAL_RCC_OscConfig+0x4b8>)
 80022c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022c8:	4a5a      	ldr	r2, [pc, #360]	@ (8002434 <HAL_RCC_OscConfig+0x4b8>)
 80022ca:	f043 0301 	orr.w	r3, r3, #1
 80022ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80022d2:	e00f      	b.n	80022f4 <HAL_RCC_OscConfig+0x378>
 80022d4:	4b57      	ldr	r3, [pc, #348]	@ (8002434 <HAL_RCC_OscConfig+0x4b8>)
 80022d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022da:	4a56      	ldr	r2, [pc, #344]	@ (8002434 <HAL_RCC_OscConfig+0x4b8>)
 80022dc:	f023 0301 	bic.w	r3, r3, #1
 80022e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80022e4:	4b53      	ldr	r3, [pc, #332]	@ (8002434 <HAL_RCC_OscConfig+0x4b8>)
 80022e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022ea:	4a52      	ldr	r2, [pc, #328]	@ (8002434 <HAL_RCC_OscConfig+0x4b8>)
 80022ec:	f023 0304 	bic.w	r3, r3, #4
 80022f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d016      	beq.n	800232a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022fc:	f7ff faea 	bl	80018d4 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002302:	e00a      	b.n	800231a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002304:	f7ff fae6 	bl	80018d4 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002312:	4293      	cmp	r3, r2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e138      	b.n	800258c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800231a:	4b46      	ldr	r3, [pc, #280]	@ (8002434 <HAL_RCC_OscConfig+0x4b8>)
 800231c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0ed      	beq.n	8002304 <HAL_RCC_OscConfig+0x388>
 8002328:	e015      	b.n	8002356 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800232a:	f7ff fad3 	bl	80018d4 <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002330:	e00a      	b.n	8002348 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002332:	f7ff facf 	bl	80018d4 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002340:	4293      	cmp	r3, r2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e121      	b.n	800258c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002348:	4b3a      	ldr	r3, [pc, #232]	@ (8002434 <HAL_RCC_OscConfig+0x4b8>)
 800234a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1ed      	bne.n	8002332 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002356:	7ffb      	ldrb	r3, [r7, #31]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d105      	bne.n	8002368 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800235c:	4b35      	ldr	r3, [pc, #212]	@ (8002434 <HAL_RCC_OscConfig+0x4b8>)
 800235e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002360:	4a34      	ldr	r2, [pc, #208]	@ (8002434 <HAL_RCC_OscConfig+0x4b8>)
 8002362:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002366:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0320 	and.w	r3, r3, #32
 8002370:	2b00      	cmp	r3, #0
 8002372:	d03c      	beq.n	80023ee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d01c      	beq.n	80023b6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800237c:	4b2d      	ldr	r3, [pc, #180]	@ (8002434 <HAL_RCC_OscConfig+0x4b8>)
 800237e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002382:	4a2c      	ldr	r2, [pc, #176]	@ (8002434 <HAL_RCC_OscConfig+0x4b8>)
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800238c:	f7ff faa2 	bl	80018d4 <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002394:	f7ff fa9e 	bl	80018d4 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e0f2      	b.n	800258c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023a6:	4b23      	ldr	r3, [pc, #140]	@ (8002434 <HAL_RCC_OscConfig+0x4b8>)
 80023a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0ef      	beq.n	8002394 <HAL_RCC_OscConfig+0x418>
 80023b4:	e01b      	b.n	80023ee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023b6:	4b1f      	ldr	r3, [pc, #124]	@ (8002434 <HAL_RCC_OscConfig+0x4b8>)
 80023b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023bc:	4a1d      	ldr	r2, [pc, #116]	@ (8002434 <HAL_RCC_OscConfig+0x4b8>)
 80023be:	f023 0301 	bic.w	r3, r3, #1
 80023c2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c6:	f7ff fa85 	bl	80018d4 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023ce:	f7ff fa81 	bl	80018d4 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e0d5      	b.n	800258c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023e0:	4b14      	ldr	r3, [pc, #80]	@ (8002434 <HAL_RCC_OscConfig+0x4b8>)
 80023e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1ef      	bne.n	80023ce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 80c9 	beq.w	800258a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002434 <HAL_RCC_OscConfig+0x4b8>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 030c 	and.w	r3, r3, #12
 8002400:	2b0c      	cmp	r3, #12
 8002402:	f000 8083 	beq.w	800250c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	2b02      	cmp	r3, #2
 800240c:	d15e      	bne.n	80024cc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800240e:	4b09      	ldr	r3, [pc, #36]	@ (8002434 <HAL_RCC_OscConfig+0x4b8>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a08      	ldr	r2, [pc, #32]	@ (8002434 <HAL_RCC_OscConfig+0x4b8>)
 8002414:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002418:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241a:	f7ff fa5b 	bl	80018d4 <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002420:	e00c      	b.n	800243c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002422:	f7ff fa57 	bl	80018d4 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d905      	bls.n	800243c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e0ab      	b.n	800258c <HAL_RCC_OscConfig+0x610>
 8002434:	40021000 	.word	0x40021000
 8002438:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800243c:	4b55      	ldr	r3, [pc, #340]	@ (8002594 <HAL_RCC_OscConfig+0x618>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1ec      	bne.n	8002422 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002448:	4b52      	ldr	r3, [pc, #328]	@ (8002594 <HAL_RCC_OscConfig+0x618>)
 800244a:	68da      	ldr	r2, [r3, #12]
 800244c:	4b52      	ldr	r3, [pc, #328]	@ (8002598 <HAL_RCC_OscConfig+0x61c>)
 800244e:	4013      	ands	r3, r2
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	6a11      	ldr	r1, [r2, #32]
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002458:	3a01      	subs	r2, #1
 800245a:	0112      	lsls	r2, r2, #4
 800245c:	4311      	orrs	r1, r2
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002462:	0212      	lsls	r2, r2, #8
 8002464:	4311      	orrs	r1, r2
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800246a:	0852      	lsrs	r2, r2, #1
 800246c:	3a01      	subs	r2, #1
 800246e:	0552      	lsls	r2, r2, #21
 8002470:	4311      	orrs	r1, r2
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002476:	0852      	lsrs	r2, r2, #1
 8002478:	3a01      	subs	r2, #1
 800247a:	0652      	lsls	r2, r2, #25
 800247c:	4311      	orrs	r1, r2
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002482:	06d2      	lsls	r2, r2, #27
 8002484:	430a      	orrs	r2, r1
 8002486:	4943      	ldr	r1, [pc, #268]	@ (8002594 <HAL_RCC_OscConfig+0x618>)
 8002488:	4313      	orrs	r3, r2
 800248a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800248c:	4b41      	ldr	r3, [pc, #260]	@ (8002594 <HAL_RCC_OscConfig+0x618>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a40      	ldr	r2, [pc, #256]	@ (8002594 <HAL_RCC_OscConfig+0x618>)
 8002492:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002496:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002498:	4b3e      	ldr	r3, [pc, #248]	@ (8002594 <HAL_RCC_OscConfig+0x618>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	4a3d      	ldr	r2, [pc, #244]	@ (8002594 <HAL_RCC_OscConfig+0x618>)
 800249e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024a2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a4:	f7ff fa16 	bl	80018d4 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ac:	f7ff fa12 	bl	80018d4 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e066      	b.n	800258c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024be:	4b35      	ldr	r3, [pc, #212]	@ (8002594 <HAL_RCC_OscConfig+0x618>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0f0      	beq.n	80024ac <HAL_RCC_OscConfig+0x530>
 80024ca:	e05e      	b.n	800258a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024cc:	4b31      	ldr	r3, [pc, #196]	@ (8002594 <HAL_RCC_OscConfig+0x618>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a30      	ldr	r2, [pc, #192]	@ (8002594 <HAL_RCC_OscConfig+0x618>)
 80024d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d8:	f7ff f9fc 	bl	80018d4 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e0:	f7ff f9f8 	bl	80018d4 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e04c      	b.n	800258c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024f2:	4b28      	ldr	r3, [pc, #160]	@ (8002594 <HAL_RCC_OscConfig+0x618>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1f0      	bne.n	80024e0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80024fe:	4b25      	ldr	r3, [pc, #148]	@ (8002594 <HAL_RCC_OscConfig+0x618>)
 8002500:	68da      	ldr	r2, [r3, #12]
 8002502:	4924      	ldr	r1, [pc, #144]	@ (8002594 <HAL_RCC_OscConfig+0x618>)
 8002504:	4b25      	ldr	r3, [pc, #148]	@ (800259c <HAL_RCC_OscConfig+0x620>)
 8002506:	4013      	ands	r3, r2
 8002508:	60cb      	str	r3, [r1, #12]
 800250a:	e03e      	b.n	800258a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	69db      	ldr	r3, [r3, #28]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d101      	bne.n	8002518 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e039      	b.n	800258c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002518:	4b1e      	ldr	r3, [pc, #120]	@ (8002594 <HAL_RCC_OscConfig+0x618>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	f003 0203 	and.w	r2, r3, #3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	429a      	cmp	r2, r3
 800252a:	d12c      	bne.n	8002586 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002536:	3b01      	subs	r3, #1
 8002538:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800253a:	429a      	cmp	r2, r3
 800253c:	d123      	bne.n	8002586 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002548:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800254a:	429a      	cmp	r2, r3
 800254c:	d11b      	bne.n	8002586 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002558:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800255a:	429a      	cmp	r2, r3
 800255c:	d113      	bne.n	8002586 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002568:	085b      	lsrs	r3, r3, #1
 800256a:	3b01      	subs	r3, #1
 800256c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800256e:	429a      	cmp	r2, r3
 8002570:	d109      	bne.n	8002586 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800257c:	085b      	lsrs	r3, r3, #1
 800257e:	3b01      	subs	r3, #1
 8002580:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002582:	429a      	cmp	r2, r3
 8002584:	d001      	beq.n	800258a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e000      	b.n	800258c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3720      	adds	r7, #32
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40021000 	.word	0x40021000
 8002598:	019f800c 	.word	0x019f800c
 800259c:	feeefffc 	.word	0xfeeefffc

080025a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80025aa:	2300      	movs	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e11e      	b.n	80027f6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025b8:	4b91      	ldr	r3, [pc, #580]	@ (8002800 <HAL_RCC_ClockConfig+0x260>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 030f 	and.w	r3, r3, #15
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d910      	bls.n	80025e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c6:	4b8e      	ldr	r3, [pc, #568]	@ (8002800 <HAL_RCC_ClockConfig+0x260>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f023 020f 	bic.w	r2, r3, #15
 80025ce:	498c      	ldr	r1, [pc, #560]	@ (8002800 <HAL_RCC_ClockConfig+0x260>)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d6:	4b8a      	ldr	r3, [pc, #552]	@ (8002800 <HAL_RCC_ClockConfig+0x260>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d001      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e106      	b.n	80027f6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d073      	beq.n	80026dc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2b03      	cmp	r3, #3
 80025fa:	d129      	bne.n	8002650 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025fc:	4b81      	ldr	r3, [pc, #516]	@ (8002804 <HAL_RCC_ClockConfig+0x264>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e0f4      	b.n	80027f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800260c:	f000 f9d0 	bl	80029b0 <RCC_GetSysClockFreqFromPLLSource>
 8002610:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	4a7c      	ldr	r2, [pc, #496]	@ (8002808 <HAL_RCC_ClockConfig+0x268>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d93f      	bls.n	800269a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800261a:	4b7a      	ldr	r3, [pc, #488]	@ (8002804 <HAL_RCC_ClockConfig+0x264>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d009      	beq.n	800263a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800262e:	2b00      	cmp	r3, #0
 8002630:	d033      	beq.n	800269a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002636:	2b00      	cmp	r3, #0
 8002638:	d12f      	bne.n	800269a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800263a:	4b72      	ldr	r3, [pc, #456]	@ (8002804 <HAL_RCC_ClockConfig+0x264>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002642:	4a70      	ldr	r2, [pc, #448]	@ (8002804 <HAL_RCC_ClockConfig+0x264>)
 8002644:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002648:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800264a:	2380      	movs	r3, #128	@ 0x80
 800264c:	617b      	str	r3, [r7, #20]
 800264e:	e024      	b.n	800269a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	2b02      	cmp	r3, #2
 8002656:	d107      	bne.n	8002668 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002658:	4b6a      	ldr	r3, [pc, #424]	@ (8002804 <HAL_RCC_ClockConfig+0x264>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d109      	bne.n	8002678 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e0c6      	b.n	80027f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002668:	4b66      	ldr	r3, [pc, #408]	@ (8002804 <HAL_RCC_ClockConfig+0x264>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e0be      	b.n	80027f6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002678:	f000 f8ce 	bl	8002818 <HAL_RCC_GetSysClockFreq>
 800267c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	4a61      	ldr	r2, [pc, #388]	@ (8002808 <HAL_RCC_ClockConfig+0x268>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d909      	bls.n	800269a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002686:	4b5f      	ldr	r3, [pc, #380]	@ (8002804 <HAL_RCC_ClockConfig+0x264>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800268e:	4a5d      	ldr	r2, [pc, #372]	@ (8002804 <HAL_RCC_ClockConfig+0x264>)
 8002690:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002694:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002696:	2380      	movs	r3, #128	@ 0x80
 8002698:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800269a:	4b5a      	ldr	r3, [pc, #360]	@ (8002804 <HAL_RCC_ClockConfig+0x264>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f023 0203 	bic.w	r2, r3, #3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	4957      	ldr	r1, [pc, #348]	@ (8002804 <HAL_RCC_ClockConfig+0x264>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026ac:	f7ff f912 	bl	80018d4 <HAL_GetTick>
 80026b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b2:	e00a      	b.n	80026ca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026b4:	f7ff f90e 	bl	80018d4 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e095      	b.n	80027f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ca:	4b4e      	ldr	r3, [pc, #312]	@ (8002804 <HAL_RCC_ClockConfig+0x264>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 020c 	and.w	r2, r3, #12
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	429a      	cmp	r2, r3
 80026da:	d1eb      	bne.n	80026b4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d023      	beq.n	8002730 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d005      	beq.n	8002700 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026f4:	4b43      	ldr	r3, [pc, #268]	@ (8002804 <HAL_RCC_ClockConfig+0x264>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	4a42      	ldr	r2, [pc, #264]	@ (8002804 <HAL_RCC_ClockConfig+0x264>)
 80026fa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80026fe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0308 	and.w	r3, r3, #8
 8002708:	2b00      	cmp	r3, #0
 800270a:	d007      	beq.n	800271c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800270c:	4b3d      	ldr	r3, [pc, #244]	@ (8002804 <HAL_RCC_ClockConfig+0x264>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002714:	4a3b      	ldr	r2, [pc, #236]	@ (8002804 <HAL_RCC_ClockConfig+0x264>)
 8002716:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800271a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800271c:	4b39      	ldr	r3, [pc, #228]	@ (8002804 <HAL_RCC_ClockConfig+0x264>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	4936      	ldr	r1, [pc, #216]	@ (8002804 <HAL_RCC_ClockConfig+0x264>)
 800272a:	4313      	orrs	r3, r2
 800272c:	608b      	str	r3, [r1, #8]
 800272e:	e008      	b.n	8002742 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	2b80      	cmp	r3, #128	@ 0x80
 8002734:	d105      	bne.n	8002742 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002736:	4b33      	ldr	r3, [pc, #204]	@ (8002804 <HAL_RCC_ClockConfig+0x264>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	4a32      	ldr	r2, [pc, #200]	@ (8002804 <HAL_RCC_ClockConfig+0x264>)
 800273c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002740:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002742:	4b2f      	ldr	r3, [pc, #188]	@ (8002800 <HAL_RCC_ClockConfig+0x260>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	429a      	cmp	r2, r3
 800274e:	d21d      	bcs.n	800278c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002750:	4b2b      	ldr	r3, [pc, #172]	@ (8002800 <HAL_RCC_ClockConfig+0x260>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f023 020f 	bic.w	r2, r3, #15
 8002758:	4929      	ldr	r1, [pc, #164]	@ (8002800 <HAL_RCC_ClockConfig+0x260>)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	4313      	orrs	r3, r2
 800275e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002760:	f7ff f8b8 	bl	80018d4 <HAL_GetTick>
 8002764:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002766:	e00a      	b.n	800277e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002768:	f7ff f8b4 	bl	80018d4 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002776:	4293      	cmp	r3, r2
 8002778:	d901      	bls.n	800277e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e03b      	b.n	80027f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800277e:	4b20      	ldr	r3, [pc, #128]	@ (8002800 <HAL_RCC_ClockConfig+0x260>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	429a      	cmp	r2, r3
 800278a:	d1ed      	bne.n	8002768 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0304 	and.w	r3, r3, #4
 8002794:	2b00      	cmp	r3, #0
 8002796:	d008      	beq.n	80027aa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002798:	4b1a      	ldr	r3, [pc, #104]	@ (8002804 <HAL_RCC_ClockConfig+0x264>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	4917      	ldr	r1, [pc, #92]	@ (8002804 <HAL_RCC_ClockConfig+0x264>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0308 	and.w	r3, r3, #8
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d009      	beq.n	80027ca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027b6:	4b13      	ldr	r3, [pc, #76]	@ (8002804 <HAL_RCC_ClockConfig+0x264>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	490f      	ldr	r1, [pc, #60]	@ (8002804 <HAL_RCC_ClockConfig+0x264>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027ca:	f000 f825 	bl	8002818 <HAL_RCC_GetSysClockFreq>
 80027ce:	4602      	mov	r2, r0
 80027d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002804 <HAL_RCC_ClockConfig+0x264>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	091b      	lsrs	r3, r3, #4
 80027d6:	f003 030f 	and.w	r3, r3, #15
 80027da:	490c      	ldr	r1, [pc, #48]	@ (800280c <HAL_RCC_ClockConfig+0x26c>)
 80027dc:	5ccb      	ldrb	r3, [r1, r3]
 80027de:	f003 031f 	and.w	r3, r3, #31
 80027e2:	fa22 f303 	lsr.w	r3, r2, r3
 80027e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002810 <HAL_RCC_ClockConfig+0x270>)
 80027e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80027ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002814 <HAL_RCC_ClockConfig+0x274>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7fe fe0e 	bl	8001410 <HAL_InitTick>
 80027f4:	4603      	mov	r3, r0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3718      	adds	r7, #24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	40022000 	.word	0x40022000
 8002804:	40021000 	.word	0x40021000
 8002808:	04c4b400 	.word	0x04c4b400
 800280c:	0800a1fc 	.word	0x0800a1fc
 8002810:	20000004 	.word	0x20000004
 8002814:	20000008 	.word	0x20000008

08002818 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002818:	b480      	push	{r7}
 800281a:	b087      	sub	sp, #28
 800281c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800281e:	4b2c      	ldr	r3, [pc, #176]	@ (80028d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 030c 	and.w	r3, r3, #12
 8002826:	2b04      	cmp	r3, #4
 8002828:	d102      	bne.n	8002830 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800282a:	4b2a      	ldr	r3, [pc, #168]	@ (80028d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800282c:	613b      	str	r3, [r7, #16]
 800282e:	e047      	b.n	80028c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002830:	4b27      	ldr	r3, [pc, #156]	@ (80028d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f003 030c 	and.w	r3, r3, #12
 8002838:	2b08      	cmp	r3, #8
 800283a:	d102      	bne.n	8002842 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800283c:	4b26      	ldr	r3, [pc, #152]	@ (80028d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800283e:	613b      	str	r3, [r7, #16]
 8002840:	e03e      	b.n	80028c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002842:	4b23      	ldr	r3, [pc, #140]	@ (80028d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 030c 	and.w	r3, r3, #12
 800284a:	2b0c      	cmp	r3, #12
 800284c:	d136      	bne.n	80028bc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800284e:	4b20      	ldr	r3, [pc, #128]	@ (80028d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	f003 0303 	and.w	r3, r3, #3
 8002856:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002858:	4b1d      	ldr	r3, [pc, #116]	@ (80028d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	091b      	lsrs	r3, r3, #4
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	3301      	adds	r3, #1
 8002864:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2b03      	cmp	r3, #3
 800286a:	d10c      	bne.n	8002886 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800286c:	4a1a      	ldr	r2, [pc, #104]	@ (80028d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	fbb2 f3f3 	udiv	r3, r2, r3
 8002874:	4a16      	ldr	r2, [pc, #88]	@ (80028d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002876:	68d2      	ldr	r2, [r2, #12]
 8002878:	0a12      	lsrs	r2, r2, #8
 800287a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800287e:	fb02 f303 	mul.w	r3, r2, r3
 8002882:	617b      	str	r3, [r7, #20]
      break;
 8002884:	e00c      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002886:	4a13      	ldr	r2, [pc, #76]	@ (80028d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	fbb2 f3f3 	udiv	r3, r2, r3
 800288e:	4a10      	ldr	r2, [pc, #64]	@ (80028d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002890:	68d2      	ldr	r2, [r2, #12]
 8002892:	0a12      	lsrs	r2, r2, #8
 8002894:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002898:	fb02 f303 	mul.w	r3, r2, r3
 800289c:	617b      	str	r3, [r7, #20]
      break;
 800289e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028a0:	4b0b      	ldr	r3, [pc, #44]	@ (80028d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	0e5b      	lsrs	r3, r3, #25
 80028a6:	f003 0303 	and.w	r3, r3, #3
 80028aa:	3301      	adds	r3, #1
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80028b0:	697a      	ldr	r2, [r7, #20]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b8:	613b      	str	r3, [r7, #16]
 80028ba:	e001      	b.n	80028c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80028bc:	2300      	movs	r3, #0
 80028be:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80028c0:	693b      	ldr	r3, [r7, #16]
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	371c      	adds	r7, #28
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	40021000 	.word	0x40021000
 80028d4:	00f42400 	.word	0x00f42400
 80028d8:	016e3600 	.word	0x016e3600

080028dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028e0:	4b03      	ldr	r3, [pc, #12]	@ (80028f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80028e2:	681b      	ldr	r3, [r3, #0]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	20000004 	.word	0x20000004

080028f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80028f8:	f7ff fff0 	bl	80028dc <HAL_RCC_GetHCLKFreq>
 80028fc:	4602      	mov	r2, r0
 80028fe:	4b06      	ldr	r3, [pc, #24]	@ (8002918 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	0a1b      	lsrs	r3, r3, #8
 8002904:	f003 0307 	and.w	r3, r3, #7
 8002908:	4904      	ldr	r1, [pc, #16]	@ (800291c <HAL_RCC_GetPCLK1Freq+0x28>)
 800290a:	5ccb      	ldrb	r3, [r1, r3]
 800290c:	f003 031f 	and.w	r3, r3, #31
 8002910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002914:	4618      	mov	r0, r3
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40021000 	.word	0x40021000
 800291c:	0800a20c 	.word	0x0800a20c

08002920 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002924:	f7ff ffda 	bl	80028dc <HAL_RCC_GetHCLKFreq>
 8002928:	4602      	mov	r2, r0
 800292a:	4b06      	ldr	r3, [pc, #24]	@ (8002944 <HAL_RCC_GetPCLK2Freq+0x24>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	0adb      	lsrs	r3, r3, #11
 8002930:	f003 0307 	and.w	r3, r3, #7
 8002934:	4904      	ldr	r1, [pc, #16]	@ (8002948 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002936:	5ccb      	ldrb	r3, [r1, r3]
 8002938:	f003 031f 	and.w	r3, r3, #31
 800293c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002940:	4618      	mov	r0, r3
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40021000 	.word	0x40021000
 8002948:	0800a20c 	.word	0x0800a20c

0800294c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	220f      	movs	r2, #15
 800295a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800295c:	4b12      	ldr	r3, [pc, #72]	@ (80029a8 <HAL_RCC_GetClockConfig+0x5c>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f003 0203 	and.w	r2, r3, #3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002968:	4b0f      	ldr	r3, [pc, #60]	@ (80029a8 <HAL_RCC_GetClockConfig+0x5c>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002974:	4b0c      	ldr	r3, [pc, #48]	@ (80029a8 <HAL_RCC_GetClockConfig+0x5c>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002980:	4b09      	ldr	r3, [pc, #36]	@ (80029a8 <HAL_RCC_GetClockConfig+0x5c>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	08db      	lsrs	r3, r3, #3
 8002986:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800298e:	4b07      	ldr	r3, [pc, #28]	@ (80029ac <HAL_RCC_GetClockConfig+0x60>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 020f 	and.w	r2, r3, #15
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	601a      	str	r2, [r3, #0]
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	40021000 	.word	0x40021000
 80029ac:	40022000 	.word	0x40022000

080029b0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b087      	sub	sp, #28
 80029b4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002a30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	091b      	lsrs	r3, r3, #4
 80029c6:	f003 030f 	and.w	r3, r3, #15
 80029ca:	3301      	adds	r3, #1
 80029cc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	2b03      	cmp	r3, #3
 80029d2:	d10c      	bne.n	80029ee <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029d4:	4a17      	ldr	r2, [pc, #92]	@ (8002a34 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029dc:	4a14      	ldr	r2, [pc, #80]	@ (8002a30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029de:	68d2      	ldr	r2, [r2, #12]
 80029e0:	0a12      	lsrs	r2, r2, #8
 80029e2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80029e6:	fb02 f303 	mul.w	r3, r2, r3
 80029ea:	617b      	str	r3, [r7, #20]
    break;
 80029ec:	e00c      	b.n	8002a08 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029ee:	4a12      	ldr	r2, [pc, #72]	@ (8002a38 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f6:	4a0e      	ldr	r2, [pc, #56]	@ (8002a30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029f8:	68d2      	ldr	r2, [r2, #12]
 80029fa:	0a12      	lsrs	r2, r2, #8
 80029fc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a00:	fb02 f303 	mul.w	r3, r2, r3
 8002a04:	617b      	str	r3, [r7, #20]
    break;
 8002a06:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a08:	4b09      	ldr	r3, [pc, #36]	@ (8002a30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	0e5b      	lsrs	r3, r3, #25
 8002a0e:	f003 0303 	and.w	r3, r3, #3
 8002a12:	3301      	adds	r3, #1
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a20:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002a22:	687b      	ldr	r3, [r7, #4]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	371c      	adds	r7, #28
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr
 8002a30:	40021000 	.word	0x40021000
 8002a34:	016e3600 	.word	0x016e3600
 8002a38:	00f42400 	.word	0x00f42400

08002a3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a44:	2300      	movs	r3, #0
 8002a46:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a48:	2300      	movs	r3, #0
 8002a4a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f000 8098 	beq.w	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a5e:	4b43      	ldr	r3, [pc, #268]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10d      	bne.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a6a:	4b40      	ldr	r3, [pc, #256]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a6e:	4a3f      	ldr	r2, [pc, #252]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a74:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a76:	4b3d      	ldr	r3, [pc, #244]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a7e:	60bb      	str	r3, [r7, #8]
 8002a80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a82:	2301      	movs	r3, #1
 8002a84:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a86:	4b3a      	ldr	r3, [pc, #232]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a39      	ldr	r2, [pc, #228]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a90:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a92:	f7fe ff1f 	bl	80018d4 <HAL_GetTick>
 8002a96:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a98:	e009      	b.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a9a:	f7fe ff1b 	bl	80018d4 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d902      	bls.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	74fb      	strb	r3, [r7, #19]
        break;
 8002aac:	e005      	b.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002aae:	4b30      	ldr	r3, [pc, #192]	@ (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0ef      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002aba:	7cfb      	ldrb	r3, [r7, #19]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d159      	bne.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ac0:	4b2a      	ldr	r3, [pc, #168]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ac6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002aca:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d01e      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d019      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002adc:	4b23      	ldr	r3, [pc, #140]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ae2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ae6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ae8:	4b20      	ldr	r3, [pc, #128]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aee:	4a1f      	ldr	r2, [pc, #124]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002af0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002af4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002af8:	4b1c      	ldr	r3, [pc, #112]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002afe:	4a1b      	ldr	r2, [pc, #108]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b08:	4a18      	ldr	r2, [pc, #96]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d016      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1a:	f7fe fedb 	bl	80018d4 <HAL_GetTick>
 8002b1e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b20:	e00b      	b.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b22:	f7fe fed7 	bl	80018d4 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d902      	bls.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	74fb      	strb	r3, [r7, #19]
            break;
 8002b38:	e006      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d0ec      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002b48:	7cfb      	ldrb	r3, [r7, #19]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10b      	bne.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b4e:	4b07      	ldr	r3, [pc, #28]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b54:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5c:	4903      	ldr	r1, [pc, #12]	@ (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002b64:	e008      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b66:	7cfb      	ldrb	r3, [r7, #19]
 8002b68:	74bb      	strb	r3, [r7, #18]
 8002b6a:	e005      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b74:	7cfb      	ldrb	r3, [r7, #19]
 8002b76:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b78:	7c7b      	ldrb	r3, [r7, #17]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d105      	bne.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b7e:	4ba6      	ldr	r3, [pc, #664]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b82:	4aa5      	ldr	r2, [pc, #660]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b88:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00a      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b96:	4ba0      	ldr	r3, [pc, #640]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b9c:	f023 0203 	bic.w	r2, r3, #3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	499c      	ldr	r1, [pc, #624]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00a      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bb8:	4b97      	ldr	r3, [pc, #604]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bbe:	f023 020c 	bic.w	r2, r3, #12
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	4994      	ldr	r1, [pc, #592]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0304 	and.w	r3, r3, #4
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00a      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bda:	4b8f      	ldr	r3, [pc, #572]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002be0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	498b      	ldr	r1, [pc, #556]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0308 	and.w	r3, r3, #8
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00a      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bfc:	4b86      	ldr	r3, [pc, #536]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c02:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	4983      	ldr	r1, [pc, #524]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0320 	and.w	r3, r3, #32
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00a      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c1e:	4b7e      	ldr	r3, [pc, #504]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c24:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	497a      	ldr	r1, [pc, #488]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00a      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c40:	4b75      	ldr	r3, [pc, #468]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c46:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	4972      	ldr	r1, [pc, #456]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00a      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c62:	4b6d      	ldr	r3, [pc, #436]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c68:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	69db      	ldr	r3, [r3, #28]
 8002c70:	4969      	ldr	r1, [pc, #420]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00a      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c84:	4b64      	ldr	r3, [pc, #400]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c8a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	4961      	ldr	r1, [pc, #388]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00a      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ca6:	4b5c      	ldr	r3, [pc, #368]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb4:	4958      	ldr	r1, [pc, #352]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d015      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002cc8:	4b53      	ldr	r3, [pc, #332]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd6:	4950      	ldr	r1, [pc, #320]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ce6:	d105      	bne.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ce8:	4b4b      	ldr	r3, [pc, #300]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	4a4a      	ldr	r2, [pc, #296]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002cf2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d015      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d00:	4b45      	ldr	r3, [pc, #276]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d06:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d0e:	4942      	ldr	r1, [pc, #264]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d1e:	d105      	bne.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d20:	4b3d      	ldr	r3, [pc, #244]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	4a3c      	ldr	r2, [pc, #240]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d2a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d015      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002d38:	4b37      	ldr	r3, [pc, #220]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d3e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d46:	4934      	ldr	r1, [pc, #208]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d56:	d105      	bne.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d58:	4b2f      	ldr	r3, [pc, #188]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	4a2e      	ldr	r2, [pc, #184]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d62:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d015      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d70:	4b29      	ldr	r3, [pc, #164]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d76:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d7e:	4926      	ldr	r1, [pc, #152]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d8e:	d105      	bne.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d90:	4b21      	ldr	r3, [pc, #132]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	4a20      	ldr	r2, [pc, #128]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d9a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d015      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002da8:	4b1b      	ldr	r3, [pc, #108]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002db6:	4918      	ldr	r1, [pc, #96]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dc2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002dc6:	d105      	bne.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dc8:	4b13      	ldr	r3, [pc, #76]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	4a12      	ldr	r2, [pc, #72]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002dd2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d015      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002de0:	4b0d      	ldr	r3, [pc, #52]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002de6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dee:	490a      	ldr	r1, [pc, #40]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dfa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002dfe:	d105      	bne.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002e00:	4b05      	ldr	r3, [pc, #20]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	4a04      	ldr	r2, [pc, #16]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e0a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002e0c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3718      	adds	r7, #24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40021000 	.word	0x40021000

08002e1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e049      	b.n	8002ec2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d106      	bne.n	8002e48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 f841 	bl	8002eca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3304      	adds	r3, #4
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4610      	mov	r0, r2
 8002e5c:	f000 fa22 	bl	80032a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
	...

08002ee0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d001      	beq.n	8002ef8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e04a      	b.n	8002f8e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2202      	movs	r2, #2
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0201 	orr.w	r2, r2, #1
 8002f0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a21      	ldr	r2, [pc, #132]	@ (8002f9c <HAL_TIM_Base_Start_IT+0xbc>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d018      	beq.n	8002f4c <HAL_TIM_Base_Start_IT+0x6c>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f22:	d013      	beq.n	8002f4c <HAL_TIM_Base_Start_IT+0x6c>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a1d      	ldr	r2, [pc, #116]	@ (8002fa0 <HAL_TIM_Base_Start_IT+0xc0>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d00e      	beq.n	8002f4c <HAL_TIM_Base_Start_IT+0x6c>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a1c      	ldr	r2, [pc, #112]	@ (8002fa4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d009      	beq.n	8002f4c <HAL_TIM_Base_Start_IT+0x6c>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a1a      	ldr	r2, [pc, #104]	@ (8002fa8 <HAL_TIM_Base_Start_IT+0xc8>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d004      	beq.n	8002f4c <HAL_TIM_Base_Start_IT+0x6c>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a19      	ldr	r2, [pc, #100]	@ (8002fac <HAL_TIM_Base_Start_IT+0xcc>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d115      	bne.n	8002f78 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689a      	ldr	r2, [r3, #8]
 8002f52:	4b17      	ldr	r3, [pc, #92]	@ (8002fb0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002f54:	4013      	ands	r3, r2
 8002f56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2b06      	cmp	r3, #6
 8002f5c:	d015      	beq.n	8002f8a <HAL_TIM_Base_Start_IT+0xaa>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f64:	d011      	beq.n	8002f8a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 0201 	orr.w	r2, r2, #1
 8002f74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f76:	e008      	b.n	8002f8a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f042 0201 	orr.w	r2, r2, #1
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	e000      	b.n	8002f8c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f8a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3714      	adds	r7, #20
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	40012c00 	.word	0x40012c00
 8002fa0:	40000400 	.word	0x40000400
 8002fa4:	40000800 	.word	0x40000800
 8002fa8:	40013400 	.word	0x40013400
 8002fac:	40014000 	.word	0x40014000
 8002fb0:	00010007 	.word	0x00010007

08002fb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d020      	beq.n	8003018 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d01b      	beq.n	8003018 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f06f 0202 	mvn.w	r2, #2
 8002fe8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	f003 0303 	and.w	r3, r3, #3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d003      	beq.n	8003006 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 f931 	bl	8003266 <HAL_TIM_IC_CaptureCallback>
 8003004:	e005      	b.n	8003012 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f923 	bl	8003252 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f934 	bl	800327a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f003 0304 	and.w	r3, r3, #4
 800301e:	2b00      	cmp	r3, #0
 8003020:	d020      	beq.n	8003064 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	2b00      	cmp	r3, #0
 800302a:	d01b      	beq.n	8003064 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f06f 0204 	mvn.w	r2, #4
 8003034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2202      	movs	r2, #2
 800303a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 f90b 	bl	8003266 <HAL_TIM_IC_CaptureCallback>
 8003050:	e005      	b.n	800305e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f8fd 	bl	8003252 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 f90e 	bl	800327a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	f003 0308 	and.w	r3, r3, #8
 800306a:	2b00      	cmp	r3, #0
 800306c:	d020      	beq.n	80030b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f003 0308 	and.w	r3, r3, #8
 8003074:	2b00      	cmp	r3, #0
 8003076:	d01b      	beq.n	80030b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f06f 0208 	mvn.w	r2, #8
 8003080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2204      	movs	r2, #4
 8003086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d003      	beq.n	800309e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f8e5 	bl	8003266 <HAL_TIM_IC_CaptureCallback>
 800309c:	e005      	b.n	80030aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f8d7 	bl	8003252 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 f8e8 	bl	800327a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	f003 0310 	and.w	r3, r3, #16
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d020      	beq.n	80030fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f003 0310 	and.w	r3, r3, #16
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d01b      	beq.n	80030fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f06f 0210 	mvn.w	r2, #16
 80030cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2208      	movs	r2, #8
 80030d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f8bf 	bl	8003266 <HAL_TIM_IC_CaptureCallback>
 80030e8:	e005      	b.n	80030f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 f8b1 	bl	8003252 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 f8c2 	bl	800327a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00c      	beq.n	8003120 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b00      	cmp	r3, #0
 800310e:	d007      	beq.n	8003120 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f06f 0201 	mvn.w	r2, #1
 8003118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7fe f936 	bl	800138c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003126:	2b00      	cmp	r3, #0
 8003128:	d104      	bne.n	8003134 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00c      	beq.n	800314e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800313a:	2b00      	cmp	r3, #0
 800313c:	d007      	beq.n	800314e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003146:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 f951 	bl	80033f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00c      	beq.n	8003172 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800315e:	2b00      	cmp	r3, #0
 8003160:	d007      	beq.n	8003172 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800316a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 f949 	bl	8003404 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00c      	beq.n	8003196 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003182:	2b00      	cmp	r3, #0
 8003184:	d007      	beq.n	8003196 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800318e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 f87c 	bl	800328e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	f003 0320 	and.w	r3, r3, #32
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00c      	beq.n	80031ba <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f003 0320 	and.w	r3, r3, #32
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d007      	beq.n	80031ba <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f06f 0220 	mvn.w	r2, #32
 80031b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 f911 	bl	80033dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00c      	beq.n	80031de <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d007      	beq.n	80031de <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80031d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 f91d 	bl	8003418 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00c      	beq.n	8003202 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d007      	beq.n	8003202 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80031fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f915 	bl	800342c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00c      	beq.n	8003226 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d007      	beq.n	8003226 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800321e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 f90d 	bl	8003440 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00c      	beq.n	800324a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d007      	beq.n	800324a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8003242:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 f905 	bl	8003454 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800324a:	bf00      	nop
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003252:	b480      	push	{r7}
 8003254:	b083      	sub	sp, #12
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800325a:	bf00      	nop
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr

08003266 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003266:	b480      	push	{r7}
 8003268:	b083      	sub	sp, #12
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800326e:	bf00      	nop
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr

0800327a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800327a:	b480      	push	{r7}
 800327c:	b083      	sub	sp, #12
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003282:	bf00      	nop
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr

0800328e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800328e:	b480      	push	{r7}
 8003290:	b083      	sub	sp, #12
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
	...

080032a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a42      	ldr	r2, [pc, #264]	@ (80033c0 <TIM_Base_SetConfig+0x11c>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d00f      	beq.n	80032dc <TIM_Base_SetConfig+0x38>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032c2:	d00b      	beq.n	80032dc <TIM_Base_SetConfig+0x38>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a3f      	ldr	r2, [pc, #252]	@ (80033c4 <TIM_Base_SetConfig+0x120>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d007      	beq.n	80032dc <TIM_Base_SetConfig+0x38>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a3e      	ldr	r2, [pc, #248]	@ (80033c8 <TIM_Base_SetConfig+0x124>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d003      	beq.n	80032dc <TIM_Base_SetConfig+0x38>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a3d      	ldr	r2, [pc, #244]	@ (80033cc <TIM_Base_SetConfig+0x128>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d108      	bne.n	80032ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a33      	ldr	r2, [pc, #204]	@ (80033c0 <TIM_Base_SetConfig+0x11c>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d01b      	beq.n	800332e <TIM_Base_SetConfig+0x8a>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032fc:	d017      	beq.n	800332e <TIM_Base_SetConfig+0x8a>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a30      	ldr	r2, [pc, #192]	@ (80033c4 <TIM_Base_SetConfig+0x120>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d013      	beq.n	800332e <TIM_Base_SetConfig+0x8a>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a2f      	ldr	r2, [pc, #188]	@ (80033c8 <TIM_Base_SetConfig+0x124>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d00f      	beq.n	800332e <TIM_Base_SetConfig+0x8a>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a2e      	ldr	r2, [pc, #184]	@ (80033cc <TIM_Base_SetConfig+0x128>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d00b      	beq.n	800332e <TIM_Base_SetConfig+0x8a>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a2d      	ldr	r2, [pc, #180]	@ (80033d0 <TIM_Base_SetConfig+0x12c>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d007      	beq.n	800332e <TIM_Base_SetConfig+0x8a>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a2c      	ldr	r2, [pc, #176]	@ (80033d4 <TIM_Base_SetConfig+0x130>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d003      	beq.n	800332e <TIM_Base_SetConfig+0x8a>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a2b      	ldr	r2, [pc, #172]	@ (80033d8 <TIM_Base_SetConfig+0x134>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d108      	bne.n	8003340 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003334:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	4313      	orrs	r3, r2
 800333e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	4313      	orrs	r3, r2
 800334c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a16      	ldr	r2, [pc, #88]	@ (80033c0 <TIM_Base_SetConfig+0x11c>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d00f      	beq.n	800338c <TIM_Base_SetConfig+0xe8>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a17      	ldr	r2, [pc, #92]	@ (80033cc <TIM_Base_SetConfig+0x128>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d00b      	beq.n	800338c <TIM_Base_SetConfig+0xe8>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a16      	ldr	r2, [pc, #88]	@ (80033d0 <TIM_Base_SetConfig+0x12c>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d007      	beq.n	800338c <TIM_Base_SetConfig+0xe8>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a15      	ldr	r2, [pc, #84]	@ (80033d4 <TIM_Base_SetConfig+0x130>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d003      	beq.n	800338c <TIM_Base_SetConfig+0xe8>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a14      	ldr	r2, [pc, #80]	@ (80033d8 <TIM_Base_SetConfig+0x134>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d103      	bne.n	8003394 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	691a      	ldr	r2, [r3, #16]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d105      	bne.n	80033b2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	f023 0201 	bic.w	r2, r3, #1
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	611a      	str	r2, [r3, #16]
  }
}
 80033b2:	bf00      	nop
 80033b4:	3714      	adds	r7, #20
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	40012c00 	.word	0x40012c00
 80033c4:	40000400 	.word	0x40000400
 80033c8:	40000800 	.word	0x40000800
 80033cc:	40013400 	.word	0x40013400
 80033d0:	40014000 	.word	0x40014000
 80033d4:	40014400 	.word	0x40014400
 80033d8:	40014800 	.word	0x40014800

080033dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e042      	b.n	8003500 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003480:	2b00      	cmp	r3, #0
 8003482:	d106      	bne.n	8003492 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f7fe f975 	bl	800177c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2224      	movs	r2, #36	@ 0x24
 8003496:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 0201 	bic.w	r2, r2, #1
 80034a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d002      	beq.n	80034b8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 fb82 	bl	8003bbc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 f8b3 	bl	8003624 <UART_SetConfig>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d101      	bne.n	80034c8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e01b      	b.n	8003500 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689a      	ldr	r2, [r3, #8]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f042 0201 	orr.w	r2, r2, #1
 80034f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 fc01 	bl	8003d00 <UART_CheckIdleState>
 80034fe:	4603      	mov	r3, r0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b08a      	sub	sp, #40	@ 0x28
 800350c:	af02      	add	r7, sp, #8
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	603b      	str	r3, [r7, #0]
 8003514:	4613      	mov	r3, r2
 8003516:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800351e:	2b20      	cmp	r3, #32
 8003520:	d17b      	bne.n	800361a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d002      	beq.n	800352e <HAL_UART_Transmit+0x26>
 8003528:	88fb      	ldrh	r3, [r7, #6]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e074      	b.n	800361c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2221      	movs	r2, #33	@ 0x21
 800353e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003542:	f7fe f9c7 	bl	80018d4 <HAL_GetTick>
 8003546:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	88fa      	ldrh	r2, [r7, #6]
 800354c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	88fa      	ldrh	r2, [r7, #6]
 8003554:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003560:	d108      	bne.n	8003574 <HAL_UART_Transmit+0x6c>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d104      	bne.n	8003574 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800356a:	2300      	movs	r3, #0
 800356c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	61bb      	str	r3, [r7, #24]
 8003572:	e003      	b.n	800357c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003578:	2300      	movs	r3, #0
 800357a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800357c:	e030      	b.n	80035e0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	2200      	movs	r2, #0
 8003586:	2180      	movs	r1, #128	@ 0x80
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 fc63 	bl	8003e54 <UART_WaitOnFlagUntilTimeout>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d005      	beq.n	80035a0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2220      	movs	r2, #32
 8003598:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e03d      	b.n	800361c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10b      	bne.n	80035be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	881b      	ldrh	r3, [r3, #0]
 80035aa:	461a      	mov	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035b4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	3302      	adds	r3, #2
 80035ba:	61bb      	str	r3, [r7, #24]
 80035bc:	e007      	b.n	80035ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	781a      	ldrb	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	3301      	adds	r3, #1
 80035cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	3b01      	subs	r3, #1
 80035d8:	b29a      	uxth	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1c8      	bne.n	800357e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	9300      	str	r3, [sp, #0]
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	2200      	movs	r2, #0
 80035f4:	2140      	movs	r1, #64	@ 0x40
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f000 fc2c 	bl	8003e54 <UART_WaitOnFlagUntilTimeout>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d005      	beq.n	800360e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2220      	movs	r2, #32
 8003606:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e006      	b.n	800361c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2220      	movs	r2, #32
 8003612:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003616:	2300      	movs	r3, #0
 8003618:	e000      	b.n	800361c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800361a:	2302      	movs	r3, #2
  }
}
 800361c:	4618      	mov	r0, r3
 800361e:	3720      	adds	r7, #32
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003628:	b08c      	sub	sp, #48	@ 0x30
 800362a:	af00      	add	r7, sp, #0
 800362c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800362e:	2300      	movs	r3, #0
 8003630:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	431a      	orrs	r2, r3
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	431a      	orrs	r2, r3
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	69db      	ldr	r3, [r3, #28]
 8003648:	4313      	orrs	r3, r2
 800364a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	4bab      	ldr	r3, [pc, #684]	@ (8003900 <UART_SetConfig+0x2dc>)
 8003654:	4013      	ands	r3, r2
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	6812      	ldr	r2, [r2, #0]
 800365a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800365c:	430b      	orrs	r3, r1
 800365e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4aa0      	ldr	r2, [pc, #640]	@ (8003904 <UART_SetConfig+0x2e0>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d004      	beq.n	8003690 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800368c:	4313      	orrs	r3, r2
 800368e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800369a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	6812      	ldr	r2, [r2, #0]
 80036a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80036a4:	430b      	orrs	r3, r1
 80036a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ae:	f023 010f 	bic.w	r1, r3, #15
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a91      	ldr	r2, [pc, #580]	@ (8003908 <UART_SetConfig+0x2e4>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d125      	bne.n	8003714 <UART_SetConfig+0xf0>
 80036c8:	4b90      	ldr	r3, [pc, #576]	@ (800390c <UART_SetConfig+0x2e8>)
 80036ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ce:	f003 0303 	and.w	r3, r3, #3
 80036d2:	2b03      	cmp	r3, #3
 80036d4:	d81a      	bhi.n	800370c <UART_SetConfig+0xe8>
 80036d6:	a201      	add	r2, pc, #4	@ (adr r2, 80036dc <UART_SetConfig+0xb8>)
 80036d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036dc:	080036ed 	.word	0x080036ed
 80036e0:	080036fd 	.word	0x080036fd
 80036e4:	080036f5 	.word	0x080036f5
 80036e8:	08003705 	.word	0x08003705
 80036ec:	2301      	movs	r3, #1
 80036ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036f2:	e0d6      	b.n	80038a2 <UART_SetConfig+0x27e>
 80036f4:	2302      	movs	r3, #2
 80036f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80036fa:	e0d2      	b.n	80038a2 <UART_SetConfig+0x27e>
 80036fc:	2304      	movs	r3, #4
 80036fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003702:	e0ce      	b.n	80038a2 <UART_SetConfig+0x27e>
 8003704:	2308      	movs	r3, #8
 8003706:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800370a:	e0ca      	b.n	80038a2 <UART_SetConfig+0x27e>
 800370c:	2310      	movs	r3, #16
 800370e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003712:	e0c6      	b.n	80038a2 <UART_SetConfig+0x27e>
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a7d      	ldr	r2, [pc, #500]	@ (8003910 <UART_SetConfig+0x2ec>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d138      	bne.n	8003790 <UART_SetConfig+0x16c>
 800371e:	4b7b      	ldr	r3, [pc, #492]	@ (800390c <UART_SetConfig+0x2e8>)
 8003720:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003724:	f003 030c 	and.w	r3, r3, #12
 8003728:	2b0c      	cmp	r3, #12
 800372a:	d82d      	bhi.n	8003788 <UART_SetConfig+0x164>
 800372c:	a201      	add	r2, pc, #4	@ (adr r2, 8003734 <UART_SetConfig+0x110>)
 800372e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003732:	bf00      	nop
 8003734:	08003769 	.word	0x08003769
 8003738:	08003789 	.word	0x08003789
 800373c:	08003789 	.word	0x08003789
 8003740:	08003789 	.word	0x08003789
 8003744:	08003779 	.word	0x08003779
 8003748:	08003789 	.word	0x08003789
 800374c:	08003789 	.word	0x08003789
 8003750:	08003789 	.word	0x08003789
 8003754:	08003771 	.word	0x08003771
 8003758:	08003789 	.word	0x08003789
 800375c:	08003789 	.word	0x08003789
 8003760:	08003789 	.word	0x08003789
 8003764:	08003781 	.word	0x08003781
 8003768:	2300      	movs	r3, #0
 800376a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800376e:	e098      	b.n	80038a2 <UART_SetConfig+0x27e>
 8003770:	2302      	movs	r3, #2
 8003772:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003776:	e094      	b.n	80038a2 <UART_SetConfig+0x27e>
 8003778:	2304      	movs	r3, #4
 800377a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800377e:	e090      	b.n	80038a2 <UART_SetConfig+0x27e>
 8003780:	2308      	movs	r3, #8
 8003782:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003786:	e08c      	b.n	80038a2 <UART_SetConfig+0x27e>
 8003788:	2310      	movs	r3, #16
 800378a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800378e:	e088      	b.n	80038a2 <UART_SetConfig+0x27e>
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a5f      	ldr	r2, [pc, #380]	@ (8003914 <UART_SetConfig+0x2f0>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d125      	bne.n	80037e6 <UART_SetConfig+0x1c2>
 800379a:	4b5c      	ldr	r3, [pc, #368]	@ (800390c <UART_SetConfig+0x2e8>)
 800379c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037a0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80037a4:	2b30      	cmp	r3, #48	@ 0x30
 80037a6:	d016      	beq.n	80037d6 <UART_SetConfig+0x1b2>
 80037a8:	2b30      	cmp	r3, #48	@ 0x30
 80037aa:	d818      	bhi.n	80037de <UART_SetConfig+0x1ba>
 80037ac:	2b20      	cmp	r3, #32
 80037ae:	d00a      	beq.n	80037c6 <UART_SetConfig+0x1a2>
 80037b0:	2b20      	cmp	r3, #32
 80037b2:	d814      	bhi.n	80037de <UART_SetConfig+0x1ba>
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d002      	beq.n	80037be <UART_SetConfig+0x19a>
 80037b8:	2b10      	cmp	r3, #16
 80037ba:	d008      	beq.n	80037ce <UART_SetConfig+0x1aa>
 80037bc:	e00f      	b.n	80037de <UART_SetConfig+0x1ba>
 80037be:	2300      	movs	r3, #0
 80037c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037c4:	e06d      	b.n	80038a2 <UART_SetConfig+0x27e>
 80037c6:	2302      	movs	r3, #2
 80037c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037cc:	e069      	b.n	80038a2 <UART_SetConfig+0x27e>
 80037ce:	2304      	movs	r3, #4
 80037d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037d4:	e065      	b.n	80038a2 <UART_SetConfig+0x27e>
 80037d6:	2308      	movs	r3, #8
 80037d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037dc:	e061      	b.n	80038a2 <UART_SetConfig+0x27e>
 80037de:	2310      	movs	r3, #16
 80037e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037e4:	e05d      	b.n	80038a2 <UART_SetConfig+0x27e>
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a4b      	ldr	r2, [pc, #300]	@ (8003918 <UART_SetConfig+0x2f4>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d125      	bne.n	800383c <UART_SetConfig+0x218>
 80037f0:	4b46      	ldr	r3, [pc, #280]	@ (800390c <UART_SetConfig+0x2e8>)
 80037f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037f6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80037fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80037fc:	d016      	beq.n	800382c <UART_SetConfig+0x208>
 80037fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8003800:	d818      	bhi.n	8003834 <UART_SetConfig+0x210>
 8003802:	2b80      	cmp	r3, #128	@ 0x80
 8003804:	d00a      	beq.n	800381c <UART_SetConfig+0x1f8>
 8003806:	2b80      	cmp	r3, #128	@ 0x80
 8003808:	d814      	bhi.n	8003834 <UART_SetConfig+0x210>
 800380a:	2b00      	cmp	r3, #0
 800380c:	d002      	beq.n	8003814 <UART_SetConfig+0x1f0>
 800380e:	2b40      	cmp	r3, #64	@ 0x40
 8003810:	d008      	beq.n	8003824 <UART_SetConfig+0x200>
 8003812:	e00f      	b.n	8003834 <UART_SetConfig+0x210>
 8003814:	2300      	movs	r3, #0
 8003816:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800381a:	e042      	b.n	80038a2 <UART_SetConfig+0x27e>
 800381c:	2302      	movs	r3, #2
 800381e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003822:	e03e      	b.n	80038a2 <UART_SetConfig+0x27e>
 8003824:	2304      	movs	r3, #4
 8003826:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800382a:	e03a      	b.n	80038a2 <UART_SetConfig+0x27e>
 800382c:	2308      	movs	r3, #8
 800382e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003832:	e036      	b.n	80038a2 <UART_SetConfig+0x27e>
 8003834:	2310      	movs	r3, #16
 8003836:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800383a:	e032      	b.n	80038a2 <UART_SetConfig+0x27e>
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a30      	ldr	r2, [pc, #192]	@ (8003904 <UART_SetConfig+0x2e0>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d12a      	bne.n	800389c <UART_SetConfig+0x278>
 8003846:	4b31      	ldr	r3, [pc, #196]	@ (800390c <UART_SetConfig+0x2e8>)
 8003848:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800384c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003850:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003854:	d01a      	beq.n	800388c <UART_SetConfig+0x268>
 8003856:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800385a:	d81b      	bhi.n	8003894 <UART_SetConfig+0x270>
 800385c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003860:	d00c      	beq.n	800387c <UART_SetConfig+0x258>
 8003862:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003866:	d815      	bhi.n	8003894 <UART_SetConfig+0x270>
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <UART_SetConfig+0x250>
 800386c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003870:	d008      	beq.n	8003884 <UART_SetConfig+0x260>
 8003872:	e00f      	b.n	8003894 <UART_SetConfig+0x270>
 8003874:	2300      	movs	r3, #0
 8003876:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800387a:	e012      	b.n	80038a2 <UART_SetConfig+0x27e>
 800387c:	2302      	movs	r3, #2
 800387e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003882:	e00e      	b.n	80038a2 <UART_SetConfig+0x27e>
 8003884:	2304      	movs	r3, #4
 8003886:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800388a:	e00a      	b.n	80038a2 <UART_SetConfig+0x27e>
 800388c:	2308      	movs	r3, #8
 800388e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003892:	e006      	b.n	80038a2 <UART_SetConfig+0x27e>
 8003894:	2310      	movs	r3, #16
 8003896:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800389a:	e002      	b.n	80038a2 <UART_SetConfig+0x27e>
 800389c:	2310      	movs	r3, #16
 800389e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a17      	ldr	r2, [pc, #92]	@ (8003904 <UART_SetConfig+0x2e0>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	f040 80a8 	bne.w	80039fe <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80038ae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80038b2:	2b08      	cmp	r3, #8
 80038b4:	d834      	bhi.n	8003920 <UART_SetConfig+0x2fc>
 80038b6:	a201      	add	r2, pc, #4	@ (adr r2, 80038bc <UART_SetConfig+0x298>)
 80038b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038bc:	080038e1 	.word	0x080038e1
 80038c0:	08003921 	.word	0x08003921
 80038c4:	080038e9 	.word	0x080038e9
 80038c8:	08003921 	.word	0x08003921
 80038cc:	080038ef 	.word	0x080038ef
 80038d0:	08003921 	.word	0x08003921
 80038d4:	08003921 	.word	0x08003921
 80038d8:	08003921 	.word	0x08003921
 80038dc:	080038f7 	.word	0x080038f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038e0:	f7ff f808 	bl	80028f4 <HAL_RCC_GetPCLK1Freq>
 80038e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80038e6:	e021      	b.n	800392c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038e8:	4b0c      	ldr	r3, [pc, #48]	@ (800391c <UART_SetConfig+0x2f8>)
 80038ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80038ec:	e01e      	b.n	800392c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038ee:	f7fe ff93 	bl	8002818 <HAL_RCC_GetSysClockFreq>
 80038f2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80038f4:	e01a      	b.n	800392c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80038fc:	e016      	b.n	800392c <UART_SetConfig+0x308>
 80038fe:	bf00      	nop
 8003900:	cfff69f3 	.word	0xcfff69f3
 8003904:	40008000 	.word	0x40008000
 8003908:	40013800 	.word	0x40013800
 800390c:	40021000 	.word	0x40021000
 8003910:	40004400 	.word	0x40004400
 8003914:	40004800 	.word	0x40004800
 8003918:	40004c00 	.word	0x40004c00
 800391c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003920:	2300      	movs	r3, #0
 8003922:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800392a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800392c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800392e:	2b00      	cmp	r3, #0
 8003930:	f000 812a 	beq.w	8003b88 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003938:	4a9e      	ldr	r2, [pc, #632]	@ (8003bb4 <UART_SetConfig+0x590>)
 800393a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800393e:	461a      	mov	r2, r3
 8003940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003942:	fbb3 f3f2 	udiv	r3, r3, r2
 8003946:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	4613      	mov	r3, r2
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	4413      	add	r3, r2
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	429a      	cmp	r2, r3
 8003956:	d305      	bcc.n	8003964 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	429a      	cmp	r2, r3
 8003962:	d903      	bls.n	800396c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800396a:	e10d      	b.n	8003b88 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800396c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396e:	2200      	movs	r2, #0
 8003970:	60bb      	str	r3, [r7, #8]
 8003972:	60fa      	str	r2, [r7, #12]
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003978:	4a8e      	ldr	r2, [pc, #568]	@ (8003bb4 <UART_SetConfig+0x590>)
 800397a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800397e:	b29b      	uxth	r3, r3
 8003980:	2200      	movs	r2, #0
 8003982:	603b      	str	r3, [r7, #0]
 8003984:	607a      	str	r2, [r7, #4]
 8003986:	e9d7 2300 	ldrd	r2, r3, [r7]
 800398a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800398e:	f7fd f9a3 	bl	8000cd8 <__aeabi_uldivmod>
 8003992:	4602      	mov	r2, r0
 8003994:	460b      	mov	r3, r1
 8003996:	4610      	mov	r0, r2
 8003998:	4619      	mov	r1, r3
 800399a:	f04f 0200 	mov.w	r2, #0
 800399e:	f04f 0300 	mov.w	r3, #0
 80039a2:	020b      	lsls	r3, r1, #8
 80039a4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80039a8:	0202      	lsls	r2, r0, #8
 80039aa:	6979      	ldr	r1, [r7, #20]
 80039ac:	6849      	ldr	r1, [r1, #4]
 80039ae:	0849      	lsrs	r1, r1, #1
 80039b0:	2000      	movs	r0, #0
 80039b2:	460c      	mov	r4, r1
 80039b4:	4605      	mov	r5, r0
 80039b6:	eb12 0804 	adds.w	r8, r2, r4
 80039ba:	eb43 0905 	adc.w	r9, r3, r5
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	469a      	mov	sl, r3
 80039c6:	4693      	mov	fp, r2
 80039c8:	4652      	mov	r2, sl
 80039ca:	465b      	mov	r3, fp
 80039cc:	4640      	mov	r0, r8
 80039ce:	4649      	mov	r1, r9
 80039d0:	f7fd f982 	bl	8000cd8 <__aeabi_uldivmod>
 80039d4:	4602      	mov	r2, r0
 80039d6:	460b      	mov	r3, r1
 80039d8:	4613      	mov	r3, r2
 80039da:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80039dc:	6a3b      	ldr	r3, [r7, #32]
 80039de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039e2:	d308      	bcc.n	80039f6 <UART_SetConfig+0x3d2>
 80039e4:	6a3b      	ldr	r3, [r7, #32]
 80039e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039ea:	d204      	bcs.n	80039f6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6a3a      	ldr	r2, [r7, #32]
 80039f2:	60da      	str	r2, [r3, #12]
 80039f4:	e0c8      	b.n	8003b88 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80039fc:	e0c4      	b.n	8003b88 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a06:	d167      	bne.n	8003ad8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003a08:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003a0c:	2b08      	cmp	r3, #8
 8003a0e:	d828      	bhi.n	8003a62 <UART_SetConfig+0x43e>
 8003a10:	a201      	add	r2, pc, #4	@ (adr r2, 8003a18 <UART_SetConfig+0x3f4>)
 8003a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a16:	bf00      	nop
 8003a18:	08003a3d 	.word	0x08003a3d
 8003a1c:	08003a45 	.word	0x08003a45
 8003a20:	08003a4d 	.word	0x08003a4d
 8003a24:	08003a63 	.word	0x08003a63
 8003a28:	08003a53 	.word	0x08003a53
 8003a2c:	08003a63 	.word	0x08003a63
 8003a30:	08003a63 	.word	0x08003a63
 8003a34:	08003a63 	.word	0x08003a63
 8003a38:	08003a5b 	.word	0x08003a5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a3c:	f7fe ff5a 	bl	80028f4 <HAL_RCC_GetPCLK1Freq>
 8003a40:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003a42:	e014      	b.n	8003a6e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a44:	f7fe ff6c 	bl	8002920 <HAL_RCC_GetPCLK2Freq>
 8003a48:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003a4a:	e010      	b.n	8003a6e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a4c:	4b5a      	ldr	r3, [pc, #360]	@ (8003bb8 <UART_SetConfig+0x594>)
 8003a4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003a50:	e00d      	b.n	8003a6e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a52:	f7fe fee1 	bl	8002818 <HAL_RCC_GetSysClockFreq>
 8003a56:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003a58:	e009      	b.n	8003a6e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003a60:	e005      	b.n	8003a6e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003a62:	2300      	movs	r3, #0
 8003a64:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003a6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f000 8089 	beq.w	8003b88 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7a:	4a4e      	ldr	r2, [pc, #312]	@ (8003bb4 <UART_SetConfig+0x590>)
 8003a7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a80:	461a      	mov	r2, r3
 8003a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a84:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a88:	005a      	lsls	r2, r3, #1
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	085b      	lsrs	r3, r3, #1
 8003a90:	441a      	add	r2, r3
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a9a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	2b0f      	cmp	r3, #15
 8003aa0:	d916      	bls.n	8003ad0 <UART_SetConfig+0x4ac>
 8003aa2:	6a3b      	ldr	r3, [r7, #32]
 8003aa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003aa8:	d212      	bcs.n	8003ad0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003aaa:	6a3b      	ldr	r3, [r7, #32]
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	f023 030f 	bic.w	r3, r3, #15
 8003ab2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ab4:	6a3b      	ldr	r3, [r7, #32]
 8003ab6:	085b      	lsrs	r3, r3, #1
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	f003 0307 	and.w	r3, r3, #7
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	8bfb      	ldrh	r3, [r7, #30]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	8bfa      	ldrh	r2, [r7, #30]
 8003acc:	60da      	str	r2, [r3, #12]
 8003ace:	e05b      	b.n	8003b88 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003ad6:	e057      	b.n	8003b88 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ad8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003adc:	2b08      	cmp	r3, #8
 8003ade:	d828      	bhi.n	8003b32 <UART_SetConfig+0x50e>
 8003ae0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ae8 <UART_SetConfig+0x4c4>)
 8003ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae6:	bf00      	nop
 8003ae8:	08003b0d 	.word	0x08003b0d
 8003aec:	08003b15 	.word	0x08003b15
 8003af0:	08003b1d 	.word	0x08003b1d
 8003af4:	08003b33 	.word	0x08003b33
 8003af8:	08003b23 	.word	0x08003b23
 8003afc:	08003b33 	.word	0x08003b33
 8003b00:	08003b33 	.word	0x08003b33
 8003b04:	08003b33 	.word	0x08003b33
 8003b08:	08003b2b 	.word	0x08003b2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b0c:	f7fe fef2 	bl	80028f4 <HAL_RCC_GetPCLK1Freq>
 8003b10:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003b12:	e014      	b.n	8003b3e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b14:	f7fe ff04 	bl	8002920 <HAL_RCC_GetPCLK2Freq>
 8003b18:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003b1a:	e010      	b.n	8003b3e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b1c:	4b26      	ldr	r3, [pc, #152]	@ (8003bb8 <UART_SetConfig+0x594>)
 8003b1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003b20:	e00d      	b.n	8003b3e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b22:	f7fe fe79 	bl	8002818 <HAL_RCC_GetSysClockFreq>
 8003b26:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003b28:	e009      	b.n	8003b3e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003b30:	e005      	b.n	8003b3e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003b32:	2300      	movs	r3, #0
 8003b34:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003b3c:	bf00      	nop
    }

    if (pclk != 0U)
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d021      	beq.n	8003b88 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b48:	4a1a      	ldr	r2, [pc, #104]	@ (8003bb4 <UART_SetConfig+0x590>)
 8003b4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b4e:	461a      	mov	r2, r3
 8003b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b52:	fbb3 f2f2 	udiv	r2, r3, r2
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	085b      	lsrs	r3, r3, #1
 8003b5c:	441a      	add	r2, r3
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b66:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b68:	6a3b      	ldr	r3, [r7, #32]
 8003b6a:	2b0f      	cmp	r3, #15
 8003b6c:	d909      	bls.n	8003b82 <UART_SetConfig+0x55e>
 8003b6e:	6a3b      	ldr	r3, [r7, #32]
 8003b70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b74:	d205      	bcs.n	8003b82 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b76:	6a3b      	ldr	r3, [r7, #32]
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	60da      	str	r2, [r3, #12]
 8003b80:	e002      	b.n	8003b88 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003ba4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3730      	adds	r7, #48	@ 0x30
 8003bac:	46bd      	mov	sp, r7
 8003bae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bb2:	bf00      	nop
 8003bb4:	0800a214 	.word	0x0800a214
 8003bb8:	00f42400 	.word	0x00f42400

08003bbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc8:	f003 0308 	and.w	r3, r3, #8
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00a      	beq.n	8003be6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00a      	beq.n	8003c08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00a      	beq.n	8003c2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c2e:	f003 0304 	and.w	r3, r3, #4
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00a      	beq.n	8003c4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c50:	f003 0310 	and.w	r3, r3, #16
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00a      	beq.n	8003c6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c72:	f003 0320 	and.w	r3, r3, #32
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00a      	beq.n	8003c90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d01a      	beq.n	8003cd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cba:	d10a      	bne.n	8003cd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00a      	beq.n	8003cf4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	605a      	str	r2, [r3, #4]
  }
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b098      	sub	sp, #96	@ 0x60
 8003d04:	af02      	add	r7, sp, #8
 8003d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d10:	f7fd fde0 	bl	80018d4 <HAL_GetTick>
 8003d14:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0308 	and.w	r3, r3, #8
 8003d20:	2b08      	cmp	r3, #8
 8003d22:	d12f      	bne.n	8003d84 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d24:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f88e 	bl	8003e54 <UART_WaitOnFlagUntilTimeout>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d022      	beq.n	8003d84 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d46:	e853 3f00 	ldrex	r3, [r3]
 8003d4a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d52:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	461a      	mov	r2, r3
 8003d5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d5e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d60:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d64:	e841 2300 	strex	r3, r2, [r1]
 8003d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1e6      	bne.n	8003d3e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2220      	movs	r2, #32
 8003d74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e063      	b.n	8003e4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0304 	and.w	r3, r3, #4
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d149      	bne.n	8003e26 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d92:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 f857 	bl	8003e54 <UART_WaitOnFlagUntilTimeout>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d03c      	beq.n	8003e26 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db4:	e853 3f00 	ldrex	r3, [r3]
 8003db8:	623b      	str	r3, [r7, #32]
   return(result);
 8003dba:	6a3b      	ldr	r3, [r7, #32]
 8003dbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003dc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003dca:	633b      	str	r3, [r7, #48]	@ 0x30
 8003dcc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003dd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dd2:	e841 2300 	strex	r3, r2, [r1]
 8003dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1e6      	bne.n	8003dac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	3308      	adds	r3, #8
 8003de4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	e853 3f00 	ldrex	r3, [r3]
 8003dec:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f023 0301 	bic.w	r3, r3, #1
 8003df4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	3308      	adds	r3, #8
 8003dfc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003dfe:	61fa      	str	r2, [r7, #28]
 8003e00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e02:	69b9      	ldr	r1, [r7, #24]
 8003e04:	69fa      	ldr	r2, [r7, #28]
 8003e06:	e841 2300 	strex	r3, r2, [r1]
 8003e0a:	617b      	str	r3, [r7, #20]
   return(result);
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1e5      	bne.n	8003dde <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2220      	movs	r2, #32
 8003e16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e012      	b.n	8003e4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2220      	movs	r2, #32
 8003e2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2220      	movs	r2, #32
 8003e32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3758      	adds	r7, #88	@ 0x58
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	603b      	str	r3, [r7, #0]
 8003e60:	4613      	mov	r3, r2
 8003e62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e64:	e04f      	b.n	8003f06 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e6c:	d04b      	beq.n	8003f06 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e6e:	f7fd fd31 	bl	80018d4 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d302      	bcc.n	8003e84 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e04e      	b.n	8003f26 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0304 	and.w	r3, r3, #4
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d037      	beq.n	8003f06 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	2b80      	cmp	r3, #128	@ 0x80
 8003e9a:	d034      	beq.n	8003f06 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	2b40      	cmp	r3, #64	@ 0x40
 8003ea0:	d031      	beq.n	8003f06 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	69db      	ldr	r3, [r3, #28]
 8003ea8:	f003 0308 	and.w	r3, r3, #8
 8003eac:	2b08      	cmp	r3, #8
 8003eae:	d110      	bne.n	8003ed2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2208      	movs	r2, #8
 8003eb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f000 f838 	bl	8003f2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2208      	movs	r2, #8
 8003ec2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e029      	b.n	8003f26 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	69db      	ldr	r3, [r3, #28]
 8003ed8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003edc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ee0:	d111      	bne.n	8003f06 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003eea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f000 f81e 	bl	8003f2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e00f      	b.n	8003f26 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	69da      	ldr	r2, [r3, #28]
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	68ba      	ldr	r2, [r7, #8]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	bf0c      	ite	eq
 8003f16:	2301      	moveq	r3, #1
 8003f18:	2300      	movne	r3, #0
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	79fb      	ldrb	r3, [r7, #7]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d0a0      	beq.n	8003e66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	b095      	sub	sp, #84	@ 0x54
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f3e:	e853 3f00 	ldrex	r3, [r3]
 8003f42:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	461a      	mov	r2, r3
 8003f52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f54:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f56:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f58:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f5c:	e841 2300 	strex	r3, r2, [r1]
 8003f60:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1e6      	bne.n	8003f36 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	3308      	adds	r3, #8
 8003f6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f70:	6a3b      	ldr	r3, [r7, #32]
 8003f72:	e853 3f00 	ldrex	r3, [r3]
 8003f76:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f7e:	f023 0301 	bic.w	r3, r3, #1
 8003f82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	3308      	adds	r3, #8
 8003f8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f94:	e841 2300 	strex	r3, r2, [r1]
 8003f98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1e3      	bne.n	8003f68 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d118      	bne.n	8003fda <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	e853 3f00 	ldrex	r3, [r3]
 8003fb4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	f023 0310 	bic.w	r3, r3, #16
 8003fbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fc6:	61bb      	str	r3, [r7, #24]
 8003fc8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fca:	6979      	ldr	r1, [r7, #20]
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	e841 2300 	strex	r3, r2, [r1]
 8003fd2:	613b      	str	r3, [r7, #16]
   return(result);
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1e6      	bne.n	8003fa8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003fee:	bf00      	nop
 8003ff0:	3754      	adds	r7, #84	@ 0x54
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b085      	sub	sp, #20
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004008:	2b01      	cmp	r3, #1
 800400a:	d101      	bne.n	8004010 <HAL_UARTEx_DisableFifoMode+0x16>
 800400c:	2302      	movs	r3, #2
 800400e:	e027      	b.n	8004060 <HAL_UARTEx_DisableFifoMode+0x66>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2224      	movs	r2, #36	@ 0x24
 800401c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f022 0201 	bic.w	r2, r2, #1
 8004036:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800403e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2220      	movs	r2, #32
 8004052:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3714      	adds	r7, #20
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800407c:	2b01      	cmp	r3, #1
 800407e:	d101      	bne.n	8004084 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004080:	2302      	movs	r3, #2
 8004082:	e02d      	b.n	80040e0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2224      	movs	r2, #36	@ 0x24
 8004090:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 0201 	bic.w	r2, r2, #1
 80040aa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	430a      	orrs	r2, r1
 80040be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 f84f 	bl	8004164 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2220      	movs	r2, #32
 80040d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d101      	bne.n	8004100 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80040fc:	2302      	movs	r3, #2
 80040fe:	e02d      	b.n	800415c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2224      	movs	r2, #36	@ 0x24
 800410c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f022 0201 	bic.w	r2, r2, #1
 8004126:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	683a      	ldr	r2, [r7, #0]
 8004138:	430a      	orrs	r2, r1
 800413a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 f811 	bl	8004164 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2220      	movs	r2, #32
 800414e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004170:	2b00      	cmp	r3, #0
 8004172:	d108      	bne.n	8004186 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004184:	e031      	b.n	80041ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004186:	2308      	movs	r3, #8
 8004188:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800418a:	2308      	movs	r3, #8
 800418c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	0e5b      	lsrs	r3, r3, #25
 8004196:	b2db      	uxtb	r3, r3
 8004198:	f003 0307 	and.w	r3, r3, #7
 800419c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	0f5b      	lsrs	r3, r3, #29
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	f003 0307 	and.w	r3, r3, #7
 80041ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80041ae:	7bbb      	ldrb	r3, [r7, #14]
 80041b0:	7b3a      	ldrb	r2, [r7, #12]
 80041b2:	4911      	ldr	r1, [pc, #68]	@ (80041f8 <UARTEx_SetNbDataToProcess+0x94>)
 80041b4:	5c8a      	ldrb	r2, [r1, r2]
 80041b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80041ba:	7b3a      	ldrb	r2, [r7, #12]
 80041bc:	490f      	ldr	r1, [pc, #60]	@ (80041fc <UARTEx_SetNbDataToProcess+0x98>)
 80041be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80041c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80041cc:	7bfb      	ldrb	r3, [r7, #15]
 80041ce:	7b7a      	ldrb	r2, [r7, #13]
 80041d0:	4909      	ldr	r1, [pc, #36]	@ (80041f8 <UARTEx_SetNbDataToProcess+0x94>)
 80041d2:	5c8a      	ldrb	r2, [r1, r2]
 80041d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80041d8:	7b7a      	ldrb	r2, [r7, #13]
 80041da:	4908      	ldr	r1, [pc, #32]	@ (80041fc <UARTEx_SetNbDataToProcess+0x98>)
 80041dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80041de:	fb93 f3f2 	sdiv	r3, r3, r2
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80041ea:	bf00      	nop
 80041ec:	3714      	adds	r7, #20
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	0800a22c 	.word	0x0800a22c
 80041fc:	0800a234 	.word	0x0800a234

08004200 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	4603      	mov	r3, r0
 8004208:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800420a:	2300      	movs	r3, #0
 800420c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800420e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004212:	2b84      	cmp	r3, #132	@ 0x84
 8004214:	d005      	beq.n	8004222 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004216:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	4413      	add	r3, r2
 800421e:	3303      	adds	r3, #3
 8004220:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004222:	68fb      	ldr	r3, [r7, #12]
}
 8004224:	4618      	mov	r0, r3
 8004226:	3714      	adds	r7, #20
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004234:	f000 fa74 	bl	8004720 <vTaskStartScheduler>
  
  return osOK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	bd80      	pop	{r7, pc}

0800423e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800423e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004240:	b087      	sub	sp, #28
 8004242:	af02      	add	r7, sp, #8
 8004244:	6078      	str	r0, [r7, #4]
 8004246:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685c      	ldr	r4, [r3, #4]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004254:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800425c:	4618      	mov	r0, r3
 800425e:	f7ff ffcf 	bl	8004200 <makeFreeRtosPriority>
 8004262:	4602      	mov	r2, r0
 8004264:	f107 030c 	add.w	r3, r7, #12
 8004268:	9301      	str	r3, [sp, #4]
 800426a:	9200      	str	r2, [sp, #0]
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	4632      	mov	r2, r6
 8004270:	4629      	mov	r1, r5
 8004272:	4620      	mov	r0, r4
 8004274:	f000 f8d2 	bl	800441c <xTaskCreate>
 8004278:	4603      	mov	r3, r0
 800427a:	2b01      	cmp	r3, #1
 800427c:	d001      	beq.n	8004282 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800427e:	2300      	movs	r3, #0
 8004280:	e000      	b.n	8004284 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8004282:	68fb      	ldr	r3, [r7, #12]
}
 8004284:	4618      	mov	r0, r3
 8004286:	3714      	adds	r7, #20
 8004288:	46bd      	mov	sp, r7
 800428a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800428c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <osDelay+0x16>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	e000      	b.n	80042a4 <osDelay+0x18>
 80042a2:	2301      	movs	r3, #1
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 fa05 	bl	80046b4 <vTaskDelay>
  
  return osOK;
 80042aa:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f103 0208 	add.w	r2, r3, #8
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80042cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f103 0208 	add.w	r2, r3, #8
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f103 0208 	add.w	r2, r3, #8
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004302:	bf00      	nop
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800430e:	b480      	push	{r7}
 8004310:	b085      	sub	sp, #20
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
 8004316:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	689a      	ldr	r2, [r3, #8]
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	1c5a      	adds	r2, r3, #1
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	601a      	str	r2, [r3, #0]
}
 800434a:	bf00      	nop
 800434c:	3714      	adds	r7, #20
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr

08004356 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004356:	b480      	push	{r7}
 8004358:	b085      	sub	sp, #20
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
 800435e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800436c:	d103      	bne.n	8004376 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	60fb      	str	r3, [r7, #12]
 8004374:	e00c      	b.n	8004390 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	3308      	adds	r3, #8
 800437a:	60fb      	str	r3, [r7, #12]
 800437c:	e002      	b.n	8004384 <vListInsert+0x2e>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	60fb      	str	r3, [r7, #12]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	429a      	cmp	r2, r3
 800438e:	d2f6      	bcs.n	800437e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	685a      	ldr	r2, [r3, #4]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	683a      	ldr	r2, [r7, #0]
 800439e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	683a      	ldr	r2, [r7, #0]
 80043aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	1c5a      	adds	r2, r3, #1
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	601a      	str	r2, [r3, #0]
}
 80043bc:	bf00      	nop
 80043be:	3714      	adds	r7, #20
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	6892      	ldr	r2, [r2, #8]
 80043de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	6852      	ldr	r2, [r2, #4]
 80043e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d103      	bne.n	80043fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689a      	ldr	r2, [r3, #8]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	1e5a      	subs	r2, r3, #1
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
}
 8004410:	4618      	mov	r0, r3
 8004412:	3714      	adds	r7, #20
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800441c:	b580      	push	{r7, lr}
 800441e:	b08c      	sub	sp, #48	@ 0x30
 8004420:	af04      	add	r7, sp, #16
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	603b      	str	r3, [r7, #0]
 8004428:	4613      	mov	r3, r2
 800442a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800442c:	88fb      	ldrh	r3, [r7, #6]
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4618      	mov	r0, r3
 8004432:	f000 ffd1 	bl	80053d8 <pvPortMalloc>
 8004436:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00e      	beq.n	800445c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800443e:	20a0      	movs	r0, #160	@ 0xa0
 8004440:	f000 ffca 	bl	80053d8 <pvPortMalloc>
 8004444:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d003      	beq.n	8004454 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	631a      	str	r2, [r3, #48]	@ 0x30
 8004452:	e005      	b.n	8004460 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004454:	6978      	ldr	r0, [r7, #20]
 8004456:	f001 f88d 	bl	8005574 <vPortFree>
 800445a:	e001      	b.n	8004460 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800445c:	2300      	movs	r3, #0
 800445e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d013      	beq.n	800448e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004466:	88fa      	ldrh	r2, [r7, #6]
 8004468:	2300      	movs	r3, #0
 800446a:	9303      	str	r3, [sp, #12]
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	9302      	str	r3, [sp, #8]
 8004470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004472:	9301      	str	r3, [sp, #4]
 8004474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004476:	9300      	str	r3, [sp, #0]
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	68b9      	ldr	r1, [r7, #8]
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f000 f80f 	bl	80044a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004482:	69f8      	ldr	r0, [r7, #28]
 8004484:	f000 f8ac 	bl	80045e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004488:	2301      	movs	r3, #1
 800448a:	61bb      	str	r3, [r7, #24]
 800448c:	e002      	b.n	8004494 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800448e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004492:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004494:	69bb      	ldr	r3, [r7, #24]
	}
 8004496:	4618      	mov	r0, r3
 8004498:	3720      	adds	r7, #32
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
	...

080044a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b088      	sub	sp, #32
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
 80044ac:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80044ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80044b8:	3b01      	subs	r3, #1
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	4413      	add	r3, r2
 80044be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	f023 0307 	bic.w	r3, r3, #7
 80044c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	f003 0307 	and.w	r3, r3, #7
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00b      	beq.n	80044ea <prvInitialiseNewTask+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80044d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d6:	f383 8811 	msr	BASEPRI, r3
 80044da:	f3bf 8f6f 	isb	sy
 80044de:	f3bf 8f4f 	dsb	sy
 80044e2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80044e4:	bf00      	nop
 80044e6:	bf00      	nop
 80044e8:	e7fd      	b.n	80044e6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d01f      	beq.n	8004530 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044f0:	2300      	movs	r3, #0
 80044f2:	61fb      	str	r3, [r7, #28]
 80044f4:	e012      	b.n	800451c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80044f6:	68ba      	ldr	r2, [r7, #8]
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	4413      	add	r3, r2
 80044fc:	7819      	ldrb	r1, [r3, #0]
 80044fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	4413      	add	r3, r2
 8004504:	3334      	adds	r3, #52	@ 0x34
 8004506:	460a      	mov	r2, r1
 8004508:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800450a:	68ba      	ldr	r2, [r7, #8]
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	4413      	add	r3, r2
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d006      	beq.n	8004524 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	3301      	adds	r3, #1
 800451a:	61fb      	str	r3, [r7, #28]
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	2b0f      	cmp	r3, #15
 8004520:	d9e9      	bls.n	80044f6 <prvInitialiseNewTask+0x56>
 8004522:	e000      	b.n	8004526 <prvInitialiseNewTask+0x86>
			{
				break;
 8004524:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800452e:	e003      	b.n	8004538 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004532:	2200      	movs	r2, #0
 8004534:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800453a:	2b06      	cmp	r3, #6
 800453c:	d901      	bls.n	8004542 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800453e:	2306      	movs	r3, #6
 8004540:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004544:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004546:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800454a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800454c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800454e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004550:	2200      	movs	r2, #0
 8004552:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004556:	3304      	adds	r3, #4
 8004558:	4618      	mov	r0, r3
 800455a:	f7ff fecb 	bl	80042f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800455e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004560:	3318      	adds	r3, #24
 8004562:	4618      	mov	r0, r3
 8004564:	f7ff fec6 	bl	80042f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800456a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800456c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800456e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004570:	f1c3 0207 	rsb	r2, r3, #7
 8004574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004576:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800457a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800457c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800457e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004580:	2200      	movs	r2, #0
 8004582:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004588:	2200      	movs	r2, #0
 800458a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800458e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004590:	334c      	adds	r3, #76	@ 0x4c
 8004592:	224c      	movs	r2, #76	@ 0x4c
 8004594:	2100      	movs	r1, #0
 8004596:	4618      	mov	r0, r3
 8004598:	f002 f9a2 	bl	80068e0 <memset>
 800459c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800459e:	4a0d      	ldr	r2, [pc, #52]	@ (80045d4 <prvInitialiseNewTask+0x134>)
 80045a0:	651a      	str	r2, [r3, #80]	@ 0x50
 80045a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a4:	4a0c      	ldr	r2, [pc, #48]	@ (80045d8 <prvInitialiseNewTask+0x138>)
 80045a6:	655a      	str	r2, [r3, #84]	@ 0x54
 80045a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045aa:	4a0c      	ldr	r2, [pc, #48]	@ (80045dc <prvInitialiseNewTask+0x13c>)
 80045ac:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	68f9      	ldr	r1, [r7, #12]
 80045b2:	69b8      	ldr	r0, [r7, #24]
 80045b4:	f000 fd00 	bl	8004fb8 <pxPortInitialiseStack>
 80045b8:	4602      	mov	r2, r0
 80045ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80045be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d002      	beq.n	80045ca <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80045c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045ca:	bf00      	nop
 80045cc:	3720      	adds	r7, #32
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	20005260 	.word	0x20005260
 80045d8:	200052c8 	.word	0x200052c8
 80045dc:	20005330 	.word	0x20005330

080045e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80045e8:	f000 fe16 	bl	8005218 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80045ec:	4b2a      	ldr	r3, [pc, #168]	@ (8004698 <prvAddNewTaskToReadyList+0xb8>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	3301      	adds	r3, #1
 80045f2:	4a29      	ldr	r2, [pc, #164]	@ (8004698 <prvAddNewTaskToReadyList+0xb8>)
 80045f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80045f6:	4b29      	ldr	r3, [pc, #164]	@ (800469c <prvAddNewTaskToReadyList+0xbc>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d109      	bne.n	8004612 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80045fe:	4a27      	ldr	r2, [pc, #156]	@ (800469c <prvAddNewTaskToReadyList+0xbc>)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004604:	4b24      	ldr	r3, [pc, #144]	@ (8004698 <prvAddNewTaskToReadyList+0xb8>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d110      	bne.n	800462e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800460c:	f000 fabc 	bl	8004b88 <prvInitialiseTaskLists>
 8004610:	e00d      	b.n	800462e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004612:	4b23      	ldr	r3, [pc, #140]	@ (80046a0 <prvAddNewTaskToReadyList+0xc0>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d109      	bne.n	800462e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800461a:	4b20      	ldr	r3, [pc, #128]	@ (800469c <prvAddNewTaskToReadyList+0xbc>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004624:	429a      	cmp	r2, r3
 8004626:	d802      	bhi.n	800462e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004628:	4a1c      	ldr	r2, [pc, #112]	@ (800469c <prvAddNewTaskToReadyList+0xbc>)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800462e:	4b1d      	ldr	r3, [pc, #116]	@ (80046a4 <prvAddNewTaskToReadyList+0xc4>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	3301      	adds	r3, #1
 8004634:	4a1b      	ldr	r2, [pc, #108]	@ (80046a4 <prvAddNewTaskToReadyList+0xc4>)
 8004636:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800463c:	2201      	movs	r2, #1
 800463e:	409a      	lsls	r2, r3
 8004640:	4b19      	ldr	r3, [pc, #100]	@ (80046a8 <prvAddNewTaskToReadyList+0xc8>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4313      	orrs	r3, r2
 8004646:	4a18      	ldr	r2, [pc, #96]	@ (80046a8 <prvAddNewTaskToReadyList+0xc8>)
 8004648:	6013      	str	r3, [r2, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800464e:	4613      	mov	r3, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	4413      	add	r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	4a15      	ldr	r2, [pc, #84]	@ (80046ac <prvAddNewTaskToReadyList+0xcc>)
 8004658:	441a      	add	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	3304      	adds	r3, #4
 800465e:	4619      	mov	r1, r3
 8004660:	4610      	mov	r0, r2
 8004662:	f7ff fe54 	bl	800430e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004666:	f000 fe09 	bl	800527c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800466a:	4b0d      	ldr	r3, [pc, #52]	@ (80046a0 <prvAddNewTaskToReadyList+0xc0>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00e      	beq.n	8004690 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004672:	4b0a      	ldr	r3, [pc, #40]	@ (800469c <prvAddNewTaskToReadyList+0xbc>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800467c:	429a      	cmp	r2, r3
 800467e:	d207      	bcs.n	8004690 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004680:	4b0b      	ldr	r3, [pc, #44]	@ (80046b0 <prvAddNewTaskToReadyList+0xd0>)
 8004682:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004686:	601a      	str	r2, [r3, #0]
 8004688:	f3bf 8f4f 	dsb	sy
 800468c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004690:	bf00      	nop
 8004692:	3708      	adds	r7, #8
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	200003ec 	.word	0x200003ec
 800469c:	200002ec 	.word	0x200002ec
 80046a0:	200003f8 	.word	0x200003f8
 80046a4:	20000408 	.word	0x20000408
 80046a8:	200003f4 	.word	0x200003f4
 80046ac:	200002f0 	.word	0x200002f0
 80046b0:	e000ed04 	.word	0xe000ed04

080046b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80046bc:	2300      	movs	r3, #0
 80046be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d018      	beq.n	80046f8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80046c6:	4b14      	ldr	r3, [pc, #80]	@ (8004718 <vTaskDelay+0x64>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00b      	beq.n	80046e6 <vTaskDelay+0x32>
	__asm volatile
 80046ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d2:	f383 8811 	msr	BASEPRI, r3
 80046d6:	f3bf 8f6f 	isb	sy
 80046da:	f3bf 8f4f 	dsb	sy
 80046de:	60bb      	str	r3, [r7, #8]
}
 80046e0:	bf00      	nop
 80046e2:	bf00      	nop
 80046e4:	e7fd      	b.n	80046e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80046e6:	f000 f86d 	bl	80047c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80046ea:	2100      	movs	r1, #0
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 fbfd 	bl	8004eec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80046f2:	f000 f875 	bl	80047e0 <xTaskResumeAll>
 80046f6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d107      	bne.n	800470e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80046fe:	4b07      	ldr	r3, [pc, #28]	@ (800471c <vTaskDelay+0x68>)
 8004700:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004704:	601a      	str	r2, [r3, #0]
 8004706:	f3bf 8f4f 	dsb	sy
 800470a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800470e:	bf00      	nop
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	20000414 	.word	0x20000414
 800471c:	e000ed04 	.word	0xe000ed04

08004720 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8004726:	4b1f      	ldr	r3, [pc, #124]	@ (80047a4 <vTaskStartScheduler+0x84>)
 8004728:	9301      	str	r3, [sp, #4]
 800472a:	2300      	movs	r3, #0
 800472c:	9300      	str	r3, [sp, #0]
 800472e:	2300      	movs	r3, #0
 8004730:	2280      	movs	r2, #128	@ 0x80
 8004732:	491d      	ldr	r1, [pc, #116]	@ (80047a8 <vTaskStartScheduler+0x88>)
 8004734:	481d      	ldr	r0, [pc, #116]	@ (80047ac <vTaskStartScheduler+0x8c>)
 8004736:	f7ff fe71 	bl	800441c <xTaskCreate>
 800473a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2b01      	cmp	r3, #1
 8004740:	d11b      	bne.n	800477a <vTaskStartScheduler+0x5a>
	__asm volatile
 8004742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004746:	f383 8811 	msr	BASEPRI, r3
 800474a:	f3bf 8f6f 	isb	sy
 800474e:	f3bf 8f4f 	dsb	sy
 8004752:	60bb      	str	r3, [r7, #8]
}
 8004754:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004756:	4b16      	ldr	r3, [pc, #88]	@ (80047b0 <vTaskStartScheduler+0x90>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	334c      	adds	r3, #76	@ 0x4c
 800475c:	4a15      	ldr	r2, [pc, #84]	@ (80047b4 <vTaskStartScheduler+0x94>)
 800475e:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004760:	4b15      	ldr	r3, [pc, #84]	@ (80047b8 <vTaskStartScheduler+0x98>)
 8004762:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004766:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004768:	4b14      	ldr	r3, [pc, #80]	@ (80047bc <vTaskStartScheduler+0x9c>)
 800476a:	2201      	movs	r2, #1
 800476c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800476e:	4b14      	ldr	r3, [pc, #80]	@ (80047c0 <vTaskStartScheduler+0xa0>)
 8004770:	2200      	movs	r2, #0
 8004772:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004774:	f000 fcac 	bl	80050d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004778:	e00f      	b.n	800479a <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004780:	d10b      	bne.n	800479a <vTaskStartScheduler+0x7a>
	__asm volatile
 8004782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004786:	f383 8811 	msr	BASEPRI, r3
 800478a:	f3bf 8f6f 	isb	sy
 800478e:	f3bf 8f4f 	dsb	sy
 8004792:	607b      	str	r3, [r7, #4]
}
 8004794:	bf00      	nop
 8004796:	bf00      	nop
 8004798:	e7fd      	b.n	8004796 <vTaskStartScheduler+0x76>
}
 800479a:	bf00      	nop
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	20000410 	.word	0x20000410
 80047a8:	0800a1f4 	.word	0x0800a1f4
 80047ac:	08004b59 	.word	0x08004b59
 80047b0:	200002ec 	.word	0x200002ec
 80047b4:	20000020 	.word	0x20000020
 80047b8:	2000040c 	.word	0x2000040c
 80047bc:	200003f8 	.word	0x200003f8
 80047c0:	200003f0 	.word	0x200003f0

080047c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80047c4:	b480      	push	{r7}
 80047c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80047c8:	4b04      	ldr	r3, [pc, #16]	@ (80047dc <vTaskSuspendAll+0x18>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	3301      	adds	r3, #1
 80047ce:	4a03      	ldr	r2, [pc, #12]	@ (80047dc <vTaskSuspendAll+0x18>)
 80047d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80047d2:	bf00      	nop
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr
 80047dc:	20000414 	.word	0x20000414

080047e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80047e6:	2300      	movs	r3, #0
 80047e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80047ea:	2300      	movs	r3, #0
 80047ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80047ee:	4b42      	ldr	r3, [pc, #264]	@ (80048f8 <xTaskResumeAll+0x118>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10b      	bne.n	800480e <xTaskResumeAll+0x2e>
	__asm volatile
 80047f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047fa:	f383 8811 	msr	BASEPRI, r3
 80047fe:	f3bf 8f6f 	isb	sy
 8004802:	f3bf 8f4f 	dsb	sy
 8004806:	603b      	str	r3, [r7, #0]
}
 8004808:	bf00      	nop
 800480a:	bf00      	nop
 800480c:	e7fd      	b.n	800480a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800480e:	f000 fd03 	bl	8005218 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004812:	4b39      	ldr	r3, [pc, #228]	@ (80048f8 <xTaskResumeAll+0x118>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	3b01      	subs	r3, #1
 8004818:	4a37      	ldr	r2, [pc, #220]	@ (80048f8 <xTaskResumeAll+0x118>)
 800481a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800481c:	4b36      	ldr	r3, [pc, #216]	@ (80048f8 <xTaskResumeAll+0x118>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d161      	bne.n	80048e8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004824:	4b35      	ldr	r3, [pc, #212]	@ (80048fc <xTaskResumeAll+0x11c>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d05d      	beq.n	80048e8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800482c:	e02e      	b.n	800488c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800482e:	4b34      	ldr	r3, [pc, #208]	@ (8004900 <xTaskResumeAll+0x120>)
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	3318      	adds	r3, #24
 800483a:	4618      	mov	r0, r3
 800483c:	f7ff fdc4 	bl	80043c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	3304      	adds	r3, #4
 8004844:	4618      	mov	r0, r3
 8004846:	f7ff fdbf 	bl	80043c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800484e:	2201      	movs	r2, #1
 8004850:	409a      	lsls	r2, r3
 8004852:	4b2c      	ldr	r3, [pc, #176]	@ (8004904 <xTaskResumeAll+0x124>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4313      	orrs	r3, r2
 8004858:	4a2a      	ldr	r2, [pc, #168]	@ (8004904 <xTaskResumeAll+0x124>)
 800485a:	6013      	str	r3, [r2, #0]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004860:	4613      	mov	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	4413      	add	r3, r2
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	4a27      	ldr	r2, [pc, #156]	@ (8004908 <xTaskResumeAll+0x128>)
 800486a:	441a      	add	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	3304      	adds	r3, #4
 8004870:	4619      	mov	r1, r3
 8004872:	4610      	mov	r0, r2
 8004874:	f7ff fd4b 	bl	800430e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800487c:	4b23      	ldr	r3, [pc, #140]	@ (800490c <xTaskResumeAll+0x12c>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004882:	429a      	cmp	r2, r3
 8004884:	d302      	bcc.n	800488c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004886:	4b22      	ldr	r3, [pc, #136]	@ (8004910 <xTaskResumeAll+0x130>)
 8004888:	2201      	movs	r2, #1
 800488a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800488c:	4b1c      	ldr	r3, [pc, #112]	@ (8004900 <xTaskResumeAll+0x120>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1cc      	bne.n	800482e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800489a:	f000 f9f9 	bl	8004c90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800489e:	4b1d      	ldr	r3, [pc, #116]	@ (8004914 <xTaskResumeAll+0x134>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d010      	beq.n	80048cc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80048aa:	f000 f837 	bl	800491c <xTaskIncrementTick>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d002      	beq.n	80048ba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80048b4:	4b16      	ldr	r3, [pc, #88]	@ (8004910 <xTaskResumeAll+0x130>)
 80048b6:	2201      	movs	r2, #1
 80048b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	3b01      	subs	r3, #1
 80048be:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1f1      	bne.n	80048aa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80048c6:	4b13      	ldr	r3, [pc, #76]	@ (8004914 <xTaskResumeAll+0x134>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80048cc:	4b10      	ldr	r3, [pc, #64]	@ (8004910 <xTaskResumeAll+0x130>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d009      	beq.n	80048e8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80048d4:	2301      	movs	r3, #1
 80048d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80048d8:	4b0f      	ldr	r3, [pc, #60]	@ (8004918 <xTaskResumeAll+0x138>)
 80048da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048de:	601a      	str	r2, [r3, #0]
 80048e0:	f3bf 8f4f 	dsb	sy
 80048e4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80048e8:	f000 fcc8 	bl	800527c <vPortExitCritical>

	return xAlreadyYielded;
 80048ec:	68bb      	ldr	r3, [r7, #8]
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	20000414 	.word	0x20000414
 80048fc:	200003ec 	.word	0x200003ec
 8004900:	200003ac 	.word	0x200003ac
 8004904:	200003f4 	.word	0x200003f4
 8004908:	200002f0 	.word	0x200002f0
 800490c:	200002ec 	.word	0x200002ec
 8004910:	20000400 	.word	0x20000400
 8004914:	200003fc 	.word	0x200003fc
 8004918:	e000ed04 	.word	0xe000ed04

0800491c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004922:	2300      	movs	r3, #0
 8004924:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004926:	4b4f      	ldr	r3, [pc, #316]	@ (8004a64 <xTaskIncrementTick+0x148>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	f040 808f 	bne.w	8004a4e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004930:	4b4d      	ldr	r3, [pc, #308]	@ (8004a68 <xTaskIncrementTick+0x14c>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	3301      	adds	r3, #1
 8004936:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004938:	4a4b      	ldr	r2, [pc, #300]	@ (8004a68 <xTaskIncrementTick+0x14c>)
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d121      	bne.n	8004988 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004944:	4b49      	ldr	r3, [pc, #292]	@ (8004a6c <xTaskIncrementTick+0x150>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00b      	beq.n	8004966 <xTaskIncrementTick+0x4a>
	__asm volatile
 800494e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004952:	f383 8811 	msr	BASEPRI, r3
 8004956:	f3bf 8f6f 	isb	sy
 800495a:	f3bf 8f4f 	dsb	sy
 800495e:	603b      	str	r3, [r7, #0]
}
 8004960:	bf00      	nop
 8004962:	bf00      	nop
 8004964:	e7fd      	b.n	8004962 <xTaskIncrementTick+0x46>
 8004966:	4b41      	ldr	r3, [pc, #260]	@ (8004a6c <xTaskIncrementTick+0x150>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	60fb      	str	r3, [r7, #12]
 800496c:	4b40      	ldr	r3, [pc, #256]	@ (8004a70 <xTaskIncrementTick+0x154>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a3e      	ldr	r2, [pc, #248]	@ (8004a6c <xTaskIncrementTick+0x150>)
 8004972:	6013      	str	r3, [r2, #0]
 8004974:	4a3e      	ldr	r2, [pc, #248]	@ (8004a70 <xTaskIncrementTick+0x154>)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6013      	str	r3, [r2, #0]
 800497a:	4b3e      	ldr	r3, [pc, #248]	@ (8004a74 <xTaskIncrementTick+0x158>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	3301      	adds	r3, #1
 8004980:	4a3c      	ldr	r2, [pc, #240]	@ (8004a74 <xTaskIncrementTick+0x158>)
 8004982:	6013      	str	r3, [r2, #0]
 8004984:	f000 f984 	bl	8004c90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004988:	4b3b      	ldr	r3, [pc, #236]	@ (8004a78 <xTaskIncrementTick+0x15c>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	429a      	cmp	r2, r3
 8004990:	d348      	bcc.n	8004a24 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004992:	4b36      	ldr	r3, [pc, #216]	@ (8004a6c <xTaskIncrementTick+0x150>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d104      	bne.n	80049a6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800499c:	4b36      	ldr	r3, [pc, #216]	@ (8004a78 <xTaskIncrementTick+0x15c>)
 800499e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80049a2:	601a      	str	r2, [r3, #0]
					break;
 80049a4:	e03e      	b.n	8004a24 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049a6:	4b31      	ldr	r3, [pc, #196]	@ (8004a6c <xTaskIncrementTick+0x150>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d203      	bcs.n	80049c6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80049be:	4a2e      	ldr	r2, [pc, #184]	@ (8004a78 <xTaskIncrementTick+0x15c>)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80049c4:	e02e      	b.n	8004a24 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	3304      	adds	r3, #4
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7ff fcfc 	bl	80043c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d004      	beq.n	80049e2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	3318      	adds	r3, #24
 80049dc:	4618      	mov	r0, r3
 80049de:	f7ff fcf3 	bl	80043c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e6:	2201      	movs	r2, #1
 80049e8:	409a      	lsls	r2, r3
 80049ea:	4b24      	ldr	r3, [pc, #144]	@ (8004a7c <xTaskIncrementTick+0x160>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	4a22      	ldr	r2, [pc, #136]	@ (8004a7c <xTaskIncrementTick+0x160>)
 80049f2:	6013      	str	r3, [r2, #0]
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049f8:	4613      	mov	r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	4413      	add	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4a1f      	ldr	r2, [pc, #124]	@ (8004a80 <xTaskIncrementTick+0x164>)
 8004a02:	441a      	add	r2, r3
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	3304      	adds	r3, #4
 8004a08:	4619      	mov	r1, r3
 8004a0a:	4610      	mov	r0, r2
 8004a0c:	f7ff fc7f 	bl	800430e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a14:	4b1b      	ldr	r3, [pc, #108]	@ (8004a84 <xTaskIncrementTick+0x168>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d3b9      	bcc.n	8004992 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a22:	e7b6      	b.n	8004992 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a24:	4b17      	ldr	r3, [pc, #92]	@ (8004a84 <xTaskIncrementTick+0x168>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a2a:	4915      	ldr	r1, [pc, #84]	@ (8004a80 <xTaskIncrementTick+0x164>)
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	440b      	add	r3, r1
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d901      	bls.n	8004a40 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004a40:	4b11      	ldr	r3, [pc, #68]	@ (8004a88 <xTaskIncrementTick+0x16c>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d007      	beq.n	8004a58 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	617b      	str	r3, [r7, #20]
 8004a4c:	e004      	b.n	8004a58 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8004a8c <xTaskIncrementTick+0x170>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	3301      	adds	r3, #1
 8004a54:	4a0d      	ldr	r2, [pc, #52]	@ (8004a8c <xTaskIncrementTick+0x170>)
 8004a56:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004a58:	697b      	ldr	r3, [r7, #20]
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3718      	adds	r7, #24
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	20000414 	.word	0x20000414
 8004a68:	200003f0 	.word	0x200003f0
 8004a6c:	200003a4 	.word	0x200003a4
 8004a70:	200003a8 	.word	0x200003a8
 8004a74:	20000404 	.word	0x20000404
 8004a78:	2000040c 	.word	0x2000040c
 8004a7c:	200003f4 	.word	0x200003f4
 8004a80:	200002f0 	.word	0x200002f0
 8004a84:	200002ec 	.word	0x200002ec
 8004a88:	20000400 	.word	0x20000400
 8004a8c:	200003fc 	.word	0x200003fc

08004a90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a90:	b480      	push	{r7}
 8004a92:	b087      	sub	sp, #28
 8004a94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a96:	4b2a      	ldr	r3, [pc, #168]	@ (8004b40 <vTaskSwitchContext+0xb0>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a9e:	4b29      	ldr	r3, [pc, #164]	@ (8004b44 <vTaskSwitchContext+0xb4>)
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004aa4:	e045      	b.n	8004b32 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8004aa6:	4b27      	ldr	r3, [pc, #156]	@ (8004b44 <vTaskSwitchContext+0xb4>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004aac:	4b26      	ldr	r3, [pc, #152]	@ (8004b48 <vTaskSwitchContext+0xb8>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	fab3 f383 	clz	r3, r3
 8004ab8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004aba:	7afb      	ldrb	r3, [r7, #11]
 8004abc:	f1c3 031f 	rsb	r3, r3, #31
 8004ac0:	617b      	str	r3, [r7, #20]
 8004ac2:	4922      	ldr	r1, [pc, #136]	@ (8004b4c <vTaskSwitchContext+0xbc>)
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	4413      	add	r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	440b      	add	r3, r1
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10b      	bne.n	8004aee <vTaskSwitchContext+0x5e>
	__asm volatile
 8004ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ada:	f383 8811 	msr	BASEPRI, r3
 8004ade:	f3bf 8f6f 	isb	sy
 8004ae2:	f3bf 8f4f 	dsb	sy
 8004ae6:	607b      	str	r3, [r7, #4]
}
 8004ae8:	bf00      	nop
 8004aea:	bf00      	nop
 8004aec:	e7fd      	b.n	8004aea <vTaskSwitchContext+0x5a>
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	4613      	mov	r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	4413      	add	r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	4a14      	ldr	r2, [pc, #80]	@ (8004b4c <vTaskSwitchContext+0xbc>)
 8004afa:	4413      	add	r3, r2
 8004afc:	613b      	str	r3, [r7, #16]
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	605a      	str	r2, [r3, #4]
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	685a      	ldr	r2, [r3, #4]
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	3308      	adds	r3, #8
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d104      	bne.n	8004b1e <vTaskSwitchContext+0x8e>
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	685a      	ldr	r2, [r3, #4]
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	605a      	str	r2, [r3, #4]
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	4a0a      	ldr	r2, [pc, #40]	@ (8004b50 <vTaskSwitchContext+0xc0>)
 8004b26:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004b28:	4b09      	ldr	r3, [pc, #36]	@ (8004b50 <vTaskSwitchContext+0xc0>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	334c      	adds	r3, #76	@ 0x4c
 8004b2e:	4a09      	ldr	r2, [pc, #36]	@ (8004b54 <vTaskSwitchContext+0xc4>)
 8004b30:	6013      	str	r3, [r2, #0]
}
 8004b32:	bf00      	nop
 8004b34:	371c      	adds	r7, #28
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	20000414 	.word	0x20000414
 8004b44:	20000400 	.word	0x20000400
 8004b48:	200003f4 	.word	0x200003f4
 8004b4c:	200002f0 	.word	0x200002f0
 8004b50:	200002ec 	.word	0x200002ec
 8004b54:	20000020 	.word	0x20000020

08004b58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004b60:	f000 f852 	bl	8004c08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b64:	4b06      	ldr	r3, [pc, #24]	@ (8004b80 <prvIdleTask+0x28>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d9f9      	bls.n	8004b60 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004b6c:	4b05      	ldr	r3, [pc, #20]	@ (8004b84 <prvIdleTask+0x2c>)
 8004b6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b72:	601a      	str	r2, [r3, #0]
 8004b74:	f3bf 8f4f 	dsb	sy
 8004b78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004b7c:	e7f0      	b.n	8004b60 <prvIdleTask+0x8>
 8004b7e:	bf00      	nop
 8004b80:	200002f0 	.word	0x200002f0
 8004b84:	e000ed04 	.word	0xe000ed04

08004b88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b8e:	2300      	movs	r3, #0
 8004b90:	607b      	str	r3, [r7, #4]
 8004b92:	e00c      	b.n	8004bae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	4613      	mov	r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4413      	add	r3, r2
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	4a12      	ldr	r2, [pc, #72]	@ (8004be8 <prvInitialiseTaskLists+0x60>)
 8004ba0:	4413      	add	r3, r2
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7ff fb86 	bl	80042b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	3301      	adds	r3, #1
 8004bac:	607b      	str	r3, [r7, #4]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2b06      	cmp	r3, #6
 8004bb2:	d9ef      	bls.n	8004b94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004bb4:	480d      	ldr	r0, [pc, #52]	@ (8004bec <prvInitialiseTaskLists+0x64>)
 8004bb6:	f7ff fb7d 	bl	80042b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004bba:	480d      	ldr	r0, [pc, #52]	@ (8004bf0 <prvInitialiseTaskLists+0x68>)
 8004bbc:	f7ff fb7a 	bl	80042b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004bc0:	480c      	ldr	r0, [pc, #48]	@ (8004bf4 <prvInitialiseTaskLists+0x6c>)
 8004bc2:	f7ff fb77 	bl	80042b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004bc6:	480c      	ldr	r0, [pc, #48]	@ (8004bf8 <prvInitialiseTaskLists+0x70>)
 8004bc8:	f7ff fb74 	bl	80042b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004bcc:	480b      	ldr	r0, [pc, #44]	@ (8004bfc <prvInitialiseTaskLists+0x74>)
 8004bce:	f7ff fb71 	bl	80042b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8004c00 <prvInitialiseTaskLists+0x78>)
 8004bd4:	4a05      	ldr	r2, [pc, #20]	@ (8004bec <prvInitialiseTaskLists+0x64>)
 8004bd6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8004c04 <prvInitialiseTaskLists+0x7c>)
 8004bda:	4a05      	ldr	r2, [pc, #20]	@ (8004bf0 <prvInitialiseTaskLists+0x68>)
 8004bdc:	601a      	str	r2, [r3, #0]
}
 8004bde:	bf00      	nop
 8004be0:	3708      	adds	r7, #8
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	200002f0 	.word	0x200002f0
 8004bec:	2000037c 	.word	0x2000037c
 8004bf0:	20000390 	.word	0x20000390
 8004bf4:	200003ac 	.word	0x200003ac
 8004bf8:	200003c0 	.word	0x200003c0
 8004bfc:	200003d8 	.word	0x200003d8
 8004c00:	200003a4 	.word	0x200003a4
 8004c04:	200003a8 	.word	0x200003a8

08004c08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c0e:	e019      	b.n	8004c44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004c10:	f000 fb02 	bl	8005218 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c14:	4b10      	ldr	r3, [pc, #64]	@ (8004c58 <prvCheckTasksWaitingTermination+0x50>)
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	3304      	adds	r3, #4
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7ff fbd1 	bl	80043c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c26:	4b0d      	ldr	r3, [pc, #52]	@ (8004c5c <prvCheckTasksWaitingTermination+0x54>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	4a0b      	ldr	r2, [pc, #44]	@ (8004c5c <prvCheckTasksWaitingTermination+0x54>)
 8004c2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c30:	4b0b      	ldr	r3, [pc, #44]	@ (8004c60 <prvCheckTasksWaitingTermination+0x58>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	3b01      	subs	r3, #1
 8004c36:	4a0a      	ldr	r2, [pc, #40]	@ (8004c60 <prvCheckTasksWaitingTermination+0x58>)
 8004c38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c3a:	f000 fb1f 	bl	800527c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f810 	bl	8004c64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c44:	4b06      	ldr	r3, [pc, #24]	@ (8004c60 <prvCheckTasksWaitingTermination+0x58>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1e1      	bne.n	8004c10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004c4c:	bf00      	nop
 8004c4e:	bf00      	nop
 8004c50:	3708      	adds	r7, #8
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	200003c0 	.word	0x200003c0
 8004c5c:	200003ec 	.word	0x200003ec
 8004c60:	200003d4 	.word	0x200003d4

08004c64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	334c      	adds	r3, #76	@ 0x4c
 8004c70:	4618      	mov	r0, r3
 8004c72:	f001 fe51 	bl	8006918 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 fc7a 	bl	8005574 <vPortFree>
			vPortFree( pxTCB );
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 fc77 	bl	8005574 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004c86:	bf00      	nop
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
	...

08004c90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c96:	4b0c      	ldr	r3, [pc, #48]	@ (8004cc8 <prvResetNextTaskUnblockTime+0x38>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d104      	bne.n	8004caa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8004ccc <prvResetNextTaskUnblockTime+0x3c>)
 8004ca2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004ca6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004ca8:	e008      	b.n	8004cbc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004caa:	4b07      	ldr	r3, [pc, #28]	@ (8004cc8 <prvResetNextTaskUnblockTime+0x38>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	4a04      	ldr	r2, [pc, #16]	@ (8004ccc <prvResetNextTaskUnblockTime+0x3c>)
 8004cba:	6013      	str	r3, [r2, #0]
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr
 8004cc8:	200003a4 	.word	0x200003a4
 8004ccc:	2000040c 	.word	0x2000040c

08004cd0 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8004cda:	f000 fa9d 	bl	8005218 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8004cde:	4b20      	ldr	r3, [pc, #128]	@ (8004d60 <ulTaskNotifyTake+0x90>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d113      	bne.n	8004d12 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8004cea:	4b1d      	ldr	r3, [pc, #116]	@ (8004d60 <ulTaskNotifyTake+0x90>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00b      	beq.n	8004d12 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004cfa:	2101      	movs	r1, #1
 8004cfc:	6838      	ldr	r0, [r7, #0]
 8004cfe:	f000 f8f5 	bl	8004eec <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8004d02:	4b18      	ldr	r3, [pc, #96]	@ (8004d64 <ulTaskNotifyTake+0x94>)
 8004d04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d08:	601a      	str	r2, [r3, #0]
 8004d0a:	f3bf 8f4f 	dsb	sy
 8004d0e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004d12:	f000 fab3 	bl	800527c <vPortExitCritical>

		taskENTER_CRITICAL();
 8004d16:	f000 fa7f 	bl	8005218 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8004d1a:	4b11      	ldr	r3, [pc, #68]	@ (8004d60 <ulTaskNotifyTake+0x90>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d22:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00e      	beq.n	8004d48 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d005      	beq.n	8004d3c <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8004d30:	4b0b      	ldr	r3, [pc, #44]	@ (8004d60 <ulTaskNotifyTake+0x90>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8004d3a:	e005      	b.n	8004d48 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8004d3c:	4b08      	ldr	r3, [pc, #32]	@ (8004d60 <ulTaskNotifyTake+0x90>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	3a01      	subs	r2, #1
 8004d44:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d48:	4b05      	ldr	r3, [pc, #20]	@ (8004d60 <ulTaskNotifyTake+0x90>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 8004d52:	f000 fa93 	bl	800527c <vPortExitCritical>

		return ulReturn;
 8004d56:	68fb      	ldr	r3, [r7, #12]
	}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	200002ec 	.word	0x200002ec
 8004d64:	e000ed04 	.word	0xe000ed04

08004d68 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b08a      	sub	sp, #40	@ 0x28
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	603b      	str	r3, [r7, #0]
 8004d74:	4613      	mov	r3, r2
 8004d76:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10b      	bne.n	8004d9a <xTaskGenericNotify+0x32>
	__asm volatile
 8004d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d86:	f383 8811 	msr	BASEPRI, r3
 8004d8a:	f3bf 8f6f 	isb	sy
 8004d8e:	f3bf 8f4f 	dsb	sy
 8004d92:	61bb      	str	r3, [r7, #24]
}
 8004d94:	bf00      	nop
 8004d96:	bf00      	nop
 8004d98:	e7fd      	b.n	8004d96 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8004d9e:	f000 fa3b 	bl	8005218 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d004      	beq.n	8004db2 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004da8:	6a3b      	ldr	r3, [r7, #32]
 8004daa:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004db2:	6a3b      	ldr	r3, [r7, #32]
 8004db4:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8004db8:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004dba:	6a3b      	ldr	r3, [r7, #32]
 8004dbc:	2202      	movs	r2, #2
 8004dbe:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 8004dc2:	79fb      	ldrb	r3, [r7, #7]
 8004dc4:	2b04      	cmp	r3, #4
 8004dc6:	d82e      	bhi.n	8004e26 <xTaskGenericNotify+0xbe>
 8004dc8:	a201      	add	r2, pc, #4	@ (adr r2, 8004dd0 <xTaskGenericNotify+0x68>)
 8004dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dce:	bf00      	nop
 8004dd0:	08004e4b 	.word	0x08004e4b
 8004dd4:	08004de5 	.word	0x08004de5
 8004dd8:	08004df7 	.word	0x08004df7
 8004ddc:	08004e07 	.word	0x08004e07
 8004de0:	08004e11 	.word	0x08004e11
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8004de4:	6a3b      	ldr	r3, [r7, #32]
 8004de6:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	431a      	orrs	r2, r3
 8004dee:	6a3b      	ldr	r3, [r7, #32]
 8004df0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8004df4:	e02c      	b.n	8004e50 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8004df6:	6a3b      	ldr	r3, [r7, #32]
 8004df8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004dfc:	1c5a      	adds	r2, r3, #1
 8004dfe:	6a3b      	ldr	r3, [r7, #32]
 8004e00:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8004e04:	e024      	b.n	8004e50 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8004e06:	6a3b      	ldr	r3, [r7, #32]
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8004e0e:	e01f      	b.n	8004e50 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004e10:	7ffb      	ldrb	r3, [r7, #31]
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d004      	beq.n	8004e20 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8004e16:	6a3b      	ldr	r3, [r7, #32]
 8004e18:	68ba      	ldr	r2, [r7, #8]
 8004e1a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8004e1e:	e017      	b.n	8004e50 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 8004e20:	2300      	movs	r3, #0
 8004e22:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8004e24:	e014      	b.n	8004e50 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8004e26:	6a3b      	ldr	r3, [r7, #32]
 8004e28:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e30:	d00d      	beq.n	8004e4e <xTaskGenericNotify+0xe6>
	__asm volatile
 8004e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e36:	f383 8811 	msr	BASEPRI, r3
 8004e3a:	f3bf 8f6f 	isb	sy
 8004e3e:	f3bf 8f4f 	dsb	sy
 8004e42:	617b      	str	r3, [r7, #20]
}
 8004e44:	bf00      	nop
 8004e46:	bf00      	nop
 8004e48:	e7fd      	b.n	8004e46 <xTaskGenericNotify+0xde>
					break;
 8004e4a:	bf00      	nop
 8004e4c:	e000      	b.n	8004e50 <xTaskGenericNotify+0xe8>

					break;
 8004e4e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004e50:	7ffb      	ldrb	r3, [r7, #31]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d13a      	bne.n	8004ecc <xTaskGenericNotify+0x164>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e56:	6a3b      	ldr	r3, [r7, #32]
 8004e58:	3304      	adds	r3, #4
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7ff fab4 	bl	80043c8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8004e60:	6a3b      	ldr	r3, [r7, #32]
 8004e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e64:	2201      	movs	r2, #1
 8004e66:	409a      	lsls	r2, r3
 8004e68:	4b1c      	ldr	r3, [pc, #112]	@ (8004edc <xTaskGenericNotify+0x174>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	4a1b      	ldr	r2, [pc, #108]	@ (8004edc <xTaskGenericNotify+0x174>)
 8004e70:	6013      	str	r3, [r2, #0]
 8004e72:	6a3b      	ldr	r3, [r7, #32]
 8004e74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e76:	4613      	mov	r3, r2
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	4413      	add	r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	4a18      	ldr	r2, [pc, #96]	@ (8004ee0 <xTaskGenericNotify+0x178>)
 8004e80:	441a      	add	r2, r3
 8004e82:	6a3b      	ldr	r3, [r7, #32]
 8004e84:	3304      	adds	r3, #4
 8004e86:	4619      	mov	r1, r3
 8004e88:	4610      	mov	r0, r2
 8004e8a:	f7ff fa40 	bl	800430e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004e8e:	6a3b      	ldr	r3, [r7, #32]
 8004e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00b      	beq.n	8004eae <xTaskGenericNotify+0x146>
	__asm volatile
 8004e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e9a:	f383 8811 	msr	BASEPRI, r3
 8004e9e:	f3bf 8f6f 	isb	sy
 8004ea2:	f3bf 8f4f 	dsb	sy
 8004ea6:	613b      	str	r3, [r7, #16]
}
 8004ea8:	bf00      	nop
 8004eaa:	bf00      	nop
 8004eac:	e7fd      	b.n	8004eaa <xTaskGenericNotify+0x142>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004eae:	6a3b      	ldr	r3, [r7, #32]
 8004eb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8004ee4 <xTaskGenericNotify+0x17c>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d907      	bls.n	8004ecc <xTaskGenericNotify+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8004ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8004ee8 <xTaskGenericNotify+0x180>)
 8004ebe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	f3bf 8f4f 	dsb	sy
 8004ec8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004ecc:	f000 f9d6 	bl	800527c <vPortExitCritical>

		return xReturn;
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3728      	adds	r7, #40	@ 0x28
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	200003f4 	.word	0x200003f4
 8004ee0:	200002f0 	.word	0x200002f0
 8004ee4:	200002ec 	.word	0x200002ec
 8004ee8:	e000ed04 	.word	0xe000ed04

08004eec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004ef6:	4b29      	ldr	r3, [pc, #164]	@ (8004f9c <prvAddCurrentTaskToDelayedList+0xb0>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004efc:	4b28      	ldr	r3, [pc, #160]	@ (8004fa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	3304      	adds	r3, #4
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7ff fa60 	bl	80043c8 <uxListRemove>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10b      	bne.n	8004f26 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004f0e:	4b24      	ldr	r3, [pc, #144]	@ (8004fa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f14:	2201      	movs	r2, #1
 8004f16:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1a:	43da      	mvns	r2, r3
 8004f1c:	4b21      	ldr	r3, [pc, #132]	@ (8004fa4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4013      	ands	r3, r2
 8004f22:	4a20      	ldr	r2, [pc, #128]	@ (8004fa4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004f24:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f2c:	d10a      	bne.n	8004f44 <prvAddCurrentTaskToDelayedList+0x58>
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d007      	beq.n	8004f44 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f34:	4b1a      	ldr	r3, [pc, #104]	@ (8004fa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	3304      	adds	r3, #4
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	481a      	ldr	r0, [pc, #104]	@ (8004fa8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004f3e:	f7ff f9e6 	bl	800430e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004f42:	e026      	b.n	8004f92 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4413      	add	r3, r2
 8004f4a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004f4c:	4b14      	ldr	r3, [pc, #80]	@ (8004fa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d209      	bcs.n	8004f70 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f5c:	4b13      	ldr	r3, [pc, #76]	@ (8004fac <prvAddCurrentTaskToDelayedList+0xc0>)
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	4b0f      	ldr	r3, [pc, #60]	@ (8004fa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	3304      	adds	r3, #4
 8004f66:	4619      	mov	r1, r3
 8004f68:	4610      	mov	r0, r2
 8004f6a:	f7ff f9f4 	bl	8004356 <vListInsert>
}
 8004f6e:	e010      	b.n	8004f92 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f70:	4b0f      	ldr	r3, [pc, #60]	@ (8004fb0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	4b0a      	ldr	r3, [pc, #40]	@ (8004fa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	3304      	adds	r3, #4
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	4610      	mov	r0, r2
 8004f7e:	f7ff f9ea 	bl	8004356 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004f82:	4b0c      	ldr	r3, [pc, #48]	@ (8004fb4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d202      	bcs.n	8004f92 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004f8c:	4a09      	ldr	r2, [pc, #36]	@ (8004fb4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	6013      	str	r3, [r2, #0]
}
 8004f92:	bf00      	nop
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	200003f0 	.word	0x200003f0
 8004fa0:	200002ec 	.word	0x200002ec
 8004fa4:	200003f4 	.word	0x200003f4
 8004fa8:	200003d8 	.word	0x200003d8
 8004fac:	200003a8 	.word	0x200003a8
 8004fb0:	200003a4 	.word	0x200003a4
 8004fb4:	2000040c 	.word	0x2000040c

08004fb8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	3b04      	subs	r3, #4
 8004fc8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004fd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	3b04      	subs	r3, #4
 8004fd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	f023 0201 	bic.w	r2, r3, #1
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	3b04      	subs	r3, #4
 8004fe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004fe8:	4a0c      	ldr	r2, [pc, #48]	@ (800501c <pxPortInitialiseStack+0x64>)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	3b14      	subs	r3, #20
 8004ff2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	3b04      	subs	r3, #4
 8004ffe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f06f 0202 	mvn.w	r2, #2
 8005006:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	3b20      	subs	r3, #32
 800500c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800500e:	68fb      	ldr	r3, [r7, #12]
}
 8005010:	4618      	mov	r0, r3
 8005012:	3714      	adds	r7, #20
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr
 800501c:	08005021 	.word	0x08005021

08005020 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005026:	2300      	movs	r3, #0
 8005028:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800502a:	4b13      	ldr	r3, [pc, #76]	@ (8005078 <prvTaskExitError+0x58>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005032:	d00b      	beq.n	800504c <prvTaskExitError+0x2c>
	__asm volatile
 8005034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005038:	f383 8811 	msr	BASEPRI, r3
 800503c:	f3bf 8f6f 	isb	sy
 8005040:	f3bf 8f4f 	dsb	sy
 8005044:	60fb      	str	r3, [r7, #12]
}
 8005046:	bf00      	nop
 8005048:	bf00      	nop
 800504a:	e7fd      	b.n	8005048 <prvTaskExitError+0x28>
	__asm volatile
 800504c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005050:	f383 8811 	msr	BASEPRI, r3
 8005054:	f3bf 8f6f 	isb	sy
 8005058:	f3bf 8f4f 	dsb	sy
 800505c:	60bb      	str	r3, [r7, #8]
}
 800505e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005060:	bf00      	nop
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d0fc      	beq.n	8005062 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005068:	bf00      	nop
 800506a:	bf00      	nop
 800506c:	3714      	adds	r7, #20
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	20000010 	.word	0x20000010
 800507c:	00000000 	.word	0x00000000

08005080 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005080:	4b07      	ldr	r3, [pc, #28]	@ (80050a0 <pxCurrentTCBConst2>)
 8005082:	6819      	ldr	r1, [r3, #0]
 8005084:	6808      	ldr	r0, [r1, #0]
 8005086:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800508a:	f380 8809 	msr	PSP, r0
 800508e:	f3bf 8f6f 	isb	sy
 8005092:	f04f 0000 	mov.w	r0, #0
 8005096:	f380 8811 	msr	BASEPRI, r0
 800509a:	4770      	bx	lr
 800509c:	f3af 8000 	nop.w

080050a0 <pxCurrentTCBConst2>:
 80050a0:	200002ec 	.word	0x200002ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80050a4:	bf00      	nop
 80050a6:	bf00      	nop

080050a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80050a8:	4808      	ldr	r0, [pc, #32]	@ (80050cc <prvPortStartFirstTask+0x24>)
 80050aa:	6800      	ldr	r0, [r0, #0]
 80050ac:	6800      	ldr	r0, [r0, #0]
 80050ae:	f380 8808 	msr	MSP, r0
 80050b2:	f04f 0000 	mov.w	r0, #0
 80050b6:	f380 8814 	msr	CONTROL, r0
 80050ba:	b662      	cpsie	i
 80050bc:	b661      	cpsie	f
 80050be:	f3bf 8f4f 	dsb	sy
 80050c2:	f3bf 8f6f 	isb	sy
 80050c6:	df00      	svc	0
 80050c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80050ca:	bf00      	nop
 80050cc:	e000ed08 	.word	0xe000ed08

080050d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80050d6:	4b47      	ldr	r3, [pc, #284]	@ (80051f4 <xPortStartScheduler+0x124>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a47      	ldr	r2, [pc, #284]	@ (80051f8 <xPortStartScheduler+0x128>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d10b      	bne.n	80050f8 <xPortStartScheduler+0x28>
	__asm volatile
 80050e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e4:	f383 8811 	msr	BASEPRI, r3
 80050e8:	f3bf 8f6f 	isb	sy
 80050ec:	f3bf 8f4f 	dsb	sy
 80050f0:	613b      	str	r3, [r7, #16]
}
 80050f2:	bf00      	nop
 80050f4:	bf00      	nop
 80050f6:	e7fd      	b.n	80050f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80050f8:	4b3e      	ldr	r3, [pc, #248]	@ (80051f4 <xPortStartScheduler+0x124>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a3f      	ldr	r2, [pc, #252]	@ (80051fc <xPortStartScheduler+0x12c>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d10b      	bne.n	800511a <xPortStartScheduler+0x4a>
	__asm volatile
 8005102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005106:	f383 8811 	msr	BASEPRI, r3
 800510a:	f3bf 8f6f 	isb	sy
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	60fb      	str	r3, [r7, #12]
}
 8005114:	bf00      	nop
 8005116:	bf00      	nop
 8005118:	e7fd      	b.n	8005116 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800511a:	4b39      	ldr	r3, [pc, #228]	@ (8005200 <xPortStartScheduler+0x130>)
 800511c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	b2db      	uxtb	r3, r3
 8005124:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	22ff      	movs	r2, #255	@ 0xff
 800512a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	b2db      	uxtb	r3, r3
 8005132:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005134:	78fb      	ldrb	r3, [r7, #3]
 8005136:	b2db      	uxtb	r3, r3
 8005138:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800513c:	b2da      	uxtb	r2, r3
 800513e:	4b31      	ldr	r3, [pc, #196]	@ (8005204 <xPortStartScheduler+0x134>)
 8005140:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005142:	4b31      	ldr	r3, [pc, #196]	@ (8005208 <xPortStartScheduler+0x138>)
 8005144:	2207      	movs	r2, #7
 8005146:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005148:	e009      	b.n	800515e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800514a:	4b2f      	ldr	r3, [pc, #188]	@ (8005208 <xPortStartScheduler+0x138>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	3b01      	subs	r3, #1
 8005150:	4a2d      	ldr	r2, [pc, #180]	@ (8005208 <xPortStartScheduler+0x138>)
 8005152:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005154:	78fb      	ldrb	r3, [r7, #3]
 8005156:	b2db      	uxtb	r3, r3
 8005158:	005b      	lsls	r3, r3, #1
 800515a:	b2db      	uxtb	r3, r3
 800515c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800515e:	78fb      	ldrb	r3, [r7, #3]
 8005160:	b2db      	uxtb	r3, r3
 8005162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005166:	2b80      	cmp	r3, #128	@ 0x80
 8005168:	d0ef      	beq.n	800514a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800516a:	4b27      	ldr	r3, [pc, #156]	@ (8005208 <xPortStartScheduler+0x138>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f1c3 0307 	rsb	r3, r3, #7
 8005172:	2b04      	cmp	r3, #4
 8005174:	d00b      	beq.n	800518e <xPortStartScheduler+0xbe>
	__asm volatile
 8005176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800517a:	f383 8811 	msr	BASEPRI, r3
 800517e:	f3bf 8f6f 	isb	sy
 8005182:	f3bf 8f4f 	dsb	sy
 8005186:	60bb      	str	r3, [r7, #8]
}
 8005188:	bf00      	nop
 800518a:	bf00      	nop
 800518c:	e7fd      	b.n	800518a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800518e:	4b1e      	ldr	r3, [pc, #120]	@ (8005208 <xPortStartScheduler+0x138>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	021b      	lsls	r3, r3, #8
 8005194:	4a1c      	ldr	r2, [pc, #112]	@ (8005208 <xPortStartScheduler+0x138>)
 8005196:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005198:	4b1b      	ldr	r3, [pc, #108]	@ (8005208 <xPortStartScheduler+0x138>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80051a0:	4a19      	ldr	r2, [pc, #100]	@ (8005208 <xPortStartScheduler+0x138>)
 80051a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	b2da      	uxtb	r2, r3
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80051ac:	4b17      	ldr	r3, [pc, #92]	@ (800520c <xPortStartScheduler+0x13c>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a16      	ldr	r2, [pc, #88]	@ (800520c <xPortStartScheduler+0x13c>)
 80051b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80051b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80051b8:	4b14      	ldr	r3, [pc, #80]	@ (800520c <xPortStartScheduler+0x13c>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a13      	ldr	r2, [pc, #76]	@ (800520c <xPortStartScheduler+0x13c>)
 80051be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80051c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80051c4:	f000 f8da 	bl	800537c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80051c8:	4b11      	ldr	r3, [pc, #68]	@ (8005210 <xPortStartScheduler+0x140>)
 80051ca:	2200      	movs	r2, #0
 80051cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80051ce:	f000 f8f9 	bl	80053c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80051d2:	4b10      	ldr	r3, [pc, #64]	@ (8005214 <xPortStartScheduler+0x144>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a0f      	ldr	r2, [pc, #60]	@ (8005214 <xPortStartScheduler+0x144>)
 80051d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80051dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80051de:	f7ff ff63 	bl	80050a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80051e2:	f7ff fc55 	bl	8004a90 <vTaskSwitchContext>
	prvTaskExitError();
 80051e6:	f7ff ff1b 	bl	8005020 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3718      	adds	r7, #24
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	e000ed00 	.word	0xe000ed00
 80051f8:	410fc271 	.word	0x410fc271
 80051fc:	410fc270 	.word	0x410fc270
 8005200:	e000e400 	.word	0xe000e400
 8005204:	20000418 	.word	0x20000418
 8005208:	2000041c 	.word	0x2000041c
 800520c:	e000ed20 	.word	0xe000ed20
 8005210:	20000010 	.word	0x20000010
 8005214:	e000ef34 	.word	0xe000ef34

08005218 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
	__asm volatile
 800521e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005222:	f383 8811 	msr	BASEPRI, r3
 8005226:	f3bf 8f6f 	isb	sy
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	607b      	str	r3, [r7, #4]
}
 8005230:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005232:	4b10      	ldr	r3, [pc, #64]	@ (8005274 <vPortEnterCritical+0x5c>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	3301      	adds	r3, #1
 8005238:	4a0e      	ldr	r2, [pc, #56]	@ (8005274 <vPortEnterCritical+0x5c>)
 800523a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800523c:	4b0d      	ldr	r3, [pc, #52]	@ (8005274 <vPortEnterCritical+0x5c>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d110      	bne.n	8005266 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005244:	4b0c      	ldr	r3, [pc, #48]	@ (8005278 <vPortEnterCritical+0x60>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00b      	beq.n	8005266 <vPortEnterCritical+0x4e>
	__asm volatile
 800524e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005252:	f383 8811 	msr	BASEPRI, r3
 8005256:	f3bf 8f6f 	isb	sy
 800525a:	f3bf 8f4f 	dsb	sy
 800525e:	603b      	str	r3, [r7, #0]
}
 8005260:	bf00      	nop
 8005262:	bf00      	nop
 8005264:	e7fd      	b.n	8005262 <vPortEnterCritical+0x4a>
	}
}
 8005266:	bf00      	nop
 8005268:	370c      	adds	r7, #12
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	20000010 	.word	0x20000010
 8005278:	e000ed04 	.word	0xe000ed04

0800527c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005282:	4b12      	ldr	r3, [pc, #72]	@ (80052cc <vPortExitCritical+0x50>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10b      	bne.n	80052a2 <vPortExitCritical+0x26>
	__asm volatile
 800528a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800528e:	f383 8811 	msr	BASEPRI, r3
 8005292:	f3bf 8f6f 	isb	sy
 8005296:	f3bf 8f4f 	dsb	sy
 800529a:	607b      	str	r3, [r7, #4]
}
 800529c:	bf00      	nop
 800529e:	bf00      	nop
 80052a0:	e7fd      	b.n	800529e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80052a2:	4b0a      	ldr	r3, [pc, #40]	@ (80052cc <vPortExitCritical+0x50>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	3b01      	subs	r3, #1
 80052a8:	4a08      	ldr	r2, [pc, #32]	@ (80052cc <vPortExitCritical+0x50>)
 80052aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80052ac:	4b07      	ldr	r3, [pc, #28]	@ (80052cc <vPortExitCritical+0x50>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d105      	bne.n	80052c0 <vPortExitCritical+0x44>
 80052b4:	2300      	movs	r3, #0
 80052b6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80052be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr
 80052cc:	20000010 	.word	0x20000010

080052d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80052d0:	f3ef 8009 	mrs	r0, PSP
 80052d4:	f3bf 8f6f 	isb	sy
 80052d8:	4b15      	ldr	r3, [pc, #84]	@ (8005330 <pxCurrentTCBConst>)
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	f01e 0f10 	tst.w	lr, #16
 80052e0:	bf08      	it	eq
 80052e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80052e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ea:	6010      	str	r0, [r2, #0]
 80052ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80052f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80052f4:	f380 8811 	msr	BASEPRI, r0
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	f3bf 8f6f 	isb	sy
 8005300:	f7ff fbc6 	bl	8004a90 <vTaskSwitchContext>
 8005304:	f04f 0000 	mov.w	r0, #0
 8005308:	f380 8811 	msr	BASEPRI, r0
 800530c:	bc09      	pop	{r0, r3}
 800530e:	6819      	ldr	r1, [r3, #0]
 8005310:	6808      	ldr	r0, [r1, #0]
 8005312:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005316:	f01e 0f10 	tst.w	lr, #16
 800531a:	bf08      	it	eq
 800531c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005320:	f380 8809 	msr	PSP, r0
 8005324:	f3bf 8f6f 	isb	sy
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	f3af 8000 	nop.w

08005330 <pxCurrentTCBConst>:
 8005330:	200002ec 	.word	0x200002ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005334:	bf00      	nop
 8005336:	bf00      	nop

08005338 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
	__asm volatile
 800533e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005342:	f383 8811 	msr	BASEPRI, r3
 8005346:	f3bf 8f6f 	isb	sy
 800534a:	f3bf 8f4f 	dsb	sy
 800534e:	607b      	str	r3, [r7, #4]
}
 8005350:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005352:	f7ff fae3 	bl	800491c <xTaskIncrementTick>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d003      	beq.n	8005364 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800535c:	4b06      	ldr	r3, [pc, #24]	@ (8005378 <SysTick_Handler+0x40>)
 800535e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005362:	601a      	str	r2, [r3, #0]
 8005364:	2300      	movs	r3, #0
 8005366:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	f383 8811 	msr	BASEPRI, r3
}
 800536e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005370:	bf00      	nop
 8005372:	3708      	adds	r7, #8
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	e000ed04 	.word	0xe000ed04

0800537c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800537c:	b480      	push	{r7}
 800537e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005380:	4b0b      	ldr	r3, [pc, #44]	@ (80053b0 <vPortSetupTimerInterrupt+0x34>)
 8005382:	2200      	movs	r2, #0
 8005384:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005386:	4b0b      	ldr	r3, [pc, #44]	@ (80053b4 <vPortSetupTimerInterrupt+0x38>)
 8005388:	2200      	movs	r2, #0
 800538a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800538c:	4b0a      	ldr	r3, [pc, #40]	@ (80053b8 <vPortSetupTimerInterrupt+0x3c>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a0a      	ldr	r2, [pc, #40]	@ (80053bc <vPortSetupTimerInterrupt+0x40>)
 8005392:	fba2 2303 	umull	r2, r3, r2, r3
 8005396:	099b      	lsrs	r3, r3, #6
 8005398:	4a09      	ldr	r2, [pc, #36]	@ (80053c0 <vPortSetupTimerInterrupt+0x44>)
 800539a:	3b01      	subs	r3, #1
 800539c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800539e:	4b04      	ldr	r3, [pc, #16]	@ (80053b0 <vPortSetupTimerInterrupt+0x34>)
 80053a0:	2207      	movs	r2, #7
 80053a2:	601a      	str	r2, [r3, #0]
}
 80053a4:	bf00      	nop
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	e000e010 	.word	0xe000e010
 80053b4:	e000e018 	.word	0xe000e018
 80053b8:	20000004 	.word	0x20000004
 80053bc:	10624dd3 	.word	0x10624dd3
 80053c0:	e000e014 	.word	0xe000e014

080053c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80053c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80053d4 <vPortEnableVFP+0x10>
 80053c8:	6801      	ldr	r1, [r0, #0]
 80053ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80053ce:	6001      	str	r1, [r0, #0]
 80053d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80053d2:	bf00      	nop
 80053d4:	e000ed88 	.word	0xe000ed88

080053d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b08a      	sub	sp, #40	@ 0x28
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80053e0:	2300      	movs	r3, #0
 80053e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80053e4:	f7ff f9ee 	bl	80047c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80053e8:	4b5c      	ldr	r3, [pc, #368]	@ (800555c <pvPortMalloc+0x184>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d101      	bne.n	80053f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80053f0:	f000 f924 	bl	800563c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80053f4:	4b5a      	ldr	r3, [pc, #360]	@ (8005560 <pvPortMalloc+0x188>)
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4013      	ands	r3, r2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f040 8095 	bne.w	800552c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d01e      	beq.n	8005446 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005408:	2208      	movs	r2, #8
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4413      	add	r3, r2
 800540e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f003 0307 	and.w	r3, r3, #7
 8005416:	2b00      	cmp	r3, #0
 8005418:	d015      	beq.n	8005446 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f023 0307 	bic.w	r3, r3, #7
 8005420:	3308      	adds	r3, #8
 8005422:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f003 0307 	and.w	r3, r3, #7
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00b      	beq.n	8005446 <pvPortMalloc+0x6e>
	__asm volatile
 800542e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005432:	f383 8811 	msr	BASEPRI, r3
 8005436:	f3bf 8f6f 	isb	sy
 800543a:	f3bf 8f4f 	dsb	sy
 800543e:	617b      	str	r3, [r7, #20]
}
 8005440:	bf00      	nop
 8005442:	bf00      	nop
 8005444:	e7fd      	b.n	8005442 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d06f      	beq.n	800552c <pvPortMalloc+0x154>
 800544c:	4b45      	ldr	r3, [pc, #276]	@ (8005564 <pvPortMalloc+0x18c>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	429a      	cmp	r2, r3
 8005454:	d86a      	bhi.n	800552c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005456:	4b44      	ldr	r3, [pc, #272]	@ (8005568 <pvPortMalloc+0x190>)
 8005458:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800545a:	4b43      	ldr	r3, [pc, #268]	@ (8005568 <pvPortMalloc+0x190>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005460:	e004      	b.n	800546c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005464:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800546c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	429a      	cmp	r2, r3
 8005474:	d903      	bls.n	800547e <pvPortMalloc+0xa6>
 8005476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1f1      	bne.n	8005462 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800547e:	4b37      	ldr	r3, [pc, #220]	@ (800555c <pvPortMalloc+0x184>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005484:	429a      	cmp	r2, r3
 8005486:	d051      	beq.n	800552c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005488:	6a3b      	ldr	r3, [r7, #32]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2208      	movs	r2, #8
 800548e:	4413      	add	r3, r2
 8005490:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	6a3b      	ldr	r3, [r7, #32]
 8005498:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800549a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800549c:	685a      	ldr	r2, [r3, #4]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	1ad2      	subs	r2, r2, r3
 80054a2:	2308      	movs	r3, #8
 80054a4:	005b      	lsls	r3, r3, #1
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d920      	bls.n	80054ec <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80054aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4413      	add	r3, r2
 80054b0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	f003 0307 	and.w	r3, r3, #7
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00b      	beq.n	80054d4 <pvPortMalloc+0xfc>
	__asm volatile
 80054bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054c0:	f383 8811 	msr	BASEPRI, r3
 80054c4:	f3bf 8f6f 	isb	sy
 80054c8:	f3bf 8f4f 	dsb	sy
 80054cc:	613b      	str	r3, [r7, #16]
}
 80054ce:	bf00      	nop
 80054d0:	bf00      	nop
 80054d2:	e7fd      	b.n	80054d0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80054d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d6:	685a      	ldr	r2, [r3, #4]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	1ad2      	subs	r2, r2, r3
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80054e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80054e6:	69b8      	ldr	r0, [r7, #24]
 80054e8:	f000 f90a 	bl	8005700 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80054ec:	4b1d      	ldr	r3, [pc, #116]	@ (8005564 <pvPortMalloc+0x18c>)
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	4a1b      	ldr	r2, [pc, #108]	@ (8005564 <pvPortMalloc+0x18c>)
 80054f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80054fa:	4b1a      	ldr	r3, [pc, #104]	@ (8005564 <pvPortMalloc+0x18c>)
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	4b1b      	ldr	r3, [pc, #108]	@ (800556c <pvPortMalloc+0x194>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	429a      	cmp	r2, r3
 8005504:	d203      	bcs.n	800550e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005506:	4b17      	ldr	r3, [pc, #92]	@ (8005564 <pvPortMalloc+0x18c>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a18      	ldr	r2, [pc, #96]	@ (800556c <pvPortMalloc+0x194>)
 800550c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800550e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005510:	685a      	ldr	r2, [r3, #4]
 8005512:	4b13      	ldr	r3, [pc, #76]	@ (8005560 <pvPortMalloc+0x188>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	431a      	orrs	r2, r3
 8005518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800551c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551e:	2200      	movs	r2, #0
 8005520:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005522:	4b13      	ldr	r3, [pc, #76]	@ (8005570 <pvPortMalloc+0x198>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	3301      	adds	r3, #1
 8005528:	4a11      	ldr	r2, [pc, #68]	@ (8005570 <pvPortMalloc+0x198>)
 800552a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800552c:	f7ff f958 	bl	80047e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	f003 0307 	and.w	r3, r3, #7
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00b      	beq.n	8005552 <pvPortMalloc+0x17a>
	__asm volatile
 800553a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800553e:	f383 8811 	msr	BASEPRI, r3
 8005542:	f3bf 8f6f 	isb	sy
 8005546:	f3bf 8f4f 	dsb	sy
 800554a:	60fb      	str	r3, [r7, #12]
}
 800554c:	bf00      	nop
 800554e:	bf00      	nop
 8005550:	e7fd      	b.n	800554e <pvPortMalloc+0x176>
	return pvReturn;
 8005552:	69fb      	ldr	r3, [r7, #28]
}
 8005554:	4618      	mov	r0, r3
 8005556:	3728      	adds	r7, #40	@ 0x28
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	20005248 	.word	0x20005248
 8005560:	2000525c 	.word	0x2000525c
 8005564:	2000524c 	.word	0x2000524c
 8005568:	20005240 	.word	0x20005240
 800556c:	20005250 	.word	0x20005250
 8005570:	20005254 	.word	0x20005254

08005574 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b086      	sub	sp, #24
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d04f      	beq.n	8005626 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005586:	2308      	movs	r3, #8
 8005588:	425b      	negs	r3, r3
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	4413      	add	r3, r2
 800558e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	685a      	ldr	r2, [r3, #4]
 8005598:	4b25      	ldr	r3, [pc, #148]	@ (8005630 <vPortFree+0xbc>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4013      	ands	r3, r2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d10b      	bne.n	80055ba <vPortFree+0x46>
	__asm volatile
 80055a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055a6:	f383 8811 	msr	BASEPRI, r3
 80055aa:	f3bf 8f6f 	isb	sy
 80055ae:	f3bf 8f4f 	dsb	sy
 80055b2:	60fb      	str	r3, [r7, #12]
}
 80055b4:	bf00      	nop
 80055b6:	bf00      	nop
 80055b8:	e7fd      	b.n	80055b6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00b      	beq.n	80055da <vPortFree+0x66>
	__asm volatile
 80055c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c6:	f383 8811 	msr	BASEPRI, r3
 80055ca:	f3bf 8f6f 	isb	sy
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	60bb      	str	r3, [r7, #8]
}
 80055d4:	bf00      	nop
 80055d6:	bf00      	nop
 80055d8:	e7fd      	b.n	80055d6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	685a      	ldr	r2, [r3, #4]
 80055de:	4b14      	ldr	r3, [pc, #80]	@ (8005630 <vPortFree+0xbc>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4013      	ands	r3, r2
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d01e      	beq.n	8005626 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d11a      	bne.n	8005626 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	4b0e      	ldr	r3, [pc, #56]	@ (8005630 <vPortFree+0xbc>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	43db      	mvns	r3, r3
 80055fa:	401a      	ands	r2, r3
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005600:	f7ff f8e0 	bl	80047c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	685a      	ldr	r2, [r3, #4]
 8005608:	4b0a      	ldr	r3, [pc, #40]	@ (8005634 <vPortFree+0xc0>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4413      	add	r3, r2
 800560e:	4a09      	ldr	r2, [pc, #36]	@ (8005634 <vPortFree+0xc0>)
 8005610:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005612:	6938      	ldr	r0, [r7, #16]
 8005614:	f000 f874 	bl	8005700 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005618:	4b07      	ldr	r3, [pc, #28]	@ (8005638 <vPortFree+0xc4>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	3301      	adds	r3, #1
 800561e:	4a06      	ldr	r2, [pc, #24]	@ (8005638 <vPortFree+0xc4>)
 8005620:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005622:	f7ff f8dd 	bl	80047e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005626:	bf00      	nop
 8005628:	3718      	adds	r7, #24
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	2000525c 	.word	0x2000525c
 8005634:	2000524c 	.word	0x2000524c
 8005638:	20005258 	.word	0x20005258

0800563c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800563c:	b480      	push	{r7}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005642:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8005646:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005648:	4b27      	ldr	r3, [pc, #156]	@ (80056e8 <prvHeapInit+0xac>)
 800564a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f003 0307 	and.w	r3, r3, #7
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00c      	beq.n	8005670 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	3307      	adds	r3, #7
 800565a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f023 0307 	bic.w	r3, r3, #7
 8005662:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005664:	68ba      	ldr	r2, [r7, #8]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	4a1f      	ldr	r2, [pc, #124]	@ (80056e8 <prvHeapInit+0xac>)
 800566c:	4413      	add	r3, r2
 800566e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005674:	4a1d      	ldr	r2, [pc, #116]	@ (80056ec <prvHeapInit+0xb0>)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800567a:	4b1c      	ldr	r3, [pc, #112]	@ (80056ec <prvHeapInit+0xb0>)
 800567c:	2200      	movs	r2, #0
 800567e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	4413      	add	r3, r2
 8005686:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005688:	2208      	movs	r2, #8
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	1a9b      	subs	r3, r3, r2
 800568e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f023 0307 	bic.w	r3, r3, #7
 8005696:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	4a15      	ldr	r2, [pc, #84]	@ (80056f0 <prvHeapInit+0xb4>)
 800569c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800569e:	4b14      	ldr	r3, [pc, #80]	@ (80056f0 <prvHeapInit+0xb4>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2200      	movs	r2, #0
 80056a4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80056a6:	4b12      	ldr	r3, [pc, #72]	@ (80056f0 <prvHeapInit+0xb4>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2200      	movs	r2, #0
 80056ac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	1ad2      	subs	r2, r2, r3
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80056bc:	4b0c      	ldr	r3, [pc, #48]	@ (80056f0 <prvHeapInit+0xb4>)
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	4a0a      	ldr	r2, [pc, #40]	@ (80056f4 <prvHeapInit+0xb8>)
 80056ca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	4a09      	ldr	r2, [pc, #36]	@ (80056f8 <prvHeapInit+0xbc>)
 80056d2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80056d4:	4b09      	ldr	r3, [pc, #36]	@ (80056fc <prvHeapInit+0xc0>)
 80056d6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80056da:	601a      	str	r2, [r3, #0]
}
 80056dc:	bf00      	nop
 80056de:	3714      	adds	r7, #20
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr
 80056e8:	20000420 	.word	0x20000420
 80056ec:	20005240 	.word	0x20005240
 80056f0:	20005248 	.word	0x20005248
 80056f4:	20005250 	.word	0x20005250
 80056f8:	2000524c 	.word	0x2000524c
 80056fc:	2000525c 	.word	0x2000525c

08005700 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005708:	4b28      	ldr	r3, [pc, #160]	@ (80057ac <prvInsertBlockIntoFreeList+0xac>)
 800570a:	60fb      	str	r3, [r7, #12]
 800570c:	e002      	b.n	8005714 <prvInsertBlockIntoFreeList+0x14>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	60fb      	str	r3, [r7, #12]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	429a      	cmp	r2, r3
 800571c:	d8f7      	bhi.n	800570e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	4413      	add	r3, r2
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	429a      	cmp	r2, r3
 800572e:	d108      	bne.n	8005742 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	685a      	ldr	r2, [r3, #4]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	441a      	add	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	441a      	add	r2, r3
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	429a      	cmp	r2, r3
 8005754:	d118      	bne.n	8005788 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	4b15      	ldr	r3, [pc, #84]	@ (80057b0 <prvInsertBlockIntoFreeList+0xb0>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	429a      	cmp	r2, r3
 8005760:	d00d      	beq.n	800577e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685a      	ldr	r2, [r3, #4]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	441a      	add	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	601a      	str	r2, [r3, #0]
 800577c:	e008      	b.n	8005790 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800577e:	4b0c      	ldr	r3, [pc, #48]	@ (80057b0 <prvInsertBlockIntoFreeList+0xb0>)
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	601a      	str	r2, [r3, #0]
 8005786:	e003      	b.n	8005790 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	429a      	cmp	r2, r3
 8005796:	d002      	beq.n	800579e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800579e:	bf00      	nop
 80057a0:	3714      	adds	r7, #20
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	20005240 	.word	0x20005240
 80057b0:	20005248 	.word	0x20005248

080057b4 <__cvt>:
 80057b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057b8:	ec57 6b10 	vmov	r6, r7, d0
 80057bc:	2f00      	cmp	r7, #0
 80057be:	460c      	mov	r4, r1
 80057c0:	4619      	mov	r1, r3
 80057c2:	463b      	mov	r3, r7
 80057c4:	bfbb      	ittet	lt
 80057c6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80057ca:	461f      	movlt	r7, r3
 80057cc:	2300      	movge	r3, #0
 80057ce:	232d      	movlt	r3, #45	@ 0x2d
 80057d0:	700b      	strb	r3, [r1, #0]
 80057d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80057d4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80057d8:	4691      	mov	r9, r2
 80057da:	f023 0820 	bic.w	r8, r3, #32
 80057de:	bfbc      	itt	lt
 80057e0:	4632      	movlt	r2, r6
 80057e2:	4616      	movlt	r6, r2
 80057e4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80057e8:	d005      	beq.n	80057f6 <__cvt+0x42>
 80057ea:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80057ee:	d100      	bne.n	80057f2 <__cvt+0x3e>
 80057f0:	3401      	adds	r4, #1
 80057f2:	2102      	movs	r1, #2
 80057f4:	e000      	b.n	80057f8 <__cvt+0x44>
 80057f6:	2103      	movs	r1, #3
 80057f8:	ab03      	add	r3, sp, #12
 80057fa:	9301      	str	r3, [sp, #4]
 80057fc:	ab02      	add	r3, sp, #8
 80057fe:	9300      	str	r3, [sp, #0]
 8005800:	ec47 6b10 	vmov	d0, r6, r7
 8005804:	4653      	mov	r3, sl
 8005806:	4622      	mov	r2, r4
 8005808:	f001 f9de 	bl	8006bc8 <_dtoa_r>
 800580c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005810:	4605      	mov	r5, r0
 8005812:	d119      	bne.n	8005848 <__cvt+0x94>
 8005814:	f019 0f01 	tst.w	r9, #1
 8005818:	d00e      	beq.n	8005838 <__cvt+0x84>
 800581a:	eb00 0904 	add.w	r9, r0, r4
 800581e:	2200      	movs	r2, #0
 8005820:	2300      	movs	r3, #0
 8005822:	4630      	mov	r0, r6
 8005824:	4639      	mov	r1, r7
 8005826:	f7fb f977 	bl	8000b18 <__aeabi_dcmpeq>
 800582a:	b108      	cbz	r0, 8005830 <__cvt+0x7c>
 800582c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005830:	2230      	movs	r2, #48	@ 0x30
 8005832:	9b03      	ldr	r3, [sp, #12]
 8005834:	454b      	cmp	r3, r9
 8005836:	d31e      	bcc.n	8005876 <__cvt+0xc2>
 8005838:	9b03      	ldr	r3, [sp, #12]
 800583a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800583c:	1b5b      	subs	r3, r3, r5
 800583e:	4628      	mov	r0, r5
 8005840:	6013      	str	r3, [r2, #0]
 8005842:	b004      	add	sp, #16
 8005844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005848:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800584c:	eb00 0904 	add.w	r9, r0, r4
 8005850:	d1e5      	bne.n	800581e <__cvt+0x6a>
 8005852:	7803      	ldrb	r3, [r0, #0]
 8005854:	2b30      	cmp	r3, #48	@ 0x30
 8005856:	d10a      	bne.n	800586e <__cvt+0xba>
 8005858:	2200      	movs	r2, #0
 800585a:	2300      	movs	r3, #0
 800585c:	4630      	mov	r0, r6
 800585e:	4639      	mov	r1, r7
 8005860:	f7fb f95a 	bl	8000b18 <__aeabi_dcmpeq>
 8005864:	b918      	cbnz	r0, 800586e <__cvt+0xba>
 8005866:	f1c4 0401 	rsb	r4, r4, #1
 800586a:	f8ca 4000 	str.w	r4, [sl]
 800586e:	f8da 3000 	ldr.w	r3, [sl]
 8005872:	4499      	add	r9, r3
 8005874:	e7d3      	b.n	800581e <__cvt+0x6a>
 8005876:	1c59      	adds	r1, r3, #1
 8005878:	9103      	str	r1, [sp, #12]
 800587a:	701a      	strb	r2, [r3, #0]
 800587c:	e7d9      	b.n	8005832 <__cvt+0x7e>

0800587e <__exponent>:
 800587e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005880:	2900      	cmp	r1, #0
 8005882:	bfba      	itte	lt
 8005884:	4249      	neglt	r1, r1
 8005886:	232d      	movlt	r3, #45	@ 0x2d
 8005888:	232b      	movge	r3, #43	@ 0x2b
 800588a:	2909      	cmp	r1, #9
 800588c:	7002      	strb	r2, [r0, #0]
 800588e:	7043      	strb	r3, [r0, #1]
 8005890:	dd29      	ble.n	80058e6 <__exponent+0x68>
 8005892:	f10d 0307 	add.w	r3, sp, #7
 8005896:	461d      	mov	r5, r3
 8005898:	270a      	movs	r7, #10
 800589a:	461a      	mov	r2, r3
 800589c:	fbb1 f6f7 	udiv	r6, r1, r7
 80058a0:	fb07 1416 	mls	r4, r7, r6, r1
 80058a4:	3430      	adds	r4, #48	@ 0x30
 80058a6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80058aa:	460c      	mov	r4, r1
 80058ac:	2c63      	cmp	r4, #99	@ 0x63
 80058ae:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80058b2:	4631      	mov	r1, r6
 80058b4:	dcf1      	bgt.n	800589a <__exponent+0x1c>
 80058b6:	3130      	adds	r1, #48	@ 0x30
 80058b8:	1e94      	subs	r4, r2, #2
 80058ba:	f803 1c01 	strb.w	r1, [r3, #-1]
 80058be:	1c41      	adds	r1, r0, #1
 80058c0:	4623      	mov	r3, r4
 80058c2:	42ab      	cmp	r3, r5
 80058c4:	d30a      	bcc.n	80058dc <__exponent+0x5e>
 80058c6:	f10d 0309 	add.w	r3, sp, #9
 80058ca:	1a9b      	subs	r3, r3, r2
 80058cc:	42ac      	cmp	r4, r5
 80058ce:	bf88      	it	hi
 80058d0:	2300      	movhi	r3, #0
 80058d2:	3302      	adds	r3, #2
 80058d4:	4403      	add	r3, r0
 80058d6:	1a18      	subs	r0, r3, r0
 80058d8:	b003      	add	sp, #12
 80058da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058dc:	f813 6b01 	ldrb.w	r6, [r3], #1
 80058e0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80058e4:	e7ed      	b.n	80058c2 <__exponent+0x44>
 80058e6:	2330      	movs	r3, #48	@ 0x30
 80058e8:	3130      	adds	r1, #48	@ 0x30
 80058ea:	7083      	strb	r3, [r0, #2]
 80058ec:	70c1      	strb	r1, [r0, #3]
 80058ee:	1d03      	adds	r3, r0, #4
 80058f0:	e7f1      	b.n	80058d6 <__exponent+0x58>
	...

080058f4 <_printf_float>:
 80058f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058f8:	b08d      	sub	sp, #52	@ 0x34
 80058fa:	460c      	mov	r4, r1
 80058fc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005900:	4616      	mov	r6, r2
 8005902:	461f      	mov	r7, r3
 8005904:	4605      	mov	r5, r0
 8005906:	f000 fff3 	bl	80068f0 <_localeconv_r>
 800590a:	6803      	ldr	r3, [r0, #0]
 800590c:	9304      	str	r3, [sp, #16]
 800590e:	4618      	mov	r0, r3
 8005910:	f7fa fcd6 	bl	80002c0 <strlen>
 8005914:	2300      	movs	r3, #0
 8005916:	930a      	str	r3, [sp, #40]	@ 0x28
 8005918:	f8d8 3000 	ldr.w	r3, [r8]
 800591c:	9005      	str	r0, [sp, #20]
 800591e:	3307      	adds	r3, #7
 8005920:	f023 0307 	bic.w	r3, r3, #7
 8005924:	f103 0208 	add.w	r2, r3, #8
 8005928:	f894 a018 	ldrb.w	sl, [r4, #24]
 800592c:	f8d4 b000 	ldr.w	fp, [r4]
 8005930:	f8c8 2000 	str.w	r2, [r8]
 8005934:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005938:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800593c:	9307      	str	r3, [sp, #28]
 800593e:	f8cd 8018 	str.w	r8, [sp, #24]
 8005942:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005946:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800594a:	4b9c      	ldr	r3, [pc, #624]	@ (8005bbc <_printf_float+0x2c8>)
 800594c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005950:	f7fb f914 	bl	8000b7c <__aeabi_dcmpun>
 8005954:	bb70      	cbnz	r0, 80059b4 <_printf_float+0xc0>
 8005956:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800595a:	4b98      	ldr	r3, [pc, #608]	@ (8005bbc <_printf_float+0x2c8>)
 800595c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005960:	f7fb f8ee 	bl	8000b40 <__aeabi_dcmple>
 8005964:	bb30      	cbnz	r0, 80059b4 <_printf_float+0xc0>
 8005966:	2200      	movs	r2, #0
 8005968:	2300      	movs	r3, #0
 800596a:	4640      	mov	r0, r8
 800596c:	4649      	mov	r1, r9
 800596e:	f7fb f8dd 	bl	8000b2c <__aeabi_dcmplt>
 8005972:	b110      	cbz	r0, 800597a <_printf_float+0x86>
 8005974:	232d      	movs	r3, #45	@ 0x2d
 8005976:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800597a:	4a91      	ldr	r2, [pc, #580]	@ (8005bc0 <_printf_float+0x2cc>)
 800597c:	4b91      	ldr	r3, [pc, #580]	@ (8005bc4 <_printf_float+0x2d0>)
 800597e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005982:	bf94      	ite	ls
 8005984:	4690      	movls	r8, r2
 8005986:	4698      	movhi	r8, r3
 8005988:	2303      	movs	r3, #3
 800598a:	6123      	str	r3, [r4, #16]
 800598c:	f02b 0304 	bic.w	r3, fp, #4
 8005990:	6023      	str	r3, [r4, #0]
 8005992:	f04f 0900 	mov.w	r9, #0
 8005996:	9700      	str	r7, [sp, #0]
 8005998:	4633      	mov	r3, r6
 800599a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800599c:	4621      	mov	r1, r4
 800599e:	4628      	mov	r0, r5
 80059a0:	f000 f9d2 	bl	8005d48 <_printf_common>
 80059a4:	3001      	adds	r0, #1
 80059a6:	f040 808d 	bne.w	8005ac4 <_printf_float+0x1d0>
 80059aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80059ae:	b00d      	add	sp, #52	@ 0x34
 80059b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059b4:	4642      	mov	r2, r8
 80059b6:	464b      	mov	r3, r9
 80059b8:	4640      	mov	r0, r8
 80059ba:	4649      	mov	r1, r9
 80059bc:	f7fb f8de 	bl	8000b7c <__aeabi_dcmpun>
 80059c0:	b140      	cbz	r0, 80059d4 <_printf_float+0xe0>
 80059c2:	464b      	mov	r3, r9
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	bfbc      	itt	lt
 80059c8:	232d      	movlt	r3, #45	@ 0x2d
 80059ca:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80059ce:	4a7e      	ldr	r2, [pc, #504]	@ (8005bc8 <_printf_float+0x2d4>)
 80059d0:	4b7e      	ldr	r3, [pc, #504]	@ (8005bcc <_printf_float+0x2d8>)
 80059d2:	e7d4      	b.n	800597e <_printf_float+0x8a>
 80059d4:	6863      	ldr	r3, [r4, #4]
 80059d6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80059da:	9206      	str	r2, [sp, #24]
 80059dc:	1c5a      	adds	r2, r3, #1
 80059de:	d13b      	bne.n	8005a58 <_printf_float+0x164>
 80059e0:	2306      	movs	r3, #6
 80059e2:	6063      	str	r3, [r4, #4]
 80059e4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80059e8:	2300      	movs	r3, #0
 80059ea:	6022      	str	r2, [r4, #0]
 80059ec:	9303      	str	r3, [sp, #12]
 80059ee:	ab0a      	add	r3, sp, #40	@ 0x28
 80059f0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80059f4:	ab09      	add	r3, sp, #36	@ 0x24
 80059f6:	9300      	str	r3, [sp, #0]
 80059f8:	6861      	ldr	r1, [r4, #4]
 80059fa:	ec49 8b10 	vmov	d0, r8, r9
 80059fe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005a02:	4628      	mov	r0, r5
 8005a04:	f7ff fed6 	bl	80057b4 <__cvt>
 8005a08:	9b06      	ldr	r3, [sp, #24]
 8005a0a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005a0c:	2b47      	cmp	r3, #71	@ 0x47
 8005a0e:	4680      	mov	r8, r0
 8005a10:	d129      	bne.n	8005a66 <_printf_float+0x172>
 8005a12:	1cc8      	adds	r0, r1, #3
 8005a14:	db02      	blt.n	8005a1c <_printf_float+0x128>
 8005a16:	6863      	ldr	r3, [r4, #4]
 8005a18:	4299      	cmp	r1, r3
 8005a1a:	dd41      	ble.n	8005aa0 <_printf_float+0x1ac>
 8005a1c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005a20:	fa5f fa8a 	uxtb.w	sl, sl
 8005a24:	3901      	subs	r1, #1
 8005a26:	4652      	mov	r2, sl
 8005a28:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005a2c:	9109      	str	r1, [sp, #36]	@ 0x24
 8005a2e:	f7ff ff26 	bl	800587e <__exponent>
 8005a32:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005a34:	1813      	adds	r3, r2, r0
 8005a36:	2a01      	cmp	r2, #1
 8005a38:	4681      	mov	r9, r0
 8005a3a:	6123      	str	r3, [r4, #16]
 8005a3c:	dc02      	bgt.n	8005a44 <_printf_float+0x150>
 8005a3e:	6822      	ldr	r2, [r4, #0]
 8005a40:	07d2      	lsls	r2, r2, #31
 8005a42:	d501      	bpl.n	8005a48 <_printf_float+0x154>
 8005a44:	3301      	adds	r3, #1
 8005a46:	6123      	str	r3, [r4, #16]
 8005a48:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d0a2      	beq.n	8005996 <_printf_float+0xa2>
 8005a50:	232d      	movs	r3, #45	@ 0x2d
 8005a52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a56:	e79e      	b.n	8005996 <_printf_float+0xa2>
 8005a58:	9a06      	ldr	r2, [sp, #24]
 8005a5a:	2a47      	cmp	r2, #71	@ 0x47
 8005a5c:	d1c2      	bne.n	80059e4 <_printf_float+0xf0>
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d1c0      	bne.n	80059e4 <_printf_float+0xf0>
 8005a62:	2301      	movs	r3, #1
 8005a64:	e7bd      	b.n	80059e2 <_printf_float+0xee>
 8005a66:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005a6a:	d9db      	bls.n	8005a24 <_printf_float+0x130>
 8005a6c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005a70:	d118      	bne.n	8005aa4 <_printf_float+0x1b0>
 8005a72:	2900      	cmp	r1, #0
 8005a74:	6863      	ldr	r3, [r4, #4]
 8005a76:	dd0b      	ble.n	8005a90 <_printf_float+0x19c>
 8005a78:	6121      	str	r1, [r4, #16]
 8005a7a:	b913      	cbnz	r3, 8005a82 <_printf_float+0x18e>
 8005a7c:	6822      	ldr	r2, [r4, #0]
 8005a7e:	07d0      	lsls	r0, r2, #31
 8005a80:	d502      	bpl.n	8005a88 <_printf_float+0x194>
 8005a82:	3301      	adds	r3, #1
 8005a84:	440b      	add	r3, r1
 8005a86:	6123      	str	r3, [r4, #16]
 8005a88:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005a8a:	f04f 0900 	mov.w	r9, #0
 8005a8e:	e7db      	b.n	8005a48 <_printf_float+0x154>
 8005a90:	b913      	cbnz	r3, 8005a98 <_printf_float+0x1a4>
 8005a92:	6822      	ldr	r2, [r4, #0]
 8005a94:	07d2      	lsls	r2, r2, #31
 8005a96:	d501      	bpl.n	8005a9c <_printf_float+0x1a8>
 8005a98:	3302      	adds	r3, #2
 8005a9a:	e7f4      	b.n	8005a86 <_printf_float+0x192>
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e7f2      	b.n	8005a86 <_printf_float+0x192>
 8005aa0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005aa4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005aa6:	4299      	cmp	r1, r3
 8005aa8:	db05      	blt.n	8005ab6 <_printf_float+0x1c2>
 8005aaa:	6823      	ldr	r3, [r4, #0]
 8005aac:	6121      	str	r1, [r4, #16]
 8005aae:	07d8      	lsls	r0, r3, #31
 8005ab0:	d5ea      	bpl.n	8005a88 <_printf_float+0x194>
 8005ab2:	1c4b      	adds	r3, r1, #1
 8005ab4:	e7e7      	b.n	8005a86 <_printf_float+0x192>
 8005ab6:	2900      	cmp	r1, #0
 8005ab8:	bfd4      	ite	le
 8005aba:	f1c1 0202 	rsble	r2, r1, #2
 8005abe:	2201      	movgt	r2, #1
 8005ac0:	4413      	add	r3, r2
 8005ac2:	e7e0      	b.n	8005a86 <_printf_float+0x192>
 8005ac4:	6823      	ldr	r3, [r4, #0]
 8005ac6:	055a      	lsls	r2, r3, #21
 8005ac8:	d407      	bmi.n	8005ada <_printf_float+0x1e6>
 8005aca:	6923      	ldr	r3, [r4, #16]
 8005acc:	4642      	mov	r2, r8
 8005ace:	4631      	mov	r1, r6
 8005ad0:	4628      	mov	r0, r5
 8005ad2:	47b8      	blx	r7
 8005ad4:	3001      	adds	r0, #1
 8005ad6:	d12b      	bne.n	8005b30 <_printf_float+0x23c>
 8005ad8:	e767      	b.n	80059aa <_printf_float+0xb6>
 8005ada:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005ade:	f240 80dd 	bls.w	8005c9c <_printf_float+0x3a8>
 8005ae2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	2300      	movs	r3, #0
 8005aea:	f7fb f815 	bl	8000b18 <__aeabi_dcmpeq>
 8005aee:	2800      	cmp	r0, #0
 8005af0:	d033      	beq.n	8005b5a <_printf_float+0x266>
 8005af2:	4a37      	ldr	r2, [pc, #220]	@ (8005bd0 <_printf_float+0x2dc>)
 8005af4:	2301      	movs	r3, #1
 8005af6:	4631      	mov	r1, r6
 8005af8:	4628      	mov	r0, r5
 8005afa:	47b8      	blx	r7
 8005afc:	3001      	adds	r0, #1
 8005afe:	f43f af54 	beq.w	80059aa <_printf_float+0xb6>
 8005b02:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005b06:	4543      	cmp	r3, r8
 8005b08:	db02      	blt.n	8005b10 <_printf_float+0x21c>
 8005b0a:	6823      	ldr	r3, [r4, #0]
 8005b0c:	07d8      	lsls	r0, r3, #31
 8005b0e:	d50f      	bpl.n	8005b30 <_printf_float+0x23c>
 8005b10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b14:	4631      	mov	r1, r6
 8005b16:	4628      	mov	r0, r5
 8005b18:	47b8      	blx	r7
 8005b1a:	3001      	adds	r0, #1
 8005b1c:	f43f af45 	beq.w	80059aa <_printf_float+0xb6>
 8005b20:	f04f 0900 	mov.w	r9, #0
 8005b24:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005b28:	f104 0a1a 	add.w	sl, r4, #26
 8005b2c:	45c8      	cmp	r8, r9
 8005b2e:	dc09      	bgt.n	8005b44 <_printf_float+0x250>
 8005b30:	6823      	ldr	r3, [r4, #0]
 8005b32:	079b      	lsls	r3, r3, #30
 8005b34:	f100 8103 	bmi.w	8005d3e <_printf_float+0x44a>
 8005b38:	68e0      	ldr	r0, [r4, #12]
 8005b3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b3c:	4298      	cmp	r0, r3
 8005b3e:	bfb8      	it	lt
 8005b40:	4618      	movlt	r0, r3
 8005b42:	e734      	b.n	80059ae <_printf_float+0xba>
 8005b44:	2301      	movs	r3, #1
 8005b46:	4652      	mov	r2, sl
 8005b48:	4631      	mov	r1, r6
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	47b8      	blx	r7
 8005b4e:	3001      	adds	r0, #1
 8005b50:	f43f af2b 	beq.w	80059aa <_printf_float+0xb6>
 8005b54:	f109 0901 	add.w	r9, r9, #1
 8005b58:	e7e8      	b.n	8005b2c <_printf_float+0x238>
 8005b5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	dc39      	bgt.n	8005bd4 <_printf_float+0x2e0>
 8005b60:	4a1b      	ldr	r2, [pc, #108]	@ (8005bd0 <_printf_float+0x2dc>)
 8005b62:	2301      	movs	r3, #1
 8005b64:	4631      	mov	r1, r6
 8005b66:	4628      	mov	r0, r5
 8005b68:	47b8      	blx	r7
 8005b6a:	3001      	adds	r0, #1
 8005b6c:	f43f af1d 	beq.w	80059aa <_printf_float+0xb6>
 8005b70:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005b74:	ea59 0303 	orrs.w	r3, r9, r3
 8005b78:	d102      	bne.n	8005b80 <_printf_float+0x28c>
 8005b7a:	6823      	ldr	r3, [r4, #0]
 8005b7c:	07d9      	lsls	r1, r3, #31
 8005b7e:	d5d7      	bpl.n	8005b30 <_printf_float+0x23c>
 8005b80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b84:	4631      	mov	r1, r6
 8005b86:	4628      	mov	r0, r5
 8005b88:	47b8      	blx	r7
 8005b8a:	3001      	adds	r0, #1
 8005b8c:	f43f af0d 	beq.w	80059aa <_printf_float+0xb6>
 8005b90:	f04f 0a00 	mov.w	sl, #0
 8005b94:	f104 0b1a 	add.w	fp, r4, #26
 8005b98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b9a:	425b      	negs	r3, r3
 8005b9c:	4553      	cmp	r3, sl
 8005b9e:	dc01      	bgt.n	8005ba4 <_printf_float+0x2b0>
 8005ba0:	464b      	mov	r3, r9
 8005ba2:	e793      	b.n	8005acc <_printf_float+0x1d8>
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	465a      	mov	r2, fp
 8005ba8:	4631      	mov	r1, r6
 8005baa:	4628      	mov	r0, r5
 8005bac:	47b8      	blx	r7
 8005bae:	3001      	adds	r0, #1
 8005bb0:	f43f aefb 	beq.w	80059aa <_printf_float+0xb6>
 8005bb4:	f10a 0a01 	add.w	sl, sl, #1
 8005bb8:	e7ee      	b.n	8005b98 <_printf_float+0x2a4>
 8005bba:	bf00      	nop
 8005bbc:	7fefffff 	.word	0x7fefffff
 8005bc0:	0800a23c 	.word	0x0800a23c
 8005bc4:	0800a240 	.word	0x0800a240
 8005bc8:	0800a244 	.word	0x0800a244
 8005bcc:	0800a248 	.word	0x0800a248
 8005bd0:	0800a24c 	.word	0x0800a24c
 8005bd4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005bd6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005bda:	4553      	cmp	r3, sl
 8005bdc:	bfa8      	it	ge
 8005bde:	4653      	movge	r3, sl
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	4699      	mov	r9, r3
 8005be4:	dc36      	bgt.n	8005c54 <_printf_float+0x360>
 8005be6:	f04f 0b00 	mov.w	fp, #0
 8005bea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bee:	f104 021a 	add.w	r2, r4, #26
 8005bf2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005bf4:	9306      	str	r3, [sp, #24]
 8005bf6:	eba3 0309 	sub.w	r3, r3, r9
 8005bfa:	455b      	cmp	r3, fp
 8005bfc:	dc31      	bgt.n	8005c62 <_printf_float+0x36e>
 8005bfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c00:	459a      	cmp	sl, r3
 8005c02:	dc3a      	bgt.n	8005c7a <_printf_float+0x386>
 8005c04:	6823      	ldr	r3, [r4, #0]
 8005c06:	07da      	lsls	r2, r3, #31
 8005c08:	d437      	bmi.n	8005c7a <_printf_float+0x386>
 8005c0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c0c:	ebaa 0903 	sub.w	r9, sl, r3
 8005c10:	9b06      	ldr	r3, [sp, #24]
 8005c12:	ebaa 0303 	sub.w	r3, sl, r3
 8005c16:	4599      	cmp	r9, r3
 8005c18:	bfa8      	it	ge
 8005c1a:	4699      	movge	r9, r3
 8005c1c:	f1b9 0f00 	cmp.w	r9, #0
 8005c20:	dc33      	bgt.n	8005c8a <_printf_float+0x396>
 8005c22:	f04f 0800 	mov.w	r8, #0
 8005c26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c2a:	f104 0b1a 	add.w	fp, r4, #26
 8005c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c30:	ebaa 0303 	sub.w	r3, sl, r3
 8005c34:	eba3 0309 	sub.w	r3, r3, r9
 8005c38:	4543      	cmp	r3, r8
 8005c3a:	f77f af79 	ble.w	8005b30 <_printf_float+0x23c>
 8005c3e:	2301      	movs	r3, #1
 8005c40:	465a      	mov	r2, fp
 8005c42:	4631      	mov	r1, r6
 8005c44:	4628      	mov	r0, r5
 8005c46:	47b8      	blx	r7
 8005c48:	3001      	adds	r0, #1
 8005c4a:	f43f aeae 	beq.w	80059aa <_printf_float+0xb6>
 8005c4e:	f108 0801 	add.w	r8, r8, #1
 8005c52:	e7ec      	b.n	8005c2e <_printf_float+0x33a>
 8005c54:	4642      	mov	r2, r8
 8005c56:	4631      	mov	r1, r6
 8005c58:	4628      	mov	r0, r5
 8005c5a:	47b8      	blx	r7
 8005c5c:	3001      	adds	r0, #1
 8005c5e:	d1c2      	bne.n	8005be6 <_printf_float+0x2f2>
 8005c60:	e6a3      	b.n	80059aa <_printf_float+0xb6>
 8005c62:	2301      	movs	r3, #1
 8005c64:	4631      	mov	r1, r6
 8005c66:	4628      	mov	r0, r5
 8005c68:	9206      	str	r2, [sp, #24]
 8005c6a:	47b8      	blx	r7
 8005c6c:	3001      	adds	r0, #1
 8005c6e:	f43f ae9c 	beq.w	80059aa <_printf_float+0xb6>
 8005c72:	9a06      	ldr	r2, [sp, #24]
 8005c74:	f10b 0b01 	add.w	fp, fp, #1
 8005c78:	e7bb      	b.n	8005bf2 <_printf_float+0x2fe>
 8005c7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c7e:	4631      	mov	r1, r6
 8005c80:	4628      	mov	r0, r5
 8005c82:	47b8      	blx	r7
 8005c84:	3001      	adds	r0, #1
 8005c86:	d1c0      	bne.n	8005c0a <_printf_float+0x316>
 8005c88:	e68f      	b.n	80059aa <_printf_float+0xb6>
 8005c8a:	9a06      	ldr	r2, [sp, #24]
 8005c8c:	464b      	mov	r3, r9
 8005c8e:	4442      	add	r2, r8
 8005c90:	4631      	mov	r1, r6
 8005c92:	4628      	mov	r0, r5
 8005c94:	47b8      	blx	r7
 8005c96:	3001      	adds	r0, #1
 8005c98:	d1c3      	bne.n	8005c22 <_printf_float+0x32e>
 8005c9a:	e686      	b.n	80059aa <_printf_float+0xb6>
 8005c9c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005ca0:	f1ba 0f01 	cmp.w	sl, #1
 8005ca4:	dc01      	bgt.n	8005caa <_printf_float+0x3b6>
 8005ca6:	07db      	lsls	r3, r3, #31
 8005ca8:	d536      	bpl.n	8005d18 <_printf_float+0x424>
 8005caa:	2301      	movs	r3, #1
 8005cac:	4642      	mov	r2, r8
 8005cae:	4631      	mov	r1, r6
 8005cb0:	4628      	mov	r0, r5
 8005cb2:	47b8      	blx	r7
 8005cb4:	3001      	adds	r0, #1
 8005cb6:	f43f ae78 	beq.w	80059aa <_printf_float+0xb6>
 8005cba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cbe:	4631      	mov	r1, r6
 8005cc0:	4628      	mov	r0, r5
 8005cc2:	47b8      	blx	r7
 8005cc4:	3001      	adds	r0, #1
 8005cc6:	f43f ae70 	beq.w	80059aa <_printf_float+0xb6>
 8005cca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005cce:	2200      	movs	r2, #0
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005cd6:	f7fa ff1f 	bl	8000b18 <__aeabi_dcmpeq>
 8005cda:	b9c0      	cbnz	r0, 8005d0e <_printf_float+0x41a>
 8005cdc:	4653      	mov	r3, sl
 8005cde:	f108 0201 	add.w	r2, r8, #1
 8005ce2:	4631      	mov	r1, r6
 8005ce4:	4628      	mov	r0, r5
 8005ce6:	47b8      	blx	r7
 8005ce8:	3001      	adds	r0, #1
 8005cea:	d10c      	bne.n	8005d06 <_printf_float+0x412>
 8005cec:	e65d      	b.n	80059aa <_printf_float+0xb6>
 8005cee:	2301      	movs	r3, #1
 8005cf0:	465a      	mov	r2, fp
 8005cf2:	4631      	mov	r1, r6
 8005cf4:	4628      	mov	r0, r5
 8005cf6:	47b8      	blx	r7
 8005cf8:	3001      	adds	r0, #1
 8005cfa:	f43f ae56 	beq.w	80059aa <_printf_float+0xb6>
 8005cfe:	f108 0801 	add.w	r8, r8, #1
 8005d02:	45d0      	cmp	r8, sl
 8005d04:	dbf3      	blt.n	8005cee <_printf_float+0x3fa>
 8005d06:	464b      	mov	r3, r9
 8005d08:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005d0c:	e6df      	b.n	8005ace <_printf_float+0x1da>
 8005d0e:	f04f 0800 	mov.w	r8, #0
 8005d12:	f104 0b1a 	add.w	fp, r4, #26
 8005d16:	e7f4      	b.n	8005d02 <_printf_float+0x40e>
 8005d18:	2301      	movs	r3, #1
 8005d1a:	4642      	mov	r2, r8
 8005d1c:	e7e1      	b.n	8005ce2 <_printf_float+0x3ee>
 8005d1e:	2301      	movs	r3, #1
 8005d20:	464a      	mov	r2, r9
 8005d22:	4631      	mov	r1, r6
 8005d24:	4628      	mov	r0, r5
 8005d26:	47b8      	blx	r7
 8005d28:	3001      	adds	r0, #1
 8005d2a:	f43f ae3e 	beq.w	80059aa <_printf_float+0xb6>
 8005d2e:	f108 0801 	add.w	r8, r8, #1
 8005d32:	68e3      	ldr	r3, [r4, #12]
 8005d34:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005d36:	1a5b      	subs	r3, r3, r1
 8005d38:	4543      	cmp	r3, r8
 8005d3a:	dcf0      	bgt.n	8005d1e <_printf_float+0x42a>
 8005d3c:	e6fc      	b.n	8005b38 <_printf_float+0x244>
 8005d3e:	f04f 0800 	mov.w	r8, #0
 8005d42:	f104 0919 	add.w	r9, r4, #25
 8005d46:	e7f4      	b.n	8005d32 <_printf_float+0x43e>

08005d48 <_printf_common>:
 8005d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d4c:	4616      	mov	r6, r2
 8005d4e:	4698      	mov	r8, r3
 8005d50:	688a      	ldr	r2, [r1, #8]
 8005d52:	690b      	ldr	r3, [r1, #16]
 8005d54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	bfb8      	it	lt
 8005d5c:	4613      	movlt	r3, r2
 8005d5e:	6033      	str	r3, [r6, #0]
 8005d60:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005d64:	4607      	mov	r7, r0
 8005d66:	460c      	mov	r4, r1
 8005d68:	b10a      	cbz	r2, 8005d6e <_printf_common+0x26>
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	6033      	str	r3, [r6, #0]
 8005d6e:	6823      	ldr	r3, [r4, #0]
 8005d70:	0699      	lsls	r1, r3, #26
 8005d72:	bf42      	ittt	mi
 8005d74:	6833      	ldrmi	r3, [r6, #0]
 8005d76:	3302      	addmi	r3, #2
 8005d78:	6033      	strmi	r3, [r6, #0]
 8005d7a:	6825      	ldr	r5, [r4, #0]
 8005d7c:	f015 0506 	ands.w	r5, r5, #6
 8005d80:	d106      	bne.n	8005d90 <_printf_common+0x48>
 8005d82:	f104 0a19 	add.w	sl, r4, #25
 8005d86:	68e3      	ldr	r3, [r4, #12]
 8005d88:	6832      	ldr	r2, [r6, #0]
 8005d8a:	1a9b      	subs	r3, r3, r2
 8005d8c:	42ab      	cmp	r3, r5
 8005d8e:	dc26      	bgt.n	8005dde <_printf_common+0x96>
 8005d90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005d94:	6822      	ldr	r2, [r4, #0]
 8005d96:	3b00      	subs	r3, #0
 8005d98:	bf18      	it	ne
 8005d9a:	2301      	movne	r3, #1
 8005d9c:	0692      	lsls	r2, r2, #26
 8005d9e:	d42b      	bmi.n	8005df8 <_printf_common+0xb0>
 8005da0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005da4:	4641      	mov	r1, r8
 8005da6:	4638      	mov	r0, r7
 8005da8:	47c8      	blx	r9
 8005daa:	3001      	adds	r0, #1
 8005dac:	d01e      	beq.n	8005dec <_printf_common+0xa4>
 8005dae:	6823      	ldr	r3, [r4, #0]
 8005db0:	6922      	ldr	r2, [r4, #16]
 8005db2:	f003 0306 	and.w	r3, r3, #6
 8005db6:	2b04      	cmp	r3, #4
 8005db8:	bf02      	ittt	eq
 8005dba:	68e5      	ldreq	r5, [r4, #12]
 8005dbc:	6833      	ldreq	r3, [r6, #0]
 8005dbe:	1aed      	subeq	r5, r5, r3
 8005dc0:	68a3      	ldr	r3, [r4, #8]
 8005dc2:	bf0c      	ite	eq
 8005dc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005dc8:	2500      	movne	r5, #0
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	bfc4      	itt	gt
 8005dce:	1a9b      	subgt	r3, r3, r2
 8005dd0:	18ed      	addgt	r5, r5, r3
 8005dd2:	2600      	movs	r6, #0
 8005dd4:	341a      	adds	r4, #26
 8005dd6:	42b5      	cmp	r5, r6
 8005dd8:	d11a      	bne.n	8005e10 <_printf_common+0xc8>
 8005dda:	2000      	movs	r0, #0
 8005ddc:	e008      	b.n	8005df0 <_printf_common+0xa8>
 8005dde:	2301      	movs	r3, #1
 8005de0:	4652      	mov	r2, sl
 8005de2:	4641      	mov	r1, r8
 8005de4:	4638      	mov	r0, r7
 8005de6:	47c8      	blx	r9
 8005de8:	3001      	adds	r0, #1
 8005dea:	d103      	bne.n	8005df4 <_printf_common+0xac>
 8005dec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005df4:	3501      	adds	r5, #1
 8005df6:	e7c6      	b.n	8005d86 <_printf_common+0x3e>
 8005df8:	18e1      	adds	r1, r4, r3
 8005dfa:	1c5a      	adds	r2, r3, #1
 8005dfc:	2030      	movs	r0, #48	@ 0x30
 8005dfe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005e02:	4422      	add	r2, r4
 8005e04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005e08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005e0c:	3302      	adds	r3, #2
 8005e0e:	e7c7      	b.n	8005da0 <_printf_common+0x58>
 8005e10:	2301      	movs	r3, #1
 8005e12:	4622      	mov	r2, r4
 8005e14:	4641      	mov	r1, r8
 8005e16:	4638      	mov	r0, r7
 8005e18:	47c8      	blx	r9
 8005e1a:	3001      	adds	r0, #1
 8005e1c:	d0e6      	beq.n	8005dec <_printf_common+0xa4>
 8005e1e:	3601      	adds	r6, #1
 8005e20:	e7d9      	b.n	8005dd6 <_printf_common+0x8e>
	...

08005e24 <_printf_i>:
 8005e24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e28:	7e0f      	ldrb	r7, [r1, #24]
 8005e2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005e2c:	2f78      	cmp	r7, #120	@ 0x78
 8005e2e:	4691      	mov	r9, r2
 8005e30:	4680      	mov	r8, r0
 8005e32:	460c      	mov	r4, r1
 8005e34:	469a      	mov	sl, r3
 8005e36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005e3a:	d807      	bhi.n	8005e4c <_printf_i+0x28>
 8005e3c:	2f62      	cmp	r7, #98	@ 0x62
 8005e3e:	d80a      	bhi.n	8005e56 <_printf_i+0x32>
 8005e40:	2f00      	cmp	r7, #0
 8005e42:	f000 80d2 	beq.w	8005fea <_printf_i+0x1c6>
 8005e46:	2f58      	cmp	r7, #88	@ 0x58
 8005e48:	f000 80b9 	beq.w	8005fbe <_printf_i+0x19a>
 8005e4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005e54:	e03a      	b.n	8005ecc <_printf_i+0xa8>
 8005e56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005e5a:	2b15      	cmp	r3, #21
 8005e5c:	d8f6      	bhi.n	8005e4c <_printf_i+0x28>
 8005e5e:	a101      	add	r1, pc, #4	@ (adr r1, 8005e64 <_printf_i+0x40>)
 8005e60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e64:	08005ebd 	.word	0x08005ebd
 8005e68:	08005ed1 	.word	0x08005ed1
 8005e6c:	08005e4d 	.word	0x08005e4d
 8005e70:	08005e4d 	.word	0x08005e4d
 8005e74:	08005e4d 	.word	0x08005e4d
 8005e78:	08005e4d 	.word	0x08005e4d
 8005e7c:	08005ed1 	.word	0x08005ed1
 8005e80:	08005e4d 	.word	0x08005e4d
 8005e84:	08005e4d 	.word	0x08005e4d
 8005e88:	08005e4d 	.word	0x08005e4d
 8005e8c:	08005e4d 	.word	0x08005e4d
 8005e90:	08005fd1 	.word	0x08005fd1
 8005e94:	08005efb 	.word	0x08005efb
 8005e98:	08005f8b 	.word	0x08005f8b
 8005e9c:	08005e4d 	.word	0x08005e4d
 8005ea0:	08005e4d 	.word	0x08005e4d
 8005ea4:	08005ff3 	.word	0x08005ff3
 8005ea8:	08005e4d 	.word	0x08005e4d
 8005eac:	08005efb 	.word	0x08005efb
 8005eb0:	08005e4d 	.word	0x08005e4d
 8005eb4:	08005e4d 	.word	0x08005e4d
 8005eb8:	08005f93 	.word	0x08005f93
 8005ebc:	6833      	ldr	r3, [r6, #0]
 8005ebe:	1d1a      	adds	r2, r3, #4
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	6032      	str	r2, [r6, #0]
 8005ec4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ec8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e09d      	b.n	800600c <_printf_i+0x1e8>
 8005ed0:	6833      	ldr	r3, [r6, #0]
 8005ed2:	6820      	ldr	r0, [r4, #0]
 8005ed4:	1d19      	adds	r1, r3, #4
 8005ed6:	6031      	str	r1, [r6, #0]
 8005ed8:	0606      	lsls	r6, r0, #24
 8005eda:	d501      	bpl.n	8005ee0 <_printf_i+0xbc>
 8005edc:	681d      	ldr	r5, [r3, #0]
 8005ede:	e003      	b.n	8005ee8 <_printf_i+0xc4>
 8005ee0:	0645      	lsls	r5, r0, #25
 8005ee2:	d5fb      	bpl.n	8005edc <_printf_i+0xb8>
 8005ee4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005ee8:	2d00      	cmp	r5, #0
 8005eea:	da03      	bge.n	8005ef4 <_printf_i+0xd0>
 8005eec:	232d      	movs	r3, #45	@ 0x2d
 8005eee:	426d      	negs	r5, r5
 8005ef0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ef4:	4859      	ldr	r0, [pc, #356]	@ (800605c <_printf_i+0x238>)
 8005ef6:	230a      	movs	r3, #10
 8005ef8:	e011      	b.n	8005f1e <_printf_i+0xfa>
 8005efa:	6821      	ldr	r1, [r4, #0]
 8005efc:	6833      	ldr	r3, [r6, #0]
 8005efe:	0608      	lsls	r0, r1, #24
 8005f00:	f853 5b04 	ldr.w	r5, [r3], #4
 8005f04:	d402      	bmi.n	8005f0c <_printf_i+0xe8>
 8005f06:	0649      	lsls	r1, r1, #25
 8005f08:	bf48      	it	mi
 8005f0a:	b2ad      	uxthmi	r5, r5
 8005f0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005f0e:	4853      	ldr	r0, [pc, #332]	@ (800605c <_printf_i+0x238>)
 8005f10:	6033      	str	r3, [r6, #0]
 8005f12:	bf14      	ite	ne
 8005f14:	230a      	movne	r3, #10
 8005f16:	2308      	moveq	r3, #8
 8005f18:	2100      	movs	r1, #0
 8005f1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005f1e:	6866      	ldr	r6, [r4, #4]
 8005f20:	60a6      	str	r6, [r4, #8]
 8005f22:	2e00      	cmp	r6, #0
 8005f24:	bfa2      	ittt	ge
 8005f26:	6821      	ldrge	r1, [r4, #0]
 8005f28:	f021 0104 	bicge.w	r1, r1, #4
 8005f2c:	6021      	strge	r1, [r4, #0]
 8005f2e:	b90d      	cbnz	r5, 8005f34 <_printf_i+0x110>
 8005f30:	2e00      	cmp	r6, #0
 8005f32:	d04b      	beq.n	8005fcc <_printf_i+0x1a8>
 8005f34:	4616      	mov	r6, r2
 8005f36:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f3a:	fb03 5711 	mls	r7, r3, r1, r5
 8005f3e:	5dc7      	ldrb	r7, [r0, r7]
 8005f40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f44:	462f      	mov	r7, r5
 8005f46:	42bb      	cmp	r3, r7
 8005f48:	460d      	mov	r5, r1
 8005f4a:	d9f4      	bls.n	8005f36 <_printf_i+0x112>
 8005f4c:	2b08      	cmp	r3, #8
 8005f4e:	d10b      	bne.n	8005f68 <_printf_i+0x144>
 8005f50:	6823      	ldr	r3, [r4, #0]
 8005f52:	07df      	lsls	r7, r3, #31
 8005f54:	d508      	bpl.n	8005f68 <_printf_i+0x144>
 8005f56:	6923      	ldr	r3, [r4, #16]
 8005f58:	6861      	ldr	r1, [r4, #4]
 8005f5a:	4299      	cmp	r1, r3
 8005f5c:	bfde      	ittt	le
 8005f5e:	2330      	movle	r3, #48	@ 0x30
 8005f60:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f64:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005f68:	1b92      	subs	r2, r2, r6
 8005f6a:	6122      	str	r2, [r4, #16]
 8005f6c:	f8cd a000 	str.w	sl, [sp]
 8005f70:	464b      	mov	r3, r9
 8005f72:	aa03      	add	r2, sp, #12
 8005f74:	4621      	mov	r1, r4
 8005f76:	4640      	mov	r0, r8
 8005f78:	f7ff fee6 	bl	8005d48 <_printf_common>
 8005f7c:	3001      	adds	r0, #1
 8005f7e:	d14a      	bne.n	8006016 <_printf_i+0x1f2>
 8005f80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f84:	b004      	add	sp, #16
 8005f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f8a:	6823      	ldr	r3, [r4, #0]
 8005f8c:	f043 0320 	orr.w	r3, r3, #32
 8005f90:	6023      	str	r3, [r4, #0]
 8005f92:	4833      	ldr	r0, [pc, #204]	@ (8006060 <_printf_i+0x23c>)
 8005f94:	2778      	movs	r7, #120	@ 0x78
 8005f96:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005f9a:	6823      	ldr	r3, [r4, #0]
 8005f9c:	6831      	ldr	r1, [r6, #0]
 8005f9e:	061f      	lsls	r7, r3, #24
 8005fa0:	f851 5b04 	ldr.w	r5, [r1], #4
 8005fa4:	d402      	bmi.n	8005fac <_printf_i+0x188>
 8005fa6:	065f      	lsls	r7, r3, #25
 8005fa8:	bf48      	it	mi
 8005faa:	b2ad      	uxthmi	r5, r5
 8005fac:	6031      	str	r1, [r6, #0]
 8005fae:	07d9      	lsls	r1, r3, #31
 8005fb0:	bf44      	itt	mi
 8005fb2:	f043 0320 	orrmi.w	r3, r3, #32
 8005fb6:	6023      	strmi	r3, [r4, #0]
 8005fb8:	b11d      	cbz	r5, 8005fc2 <_printf_i+0x19e>
 8005fba:	2310      	movs	r3, #16
 8005fbc:	e7ac      	b.n	8005f18 <_printf_i+0xf4>
 8005fbe:	4827      	ldr	r0, [pc, #156]	@ (800605c <_printf_i+0x238>)
 8005fc0:	e7e9      	b.n	8005f96 <_printf_i+0x172>
 8005fc2:	6823      	ldr	r3, [r4, #0]
 8005fc4:	f023 0320 	bic.w	r3, r3, #32
 8005fc8:	6023      	str	r3, [r4, #0]
 8005fca:	e7f6      	b.n	8005fba <_printf_i+0x196>
 8005fcc:	4616      	mov	r6, r2
 8005fce:	e7bd      	b.n	8005f4c <_printf_i+0x128>
 8005fd0:	6833      	ldr	r3, [r6, #0]
 8005fd2:	6825      	ldr	r5, [r4, #0]
 8005fd4:	6961      	ldr	r1, [r4, #20]
 8005fd6:	1d18      	adds	r0, r3, #4
 8005fd8:	6030      	str	r0, [r6, #0]
 8005fda:	062e      	lsls	r6, r5, #24
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	d501      	bpl.n	8005fe4 <_printf_i+0x1c0>
 8005fe0:	6019      	str	r1, [r3, #0]
 8005fe2:	e002      	b.n	8005fea <_printf_i+0x1c6>
 8005fe4:	0668      	lsls	r0, r5, #25
 8005fe6:	d5fb      	bpl.n	8005fe0 <_printf_i+0x1bc>
 8005fe8:	8019      	strh	r1, [r3, #0]
 8005fea:	2300      	movs	r3, #0
 8005fec:	6123      	str	r3, [r4, #16]
 8005fee:	4616      	mov	r6, r2
 8005ff0:	e7bc      	b.n	8005f6c <_printf_i+0x148>
 8005ff2:	6833      	ldr	r3, [r6, #0]
 8005ff4:	1d1a      	adds	r2, r3, #4
 8005ff6:	6032      	str	r2, [r6, #0]
 8005ff8:	681e      	ldr	r6, [r3, #0]
 8005ffa:	6862      	ldr	r2, [r4, #4]
 8005ffc:	2100      	movs	r1, #0
 8005ffe:	4630      	mov	r0, r6
 8006000:	f7fa f90e 	bl	8000220 <memchr>
 8006004:	b108      	cbz	r0, 800600a <_printf_i+0x1e6>
 8006006:	1b80      	subs	r0, r0, r6
 8006008:	6060      	str	r0, [r4, #4]
 800600a:	6863      	ldr	r3, [r4, #4]
 800600c:	6123      	str	r3, [r4, #16]
 800600e:	2300      	movs	r3, #0
 8006010:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006014:	e7aa      	b.n	8005f6c <_printf_i+0x148>
 8006016:	6923      	ldr	r3, [r4, #16]
 8006018:	4632      	mov	r2, r6
 800601a:	4649      	mov	r1, r9
 800601c:	4640      	mov	r0, r8
 800601e:	47d0      	blx	sl
 8006020:	3001      	adds	r0, #1
 8006022:	d0ad      	beq.n	8005f80 <_printf_i+0x15c>
 8006024:	6823      	ldr	r3, [r4, #0]
 8006026:	079b      	lsls	r3, r3, #30
 8006028:	d413      	bmi.n	8006052 <_printf_i+0x22e>
 800602a:	68e0      	ldr	r0, [r4, #12]
 800602c:	9b03      	ldr	r3, [sp, #12]
 800602e:	4298      	cmp	r0, r3
 8006030:	bfb8      	it	lt
 8006032:	4618      	movlt	r0, r3
 8006034:	e7a6      	b.n	8005f84 <_printf_i+0x160>
 8006036:	2301      	movs	r3, #1
 8006038:	4632      	mov	r2, r6
 800603a:	4649      	mov	r1, r9
 800603c:	4640      	mov	r0, r8
 800603e:	47d0      	blx	sl
 8006040:	3001      	adds	r0, #1
 8006042:	d09d      	beq.n	8005f80 <_printf_i+0x15c>
 8006044:	3501      	adds	r5, #1
 8006046:	68e3      	ldr	r3, [r4, #12]
 8006048:	9903      	ldr	r1, [sp, #12]
 800604a:	1a5b      	subs	r3, r3, r1
 800604c:	42ab      	cmp	r3, r5
 800604e:	dcf2      	bgt.n	8006036 <_printf_i+0x212>
 8006050:	e7eb      	b.n	800602a <_printf_i+0x206>
 8006052:	2500      	movs	r5, #0
 8006054:	f104 0619 	add.w	r6, r4, #25
 8006058:	e7f5      	b.n	8006046 <_printf_i+0x222>
 800605a:	bf00      	nop
 800605c:	0800a24e 	.word	0x0800a24e
 8006060:	0800a25f 	.word	0x0800a25f

08006064 <_scanf_float>:
 8006064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006068:	b087      	sub	sp, #28
 800606a:	4617      	mov	r7, r2
 800606c:	9303      	str	r3, [sp, #12]
 800606e:	688b      	ldr	r3, [r1, #8]
 8006070:	1e5a      	subs	r2, r3, #1
 8006072:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006076:	bf81      	itttt	hi
 8006078:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800607c:	eb03 0b05 	addhi.w	fp, r3, r5
 8006080:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006084:	608b      	strhi	r3, [r1, #8]
 8006086:	680b      	ldr	r3, [r1, #0]
 8006088:	460a      	mov	r2, r1
 800608a:	f04f 0500 	mov.w	r5, #0
 800608e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006092:	f842 3b1c 	str.w	r3, [r2], #28
 8006096:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800609a:	4680      	mov	r8, r0
 800609c:	460c      	mov	r4, r1
 800609e:	bf98      	it	ls
 80060a0:	f04f 0b00 	movls.w	fp, #0
 80060a4:	9201      	str	r2, [sp, #4]
 80060a6:	4616      	mov	r6, r2
 80060a8:	46aa      	mov	sl, r5
 80060aa:	46a9      	mov	r9, r5
 80060ac:	9502      	str	r5, [sp, #8]
 80060ae:	68a2      	ldr	r2, [r4, #8]
 80060b0:	b152      	cbz	r2, 80060c8 <_scanf_float+0x64>
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	2b4e      	cmp	r3, #78	@ 0x4e
 80060b8:	d864      	bhi.n	8006184 <_scanf_float+0x120>
 80060ba:	2b40      	cmp	r3, #64	@ 0x40
 80060bc:	d83c      	bhi.n	8006138 <_scanf_float+0xd4>
 80060be:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80060c2:	b2c8      	uxtb	r0, r1
 80060c4:	280e      	cmp	r0, #14
 80060c6:	d93a      	bls.n	800613e <_scanf_float+0xda>
 80060c8:	f1b9 0f00 	cmp.w	r9, #0
 80060cc:	d003      	beq.n	80060d6 <_scanf_float+0x72>
 80060ce:	6823      	ldr	r3, [r4, #0]
 80060d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060d4:	6023      	str	r3, [r4, #0]
 80060d6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80060da:	f1ba 0f01 	cmp.w	sl, #1
 80060de:	f200 8117 	bhi.w	8006310 <_scanf_float+0x2ac>
 80060e2:	9b01      	ldr	r3, [sp, #4]
 80060e4:	429e      	cmp	r6, r3
 80060e6:	f200 8108 	bhi.w	80062fa <_scanf_float+0x296>
 80060ea:	2001      	movs	r0, #1
 80060ec:	b007      	add	sp, #28
 80060ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060f2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80060f6:	2a0d      	cmp	r2, #13
 80060f8:	d8e6      	bhi.n	80060c8 <_scanf_float+0x64>
 80060fa:	a101      	add	r1, pc, #4	@ (adr r1, 8006100 <_scanf_float+0x9c>)
 80060fc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006100:	08006247 	.word	0x08006247
 8006104:	080060c9 	.word	0x080060c9
 8006108:	080060c9 	.word	0x080060c9
 800610c:	080060c9 	.word	0x080060c9
 8006110:	080062a7 	.word	0x080062a7
 8006114:	0800627f 	.word	0x0800627f
 8006118:	080060c9 	.word	0x080060c9
 800611c:	080060c9 	.word	0x080060c9
 8006120:	08006255 	.word	0x08006255
 8006124:	080060c9 	.word	0x080060c9
 8006128:	080060c9 	.word	0x080060c9
 800612c:	080060c9 	.word	0x080060c9
 8006130:	080060c9 	.word	0x080060c9
 8006134:	0800620d 	.word	0x0800620d
 8006138:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800613c:	e7db      	b.n	80060f6 <_scanf_float+0x92>
 800613e:	290e      	cmp	r1, #14
 8006140:	d8c2      	bhi.n	80060c8 <_scanf_float+0x64>
 8006142:	a001      	add	r0, pc, #4	@ (adr r0, 8006148 <_scanf_float+0xe4>)
 8006144:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006148:	080061fd 	.word	0x080061fd
 800614c:	080060c9 	.word	0x080060c9
 8006150:	080061fd 	.word	0x080061fd
 8006154:	08006293 	.word	0x08006293
 8006158:	080060c9 	.word	0x080060c9
 800615c:	080061a5 	.word	0x080061a5
 8006160:	080061e3 	.word	0x080061e3
 8006164:	080061e3 	.word	0x080061e3
 8006168:	080061e3 	.word	0x080061e3
 800616c:	080061e3 	.word	0x080061e3
 8006170:	080061e3 	.word	0x080061e3
 8006174:	080061e3 	.word	0x080061e3
 8006178:	080061e3 	.word	0x080061e3
 800617c:	080061e3 	.word	0x080061e3
 8006180:	080061e3 	.word	0x080061e3
 8006184:	2b6e      	cmp	r3, #110	@ 0x6e
 8006186:	d809      	bhi.n	800619c <_scanf_float+0x138>
 8006188:	2b60      	cmp	r3, #96	@ 0x60
 800618a:	d8b2      	bhi.n	80060f2 <_scanf_float+0x8e>
 800618c:	2b54      	cmp	r3, #84	@ 0x54
 800618e:	d07b      	beq.n	8006288 <_scanf_float+0x224>
 8006190:	2b59      	cmp	r3, #89	@ 0x59
 8006192:	d199      	bne.n	80060c8 <_scanf_float+0x64>
 8006194:	2d07      	cmp	r5, #7
 8006196:	d197      	bne.n	80060c8 <_scanf_float+0x64>
 8006198:	2508      	movs	r5, #8
 800619a:	e02c      	b.n	80061f6 <_scanf_float+0x192>
 800619c:	2b74      	cmp	r3, #116	@ 0x74
 800619e:	d073      	beq.n	8006288 <_scanf_float+0x224>
 80061a0:	2b79      	cmp	r3, #121	@ 0x79
 80061a2:	e7f6      	b.n	8006192 <_scanf_float+0x12e>
 80061a4:	6821      	ldr	r1, [r4, #0]
 80061a6:	05c8      	lsls	r0, r1, #23
 80061a8:	d51b      	bpl.n	80061e2 <_scanf_float+0x17e>
 80061aa:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80061ae:	6021      	str	r1, [r4, #0]
 80061b0:	f109 0901 	add.w	r9, r9, #1
 80061b4:	f1bb 0f00 	cmp.w	fp, #0
 80061b8:	d003      	beq.n	80061c2 <_scanf_float+0x15e>
 80061ba:	3201      	adds	r2, #1
 80061bc:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80061c0:	60a2      	str	r2, [r4, #8]
 80061c2:	68a3      	ldr	r3, [r4, #8]
 80061c4:	3b01      	subs	r3, #1
 80061c6:	60a3      	str	r3, [r4, #8]
 80061c8:	6923      	ldr	r3, [r4, #16]
 80061ca:	3301      	adds	r3, #1
 80061cc:	6123      	str	r3, [r4, #16]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	3b01      	subs	r3, #1
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	607b      	str	r3, [r7, #4]
 80061d6:	f340 8087 	ble.w	80062e8 <_scanf_float+0x284>
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	3301      	adds	r3, #1
 80061de:	603b      	str	r3, [r7, #0]
 80061e0:	e765      	b.n	80060ae <_scanf_float+0x4a>
 80061e2:	eb1a 0105 	adds.w	r1, sl, r5
 80061e6:	f47f af6f 	bne.w	80060c8 <_scanf_float+0x64>
 80061ea:	6822      	ldr	r2, [r4, #0]
 80061ec:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80061f0:	6022      	str	r2, [r4, #0]
 80061f2:	460d      	mov	r5, r1
 80061f4:	468a      	mov	sl, r1
 80061f6:	f806 3b01 	strb.w	r3, [r6], #1
 80061fa:	e7e2      	b.n	80061c2 <_scanf_float+0x15e>
 80061fc:	6822      	ldr	r2, [r4, #0]
 80061fe:	0610      	lsls	r0, r2, #24
 8006200:	f57f af62 	bpl.w	80060c8 <_scanf_float+0x64>
 8006204:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006208:	6022      	str	r2, [r4, #0]
 800620a:	e7f4      	b.n	80061f6 <_scanf_float+0x192>
 800620c:	f1ba 0f00 	cmp.w	sl, #0
 8006210:	d10e      	bne.n	8006230 <_scanf_float+0x1cc>
 8006212:	f1b9 0f00 	cmp.w	r9, #0
 8006216:	d10e      	bne.n	8006236 <_scanf_float+0x1d2>
 8006218:	6822      	ldr	r2, [r4, #0]
 800621a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800621e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006222:	d108      	bne.n	8006236 <_scanf_float+0x1d2>
 8006224:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006228:	6022      	str	r2, [r4, #0]
 800622a:	f04f 0a01 	mov.w	sl, #1
 800622e:	e7e2      	b.n	80061f6 <_scanf_float+0x192>
 8006230:	f1ba 0f02 	cmp.w	sl, #2
 8006234:	d055      	beq.n	80062e2 <_scanf_float+0x27e>
 8006236:	2d01      	cmp	r5, #1
 8006238:	d002      	beq.n	8006240 <_scanf_float+0x1dc>
 800623a:	2d04      	cmp	r5, #4
 800623c:	f47f af44 	bne.w	80060c8 <_scanf_float+0x64>
 8006240:	3501      	adds	r5, #1
 8006242:	b2ed      	uxtb	r5, r5
 8006244:	e7d7      	b.n	80061f6 <_scanf_float+0x192>
 8006246:	f1ba 0f01 	cmp.w	sl, #1
 800624a:	f47f af3d 	bne.w	80060c8 <_scanf_float+0x64>
 800624e:	f04f 0a02 	mov.w	sl, #2
 8006252:	e7d0      	b.n	80061f6 <_scanf_float+0x192>
 8006254:	b97d      	cbnz	r5, 8006276 <_scanf_float+0x212>
 8006256:	f1b9 0f00 	cmp.w	r9, #0
 800625a:	f47f af38 	bne.w	80060ce <_scanf_float+0x6a>
 800625e:	6822      	ldr	r2, [r4, #0]
 8006260:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006264:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006268:	f040 8108 	bne.w	800647c <_scanf_float+0x418>
 800626c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006270:	6022      	str	r2, [r4, #0]
 8006272:	2501      	movs	r5, #1
 8006274:	e7bf      	b.n	80061f6 <_scanf_float+0x192>
 8006276:	2d03      	cmp	r5, #3
 8006278:	d0e2      	beq.n	8006240 <_scanf_float+0x1dc>
 800627a:	2d05      	cmp	r5, #5
 800627c:	e7de      	b.n	800623c <_scanf_float+0x1d8>
 800627e:	2d02      	cmp	r5, #2
 8006280:	f47f af22 	bne.w	80060c8 <_scanf_float+0x64>
 8006284:	2503      	movs	r5, #3
 8006286:	e7b6      	b.n	80061f6 <_scanf_float+0x192>
 8006288:	2d06      	cmp	r5, #6
 800628a:	f47f af1d 	bne.w	80060c8 <_scanf_float+0x64>
 800628e:	2507      	movs	r5, #7
 8006290:	e7b1      	b.n	80061f6 <_scanf_float+0x192>
 8006292:	6822      	ldr	r2, [r4, #0]
 8006294:	0591      	lsls	r1, r2, #22
 8006296:	f57f af17 	bpl.w	80060c8 <_scanf_float+0x64>
 800629a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800629e:	6022      	str	r2, [r4, #0]
 80062a0:	f8cd 9008 	str.w	r9, [sp, #8]
 80062a4:	e7a7      	b.n	80061f6 <_scanf_float+0x192>
 80062a6:	6822      	ldr	r2, [r4, #0]
 80062a8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80062ac:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80062b0:	d006      	beq.n	80062c0 <_scanf_float+0x25c>
 80062b2:	0550      	lsls	r0, r2, #21
 80062b4:	f57f af08 	bpl.w	80060c8 <_scanf_float+0x64>
 80062b8:	f1b9 0f00 	cmp.w	r9, #0
 80062bc:	f000 80de 	beq.w	800647c <_scanf_float+0x418>
 80062c0:	0591      	lsls	r1, r2, #22
 80062c2:	bf58      	it	pl
 80062c4:	9902      	ldrpl	r1, [sp, #8]
 80062c6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80062ca:	bf58      	it	pl
 80062cc:	eba9 0101 	subpl.w	r1, r9, r1
 80062d0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80062d4:	bf58      	it	pl
 80062d6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80062da:	6022      	str	r2, [r4, #0]
 80062dc:	f04f 0900 	mov.w	r9, #0
 80062e0:	e789      	b.n	80061f6 <_scanf_float+0x192>
 80062e2:	f04f 0a03 	mov.w	sl, #3
 80062e6:	e786      	b.n	80061f6 <_scanf_float+0x192>
 80062e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80062ec:	4639      	mov	r1, r7
 80062ee:	4640      	mov	r0, r8
 80062f0:	4798      	blx	r3
 80062f2:	2800      	cmp	r0, #0
 80062f4:	f43f aedb 	beq.w	80060ae <_scanf_float+0x4a>
 80062f8:	e6e6      	b.n	80060c8 <_scanf_float+0x64>
 80062fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80062fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006302:	463a      	mov	r2, r7
 8006304:	4640      	mov	r0, r8
 8006306:	4798      	blx	r3
 8006308:	6923      	ldr	r3, [r4, #16]
 800630a:	3b01      	subs	r3, #1
 800630c:	6123      	str	r3, [r4, #16]
 800630e:	e6e8      	b.n	80060e2 <_scanf_float+0x7e>
 8006310:	1e6b      	subs	r3, r5, #1
 8006312:	2b06      	cmp	r3, #6
 8006314:	d824      	bhi.n	8006360 <_scanf_float+0x2fc>
 8006316:	2d02      	cmp	r5, #2
 8006318:	d836      	bhi.n	8006388 <_scanf_float+0x324>
 800631a:	9b01      	ldr	r3, [sp, #4]
 800631c:	429e      	cmp	r6, r3
 800631e:	f67f aee4 	bls.w	80060ea <_scanf_float+0x86>
 8006322:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006326:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800632a:	463a      	mov	r2, r7
 800632c:	4640      	mov	r0, r8
 800632e:	4798      	blx	r3
 8006330:	6923      	ldr	r3, [r4, #16]
 8006332:	3b01      	subs	r3, #1
 8006334:	6123      	str	r3, [r4, #16]
 8006336:	e7f0      	b.n	800631a <_scanf_float+0x2b6>
 8006338:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800633c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006340:	463a      	mov	r2, r7
 8006342:	4640      	mov	r0, r8
 8006344:	4798      	blx	r3
 8006346:	6923      	ldr	r3, [r4, #16]
 8006348:	3b01      	subs	r3, #1
 800634a:	6123      	str	r3, [r4, #16]
 800634c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006350:	fa5f fa8a 	uxtb.w	sl, sl
 8006354:	f1ba 0f02 	cmp.w	sl, #2
 8006358:	d1ee      	bne.n	8006338 <_scanf_float+0x2d4>
 800635a:	3d03      	subs	r5, #3
 800635c:	b2ed      	uxtb	r5, r5
 800635e:	1b76      	subs	r6, r6, r5
 8006360:	6823      	ldr	r3, [r4, #0]
 8006362:	05da      	lsls	r2, r3, #23
 8006364:	d530      	bpl.n	80063c8 <_scanf_float+0x364>
 8006366:	055b      	lsls	r3, r3, #21
 8006368:	d511      	bpl.n	800638e <_scanf_float+0x32a>
 800636a:	9b01      	ldr	r3, [sp, #4]
 800636c:	429e      	cmp	r6, r3
 800636e:	f67f aebc 	bls.w	80060ea <_scanf_float+0x86>
 8006372:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006376:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800637a:	463a      	mov	r2, r7
 800637c:	4640      	mov	r0, r8
 800637e:	4798      	blx	r3
 8006380:	6923      	ldr	r3, [r4, #16]
 8006382:	3b01      	subs	r3, #1
 8006384:	6123      	str	r3, [r4, #16]
 8006386:	e7f0      	b.n	800636a <_scanf_float+0x306>
 8006388:	46aa      	mov	sl, r5
 800638a:	46b3      	mov	fp, r6
 800638c:	e7de      	b.n	800634c <_scanf_float+0x2e8>
 800638e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006392:	6923      	ldr	r3, [r4, #16]
 8006394:	2965      	cmp	r1, #101	@ 0x65
 8006396:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800639a:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800639e:	6123      	str	r3, [r4, #16]
 80063a0:	d00c      	beq.n	80063bc <_scanf_float+0x358>
 80063a2:	2945      	cmp	r1, #69	@ 0x45
 80063a4:	d00a      	beq.n	80063bc <_scanf_float+0x358>
 80063a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80063aa:	463a      	mov	r2, r7
 80063ac:	4640      	mov	r0, r8
 80063ae:	4798      	blx	r3
 80063b0:	6923      	ldr	r3, [r4, #16]
 80063b2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80063b6:	3b01      	subs	r3, #1
 80063b8:	1eb5      	subs	r5, r6, #2
 80063ba:	6123      	str	r3, [r4, #16]
 80063bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80063c0:	463a      	mov	r2, r7
 80063c2:	4640      	mov	r0, r8
 80063c4:	4798      	blx	r3
 80063c6:	462e      	mov	r6, r5
 80063c8:	6822      	ldr	r2, [r4, #0]
 80063ca:	f012 0210 	ands.w	r2, r2, #16
 80063ce:	d001      	beq.n	80063d4 <_scanf_float+0x370>
 80063d0:	2000      	movs	r0, #0
 80063d2:	e68b      	b.n	80060ec <_scanf_float+0x88>
 80063d4:	7032      	strb	r2, [r6, #0]
 80063d6:	6823      	ldr	r3, [r4, #0]
 80063d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80063dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063e0:	d11c      	bne.n	800641c <_scanf_float+0x3b8>
 80063e2:	9b02      	ldr	r3, [sp, #8]
 80063e4:	454b      	cmp	r3, r9
 80063e6:	eba3 0209 	sub.w	r2, r3, r9
 80063ea:	d123      	bne.n	8006434 <_scanf_float+0x3d0>
 80063ec:	9901      	ldr	r1, [sp, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	4640      	mov	r0, r8
 80063f2:	f002 fd61 	bl	8008eb8 <_strtod_r>
 80063f6:	9b03      	ldr	r3, [sp, #12]
 80063f8:	6821      	ldr	r1, [r4, #0]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f011 0f02 	tst.w	r1, #2
 8006400:	ec57 6b10 	vmov	r6, r7, d0
 8006404:	f103 0204 	add.w	r2, r3, #4
 8006408:	d01f      	beq.n	800644a <_scanf_float+0x3e6>
 800640a:	9903      	ldr	r1, [sp, #12]
 800640c:	600a      	str	r2, [r1, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	e9c3 6700 	strd	r6, r7, [r3]
 8006414:	68e3      	ldr	r3, [r4, #12]
 8006416:	3301      	adds	r3, #1
 8006418:	60e3      	str	r3, [r4, #12]
 800641a:	e7d9      	b.n	80063d0 <_scanf_float+0x36c>
 800641c:	9b04      	ldr	r3, [sp, #16]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d0e4      	beq.n	80063ec <_scanf_float+0x388>
 8006422:	9905      	ldr	r1, [sp, #20]
 8006424:	230a      	movs	r3, #10
 8006426:	3101      	adds	r1, #1
 8006428:	4640      	mov	r0, r8
 800642a:	f002 fdc5 	bl	8008fb8 <_strtol_r>
 800642e:	9b04      	ldr	r3, [sp, #16]
 8006430:	9e05      	ldr	r6, [sp, #20]
 8006432:	1ac2      	subs	r2, r0, r3
 8006434:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006438:	429e      	cmp	r6, r3
 800643a:	bf28      	it	cs
 800643c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006440:	4910      	ldr	r1, [pc, #64]	@ (8006484 <_scanf_float+0x420>)
 8006442:	4630      	mov	r0, r6
 8006444:	f000 f954 	bl	80066f0 <siprintf>
 8006448:	e7d0      	b.n	80063ec <_scanf_float+0x388>
 800644a:	f011 0f04 	tst.w	r1, #4
 800644e:	9903      	ldr	r1, [sp, #12]
 8006450:	600a      	str	r2, [r1, #0]
 8006452:	d1dc      	bne.n	800640e <_scanf_float+0x3aa>
 8006454:	681d      	ldr	r5, [r3, #0]
 8006456:	4632      	mov	r2, r6
 8006458:	463b      	mov	r3, r7
 800645a:	4630      	mov	r0, r6
 800645c:	4639      	mov	r1, r7
 800645e:	f7fa fb8d 	bl	8000b7c <__aeabi_dcmpun>
 8006462:	b128      	cbz	r0, 8006470 <_scanf_float+0x40c>
 8006464:	4808      	ldr	r0, [pc, #32]	@ (8006488 <_scanf_float+0x424>)
 8006466:	f000 fb1f 	bl	8006aa8 <nanf>
 800646a:	ed85 0a00 	vstr	s0, [r5]
 800646e:	e7d1      	b.n	8006414 <_scanf_float+0x3b0>
 8006470:	4630      	mov	r0, r6
 8006472:	4639      	mov	r1, r7
 8006474:	f7fa fbe0 	bl	8000c38 <__aeabi_d2f>
 8006478:	6028      	str	r0, [r5, #0]
 800647a:	e7cb      	b.n	8006414 <_scanf_float+0x3b0>
 800647c:	f04f 0900 	mov.w	r9, #0
 8006480:	e629      	b.n	80060d6 <_scanf_float+0x72>
 8006482:	bf00      	nop
 8006484:	0800a270 	.word	0x0800a270
 8006488:	0800a605 	.word	0x0800a605

0800648c <std>:
 800648c:	2300      	movs	r3, #0
 800648e:	b510      	push	{r4, lr}
 8006490:	4604      	mov	r4, r0
 8006492:	e9c0 3300 	strd	r3, r3, [r0]
 8006496:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800649a:	6083      	str	r3, [r0, #8]
 800649c:	8181      	strh	r1, [r0, #12]
 800649e:	6643      	str	r3, [r0, #100]	@ 0x64
 80064a0:	81c2      	strh	r2, [r0, #14]
 80064a2:	6183      	str	r3, [r0, #24]
 80064a4:	4619      	mov	r1, r3
 80064a6:	2208      	movs	r2, #8
 80064a8:	305c      	adds	r0, #92	@ 0x5c
 80064aa:	f000 fa19 	bl	80068e0 <memset>
 80064ae:	4b0d      	ldr	r3, [pc, #52]	@ (80064e4 <std+0x58>)
 80064b0:	6263      	str	r3, [r4, #36]	@ 0x24
 80064b2:	4b0d      	ldr	r3, [pc, #52]	@ (80064e8 <std+0x5c>)
 80064b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80064b6:	4b0d      	ldr	r3, [pc, #52]	@ (80064ec <std+0x60>)
 80064b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80064ba:	4b0d      	ldr	r3, [pc, #52]	@ (80064f0 <std+0x64>)
 80064bc:	6323      	str	r3, [r4, #48]	@ 0x30
 80064be:	4b0d      	ldr	r3, [pc, #52]	@ (80064f4 <std+0x68>)
 80064c0:	6224      	str	r4, [r4, #32]
 80064c2:	429c      	cmp	r4, r3
 80064c4:	d006      	beq.n	80064d4 <std+0x48>
 80064c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80064ca:	4294      	cmp	r4, r2
 80064cc:	d002      	beq.n	80064d4 <std+0x48>
 80064ce:	33d0      	adds	r3, #208	@ 0xd0
 80064d0:	429c      	cmp	r4, r3
 80064d2:	d105      	bne.n	80064e0 <std+0x54>
 80064d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80064d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064dc:	f000 bad2 	b.w	8006a84 <__retarget_lock_init_recursive>
 80064e0:	bd10      	pop	{r4, pc}
 80064e2:	bf00      	nop
 80064e4:	08006731 	.word	0x08006731
 80064e8:	08006753 	.word	0x08006753
 80064ec:	0800678b 	.word	0x0800678b
 80064f0:	080067af 	.word	0x080067af
 80064f4:	20005260 	.word	0x20005260

080064f8 <stdio_exit_handler>:
 80064f8:	4a02      	ldr	r2, [pc, #8]	@ (8006504 <stdio_exit_handler+0xc>)
 80064fa:	4903      	ldr	r1, [pc, #12]	@ (8006508 <stdio_exit_handler+0x10>)
 80064fc:	4803      	ldr	r0, [pc, #12]	@ (800650c <stdio_exit_handler+0x14>)
 80064fe:	f000 b869 	b.w	80065d4 <_fwalk_sglue>
 8006502:	bf00      	nop
 8006504:	20000014 	.word	0x20000014
 8006508:	080095f9 	.word	0x080095f9
 800650c:	20000024 	.word	0x20000024

08006510 <cleanup_stdio>:
 8006510:	6841      	ldr	r1, [r0, #4]
 8006512:	4b0c      	ldr	r3, [pc, #48]	@ (8006544 <cleanup_stdio+0x34>)
 8006514:	4299      	cmp	r1, r3
 8006516:	b510      	push	{r4, lr}
 8006518:	4604      	mov	r4, r0
 800651a:	d001      	beq.n	8006520 <cleanup_stdio+0x10>
 800651c:	f003 f86c 	bl	80095f8 <_fflush_r>
 8006520:	68a1      	ldr	r1, [r4, #8]
 8006522:	4b09      	ldr	r3, [pc, #36]	@ (8006548 <cleanup_stdio+0x38>)
 8006524:	4299      	cmp	r1, r3
 8006526:	d002      	beq.n	800652e <cleanup_stdio+0x1e>
 8006528:	4620      	mov	r0, r4
 800652a:	f003 f865 	bl	80095f8 <_fflush_r>
 800652e:	68e1      	ldr	r1, [r4, #12]
 8006530:	4b06      	ldr	r3, [pc, #24]	@ (800654c <cleanup_stdio+0x3c>)
 8006532:	4299      	cmp	r1, r3
 8006534:	d004      	beq.n	8006540 <cleanup_stdio+0x30>
 8006536:	4620      	mov	r0, r4
 8006538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800653c:	f003 b85c 	b.w	80095f8 <_fflush_r>
 8006540:	bd10      	pop	{r4, pc}
 8006542:	bf00      	nop
 8006544:	20005260 	.word	0x20005260
 8006548:	200052c8 	.word	0x200052c8
 800654c:	20005330 	.word	0x20005330

08006550 <global_stdio_init.part.0>:
 8006550:	b510      	push	{r4, lr}
 8006552:	4b0b      	ldr	r3, [pc, #44]	@ (8006580 <global_stdio_init.part.0+0x30>)
 8006554:	4c0b      	ldr	r4, [pc, #44]	@ (8006584 <global_stdio_init.part.0+0x34>)
 8006556:	4a0c      	ldr	r2, [pc, #48]	@ (8006588 <global_stdio_init.part.0+0x38>)
 8006558:	601a      	str	r2, [r3, #0]
 800655a:	4620      	mov	r0, r4
 800655c:	2200      	movs	r2, #0
 800655e:	2104      	movs	r1, #4
 8006560:	f7ff ff94 	bl	800648c <std>
 8006564:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006568:	2201      	movs	r2, #1
 800656a:	2109      	movs	r1, #9
 800656c:	f7ff ff8e 	bl	800648c <std>
 8006570:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006574:	2202      	movs	r2, #2
 8006576:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800657a:	2112      	movs	r1, #18
 800657c:	f7ff bf86 	b.w	800648c <std>
 8006580:	20005398 	.word	0x20005398
 8006584:	20005260 	.word	0x20005260
 8006588:	080064f9 	.word	0x080064f9

0800658c <__sfp_lock_acquire>:
 800658c:	4801      	ldr	r0, [pc, #4]	@ (8006594 <__sfp_lock_acquire+0x8>)
 800658e:	f000 ba7a 	b.w	8006a86 <__retarget_lock_acquire_recursive>
 8006592:	bf00      	nop
 8006594:	200053a1 	.word	0x200053a1

08006598 <__sfp_lock_release>:
 8006598:	4801      	ldr	r0, [pc, #4]	@ (80065a0 <__sfp_lock_release+0x8>)
 800659a:	f000 ba75 	b.w	8006a88 <__retarget_lock_release_recursive>
 800659e:	bf00      	nop
 80065a0:	200053a1 	.word	0x200053a1

080065a4 <__sinit>:
 80065a4:	b510      	push	{r4, lr}
 80065a6:	4604      	mov	r4, r0
 80065a8:	f7ff fff0 	bl	800658c <__sfp_lock_acquire>
 80065ac:	6a23      	ldr	r3, [r4, #32]
 80065ae:	b11b      	cbz	r3, 80065b8 <__sinit+0x14>
 80065b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065b4:	f7ff bff0 	b.w	8006598 <__sfp_lock_release>
 80065b8:	4b04      	ldr	r3, [pc, #16]	@ (80065cc <__sinit+0x28>)
 80065ba:	6223      	str	r3, [r4, #32]
 80065bc:	4b04      	ldr	r3, [pc, #16]	@ (80065d0 <__sinit+0x2c>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d1f5      	bne.n	80065b0 <__sinit+0xc>
 80065c4:	f7ff ffc4 	bl	8006550 <global_stdio_init.part.0>
 80065c8:	e7f2      	b.n	80065b0 <__sinit+0xc>
 80065ca:	bf00      	nop
 80065cc:	08006511 	.word	0x08006511
 80065d0:	20005398 	.word	0x20005398

080065d4 <_fwalk_sglue>:
 80065d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065d8:	4607      	mov	r7, r0
 80065da:	4688      	mov	r8, r1
 80065dc:	4614      	mov	r4, r2
 80065de:	2600      	movs	r6, #0
 80065e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80065e4:	f1b9 0901 	subs.w	r9, r9, #1
 80065e8:	d505      	bpl.n	80065f6 <_fwalk_sglue+0x22>
 80065ea:	6824      	ldr	r4, [r4, #0]
 80065ec:	2c00      	cmp	r4, #0
 80065ee:	d1f7      	bne.n	80065e0 <_fwalk_sglue+0xc>
 80065f0:	4630      	mov	r0, r6
 80065f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065f6:	89ab      	ldrh	r3, [r5, #12]
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d907      	bls.n	800660c <_fwalk_sglue+0x38>
 80065fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006600:	3301      	adds	r3, #1
 8006602:	d003      	beq.n	800660c <_fwalk_sglue+0x38>
 8006604:	4629      	mov	r1, r5
 8006606:	4638      	mov	r0, r7
 8006608:	47c0      	blx	r8
 800660a:	4306      	orrs	r6, r0
 800660c:	3568      	adds	r5, #104	@ 0x68
 800660e:	e7e9      	b.n	80065e4 <_fwalk_sglue+0x10>

08006610 <iprintf>:
 8006610:	b40f      	push	{r0, r1, r2, r3}
 8006612:	b507      	push	{r0, r1, r2, lr}
 8006614:	4906      	ldr	r1, [pc, #24]	@ (8006630 <iprintf+0x20>)
 8006616:	ab04      	add	r3, sp, #16
 8006618:	6808      	ldr	r0, [r1, #0]
 800661a:	f853 2b04 	ldr.w	r2, [r3], #4
 800661e:	6881      	ldr	r1, [r0, #8]
 8006620:	9301      	str	r3, [sp, #4]
 8006622:	f002 fe4d 	bl	80092c0 <_vfiprintf_r>
 8006626:	b003      	add	sp, #12
 8006628:	f85d eb04 	ldr.w	lr, [sp], #4
 800662c:	b004      	add	sp, #16
 800662e:	4770      	bx	lr
 8006630:	20000020 	.word	0x20000020

08006634 <_puts_r>:
 8006634:	6a03      	ldr	r3, [r0, #32]
 8006636:	b570      	push	{r4, r5, r6, lr}
 8006638:	6884      	ldr	r4, [r0, #8]
 800663a:	4605      	mov	r5, r0
 800663c:	460e      	mov	r6, r1
 800663e:	b90b      	cbnz	r3, 8006644 <_puts_r+0x10>
 8006640:	f7ff ffb0 	bl	80065a4 <__sinit>
 8006644:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006646:	07db      	lsls	r3, r3, #31
 8006648:	d405      	bmi.n	8006656 <_puts_r+0x22>
 800664a:	89a3      	ldrh	r3, [r4, #12]
 800664c:	0598      	lsls	r0, r3, #22
 800664e:	d402      	bmi.n	8006656 <_puts_r+0x22>
 8006650:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006652:	f000 fa18 	bl	8006a86 <__retarget_lock_acquire_recursive>
 8006656:	89a3      	ldrh	r3, [r4, #12]
 8006658:	0719      	lsls	r1, r3, #28
 800665a:	d502      	bpl.n	8006662 <_puts_r+0x2e>
 800665c:	6923      	ldr	r3, [r4, #16]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d135      	bne.n	80066ce <_puts_r+0x9a>
 8006662:	4621      	mov	r1, r4
 8006664:	4628      	mov	r0, r5
 8006666:	f000 f8e5 	bl	8006834 <__swsetup_r>
 800666a:	b380      	cbz	r0, 80066ce <_puts_r+0x9a>
 800666c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8006670:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006672:	07da      	lsls	r2, r3, #31
 8006674:	d405      	bmi.n	8006682 <_puts_r+0x4e>
 8006676:	89a3      	ldrh	r3, [r4, #12]
 8006678:	059b      	lsls	r3, r3, #22
 800667a:	d402      	bmi.n	8006682 <_puts_r+0x4e>
 800667c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800667e:	f000 fa03 	bl	8006a88 <__retarget_lock_release_recursive>
 8006682:	4628      	mov	r0, r5
 8006684:	bd70      	pop	{r4, r5, r6, pc}
 8006686:	2b00      	cmp	r3, #0
 8006688:	da04      	bge.n	8006694 <_puts_r+0x60>
 800668a:	69a2      	ldr	r2, [r4, #24]
 800668c:	429a      	cmp	r2, r3
 800668e:	dc17      	bgt.n	80066c0 <_puts_r+0x8c>
 8006690:	290a      	cmp	r1, #10
 8006692:	d015      	beq.n	80066c0 <_puts_r+0x8c>
 8006694:	6823      	ldr	r3, [r4, #0]
 8006696:	1c5a      	adds	r2, r3, #1
 8006698:	6022      	str	r2, [r4, #0]
 800669a:	7019      	strb	r1, [r3, #0]
 800669c:	68a3      	ldr	r3, [r4, #8]
 800669e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80066a2:	3b01      	subs	r3, #1
 80066a4:	60a3      	str	r3, [r4, #8]
 80066a6:	2900      	cmp	r1, #0
 80066a8:	d1ed      	bne.n	8006686 <_puts_r+0x52>
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	da11      	bge.n	80066d2 <_puts_r+0x9e>
 80066ae:	4622      	mov	r2, r4
 80066b0:	210a      	movs	r1, #10
 80066b2:	4628      	mov	r0, r5
 80066b4:	f000 f87f 	bl	80067b6 <__swbuf_r>
 80066b8:	3001      	adds	r0, #1
 80066ba:	d0d7      	beq.n	800666c <_puts_r+0x38>
 80066bc:	250a      	movs	r5, #10
 80066be:	e7d7      	b.n	8006670 <_puts_r+0x3c>
 80066c0:	4622      	mov	r2, r4
 80066c2:	4628      	mov	r0, r5
 80066c4:	f000 f877 	bl	80067b6 <__swbuf_r>
 80066c8:	3001      	adds	r0, #1
 80066ca:	d1e7      	bne.n	800669c <_puts_r+0x68>
 80066cc:	e7ce      	b.n	800666c <_puts_r+0x38>
 80066ce:	3e01      	subs	r6, #1
 80066d0:	e7e4      	b.n	800669c <_puts_r+0x68>
 80066d2:	6823      	ldr	r3, [r4, #0]
 80066d4:	1c5a      	adds	r2, r3, #1
 80066d6:	6022      	str	r2, [r4, #0]
 80066d8:	220a      	movs	r2, #10
 80066da:	701a      	strb	r2, [r3, #0]
 80066dc:	e7ee      	b.n	80066bc <_puts_r+0x88>
	...

080066e0 <puts>:
 80066e0:	4b02      	ldr	r3, [pc, #8]	@ (80066ec <puts+0xc>)
 80066e2:	4601      	mov	r1, r0
 80066e4:	6818      	ldr	r0, [r3, #0]
 80066e6:	f7ff bfa5 	b.w	8006634 <_puts_r>
 80066ea:	bf00      	nop
 80066ec:	20000020 	.word	0x20000020

080066f0 <siprintf>:
 80066f0:	b40e      	push	{r1, r2, r3}
 80066f2:	b500      	push	{lr}
 80066f4:	b09c      	sub	sp, #112	@ 0x70
 80066f6:	ab1d      	add	r3, sp, #116	@ 0x74
 80066f8:	9002      	str	r0, [sp, #8]
 80066fa:	9006      	str	r0, [sp, #24]
 80066fc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006700:	4809      	ldr	r0, [pc, #36]	@ (8006728 <siprintf+0x38>)
 8006702:	9107      	str	r1, [sp, #28]
 8006704:	9104      	str	r1, [sp, #16]
 8006706:	4909      	ldr	r1, [pc, #36]	@ (800672c <siprintf+0x3c>)
 8006708:	f853 2b04 	ldr.w	r2, [r3], #4
 800670c:	9105      	str	r1, [sp, #20]
 800670e:	6800      	ldr	r0, [r0, #0]
 8006710:	9301      	str	r3, [sp, #4]
 8006712:	a902      	add	r1, sp, #8
 8006714:	f002 fcae 	bl	8009074 <_svfiprintf_r>
 8006718:	9b02      	ldr	r3, [sp, #8]
 800671a:	2200      	movs	r2, #0
 800671c:	701a      	strb	r2, [r3, #0]
 800671e:	b01c      	add	sp, #112	@ 0x70
 8006720:	f85d eb04 	ldr.w	lr, [sp], #4
 8006724:	b003      	add	sp, #12
 8006726:	4770      	bx	lr
 8006728:	20000020 	.word	0x20000020
 800672c:	ffff0208 	.word	0xffff0208

08006730 <__sread>:
 8006730:	b510      	push	{r4, lr}
 8006732:	460c      	mov	r4, r1
 8006734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006738:	f000 f956 	bl	80069e8 <_read_r>
 800673c:	2800      	cmp	r0, #0
 800673e:	bfab      	itete	ge
 8006740:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006742:	89a3      	ldrhlt	r3, [r4, #12]
 8006744:	181b      	addge	r3, r3, r0
 8006746:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800674a:	bfac      	ite	ge
 800674c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800674e:	81a3      	strhlt	r3, [r4, #12]
 8006750:	bd10      	pop	{r4, pc}

08006752 <__swrite>:
 8006752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006756:	461f      	mov	r7, r3
 8006758:	898b      	ldrh	r3, [r1, #12]
 800675a:	05db      	lsls	r3, r3, #23
 800675c:	4605      	mov	r5, r0
 800675e:	460c      	mov	r4, r1
 8006760:	4616      	mov	r6, r2
 8006762:	d505      	bpl.n	8006770 <__swrite+0x1e>
 8006764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006768:	2302      	movs	r3, #2
 800676a:	2200      	movs	r2, #0
 800676c:	f000 f92a 	bl	80069c4 <_lseek_r>
 8006770:	89a3      	ldrh	r3, [r4, #12]
 8006772:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006776:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800677a:	81a3      	strh	r3, [r4, #12]
 800677c:	4632      	mov	r2, r6
 800677e:	463b      	mov	r3, r7
 8006780:	4628      	mov	r0, r5
 8006782:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006786:	f000 b941 	b.w	8006a0c <_write_r>

0800678a <__sseek>:
 800678a:	b510      	push	{r4, lr}
 800678c:	460c      	mov	r4, r1
 800678e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006792:	f000 f917 	bl	80069c4 <_lseek_r>
 8006796:	1c43      	adds	r3, r0, #1
 8006798:	89a3      	ldrh	r3, [r4, #12]
 800679a:	bf15      	itete	ne
 800679c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800679e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80067a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80067a6:	81a3      	strheq	r3, [r4, #12]
 80067a8:	bf18      	it	ne
 80067aa:	81a3      	strhne	r3, [r4, #12]
 80067ac:	bd10      	pop	{r4, pc}

080067ae <__sclose>:
 80067ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067b2:	f000 b8a1 	b.w	80068f8 <_close_r>

080067b6 <__swbuf_r>:
 80067b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067b8:	460e      	mov	r6, r1
 80067ba:	4614      	mov	r4, r2
 80067bc:	4605      	mov	r5, r0
 80067be:	b118      	cbz	r0, 80067c8 <__swbuf_r+0x12>
 80067c0:	6a03      	ldr	r3, [r0, #32]
 80067c2:	b90b      	cbnz	r3, 80067c8 <__swbuf_r+0x12>
 80067c4:	f7ff feee 	bl	80065a4 <__sinit>
 80067c8:	69a3      	ldr	r3, [r4, #24]
 80067ca:	60a3      	str	r3, [r4, #8]
 80067cc:	89a3      	ldrh	r3, [r4, #12]
 80067ce:	071a      	lsls	r2, r3, #28
 80067d0:	d501      	bpl.n	80067d6 <__swbuf_r+0x20>
 80067d2:	6923      	ldr	r3, [r4, #16]
 80067d4:	b943      	cbnz	r3, 80067e8 <__swbuf_r+0x32>
 80067d6:	4621      	mov	r1, r4
 80067d8:	4628      	mov	r0, r5
 80067da:	f000 f82b 	bl	8006834 <__swsetup_r>
 80067de:	b118      	cbz	r0, 80067e8 <__swbuf_r+0x32>
 80067e0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80067e4:	4638      	mov	r0, r7
 80067e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067e8:	6823      	ldr	r3, [r4, #0]
 80067ea:	6922      	ldr	r2, [r4, #16]
 80067ec:	1a98      	subs	r0, r3, r2
 80067ee:	6963      	ldr	r3, [r4, #20]
 80067f0:	b2f6      	uxtb	r6, r6
 80067f2:	4283      	cmp	r3, r0
 80067f4:	4637      	mov	r7, r6
 80067f6:	dc05      	bgt.n	8006804 <__swbuf_r+0x4e>
 80067f8:	4621      	mov	r1, r4
 80067fa:	4628      	mov	r0, r5
 80067fc:	f002 fefc 	bl	80095f8 <_fflush_r>
 8006800:	2800      	cmp	r0, #0
 8006802:	d1ed      	bne.n	80067e0 <__swbuf_r+0x2a>
 8006804:	68a3      	ldr	r3, [r4, #8]
 8006806:	3b01      	subs	r3, #1
 8006808:	60a3      	str	r3, [r4, #8]
 800680a:	6823      	ldr	r3, [r4, #0]
 800680c:	1c5a      	adds	r2, r3, #1
 800680e:	6022      	str	r2, [r4, #0]
 8006810:	701e      	strb	r6, [r3, #0]
 8006812:	6962      	ldr	r2, [r4, #20]
 8006814:	1c43      	adds	r3, r0, #1
 8006816:	429a      	cmp	r2, r3
 8006818:	d004      	beq.n	8006824 <__swbuf_r+0x6e>
 800681a:	89a3      	ldrh	r3, [r4, #12]
 800681c:	07db      	lsls	r3, r3, #31
 800681e:	d5e1      	bpl.n	80067e4 <__swbuf_r+0x2e>
 8006820:	2e0a      	cmp	r6, #10
 8006822:	d1df      	bne.n	80067e4 <__swbuf_r+0x2e>
 8006824:	4621      	mov	r1, r4
 8006826:	4628      	mov	r0, r5
 8006828:	f002 fee6 	bl	80095f8 <_fflush_r>
 800682c:	2800      	cmp	r0, #0
 800682e:	d0d9      	beq.n	80067e4 <__swbuf_r+0x2e>
 8006830:	e7d6      	b.n	80067e0 <__swbuf_r+0x2a>
	...

08006834 <__swsetup_r>:
 8006834:	b538      	push	{r3, r4, r5, lr}
 8006836:	4b29      	ldr	r3, [pc, #164]	@ (80068dc <__swsetup_r+0xa8>)
 8006838:	4605      	mov	r5, r0
 800683a:	6818      	ldr	r0, [r3, #0]
 800683c:	460c      	mov	r4, r1
 800683e:	b118      	cbz	r0, 8006848 <__swsetup_r+0x14>
 8006840:	6a03      	ldr	r3, [r0, #32]
 8006842:	b90b      	cbnz	r3, 8006848 <__swsetup_r+0x14>
 8006844:	f7ff feae 	bl	80065a4 <__sinit>
 8006848:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800684c:	0719      	lsls	r1, r3, #28
 800684e:	d422      	bmi.n	8006896 <__swsetup_r+0x62>
 8006850:	06da      	lsls	r2, r3, #27
 8006852:	d407      	bmi.n	8006864 <__swsetup_r+0x30>
 8006854:	2209      	movs	r2, #9
 8006856:	602a      	str	r2, [r5, #0]
 8006858:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800685c:	81a3      	strh	r3, [r4, #12]
 800685e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006862:	e033      	b.n	80068cc <__swsetup_r+0x98>
 8006864:	0758      	lsls	r0, r3, #29
 8006866:	d512      	bpl.n	800688e <__swsetup_r+0x5a>
 8006868:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800686a:	b141      	cbz	r1, 800687e <__swsetup_r+0x4a>
 800686c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006870:	4299      	cmp	r1, r3
 8006872:	d002      	beq.n	800687a <__swsetup_r+0x46>
 8006874:	4628      	mov	r0, r5
 8006876:	f000 ff6b 	bl	8007750 <_free_r>
 800687a:	2300      	movs	r3, #0
 800687c:	6363      	str	r3, [r4, #52]	@ 0x34
 800687e:	89a3      	ldrh	r3, [r4, #12]
 8006880:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006884:	81a3      	strh	r3, [r4, #12]
 8006886:	2300      	movs	r3, #0
 8006888:	6063      	str	r3, [r4, #4]
 800688a:	6923      	ldr	r3, [r4, #16]
 800688c:	6023      	str	r3, [r4, #0]
 800688e:	89a3      	ldrh	r3, [r4, #12]
 8006890:	f043 0308 	orr.w	r3, r3, #8
 8006894:	81a3      	strh	r3, [r4, #12]
 8006896:	6923      	ldr	r3, [r4, #16]
 8006898:	b94b      	cbnz	r3, 80068ae <__swsetup_r+0x7a>
 800689a:	89a3      	ldrh	r3, [r4, #12]
 800689c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80068a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068a4:	d003      	beq.n	80068ae <__swsetup_r+0x7a>
 80068a6:	4621      	mov	r1, r4
 80068a8:	4628      	mov	r0, r5
 80068aa:	f002 fef3 	bl	8009694 <__smakebuf_r>
 80068ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068b2:	f013 0201 	ands.w	r2, r3, #1
 80068b6:	d00a      	beq.n	80068ce <__swsetup_r+0x9a>
 80068b8:	2200      	movs	r2, #0
 80068ba:	60a2      	str	r2, [r4, #8]
 80068bc:	6962      	ldr	r2, [r4, #20]
 80068be:	4252      	negs	r2, r2
 80068c0:	61a2      	str	r2, [r4, #24]
 80068c2:	6922      	ldr	r2, [r4, #16]
 80068c4:	b942      	cbnz	r2, 80068d8 <__swsetup_r+0xa4>
 80068c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80068ca:	d1c5      	bne.n	8006858 <__swsetup_r+0x24>
 80068cc:	bd38      	pop	{r3, r4, r5, pc}
 80068ce:	0799      	lsls	r1, r3, #30
 80068d0:	bf58      	it	pl
 80068d2:	6962      	ldrpl	r2, [r4, #20]
 80068d4:	60a2      	str	r2, [r4, #8]
 80068d6:	e7f4      	b.n	80068c2 <__swsetup_r+0x8e>
 80068d8:	2000      	movs	r0, #0
 80068da:	e7f7      	b.n	80068cc <__swsetup_r+0x98>
 80068dc:	20000020 	.word	0x20000020

080068e0 <memset>:
 80068e0:	4402      	add	r2, r0
 80068e2:	4603      	mov	r3, r0
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d100      	bne.n	80068ea <memset+0xa>
 80068e8:	4770      	bx	lr
 80068ea:	f803 1b01 	strb.w	r1, [r3], #1
 80068ee:	e7f9      	b.n	80068e4 <memset+0x4>

080068f0 <_localeconv_r>:
 80068f0:	4800      	ldr	r0, [pc, #0]	@ (80068f4 <_localeconv_r+0x4>)
 80068f2:	4770      	bx	lr
 80068f4:	20000160 	.word	0x20000160

080068f8 <_close_r>:
 80068f8:	b538      	push	{r3, r4, r5, lr}
 80068fa:	4d06      	ldr	r5, [pc, #24]	@ (8006914 <_close_r+0x1c>)
 80068fc:	2300      	movs	r3, #0
 80068fe:	4604      	mov	r4, r0
 8006900:	4608      	mov	r0, r1
 8006902:	602b      	str	r3, [r5, #0]
 8006904:	f7fa fe72 	bl	80015ec <_close>
 8006908:	1c43      	adds	r3, r0, #1
 800690a:	d102      	bne.n	8006912 <_close_r+0x1a>
 800690c:	682b      	ldr	r3, [r5, #0]
 800690e:	b103      	cbz	r3, 8006912 <_close_r+0x1a>
 8006910:	6023      	str	r3, [r4, #0]
 8006912:	bd38      	pop	{r3, r4, r5, pc}
 8006914:	2000539c 	.word	0x2000539c

08006918 <_reclaim_reent>:
 8006918:	4b29      	ldr	r3, [pc, #164]	@ (80069c0 <_reclaim_reent+0xa8>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4283      	cmp	r3, r0
 800691e:	b570      	push	{r4, r5, r6, lr}
 8006920:	4604      	mov	r4, r0
 8006922:	d04b      	beq.n	80069bc <_reclaim_reent+0xa4>
 8006924:	69c3      	ldr	r3, [r0, #28]
 8006926:	b1ab      	cbz	r3, 8006954 <_reclaim_reent+0x3c>
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	b16b      	cbz	r3, 8006948 <_reclaim_reent+0x30>
 800692c:	2500      	movs	r5, #0
 800692e:	69e3      	ldr	r3, [r4, #28]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	5959      	ldr	r1, [r3, r5]
 8006934:	2900      	cmp	r1, #0
 8006936:	d13b      	bne.n	80069b0 <_reclaim_reent+0x98>
 8006938:	3504      	adds	r5, #4
 800693a:	2d80      	cmp	r5, #128	@ 0x80
 800693c:	d1f7      	bne.n	800692e <_reclaim_reent+0x16>
 800693e:	69e3      	ldr	r3, [r4, #28]
 8006940:	4620      	mov	r0, r4
 8006942:	68d9      	ldr	r1, [r3, #12]
 8006944:	f000 ff04 	bl	8007750 <_free_r>
 8006948:	69e3      	ldr	r3, [r4, #28]
 800694a:	6819      	ldr	r1, [r3, #0]
 800694c:	b111      	cbz	r1, 8006954 <_reclaim_reent+0x3c>
 800694e:	4620      	mov	r0, r4
 8006950:	f000 fefe 	bl	8007750 <_free_r>
 8006954:	6961      	ldr	r1, [r4, #20]
 8006956:	b111      	cbz	r1, 800695e <_reclaim_reent+0x46>
 8006958:	4620      	mov	r0, r4
 800695a:	f000 fef9 	bl	8007750 <_free_r>
 800695e:	69e1      	ldr	r1, [r4, #28]
 8006960:	b111      	cbz	r1, 8006968 <_reclaim_reent+0x50>
 8006962:	4620      	mov	r0, r4
 8006964:	f000 fef4 	bl	8007750 <_free_r>
 8006968:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800696a:	b111      	cbz	r1, 8006972 <_reclaim_reent+0x5a>
 800696c:	4620      	mov	r0, r4
 800696e:	f000 feef 	bl	8007750 <_free_r>
 8006972:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006974:	b111      	cbz	r1, 800697c <_reclaim_reent+0x64>
 8006976:	4620      	mov	r0, r4
 8006978:	f000 feea 	bl	8007750 <_free_r>
 800697c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800697e:	b111      	cbz	r1, 8006986 <_reclaim_reent+0x6e>
 8006980:	4620      	mov	r0, r4
 8006982:	f000 fee5 	bl	8007750 <_free_r>
 8006986:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006988:	b111      	cbz	r1, 8006990 <_reclaim_reent+0x78>
 800698a:	4620      	mov	r0, r4
 800698c:	f000 fee0 	bl	8007750 <_free_r>
 8006990:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006992:	b111      	cbz	r1, 800699a <_reclaim_reent+0x82>
 8006994:	4620      	mov	r0, r4
 8006996:	f000 fedb 	bl	8007750 <_free_r>
 800699a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800699c:	b111      	cbz	r1, 80069a4 <_reclaim_reent+0x8c>
 800699e:	4620      	mov	r0, r4
 80069a0:	f000 fed6 	bl	8007750 <_free_r>
 80069a4:	6a23      	ldr	r3, [r4, #32]
 80069a6:	b14b      	cbz	r3, 80069bc <_reclaim_reent+0xa4>
 80069a8:	4620      	mov	r0, r4
 80069aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80069ae:	4718      	bx	r3
 80069b0:	680e      	ldr	r6, [r1, #0]
 80069b2:	4620      	mov	r0, r4
 80069b4:	f000 fecc 	bl	8007750 <_free_r>
 80069b8:	4631      	mov	r1, r6
 80069ba:	e7bb      	b.n	8006934 <_reclaim_reent+0x1c>
 80069bc:	bd70      	pop	{r4, r5, r6, pc}
 80069be:	bf00      	nop
 80069c0:	20000020 	.word	0x20000020

080069c4 <_lseek_r>:
 80069c4:	b538      	push	{r3, r4, r5, lr}
 80069c6:	4d07      	ldr	r5, [pc, #28]	@ (80069e4 <_lseek_r+0x20>)
 80069c8:	4604      	mov	r4, r0
 80069ca:	4608      	mov	r0, r1
 80069cc:	4611      	mov	r1, r2
 80069ce:	2200      	movs	r2, #0
 80069d0:	602a      	str	r2, [r5, #0]
 80069d2:	461a      	mov	r2, r3
 80069d4:	f7fa fe31 	bl	800163a <_lseek>
 80069d8:	1c43      	adds	r3, r0, #1
 80069da:	d102      	bne.n	80069e2 <_lseek_r+0x1e>
 80069dc:	682b      	ldr	r3, [r5, #0]
 80069de:	b103      	cbz	r3, 80069e2 <_lseek_r+0x1e>
 80069e0:	6023      	str	r3, [r4, #0]
 80069e2:	bd38      	pop	{r3, r4, r5, pc}
 80069e4:	2000539c 	.word	0x2000539c

080069e8 <_read_r>:
 80069e8:	b538      	push	{r3, r4, r5, lr}
 80069ea:	4d07      	ldr	r5, [pc, #28]	@ (8006a08 <_read_r+0x20>)
 80069ec:	4604      	mov	r4, r0
 80069ee:	4608      	mov	r0, r1
 80069f0:	4611      	mov	r1, r2
 80069f2:	2200      	movs	r2, #0
 80069f4:	602a      	str	r2, [r5, #0]
 80069f6:	461a      	mov	r2, r3
 80069f8:	f7fa fdbf 	bl	800157a <_read>
 80069fc:	1c43      	adds	r3, r0, #1
 80069fe:	d102      	bne.n	8006a06 <_read_r+0x1e>
 8006a00:	682b      	ldr	r3, [r5, #0]
 8006a02:	b103      	cbz	r3, 8006a06 <_read_r+0x1e>
 8006a04:	6023      	str	r3, [r4, #0]
 8006a06:	bd38      	pop	{r3, r4, r5, pc}
 8006a08:	2000539c 	.word	0x2000539c

08006a0c <_write_r>:
 8006a0c:	b538      	push	{r3, r4, r5, lr}
 8006a0e:	4d07      	ldr	r5, [pc, #28]	@ (8006a2c <_write_r+0x20>)
 8006a10:	4604      	mov	r4, r0
 8006a12:	4608      	mov	r0, r1
 8006a14:	4611      	mov	r1, r2
 8006a16:	2200      	movs	r2, #0
 8006a18:	602a      	str	r2, [r5, #0]
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	f7fa fdca 	bl	80015b4 <_write>
 8006a20:	1c43      	adds	r3, r0, #1
 8006a22:	d102      	bne.n	8006a2a <_write_r+0x1e>
 8006a24:	682b      	ldr	r3, [r5, #0]
 8006a26:	b103      	cbz	r3, 8006a2a <_write_r+0x1e>
 8006a28:	6023      	str	r3, [r4, #0]
 8006a2a:	bd38      	pop	{r3, r4, r5, pc}
 8006a2c:	2000539c 	.word	0x2000539c

08006a30 <__errno>:
 8006a30:	4b01      	ldr	r3, [pc, #4]	@ (8006a38 <__errno+0x8>)
 8006a32:	6818      	ldr	r0, [r3, #0]
 8006a34:	4770      	bx	lr
 8006a36:	bf00      	nop
 8006a38:	20000020 	.word	0x20000020

08006a3c <__libc_init_array>:
 8006a3c:	b570      	push	{r4, r5, r6, lr}
 8006a3e:	4d0d      	ldr	r5, [pc, #52]	@ (8006a74 <__libc_init_array+0x38>)
 8006a40:	4c0d      	ldr	r4, [pc, #52]	@ (8006a78 <__libc_init_array+0x3c>)
 8006a42:	1b64      	subs	r4, r4, r5
 8006a44:	10a4      	asrs	r4, r4, #2
 8006a46:	2600      	movs	r6, #0
 8006a48:	42a6      	cmp	r6, r4
 8006a4a:	d109      	bne.n	8006a60 <__libc_init_array+0x24>
 8006a4c:	4d0b      	ldr	r5, [pc, #44]	@ (8006a7c <__libc_init_array+0x40>)
 8006a4e:	4c0c      	ldr	r4, [pc, #48]	@ (8006a80 <__libc_init_array+0x44>)
 8006a50:	f003 fae0 	bl	800a014 <_init>
 8006a54:	1b64      	subs	r4, r4, r5
 8006a56:	10a4      	asrs	r4, r4, #2
 8006a58:	2600      	movs	r6, #0
 8006a5a:	42a6      	cmp	r6, r4
 8006a5c:	d105      	bne.n	8006a6a <__libc_init_array+0x2e>
 8006a5e:	bd70      	pop	{r4, r5, r6, pc}
 8006a60:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a64:	4798      	blx	r3
 8006a66:	3601      	adds	r6, #1
 8006a68:	e7ee      	b.n	8006a48 <__libc_init_array+0xc>
 8006a6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a6e:	4798      	blx	r3
 8006a70:	3601      	adds	r6, #1
 8006a72:	e7f2      	b.n	8006a5a <__libc_init_array+0x1e>
 8006a74:	0800a670 	.word	0x0800a670
 8006a78:	0800a670 	.word	0x0800a670
 8006a7c:	0800a670 	.word	0x0800a670
 8006a80:	0800a674 	.word	0x0800a674

08006a84 <__retarget_lock_init_recursive>:
 8006a84:	4770      	bx	lr

08006a86 <__retarget_lock_acquire_recursive>:
 8006a86:	4770      	bx	lr

08006a88 <__retarget_lock_release_recursive>:
 8006a88:	4770      	bx	lr

08006a8a <memcpy>:
 8006a8a:	440a      	add	r2, r1
 8006a8c:	4291      	cmp	r1, r2
 8006a8e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006a92:	d100      	bne.n	8006a96 <memcpy+0xc>
 8006a94:	4770      	bx	lr
 8006a96:	b510      	push	{r4, lr}
 8006a98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006aa0:	4291      	cmp	r1, r2
 8006aa2:	d1f9      	bne.n	8006a98 <memcpy+0xe>
 8006aa4:	bd10      	pop	{r4, pc}
	...

08006aa8 <nanf>:
 8006aa8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006ab0 <nanf+0x8>
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	7fc00000 	.word	0x7fc00000

08006ab4 <quorem>:
 8006ab4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ab8:	6903      	ldr	r3, [r0, #16]
 8006aba:	690c      	ldr	r4, [r1, #16]
 8006abc:	42a3      	cmp	r3, r4
 8006abe:	4607      	mov	r7, r0
 8006ac0:	db7e      	blt.n	8006bc0 <quorem+0x10c>
 8006ac2:	3c01      	subs	r4, #1
 8006ac4:	f101 0814 	add.w	r8, r1, #20
 8006ac8:	00a3      	lsls	r3, r4, #2
 8006aca:	f100 0514 	add.w	r5, r0, #20
 8006ace:	9300      	str	r3, [sp, #0]
 8006ad0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ad4:	9301      	str	r3, [sp, #4]
 8006ad6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ada:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ade:	3301      	adds	r3, #1
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006ae6:	fbb2 f6f3 	udiv	r6, r2, r3
 8006aea:	d32e      	bcc.n	8006b4a <quorem+0x96>
 8006aec:	f04f 0a00 	mov.w	sl, #0
 8006af0:	46c4      	mov	ip, r8
 8006af2:	46ae      	mov	lr, r5
 8006af4:	46d3      	mov	fp, sl
 8006af6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006afa:	b298      	uxth	r0, r3
 8006afc:	fb06 a000 	mla	r0, r6, r0, sl
 8006b00:	0c02      	lsrs	r2, r0, #16
 8006b02:	0c1b      	lsrs	r3, r3, #16
 8006b04:	fb06 2303 	mla	r3, r6, r3, r2
 8006b08:	f8de 2000 	ldr.w	r2, [lr]
 8006b0c:	b280      	uxth	r0, r0
 8006b0e:	b292      	uxth	r2, r2
 8006b10:	1a12      	subs	r2, r2, r0
 8006b12:	445a      	add	r2, fp
 8006b14:	f8de 0000 	ldr.w	r0, [lr]
 8006b18:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006b22:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006b26:	b292      	uxth	r2, r2
 8006b28:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006b2c:	45e1      	cmp	r9, ip
 8006b2e:	f84e 2b04 	str.w	r2, [lr], #4
 8006b32:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006b36:	d2de      	bcs.n	8006af6 <quorem+0x42>
 8006b38:	9b00      	ldr	r3, [sp, #0]
 8006b3a:	58eb      	ldr	r3, [r5, r3]
 8006b3c:	b92b      	cbnz	r3, 8006b4a <quorem+0x96>
 8006b3e:	9b01      	ldr	r3, [sp, #4]
 8006b40:	3b04      	subs	r3, #4
 8006b42:	429d      	cmp	r5, r3
 8006b44:	461a      	mov	r2, r3
 8006b46:	d32f      	bcc.n	8006ba8 <quorem+0xf4>
 8006b48:	613c      	str	r4, [r7, #16]
 8006b4a:	4638      	mov	r0, r7
 8006b4c:	f001 f9c4 	bl	8007ed8 <__mcmp>
 8006b50:	2800      	cmp	r0, #0
 8006b52:	db25      	blt.n	8006ba0 <quorem+0xec>
 8006b54:	4629      	mov	r1, r5
 8006b56:	2000      	movs	r0, #0
 8006b58:	f858 2b04 	ldr.w	r2, [r8], #4
 8006b5c:	f8d1 c000 	ldr.w	ip, [r1]
 8006b60:	fa1f fe82 	uxth.w	lr, r2
 8006b64:	fa1f f38c 	uxth.w	r3, ip
 8006b68:	eba3 030e 	sub.w	r3, r3, lr
 8006b6c:	4403      	add	r3, r0
 8006b6e:	0c12      	lsrs	r2, r2, #16
 8006b70:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006b74:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b7e:	45c1      	cmp	r9, r8
 8006b80:	f841 3b04 	str.w	r3, [r1], #4
 8006b84:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006b88:	d2e6      	bcs.n	8006b58 <quorem+0xa4>
 8006b8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b92:	b922      	cbnz	r2, 8006b9e <quorem+0xea>
 8006b94:	3b04      	subs	r3, #4
 8006b96:	429d      	cmp	r5, r3
 8006b98:	461a      	mov	r2, r3
 8006b9a:	d30b      	bcc.n	8006bb4 <quorem+0x100>
 8006b9c:	613c      	str	r4, [r7, #16]
 8006b9e:	3601      	adds	r6, #1
 8006ba0:	4630      	mov	r0, r6
 8006ba2:	b003      	add	sp, #12
 8006ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ba8:	6812      	ldr	r2, [r2, #0]
 8006baa:	3b04      	subs	r3, #4
 8006bac:	2a00      	cmp	r2, #0
 8006bae:	d1cb      	bne.n	8006b48 <quorem+0x94>
 8006bb0:	3c01      	subs	r4, #1
 8006bb2:	e7c6      	b.n	8006b42 <quorem+0x8e>
 8006bb4:	6812      	ldr	r2, [r2, #0]
 8006bb6:	3b04      	subs	r3, #4
 8006bb8:	2a00      	cmp	r2, #0
 8006bba:	d1ef      	bne.n	8006b9c <quorem+0xe8>
 8006bbc:	3c01      	subs	r4, #1
 8006bbe:	e7ea      	b.n	8006b96 <quorem+0xe2>
 8006bc0:	2000      	movs	r0, #0
 8006bc2:	e7ee      	b.n	8006ba2 <quorem+0xee>
 8006bc4:	0000      	movs	r0, r0
	...

08006bc8 <_dtoa_r>:
 8006bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bcc:	69c7      	ldr	r7, [r0, #28]
 8006bce:	b099      	sub	sp, #100	@ 0x64
 8006bd0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006bd4:	ec55 4b10 	vmov	r4, r5, d0
 8006bd8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006bda:	9109      	str	r1, [sp, #36]	@ 0x24
 8006bdc:	4683      	mov	fp, r0
 8006bde:	920e      	str	r2, [sp, #56]	@ 0x38
 8006be0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006be2:	b97f      	cbnz	r7, 8006c04 <_dtoa_r+0x3c>
 8006be4:	2010      	movs	r0, #16
 8006be6:	f000 fdfd 	bl	80077e4 <malloc>
 8006bea:	4602      	mov	r2, r0
 8006bec:	f8cb 001c 	str.w	r0, [fp, #28]
 8006bf0:	b920      	cbnz	r0, 8006bfc <_dtoa_r+0x34>
 8006bf2:	4ba7      	ldr	r3, [pc, #668]	@ (8006e90 <_dtoa_r+0x2c8>)
 8006bf4:	21ef      	movs	r1, #239	@ 0xef
 8006bf6:	48a7      	ldr	r0, [pc, #668]	@ (8006e94 <_dtoa_r+0x2cc>)
 8006bf8:	f002 fdee 	bl	80097d8 <__assert_func>
 8006bfc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006c00:	6007      	str	r7, [r0, #0]
 8006c02:	60c7      	str	r7, [r0, #12]
 8006c04:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006c08:	6819      	ldr	r1, [r3, #0]
 8006c0a:	b159      	cbz	r1, 8006c24 <_dtoa_r+0x5c>
 8006c0c:	685a      	ldr	r2, [r3, #4]
 8006c0e:	604a      	str	r2, [r1, #4]
 8006c10:	2301      	movs	r3, #1
 8006c12:	4093      	lsls	r3, r2
 8006c14:	608b      	str	r3, [r1, #8]
 8006c16:	4658      	mov	r0, fp
 8006c18:	f000 feda 	bl	80079d0 <_Bfree>
 8006c1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006c20:	2200      	movs	r2, #0
 8006c22:	601a      	str	r2, [r3, #0]
 8006c24:	1e2b      	subs	r3, r5, #0
 8006c26:	bfb9      	ittee	lt
 8006c28:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006c2c:	9303      	strlt	r3, [sp, #12]
 8006c2e:	2300      	movge	r3, #0
 8006c30:	6033      	strge	r3, [r6, #0]
 8006c32:	9f03      	ldr	r7, [sp, #12]
 8006c34:	4b98      	ldr	r3, [pc, #608]	@ (8006e98 <_dtoa_r+0x2d0>)
 8006c36:	bfbc      	itt	lt
 8006c38:	2201      	movlt	r2, #1
 8006c3a:	6032      	strlt	r2, [r6, #0]
 8006c3c:	43bb      	bics	r3, r7
 8006c3e:	d112      	bne.n	8006c66 <_dtoa_r+0x9e>
 8006c40:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006c42:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006c46:	6013      	str	r3, [r2, #0]
 8006c48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006c4c:	4323      	orrs	r3, r4
 8006c4e:	f000 854d 	beq.w	80076ec <_dtoa_r+0xb24>
 8006c52:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006c54:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006eac <_dtoa_r+0x2e4>
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f000 854f 	beq.w	80076fc <_dtoa_r+0xb34>
 8006c5e:	f10a 0303 	add.w	r3, sl, #3
 8006c62:	f000 bd49 	b.w	80076f8 <_dtoa_r+0xb30>
 8006c66:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	ec51 0b17 	vmov	r0, r1, d7
 8006c70:	2300      	movs	r3, #0
 8006c72:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006c76:	f7f9 ff4f 	bl	8000b18 <__aeabi_dcmpeq>
 8006c7a:	4680      	mov	r8, r0
 8006c7c:	b158      	cbz	r0, 8006c96 <_dtoa_r+0xce>
 8006c7e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006c80:	2301      	movs	r3, #1
 8006c82:	6013      	str	r3, [r2, #0]
 8006c84:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006c86:	b113      	cbz	r3, 8006c8e <_dtoa_r+0xc6>
 8006c88:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006c8a:	4b84      	ldr	r3, [pc, #528]	@ (8006e9c <_dtoa_r+0x2d4>)
 8006c8c:	6013      	str	r3, [r2, #0]
 8006c8e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006eb0 <_dtoa_r+0x2e8>
 8006c92:	f000 bd33 	b.w	80076fc <_dtoa_r+0xb34>
 8006c96:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006c9a:	aa16      	add	r2, sp, #88	@ 0x58
 8006c9c:	a917      	add	r1, sp, #92	@ 0x5c
 8006c9e:	4658      	mov	r0, fp
 8006ca0:	f001 fa3a 	bl	8008118 <__d2b>
 8006ca4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006ca8:	4681      	mov	r9, r0
 8006caa:	2e00      	cmp	r6, #0
 8006cac:	d077      	beq.n	8006d9e <_dtoa_r+0x1d6>
 8006cae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006cb0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006cb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006cb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006cbc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006cc0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006cc4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006cc8:	4619      	mov	r1, r3
 8006cca:	2200      	movs	r2, #0
 8006ccc:	4b74      	ldr	r3, [pc, #464]	@ (8006ea0 <_dtoa_r+0x2d8>)
 8006cce:	f7f9 fb03 	bl	80002d8 <__aeabi_dsub>
 8006cd2:	a369      	add	r3, pc, #420	@ (adr r3, 8006e78 <_dtoa_r+0x2b0>)
 8006cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd8:	f7f9 fcb6 	bl	8000648 <__aeabi_dmul>
 8006cdc:	a368      	add	r3, pc, #416	@ (adr r3, 8006e80 <_dtoa_r+0x2b8>)
 8006cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce2:	f7f9 fafb 	bl	80002dc <__adddf3>
 8006ce6:	4604      	mov	r4, r0
 8006ce8:	4630      	mov	r0, r6
 8006cea:	460d      	mov	r5, r1
 8006cec:	f7f9 fc42 	bl	8000574 <__aeabi_i2d>
 8006cf0:	a365      	add	r3, pc, #404	@ (adr r3, 8006e88 <_dtoa_r+0x2c0>)
 8006cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf6:	f7f9 fca7 	bl	8000648 <__aeabi_dmul>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	4620      	mov	r0, r4
 8006d00:	4629      	mov	r1, r5
 8006d02:	f7f9 faeb 	bl	80002dc <__adddf3>
 8006d06:	4604      	mov	r4, r0
 8006d08:	460d      	mov	r5, r1
 8006d0a:	f7f9 ff4d 	bl	8000ba8 <__aeabi_d2iz>
 8006d0e:	2200      	movs	r2, #0
 8006d10:	4607      	mov	r7, r0
 8006d12:	2300      	movs	r3, #0
 8006d14:	4620      	mov	r0, r4
 8006d16:	4629      	mov	r1, r5
 8006d18:	f7f9 ff08 	bl	8000b2c <__aeabi_dcmplt>
 8006d1c:	b140      	cbz	r0, 8006d30 <_dtoa_r+0x168>
 8006d1e:	4638      	mov	r0, r7
 8006d20:	f7f9 fc28 	bl	8000574 <__aeabi_i2d>
 8006d24:	4622      	mov	r2, r4
 8006d26:	462b      	mov	r3, r5
 8006d28:	f7f9 fef6 	bl	8000b18 <__aeabi_dcmpeq>
 8006d2c:	b900      	cbnz	r0, 8006d30 <_dtoa_r+0x168>
 8006d2e:	3f01      	subs	r7, #1
 8006d30:	2f16      	cmp	r7, #22
 8006d32:	d851      	bhi.n	8006dd8 <_dtoa_r+0x210>
 8006d34:	4b5b      	ldr	r3, [pc, #364]	@ (8006ea4 <_dtoa_r+0x2dc>)
 8006d36:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d42:	f7f9 fef3 	bl	8000b2c <__aeabi_dcmplt>
 8006d46:	2800      	cmp	r0, #0
 8006d48:	d048      	beq.n	8006ddc <_dtoa_r+0x214>
 8006d4a:	3f01      	subs	r7, #1
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006d50:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006d52:	1b9b      	subs	r3, r3, r6
 8006d54:	1e5a      	subs	r2, r3, #1
 8006d56:	bf44      	itt	mi
 8006d58:	f1c3 0801 	rsbmi	r8, r3, #1
 8006d5c:	2300      	movmi	r3, #0
 8006d5e:	9208      	str	r2, [sp, #32]
 8006d60:	bf54      	ite	pl
 8006d62:	f04f 0800 	movpl.w	r8, #0
 8006d66:	9308      	strmi	r3, [sp, #32]
 8006d68:	2f00      	cmp	r7, #0
 8006d6a:	db39      	blt.n	8006de0 <_dtoa_r+0x218>
 8006d6c:	9b08      	ldr	r3, [sp, #32]
 8006d6e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006d70:	443b      	add	r3, r7
 8006d72:	9308      	str	r3, [sp, #32]
 8006d74:	2300      	movs	r3, #0
 8006d76:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d7a:	2b09      	cmp	r3, #9
 8006d7c:	d864      	bhi.n	8006e48 <_dtoa_r+0x280>
 8006d7e:	2b05      	cmp	r3, #5
 8006d80:	bfc4      	itt	gt
 8006d82:	3b04      	subgt	r3, #4
 8006d84:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006d86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d88:	f1a3 0302 	sub.w	r3, r3, #2
 8006d8c:	bfcc      	ite	gt
 8006d8e:	2400      	movgt	r4, #0
 8006d90:	2401      	movle	r4, #1
 8006d92:	2b03      	cmp	r3, #3
 8006d94:	d863      	bhi.n	8006e5e <_dtoa_r+0x296>
 8006d96:	e8df f003 	tbb	[pc, r3]
 8006d9a:	372a      	.short	0x372a
 8006d9c:	5535      	.short	0x5535
 8006d9e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006da2:	441e      	add	r6, r3
 8006da4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006da8:	2b20      	cmp	r3, #32
 8006daa:	bfc1      	itttt	gt
 8006dac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006db0:	409f      	lslgt	r7, r3
 8006db2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006db6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006dba:	bfd6      	itet	le
 8006dbc:	f1c3 0320 	rsble	r3, r3, #32
 8006dc0:	ea47 0003 	orrgt.w	r0, r7, r3
 8006dc4:	fa04 f003 	lslle.w	r0, r4, r3
 8006dc8:	f7f9 fbc4 	bl	8000554 <__aeabi_ui2d>
 8006dcc:	2201      	movs	r2, #1
 8006dce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006dd2:	3e01      	subs	r6, #1
 8006dd4:	9214      	str	r2, [sp, #80]	@ 0x50
 8006dd6:	e777      	b.n	8006cc8 <_dtoa_r+0x100>
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e7b8      	b.n	8006d4e <_dtoa_r+0x186>
 8006ddc:	9012      	str	r0, [sp, #72]	@ 0x48
 8006dde:	e7b7      	b.n	8006d50 <_dtoa_r+0x188>
 8006de0:	427b      	negs	r3, r7
 8006de2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006de4:	2300      	movs	r3, #0
 8006de6:	eba8 0807 	sub.w	r8, r8, r7
 8006dea:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006dec:	e7c4      	b.n	8006d78 <_dtoa_r+0x1b0>
 8006dee:	2300      	movs	r3, #0
 8006df0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006df2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	dc35      	bgt.n	8006e64 <_dtoa_r+0x29c>
 8006df8:	2301      	movs	r3, #1
 8006dfa:	9300      	str	r3, [sp, #0]
 8006dfc:	9307      	str	r3, [sp, #28]
 8006dfe:	461a      	mov	r2, r3
 8006e00:	920e      	str	r2, [sp, #56]	@ 0x38
 8006e02:	e00b      	b.n	8006e1c <_dtoa_r+0x254>
 8006e04:	2301      	movs	r3, #1
 8006e06:	e7f3      	b.n	8006df0 <_dtoa_r+0x228>
 8006e08:	2300      	movs	r3, #0
 8006e0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e0e:	18fb      	adds	r3, r7, r3
 8006e10:	9300      	str	r3, [sp, #0]
 8006e12:	3301      	adds	r3, #1
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	9307      	str	r3, [sp, #28]
 8006e18:	bfb8      	it	lt
 8006e1a:	2301      	movlt	r3, #1
 8006e1c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006e20:	2100      	movs	r1, #0
 8006e22:	2204      	movs	r2, #4
 8006e24:	f102 0514 	add.w	r5, r2, #20
 8006e28:	429d      	cmp	r5, r3
 8006e2a:	d91f      	bls.n	8006e6c <_dtoa_r+0x2a4>
 8006e2c:	6041      	str	r1, [r0, #4]
 8006e2e:	4658      	mov	r0, fp
 8006e30:	f000 fd8e 	bl	8007950 <_Balloc>
 8006e34:	4682      	mov	sl, r0
 8006e36:	2800      	cmp	r0, #0
 8006e38:	d13c      	bne.n	8006eb4 <_dtoa_r+0x2ec>
 8006e3a:	4b1b      	ldr	r3, [pc, #108]	@ (8006ea8 <_dtoa_r+0x2e0>)
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006e42:	e6d8      	b.n	8006bf6 <_dtoa_r+0x2e>
 8006e44:	2301      	movs	r3, #1
 8006e46:	e7e0      	b.n	8006e0a <_dtoa_r+0x242>
 8006e48:	2401      	movs	r4, #1
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e4e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006e50:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006e54:	9300      	str	r3, [sp, #0]
 8006e56:	9307      	str	r3, [sp, #28]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	2312      	movs	r3, #18
 8006e5c:	e7d0      	b.n	8006e00 <_dtoa_r+0x238>
 8006e5e:	2301      	movs	r3, #1
 8006e60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e62:	e7f5      	b.n	8006e50 <_dtoa_r+0x288>
 8006e64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e66:	9300      	str	r3, [sp, #0]
 8006e68:	9307      	str	r3, [sp, #28]
 8006e6a:	e7d7      	b.n	8006e1c <_dtoa_r+0x254>
 8006e6c:	3101      	adds	r1, #1
 8006e6e:	0052      	lsls	r2, r2, #1
 8006e70:	e7d8      	b.n	8006e24 <_dtoa_r+0x25c>
 8006e72:	bf00      	nop
 8006e74:	f3af 8000 	nop.w
 8006e78:	636f4361 	.word	0x636f4361
 8006e7c:	3fd287a7 	.word	0x3fd287a7
 8006e80:	8b60c8b3 	.word	0x8b60c8b3
 8006e84:	3fc68a28 	.word	0x3fc68a28
 8006e88:	509f79fb 	.word	0x509f79fb
 8006e8c:	3fd34413 	.word	0x3fd34413
 8006e90:	0800a282 	.word	0x0800a282
 8006e94:	0800a299 	.word	0x0800a299
 8006e98:	7ff00000 	.word	0x7ff00000
 8006e9c:	0800a24d 	.word	0x0800a24d
 8006ea0:	3ff80000 	.word	0x3ff80000
 8006ea4:	0800a390 	.word	0x0800a390
 8006ea8:	0800a2f1 	.word	0x0800a2f1
 8006eac:	0800a27e 	.word	0x0800a27e
 8006eb0:	0800a24c 	.word	0x0800a24c
 8006eb4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006eb8:	6018      	str	r0, [r3, #0]
 8006eba:	9b07      	ldr	r3, [sp, #28]
 8006ebc:	2b0e      	cmp	r3, #14
 8006ebe:	f200 80a4 	bhi.w	800700a <_dtoa_r+0x442>
 8006ec2:	2c00      	cmp	r4, #0
 8006ec4:	f000 80a1 	beq.w	800700a <_dtoa_r+0x442>
 8006ec8:	2f00      	cmp	r7, #0
 8006eca:	dd33      	ble.n	8006f34 <_dtoa_r+0x36c>
 8006ecc:	4bad      	ldr	r3, [pc, #692]	@ (8007184 <_dtoa_r+0x5bc>)
 8006ece:	f007 020f 	and.w	r2, r7, #15
 8006ed2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ed6:	ed93 7b00 	vldr	d7, [r3]
 8006eda:	05f8      	lsls	r0, r7, #23
 8006edc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006ee0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006ee4:	d516      	bpl.n	8006f14 <_dtoa_r+0x34c>
 8006ee6:	4ba8      	ldr	r3, [pc, #672]	@ (8007188 <_dtoa_r+0x5c0>)
 8006ee8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006eec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ef0:	f7f9 fcd4 	bl	800089c <__aeabi_ddiv>
 8006ef4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ef8:	f004 040f 	and.w	r4, r4, #15
 8006efc:	2603      	movs	r6, #3
 8006efe:	4da2      	ldr	r5, [pc, #648]	@ (8007188 <_dtoa_r+0x5c0>)
 8006f00:	b954      	cbnz	r4, 8006f18 <_dtoa_r+0x350>
 8006f02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f0a:	f7f9 fcc7 	bl	800089c <__aeabi_ddiv>
 8006f0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f12:	e028      	b.n	8006f66 <_dtoa_r+0x39e>
 8006f14:	2602      	movs	r6, #2
 8006f16:	e7f2      	b.n	8006efe <_dtoa_r+0x336>
 8006f18:	07e1      	lsls	r1, r4, #31
 8006f1a:	d508      	bpl.n	8006f2e <_dtoa_r+0x366>
 8006f1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f20:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006f24:	f7f9 fb90 	bl	8000648 <__aeabi_dmul>
 8006f28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f2c:	3601      	adds	r6, #1
 8006f2e:	1064      	asrs	r4, r4, #1
 8006f30:	3508      	adds	r5, #8
 8006f32:	e7e5      	b.n	8006f00 <_dtoa_r+0x338>
 8006f34:	f000 80d2 	beq.w	80070dc <_dtoa_r+0x514>
 8006f38:	427c      	negs	r4, r7
 8006f3a:	4b92      	ldr	r3, [pc, #584]	@ (8007184 <_dtoa_r+0x5bc>)
 8006f3c:	4d92      	ldr	r5, [pc, #584]	@ (8007188 <_dtoa_r+0x5c0>)
 8006f3e:	f004 020f 	and.w	r2, r4, #15
 8006f42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f4e:	f7f9 fb7b 	bl	8000648 <__aeabi_dmul>
 8006f52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f56:	1124      	asrs	r4, r4, #4
 8006f58:	2300      	movs	r3, #0
 8006f5a:	2602      	movs	r6, #2
 8006f5c:	2c00      	cmp	r4, #0
 8006f5e:	f040 80b2 	bne.w	80070c6 <_dtoa_r+0x4fe>
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d1d3      	bne.n	8006f0e <_dtoa_r+0x346>
 8006f66:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006f68:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f000 80b7 	beq.w	80070e0 <_dtoa_r+0x518>
 8006f72:	4b86      	ldr	r3, [pc, #536]	@ (800718c <_dtoa_r+0x5c4>)
 8006f74:	2200      	movs	r2, #0
 8006f76:	4620      	mov	r0, r4
 8006f78:	4629      	mov	r1, r5
 8006f7a:	f7f9 fdd7 	bl	8000b2c <__aeabi_dcmplt>
 8006f7e:	2800      	cmp	r0, #0
 8006f80:	f000 80ae 	beq.w	80070e0 <_dtoa_r+0x518>
 8006f84:	9b07      	ldr	r3, [sp, #28]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	f000 80aa 	beq.w	80070e0 <_dtoa_r+0x518>
 8006f8c:	9b00      	ldr	r3, [sp, #0]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	dd37      	ble.n	8007002 <_dtoa_r+0x43a>
 8006f92:	1e7b      	subs	r3, r7, #1
 8006f94:	9304      	str	r3, [sp, #16]
 8006f96:	4620      	mov	r0, r4
 8006f98:	4b7d      	ldr	r3, [pc, #500]	@ (8007190 <_dtoa_r+0x5c8>)
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	4629      	mov	r1, r5
 8006f9e:	f7f9 fb53 	bl	8000648 <__aeabi_dmul>
 8006fa2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fa6:	9c00      	ldr	r4, [sp, #0]
 8006fa8:	3601      	adds	r6, #1
 8006faa:	4630      	mov	r0, r6
 8006fac:	f7f9 fae2 	bl	8000574 <__aeabi_i2d>
 8006fb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006fb4:	f7f9 fb48 	bl	8000648 <__aeabi_dmul>
 8006fb8:	4b76      	ldr	r3, [pc, #472]	@ (8007194 <_dtoa_r+0x5cc>)
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f7f9 f98e 	bl	80002dc <__adddf3>
 8006fc0:	4605      	mov	r5, r0
 8006fc2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006fc6:	2c00      	cmp	r4, #0
 8006fc8:	f040 808d 	bne.w	80070e6 <_dtoa_r+0x51e>
 8006fcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fd0:	4b71      	ldr	r3, [pc, #452]	@ (8007198 <_dtoa_r+0x5d0>)
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f7f9 f980 	bl	80002d8 <__aeabi_dsub>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	460b      	mov	r3, r1
 8006fdc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006fe0:	462a      	mov	r2, r5
 8006fe2:	4633      	mov	r3, r6
 8006fe4:	f7f9 fdc0 	bl	8000b68 <__aeabi_dcmpgt>
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	f040 828b 	bne.w	8007504 <_dtoa_r+0x93c>
 8006fee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ff2:	462a      	mov	r2, r5
 8006ff4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006ff8:	f7f9 fd98 	bl	8000b2c <__aeabi_dcmplt>
 8006ffc:	2800      	cmp	r0, #0
 8006ffe:	f040 8128 	bne.w	8007252 <_dtoa_r+0x68a>
 8007002:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007006:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800700a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800700c:	2b00      	cmp	r3, #0
 800700e:	f2c0 815a 	blt.w	80072c6 <_dtoa_r+0x6fe>
 8007012:	2f0e      	cmp	r7, #14
 8007014:	f300 8157 	bgt.w	80072c6 <_dtoa_r+0x6fe>
 8007018:	4b5a      	ldr	r3, [pc, #360]	@ (8007184 <_dtoa_r+0x5bc>)
 800701a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800701e:	ed93 7b00 	vldr	d7, [r3]
 8007022:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007024:	2b00      	cmp	r3, #0
 8007026:	ed8d 7b00 	vstr	d7, [sp]
 800702a:	da03      	bge.n	8007034 <_dtoa_r+0x46c>
 800702c:	9b07      	ldr	r3, [sp, #28]
 800702e:	2b00      	cmp	r3, #0
 8007030:	f340 8101 	ble.w	8007236 <_dtoa_r+0x66e>
 8007034:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007038:	4656      	mov	r6, sl
 800703a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800703e:	4620      	mov	r0, r4
 8007040:	4629      	mov	r1, r5
 8007042:	f7f9 fc2b 	bl	800089c <__aeabi_ddiv>
 8007046:	f7f9 fdaf 	bl	8000ba8 <__aeabi_d2iz>
 800704a:	4680      	mov	r8, r0
 800704c:	f7f9 fa92 	bl	8000574 <__aeabi_i2d>
 8007050:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007054:	f7f9 faf8 	bl	8000648 <__aeabi_dmul>
 8007058:	4602      	mov	r2, r0
 800705a:	460b      	mov	r3, r1
 800705c:	4620      	mov	r0, r4
 800705e:	4629      	mov	r1, r5
 8007060:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007064:	f7f9 f938 	bl	80002d8 <__aeabi_dsub>
 8007068:	f806 4b01 	strb.w	r4, [r6], #1
 800706c:	9d07      	ldr	r5, [sp, #28]
 800706e:	eba6 040a 	sub.w	r4, r6, sl
 8007072:	42a5      	cmp	r5, r4
 8007074:	4602      	mov	r2, r0
 8007076:	460b      	mov	r3, r1
 8007078:	f040 8117 	bne.w	80072aa <_dtoa_r+0x6e2>
 800707c:	f7f9 f92e 	bl	80002dc <__adddf3>
 8007080:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007084:	4604      	mov	r4, r0
 8007086:	460d      	mov	r5, r1
 8007088:	f7f9 fd6e 	bl	8000b68 <__aeabi_dcmpgt>
 800708c:	2800      	cmp	r0, #0
 800708e:	f040 80f9 	bne.w	8007284 <_dtoa_r+0x6bc>
 8007092:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007096:	4620      	mov	r0, r4
 8007098:	4629      	mov	r1, r5
 800709a:	f7f9 fd3d 	bl	8000b18 <__aeabi_dcmpeq>
 800709e:	b118      	cbz	r0, 80070a8 <_dtoa_r+0x4e0>
 80070a0:	f018 0f01 	tst.w	r8, #1
 80070a4:	f040 80ee 	bne.w	8007284 <_dtoa_r+0x6bc>
 80070a8:	4649      	mov	r1, r9
 80070aa:	4658      	mov	r0, fp
 80070ac:	f000 fc90 	bl	80079d0 <_Bfree>
 80070b0:	2300      	movs	r3, #0
 80070b2:	7033      	strb	r3, [r6, #0]
 80070b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80070b6:	3701      	adds	r7, #1
 80070b8:	601f      	str	r7, [r3, #0]
 80070ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f000 831d 	beq.w	80076fc <_dtoa_r+0xb34>
 80070c2:	601e      	str	r6, [r3, #0]
 80070c4:	e31a      	b.n	80076fc <_dtoa_r+0xb34>
 80070c6:	07e2      	lsls	r2, r4, #31
 80070c8:	d505      	bpl.n	80070d6 <_dtoa_r+0x50e>
 80070ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 80070ce:	f7f9 fabb 	bl	8000648 <__aeabi_dmul>
 80070d2:	3601      	adds	r6, #1
 80070d4:	2301      	movs	r3, #1
 80070d6:	1064      	asrs	r4, r4, #1
 80070d8:	3508      	adds	r5, #8
 80070da:	e73f      	b.n	8006f5c <_dtoa_r+0x394>
 80070dc:	2602      	movs	r6, #2
 80070de:	e742      	b.n	8006f66 <_dtoa_r+0x39e>
 80070e0:	9c07      	ldr	r4, [sp, #28]
 80070e2:	9704      	str	r7, [sp, #16]
 80070e4:	e761      	b.n	8006faa <_dtoa_r+0x3e2>
 80070e6:	4b27      	ldr	r3, [pc, #156]	@ (8007184 <_dtoa_r+0x5bc>)
 80070e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80070ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80070ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80070f2:	4454      	add	r4, sl
 80070f4:	2900      	cmp	r1, #0
 80070f6:	d053      	beq.n	80071a0 <_dtoa_r+0x5d8>
 80070f8:	4928      	ldr	r1, [pc, #160]	@ (800719c <_dtoa_r+0x5d4>)
 80070fa:	2000      	movs	r0, #0
 80070fc:	f7f9 fbce 	bl	800089c <__aeabi_ddiv>
 8007100:	4633      	mov	r3, r6
 8007102:	462a      	mov	r2, r5
 8007104:	f7f9 f8e8 	bl	80002d8 <__aeabi_dsub>
 8007108:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800710c:	4656      	mov	r6, sl
 800710e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007112:	f7f9 fd49 	bl	8000ba8 <__aeabi_d2iz>
 8007116:	4605      	mov	r5, r0
 8007118:	f7f9 fa2c 	bl	8000574 <__aeabi_i2d>
 800711c:	4602      	mov	r2, r0
 800711e:	460b      	mov	r3, r1
 8007120:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007124:	f7f9 f8d8 	bl	80002d8 <__aeabi_dsub>
 8007128:	3530      	adds	r5, #48	@ 0x30
 800712a:	4602      	mov	r2, r0
 800712c:	460b      	mov	r3, r1
 800712e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007132:	f806 5b01 	strb.w	r5, [r6], #1
 8007136:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800713a:	f7f9 fcf7 	bl	8000b2c <__aeabi_dcmplt>
 800713e:	2800      	cmp	r0, #0
 8007140:	d171      	bne.n	8007226 <_dtoa_r+0x65e>
 8007142:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007146:	4911      	ldr	r1, [pc, #68]	@ (800718c <_dtoa_r+0x5c4>)
 8007148:	2000      	movs	r0, #0
 800714a:	f7f9 f8c5 	bl	80002d8 <__aeabi_dsub>
 800714e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007152:	f7f9 fceb 	bl	8000b2c <__aeabi_dcmplt>
 8007156:	2800      	cmp	r0, #0
 8007158:	f040 8095 	bne.w	8007286 <_dtoa_r+0x6be>
 800715c:	42a6      	cmp	r6, r4
 800715e:	f43f af50 	beq.w	8007002 <_dtoa_r+0x43a>
 8007162:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007166:	4b0a      	ldr	r3, [pc, #40]	@ (8007190 <_dtoa_r+0x5c8>)
 8007168:	2200      	movs	r2, #0
 800716a:	f7f9 fa6d 	bl	8000648 <__aeabi_dmul>
 800716e:	4b08      	ldr	r3, [pc, #32]	@ (8007190 <_dtoa_r+0x5c8>)
 8007170:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007174:	2200      	movs	r2, #0
 8007176:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800717a:	f7f9 fa65 	bl	8000648 <__aeabi_dmul>
 800717e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007182:	e7c4      	b.n	800710e <_dtoa_r+0x546>
 8007184:	0800a390 	.word	0x0800a390
 8007188:	0800a368 	.word	0x0800a368
 800718c:	3ff00000 	.word	0x3ff00000
 8007190:	40240000 	.word	0x40240000
 8007194:	401c0000 	.word	0x401c0000
 8007198:	40140000 	.word	0x40140000
 800719c:	3fe00000 	.word	0x3fe00000
 80071a0:	4631      	mov	r1, r6
 80071a2:	4628      	mov	r0, r5
 80071a4:	f7f9 fa50 	bl	8000648 <__aeabi_dmul>
 80071a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80071ac:	9415      	str	r4, [sp, #84]	@ 0x54
 80071ae:	4656      	mov	r6, sl
 80071b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071b4:	f7f9 fcf8 	bl	8000ba8 <__aeabi_d2iz>
 80071b8:	4605      	mov	r5, r0
 80071ba:	f7f9 f9db 	bl	8000574 <__aeabi_i2d>
 80071be:	4602      	mov	r2, r0
 80071c0:	460b      	mov	r3, r1
 80071c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071c6:	f7f9 f887 	bl	80002d8 <__aeabi_dsub>
 80071ca:	3530      	adds	r5, #48	@ 0x30
 80071cc:	f806 5b01 	strb.w	r5, [r6], #1
 80071d0:	4602      	mov	r2, r0
 80071d2:	460b      	mov	r3, r1
 80071d4:	42a6      	cmp	r6, r4
 80071d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80071da:	f04f 0200 	mov.w	r2, #0
 80071de:	d124      	bne.n	800722a <_dtoa_r+0x662>
 80071e0:	4bac      	ldr	r3, [pc, #688]	@ (8007494 <_dtoa_r+0x8cc>)
 80071e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80071e6:	f7f9 f879 	bl	80002dc <__adddf3>
 80071ea:	4602      	mov	r2, r0
 80071ec:	460b      	mov	r3, r1
 80071ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071f2:	f7f9 fcb9 	bl	8000b68 <__aeabi_dcmpgt>
 80071f6:	2800      	cmp	r0, #0
 80071f8:	d145      	bne.n	8007286 <_dtoa_r+0x6be>
 80071fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80071fe:	49a5      	ldr	r1, [pc, #660]	@ (8007494 <_dtoa_r+0x8cc>)
 8007200:	2000      	movs	r0, #0
 8007202:	f7f9 f869 	bl	80002d8 <__aeabi_dsub>
 8007206:	4602      	mov	r2, r0
 8007208:	460b      	mov	r3, r1
 800720a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800720e:	f7f9 fc8d 	bl	8000b2c <__aeabi_dcmplt>
 8007212:	2800      	cmp	r0, #0
 8007214:	f43f aef5 	beq.w	8007002 <_dtoa_r+0x43a>
 8007218:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800721a:	1e73      	subs	r3, r6, #1
 800721c:	9315      	str	r3, [sp, #84]	@ 0x54
 800721e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007222:	2b30      	cmp	r3, #48	@ 0x30
 8007224:	d0f8      	beq.n	8007218 <_dtoa_r+0x650>
 8007226:	9f04      	ldr	r7, [sp, #16]
 8007228:	e73e      	b.n	80070a8 <_dtoa_r+0x4e0>
 800722a:	4b9b      	ldr	r3, [pc, #620]	@ (8007498 <_dtoa_r+0x8d0>)
 800722c:	f7f9 fa0c 	bl	8000648 <__aeabi_dmul>
 8007230:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007234:	e7bc      	b.n	80071b0 <_dtoa_r+0x5e8>
 8007236:	d10c      	bne.n	8007252 <_dtoa_r+0x68a>
 8007238:	4b98      	ldr	r3, [pc, #608]	@ (800749c <_dtoa_r+0x8d4>)
 800723a:	2200      	movs	r2, #0
 800723c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007240:	f7f9 fa02 	bl	8000648 <__aeabi_dmul>
 8007244:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007248:	f7f9 fc84 	bl	8000b54 <__aeabi_dcmpge>
 800724c:	2800      	cmp	r0, #0
 800724e:	f000 8157 	beq.w	8007500 <_dtoa_r+0x938>
 8007252:	2400      	movs	r4, #0
 8007254:	4625      	mov	r5, r4
 8007256:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007258:	43db      	mvns	r3, r3
 800725a:	9304      	str	r3, [sp, #16]
 800725c:	4656      	mov	r6, sl
 800725e:	2700      	movs	r7, #0
 8007260:	4621      	mov	r1, r4
 8007262:	4658      	mov	r0, fp
 8007264:	f000 fbb4 	bl	80079d0 <_Bfree>
 8007268:	2d00      	cmp	r5, #0
 800726a:	d0dc      	beq.n	8007226 <_dtoa_r+0x65e>
 800726c:	b12f      	cbz	r7, 800727a <_dtoa_r+0x6b2>
 800726e:	42af      	cmp	r7, r5
 8007270:	d003      	beq.n	800727a <_dtoa_r+0x6b2>
 8007272:	4639      	mov	r1, r7
 8007274:	4658      	mov	r0, fp
 8007276:	f000 fbab 	bl	80079d0 <_Bfree>
 800727a:	4629      	mov	r1, r5
 800727c:	4658      	mov	r0, fp
 800727e:	f000 fba7 	bl	80079d0 <_Bfree>
 8007282:	e7d0      	b.n	8007226 <_dtoa_r+0x65e>
 8007284:	9704      	str	r7, [sp, #16]
 8007286:	4633      	mov	r3, r6
 8007288:	461e      	mov	r6, r3
 800728a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800728e:	2a39      	cmp	r2, #57	@ 0x39
 8007290:	d107      	bne.n	80072a2 <_dtoa_r+0x6da>
 8007292:	459a      	cmp	sl, r3
 8007294:	d1f8      	bne.n	8007288 <_dtoa_r+0x6c0>
 8007296:	9a04      	ldr	r2, [sp, #16]
 8007298:	3201      	adds	r2, #1
 800729a:	9204      	str	r2, [sp, #16]
 800729c:	2230      	movs	r2, #48	@ 0x30
 800729e:	f88a 2000 	strb.w	r2, [sl]
 80072a2:	781a      	ldrb	r2, [r3, #0]
 80072a4:	3201      	adds	r2, #1
 80072a6:	701a      	strb	r2, [r3, #0]
 80072a8:	e7bd      	b.n	8007226 <_dtoa_r+0x65e>
 80072aa:	4b7b      	ldr	r3, [pc, #492]	@ (8007498 <_dtoa_r+0x8d0>)
 80072ac:	2200      	movs	r2, #0
 80072ae:	f7f9 f9cb 	bl	8000648 <__aeabi_dmul>
 80072b2:	2200      	movs	r2, #0
 80072b4:	2300      	movs	r3, #0
 80072b6:	4604      	mov	r4, r0
 80072b8:	460d      	mov	r5, r1
 80072ba:	f7f9 fc2d 	bl	8000b18 <__aeabi_dcmpeq>
 80072be:	2800      	cmp	r0, #0
 80072c0:	f43f aebb 	beq.w	800703a <_dtoa_r+0x472>
 80072c4:	e6f0      	b.n	80070a8 <_dtoa_r+0x4e0>
 80072c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80072c8:	2a00      	cmp	r2, #0
 80072ca:	f000 80db 	beq.w	8007484 <_dtoa_r+0x8bc>
 80072ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072d0:	2a01      	cmp	r2, #1
 80072d2:	f300 80bf 	bgt.w	8007454 <_dtoa_r+0x88c>
 80072d6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80072d8:	2a00      	cmp	r2, #0
 80072da:	f000 80b7 	beq.w	800744c <_dtoa_r+0x884>
 80072de:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80072e2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80072e4:	4646      	mov	r6, r8
 80072e6:	9a08      	ldr	r2, [sp, #32]
 80072e8:	2101      	movs	r1, #1
 80072ea:	441a      	add	r2, r3
 80072ec:	4658      	mov	r0, fp
 80072ee:	4498      	add	r8, r3
 80072f0:	9208      	str	r2, [sp, #32]
 80072f2:	f000 fc6b 	bl	8007bcc <__i2b>
 80072f6:	4605      	mov	r5, r0
 80072f8:	b15e      	cbz	r6, 8007312 <_dtoa_r+0x74a>
 80072fa:	9b08      	ldr	r3, [sp, #32]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	dd08      	ble.n	8007312 <_dtoa_r+0x74a>
 8007300:	42b3      	cmp	r3, r6
 8007302:	9a08      	ldr	r2, [sp, #32]
 8007304:	bfa8      	it	ge
 8007306:	4633      	movge	r3, r6
 8007308:	eba8 0803 	sub.w	r8, r8, r3
 800730c:	1af6      	subs	r6, r6, r3
 800730e:	1ad3      	subs	r3, r2, r3
 8007310:	9308      	str	r3, [sp, #32]
 8007312:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007314:	b1f3      	cbz	r3, 8007354 <_dtoa_r+0x78c>
 8007316:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007318:	2b00      	cmp	r3, #0
 800731a:	f000 80b7 	beq.w	800748c <_dtoa_r+0x8c4>
 800731e:	b18c      	cbz	r4, 8007344 <_dtoa_r+0x77c>
 8007320:	4629      	mov	r1, r5
 8007322:	4622      	mov	r2, r4
 8007324:	4658      	mov	r0, fp
 8007326:	f000 fd11 	bl	8007d4c <__pow5mult>
 800732a:	464a      	mov	r2, r9
 800732c:	4601      	mov	r1, r0
 800732e:	4605      	mov	r5, r0
 8007330:	4658      	mov	r0, fp
 8007332:	f000 fc61 	bl	8007bf8 <__multiply>
 8007336:	4649      	mov	r1, r9
 8007338:	9004      	str	r0, [sp, #16]
 800733a:	4658      	mov	r0, fp
 800733c:	f000 fb48 	bl	80079d0 <_Bfree>
 8007340:	9b04      	ldr	r3, [sp, #16]
 8007342:	4699      	mov	r9, r3
 8007344:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007346:	1b1a      	subs	r2, r3, r4
 8007348:	d004      	beq.n	8007354 <_dtoa_r+0x78c>
 800734a:	4649      	mov	r1, r9
 800734c:	4658      	mov	r0, fp
 800734e:	f000 fcfd 	bl	8007d4c <__pow5mult>
 8007352:	4681      	mov	r9, r0
 8007354:	2101      	movs	r1, #1
 8007356:	4658      	mov	r0, fp
 8007358:	f000 fc38 	bl	8007bcc <__i2b>
 800735c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800735e:	4604      	mov	r4, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	f000 81cf 	beq.w	8007704 <_dtoa_r+0xb3c>
 8007366:	461a      	mov	r2, r3
 8007368:	4601      	mov	r1, r0
 800736a:	4658      	mov	r0, fp
 800736c:	f000 fcee 	bl	8007d4c <__pow5mult>
 8007370:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007372:	2b01      	cmp	r3, #1
 8007374:	4604      	mov	r4, r0
 8007376:	f300 8095 	bgt.w	80074a4 <_dtoa_r+0x8dc>
 800737a:	9b02      	ldr	r3, [sp, #8]
 800737c:	2b00      	cmp	r3, #0
 800737e:	f040 8087 	bne.w	8007490 <_dtoa_r+0x8c8>
 8007382:	9b03      	ldr	r3, [sp, #12]
 8007384:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007388:	2b00      	cmp	r3, #0
 800738a:	f040 8089 	bne.w	80074a0 <_dtoa_r+0x8d8>
 800738e:	9b03      	ldr	r3, [sp, #12]
 8007390:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007394:	0d1b      	lsrs	r3, r3, #20
 8007396:	051b      	lsls	r3, r3, #20
 8007398:	b12b      	cbz	r3, 80073a6 <_dtoa_r+0x7de>
 800739a:	9b08      	ldr	r3, [sp, #32]
 800739c:	3301      	adds	r3, #1
 800739e:	9308      	str	r3, [sp, #32]
 80073a0:	f108 0801 	add.w	r8, r8, #1
 80073a4:	2301      	movs	r3, #1
 80073a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80073a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	f000 81b0 	beq.w	8007710 <_dtoa_r+0xb48>
 80073b0:	6923      	ldr	r3, [r4, #16]
 80073b2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80073b6:	6918      	ldr	r0, [r3, #16]
 80073b8:	f000 fbbc 	bl	8007b34 <__hi0bits>
 80073bc:	f1c0 0020 	rsb	r0, r0, #32
 80073c0:	9b08      	ldr	r3, [sp, #32]
 80073c2:	4418      	add	r0, r3
 80073c4:	f010 001f 	ands.w	r0, r0, #31
 80073c8:	d077      	beq.n	80074ba <_dtoa_r+0x8f2>
 80073ca:	f1c0 0320 	rsb	r3, r0, #32
 80073ce:	2b04      	cmp	r3, #4
 80073d0:	dd6b      	ble.n	80074aa <_dtoa_r+0x8e2>
 80073d2:	9b08      	ldr	r3, [sp, #32]
 80073d4:	f1c0 001c 	rsb	r0, r0, #28
 80073d8:	4403      	add	r3, r0
 80073da:	4480      	add	r8, r0
 80073dc:	4406      	add	r6, r0
 80073de:	9308      	str	r3, [sp, #32]
 80073e0:	f1b8 0f00 	cmp.w	r8, #0
 80073e4:	dd05      	ble.n	80073f2 <_dtoa_r+0x82a>
 80073e6:	4649      	mov	r1, r9
 80073e8:	4642      	mov	r2, r8
 80073ea:	4658      	mov	r0, fp
 80073ec:	f000 fd08 	bl	8007e00 <__lshift>
 80073f0:	4681      	mov	r9, r0
 80073f2:	9b08      	ldr	r3, [sp, #32]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	dd05      	ble.n	8007404 <_dtoa_r+0x83c>
 80073f8:	4621      	mov	r1, r4
 80073fa:	461a      	mov	r2, r3
 80073fc:	4658      	mov	r0, fp
 80073fe:	f000 fcff 	bl	8007e00 <__lshift>
 8007402:	4604      	mov	r4, r0
 8007404:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007406:	2b00      	cmp	r3, #0
 8007408:	d059      	beq.n	80074be <_dtoa_r+0x8f6>
 800740a:	4621      	mov	r1, r4
 800740c:	4648      	mov	r0, r9
 800740e:	f000 fd63 	bl	8007ed8 <__mcmp>
 8007412:	2800      	cmp	r0, #0
 8007414:	da53      	bge.n	80074be <_dtoa_r+0x8f6>
 8007416:	1e7b      	subs	r3, r7, #1
 8007418:	9304      	str	r3, [sp, #16]
 800741a:	4649      	mov	r1, r9
 800741c:	2300      	movs	r3, #0
 800741e:	220a      	movs	r2, #10
 8007420:	4658      	mov	r0, fp
 8007422:	f000 faf7 	bl	8007a14 <__multadd>
 8007426:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007428:	4681      	mov	r9, r0
 800742a:	2b00      	cmp	r3, #0
 800742c:	f000 8172 	beq.w	8007714 <_dtoa_r+0xb4c>
 8007430:	2300      	movs	r3, #0
 8007432:	4629      	mov	r1, r5
 8007434:	220a      	movs	r2, #10
 8007436:	4658      	mov	r0, fp
 8007438:	f000 faec 	bl	8007a14 <__multadd>
 800743c:	9b00      	ldr	r3, [sp, #0]
 800743e:	2b00      	cmp	r3, #0
 8007440:	4605      	mov	r5, r0
 8007442:	dc67      	bgt.n	8007514 <_dtoa_r+0x94c>
 8007444:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007446:	2b02      	cmp	r3, #2
 8007448:	dc41      	bgt.n	80074ce <_dtoa_r+0x906>
 800744a:	e063      	b.n	8007514 <_dtoa_r+0x94c>
 800744c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800744e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007452:	e746      	b.n	80072e2 <_dtoa_r+0x71a>
 8007454:	9b07      	ldr	r3, [sp, #28]
 8007456:	1e5c      	subs	r4, r3, #1
 8007458:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800745a:	42a3      	cmp	r3, r4
 800745c:	bfbf      	itttt	lt
 800745e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007460:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007462:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007464:	1ae3      	sublt	r3, r4, r3
 8007466:	bfb4      	ite	lt
 8007468:	18d2      	addlt	r2, r2, r3
 800746a:	1b1c      	subge	r4, r3, r4
 800746c:	9b07      	ldr	r3, [sp, #28]
 800746e:	bfbc      	itt	lt
 8007470:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007472:	2400      	movlt	r4, #0
 8007474:	2b00      	cmp	r3, #0
 8007476:	bfb5      	itete	lt
 8007478:	eba8 0603 	sublt.w	r6, r8, r3
 800747c:	9b07      	ldrge	r3, [sp, #28]
 800747e:	2300      	movlt	r3, #0
 8007480:	4646      	movge	r6, r8
 8007482:	e730      	b.n	80072e6 <_dtoa_r+0x71e>
 8007484:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007486:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007488:	4646      	mov	r6, r8
 800748a:	e735      	b.n	80072f8 <_dtoa_r+0x730>
 800748c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800748e:	e75c      	b.n	800734a <_dtoa_r+0x782>
 8007490:	2300      	movs	r3, #0
 8007492:	e788      	b.n	80073a6 <_dtoa_r+0x7de>
 8007494:	3fe00000 	.word	0x3fe00000
 8007498:	40240000 	.word	0x40240000
 800749c:	40140000 	.word	0x40140000
 80074a0:	9b02      	ldr	r3, [sp, #8]
 80074a2:	e780      	b.n	80073a6 <_dtoa_r+0x7de>
 80074a4:	2300      	movs	r3, #0
 80074a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80074a8:	e782      	b.n	80073b0 <_dtoa_r+0x7e8>
 80074aa:	d099      	beq.n	80073e0 <_dtoa_r+0x818>
 80074ac:	9a08      	ldr	r2, [sp, #32]
 80074ae:	331c      	adds	r3, #28
 80074b0:	441a      	add	r2, r3
 80074b2:	4498      	add	r8, r3
 80074b4:	441e      	add	r6, r3
 80074b6:	9208      	str	r2, [sp, #32]
 80074b8:	e792      	b.n	80073e0 <_dtoa_r+0x818>
 80074ba:	4603      	mov	r3, r0
 80074bc:	e7f6      	b.n	80074ac <_dtoa_r+0x8e4>
 80074be:	9b07      	ldr	r3, [sp, #28]
 80074c0:	9704      	str	r7, [sp, #16]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	dc20      	bgt.n	8007508 <_dtoa_r+0x940>
 80074c6:	9300      	str	r3, [sp, #0]
 80074c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	dd1e      	ble.n	800750c <_dtoa_r+0x944>
 80074ce:	9b00      	ldr	r3, [sp, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	f47f aec0 	bne.w	8007256 <_dtoa_r+0x68e>
 80074d6:	4621      	mov	r1, r4
 80074d8:	2205      	movs	r2, #5
 80074da:	4658      	mov	r0, fp
 80074dc:	f000 fa9a 	bl	8007a14 <__multadd>
 80074e0:	4601      	mov	r1, r0
 80074e2:	4604      	mov	r4, r0
 80074e4:	4648      	mov	r0, r9
 80074e6:	f000 fcf7 	bl	8007ed8 <__mcmp>
 80074ea:	2800      	cmp	r0, #0
 80074ec:	f77f aeb3 	ble.w	8007256 <_dtoa_r+0x68e>
 80074f0:	4656      	mov	r6, sl
 80074f2:	2331      	movs	r3, #49	@ 0x31
 80074f4:	f806 3b01 	strb.w	r3, [r6], #1
 80074f8:	9b04      	ldr	r3, [sp, #16]
 80074fa:	3301      	adds	r3, #1
 80074fc:	9304      	str	r3, [sp, #16]
 80074fe:	e6ae      	b.n	800725e <_dtoa_r+0x696>
 8007500:	9c07      	ldr	r4, [sp, #28]
 8007502:	9704      	str	r7, [sp, #16]
 8007504:	4625      	mov	r5, r4
 8007506:	e7f3      	b.n	80074f0 <_dtoa_r+0x928>
 8007508:	9b07      	ldr	r3, [sp, #28]
 800750a:	9300      	str	r3, [sp, #0]
 800750c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800750e:	2b00      	cmp	r3, #0
 8007510:	f000 8104 	beq.w	800771c <_dtoa_r+0xb54>
 8007514:	2e00      	cmp	r6, #0
 8007516:	dd05      	ble.n	8007524 <_dtoa_r+0x95c>
 8007518:	4629      	mov	r1, r5
 800751a:	4632      	mov	r2, r6
 800751c:	4658      	mov	r0, fp
 800751e:	f000 fc6f 	bl	8007e00 <__lshift>
 8007522:	4605      	mov	r5, r0
 8007524:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007526:	2b00      	cmp	r3, #0
 8007528:	d05a      	beq.n	80075e0 <_dtoa_r+0xa18>
 800752a:	6869      	ldr	r1, [r5, #4]
 800752c:	4658      	mov	r0, fp
 800752e:	f000 fa0f 	bl	8007950 <_Balloc>
 8007532:	4606      	mov	r6, r0
 8007534:	b928      	cbnz	r0, 8007542 <_dtoa_r+0x97a>
 8007536:	4b84      	ldr	r3, [pc, #528]	@ (8007748 <_dtoa_r+0xb80>)
 8007538:	4602      	mov	r2, r0
 800753a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800753e:	f7ff bb5a 	b.w	8006bf6 <_dtoa_r+0x2e>
 8007542:	692a      	ldr	r2, [r5, #16]
 8007544:	3202      	adds	r2, #2
 8007546:	0092      	lsls	r2, r2, #2
 8007548:	f105 010c 	add.w	r1, r5, #12
 800754c:	300c      	adds	r0, #12
 800754e:	f7ff fa9c 	bl	8006a8a <memcpy>
 8007552:	2201      	movs	r2, #1
 8007554:	4631      	mov	r1, r6
 8007556:	4658      	mov	r0, fp
 8007558:	f000 fc52 	bl	8007e00 <__lshift>
 800755c:	f10a 0301 	add.w	r3, sl, #1
 8007560:	9307      	str	r3, [sp, #28]
 8007562:	9b00      	ldr	r3, [sp, #0]
 8007564:	4453      	add	r3, sl
 8007566:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007568:	9b02      	ldr	r3, [sp, #8]
 800756a:	f003 0301 	and.w	r3, r3, #1
 800756e:	462f      	mov	r7, r5
 8007570:	930a      	str	r3, [sp, #40]	@ 0x28
 8007572:	4605      	mov	r5, r0
 8007574:	9b07      	ldr	r3, [sp, #28]
 8007576:	4621      	mov	r1, r4
 8007578:	3b01      	subs	r3, #1
 800757a:	4648      	mov	r0, r9
 800757c:	9300      	str	r3, [sp, #0]
 800757e:	f7ff fa99 	bl	8006ab4 <quorem>
 8007582:	4639      	mov	r1, r7
 8007584:	9002      	str	r0, [sp, #8]
 8007586:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800758a:	4648      	mov	r0, r9
 800758c:	f000 fca4 	bl	8007ed8 <__mcmp>
 8007590:	462a      	mov	r2, r5
 8007592:	9008      	str	r0, [sp, #32]
 8007594:	4621      	mov	r1, r4
 8007596:	4658      	mov	r0, fp
 8007598:	f000 fcba 	bl	8007f10 <__mdiff>
 800759c:	68c2      	ldr	r2, [r0, #12]
 800759e:	4606      	mov	r6, r0
 80075a0:	bb02      	cbnz	r2, 80075e4 <_dtoa_r+0xa1c>
 80075a2:	4601      	mov	r1, r0
 80075a4:	4648      	mov	r0, r9
 80075a6:	f000 fc97 	bl	8007ed8 <__mcmp>
 80075aa:	4602      	mov	r2, r0
 80075ac:	4631      	mov	r1, r6
 80075ae:	4658      	mov	r0, fp
 80075b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80075b2:	f000 fa0d 	bl	80079d0 <_Bfree>
 80075b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80075ba:	9e07      	ldr	r6, [sp, #28]
 80075bc:	ea43 0102 	orr.w	r1, r3, r2
 80075c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075c2:	4319      	orrs	r1, r3
 80075c4:	d110      	bne.n	80075e8 <_dtoa_r+0xa20>
 80075c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80075ca:	d029      	beq.n	8007620 <_dtoa_r+0xa58>
 80075cc:	9b08      	ldr	r3, [sp, #32]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	dd02      	ble.n	80075d8 <_dtoa_r+0xa10>
 80075d2:	9b02      	ldr	r3, [sp, #8]
 80075d4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80075d8:	9b00      	ldr	r3, [sp, #0]
 80075da:	f883 8000 	strb.w	r8, [r3]
 80075de:	e63f      	b.n	8007260 <_dtoa_r+0x698>
 80075e0:	4628      	mov	r0, r5
 80075e2:	e7bb      	b.n	800755c <_dtoa_r+0x994>
 80075e4:	2201      	movs	r2, #1
 80075e6:	e7e1      	b.n	80075ac <_dtoa_r+0x9e4>
 80075e8:	9b08      	ldr	r3, [sp, #32]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	db04      	blt.n	80075f8 <_dtoa_r+0xa30>
 80075ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80075f0:	430b      	orrs	r3, r1
 80075f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80075f4:	430b      	orrs	r3, r1
 80075f6:	d120      	bne.n	800763a <_dtoa_r+0xa72>
 80075f8:	2a00      	cmp	r2, #0
 80075fa:	dded      	ble.n	80075d8 <_dtoa_r+0xa10>
 80075fc:	4649      	mov	r1, r9
 80075fe:	2201      	movs	r2, #1
 8007600:	4658      	mov	r0, fp
 8007602:	f000 fbfd 	bl	8007e00 <__lshift>
 8007606:	4621      	mov	r1, r4
 8007608:	4681      	mov	r9, r0
 800760a:	f000 fc65 	bl	8007ed8 <__mcmp>
 800760e:	2800      	cmp	r0, #0
 8007610:	dc03      	bgt.n	800761a <_dtoa_r+0xa52>
 8007612:	d1e1      	bne.n	80075d8 <_dtoa_r+0xa10>
 8007614:	f018 0f01 	tst.w	r8, #1
 8007618:	d0de      	beq.n	80075d8 <_dtoa_r+0xa10>
 800761a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800761e:	d1d8      	bne.n	80075d2 <_dtoa_r+0xa0a>
 8007620:	9a00      	ldr	r2, [sp, #0]
 8007622:	2339      	movs	r3, #57	@ 0x39
 8007624:	7013      	strb	r3, [r2, #0]
 8007626:	4633      	mov	r3, r6
 8007628:	461e      	mov	r6, r3
 800762a:	3b01      	subs	r3, #1
 800762c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007630:	2a39      	cmp	r2, #57	@ 0x39
 8007632:	d052      	beq.n	80076da <_dtoa_r+0xb12>
 8007634:	3201      	adds	r2, #1
 8007636:	701a      	strb	r2, [r3, #0]
 8007638:	e612      	b.n	8007260 <_dtoa_r+0x698>
 800763a:	2a00      	cmp	r2, #0
 800763c:	dd07      	ble.n	800764e <_dtoa_r+0xa86>
 800763e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007642:	d0ed      	beq.n	8007620 <_dtoa_r+0xa58>
 8007644:	9a00      	ldr	r2, [sp, #0]
 8007646:	f108 0301 	add.w	r3, r8, #1
 800764a:	7013      	strb	r3, [r2, #0]
 800764c:	e608      	b.n	8007260 <_dtoa_r+0x698>
 800764e:	9b07      	ldr	r3, [sp, #28]
 8007650:	9a07      	ldr	r2, [sp, #28]
 8007652:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007656:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007658:	4293      	cmp	r3, r2
 800765a:	d028      	beq.n	80076ae <_dtoa_r+0xae6>
 800765c:	4649      	mov	r1, r9
 800765e:	2300      	movs	r3, #0
 8007660:	220a      	movs	r2, #10
 8007662:	4658      	mov	r0, fp
 8007664:	f000 f9d6 	bl	8007a14 <__multadd>
 8007668:	42af      	cmp	r7, r5
 800766a:	4681      	mov	r9, r0
 800766c:	f04f 0300 	mov.w	r3, #0
 8007670:	f04f 020a 	mov.w	r2, #10
 8007674:	4639      	mov	r1, r7
 8007676:	4658      	mov	r0, fp
 8007678:	d107      	bne.n	800768a <_dtoa_r+0xac2>
 800767a:	f000 f9cb 	bl	8007a14 <__multadd>
 800767e:	4607      	mov	r7, r0
 8007680:	4605      	mov	r5, r0
 8007682:	9b07      	ldr	r3, [sp, #28]
 8007684:	3301      	adds	r3, #1
 8007686:	9307      	str	r3, [sp, #28]
 8007688:	e774      	b.n	8007574 <_dtoa_r+0x9ac>
 800768a:	f000 f9c3 	bl	8007a14 <__multadd>
 800768e:	4629      	mov	r1, r5
 8007690:	4607      	mov	r7, r0
 8007692:	2300      	movs	r3, #0
 8007694:	220a      	movs	r2, #10
 8007696:	4658      	mov	r0, fp
 8007698:	f000 f9bc 	bl	8007a14 <__multadd>
 800769c:	4605      	mov	r5, r0
 800769e:	e7f0      	b.n	8007682 <_dtoa_r+0xaba>
 80076a0:	9b00      	ldr	r3, [sp, #0]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	bfcc      	ite	gt
 80076a6:	461e      	movgt	r6, r3
 80076a8:	2601      	movle	r6, #1
 80076aa:	4456      	add	r6, sl
 80076ac:	2700      	movs	r7, #0
 80076ae:	4649      	mov	r1, r9
 80076b0:	2201      	movs	r2, #1
 80076b2:	4658      	mov	r0, fp
 80076b4:	f000 fba4 	bl	8007e00 <__lshift>
 80076b8:	4621      	mov	r1, r4
 80076ba:	4681      	mov	r9, r0
 80076bc:	f000 fc0c 	bl	8007ed8 <__mcmp>
 80076c0:	2800      	cmp	r0, #0
 80076c2:	dcb0      	bgt.n	8007626 <_dtoa_r+0xa5e>
 80076c4:	d102      	bne.n	80076cc <_dtoa_r+0xb04>
 80076c6:	f018 0f01 	tst.w	r8, #1
 80076ca:	d1ac      	bne.n	8007626 <_dtoa_r+0xa5e>
 80076cc:	4633      	mov	r3, r6
 80076ce:	461e      	mov	r6, r3
 80076d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076d4:	2a30      	cmp	r2, #48	@ 0x30
 80076d6:	d0fa      	beq.n	80076ce <_dtoa_r+0xb06>
 80076d8:	e5c2      	b.n	8007260 <_dtoa_r+0x698>
 80076da:	459a      	cmp	sl, r3
 80076dc:	d1a4      	bne.n	8007628 <_dtoa_r+0xa60>
 80076de:	9b04      	ldr	r3, [sp, #16]
 80076e0:	3301      	adds	r3, #1
 80076e2:	9304      	str	r3, [sp, #16]
 80076e4:	2331      	movs	r3, #49	@ 0x31
 80076e6:	f88a 3000 	strb.w	r3, [sl]
 80076ea:	e5b9      	b.n	8007260 <_dtoa_r+0x698>
 80076ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80076ee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800774c <_dtoa_r+0xb84>
 80076f2:	b11b      	cbz	r3, 80076fc <_dtoa_r+0xb34>
 80076f4:	f10a 0308 	add.w	r3, sl, #8
 80076f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80076fa:	6013      	str	r3, [r2, #0]
 80076fc:	4650      	mov	r0, sl
 80076fe:	b019      	add	sp, #100	@ 0x64
 8007700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007704:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007706:	2b01      	cmp	r3, #1
 8007708:	f77f ae37 	ble.w	800737a <_dtoa_r+0x7b2>
 800770c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800770e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007710:	2001      	movs	r0, #1
 8007712:	e655      	b.n	80073c0 <_dtoa_r+0x7f8>
 8007714:	9b00      	ldr	r3, [sp, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	f77f aed6 	ble.w	80074c8 <_dtoa_r+0x900>
 800771c:	4656      	mov	r6, sl
 800771e:	4621      	mov	r1, r4
 8007720:	4648      	mov	r0, r9
 8007722:	f7ff f9c7 	bl	8006ab4 <quorem>
 8007726:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800772a:	f806 8b01 	strb.w	r8, [r6], #1
 800772e:	9b00      	ldr	r3, [sp, #0]
 8007730:	eba6 020a 	sub.w	r2, r6, sl
 8007734:	4293      	cmp	r3, r2
 8007736:	ddb3      	ble.n	80076a0 <_dtoa_r+0xad8>
 8007738:	4649      	mov	r1, r9
 800773a:	2300      	movs	r3, #0
 800773c:	220a      	movs	r2, #10
 800773e:	4658      	mov	r0, fp
 8007740:	f000 f968 	bl	8007a14 <__multadd>
 8007744:	4681      	mov	r9, r0
 8007746:	e7ea      	b.n	800771e <_dtoa_r+0xb56>
 8007748:	0800a2f1 	.word	0x0800a2f1
 800774c:	0800a275 	.word	0x0800a275

08007750 <_free_r>:
 8007750:	b538      	push	{r3, r4, r5, lr}
 8007752:	4605      	mov	r5, r0
 8007754:	2900      	cmp	r1, #0
 8007756:	d041      	beq.n	80077dc <_free_r+0x8c>
 8007758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800775c:	1f0c      	subs	r4, r1, #4
 800775e:	2b00      	cmp	r3, #0
 8007760:	bfb8      	it	lt
 8007762:	18e4      	addlt	r4, r4, r3
 8007764:	f000 f8e8 	bl	8007938 <__malloc_lock>
 8007768:	4a1d      	ldr	r2, [pc, #116]	@ (80077e0 <_free_r+0x90>)
 800776a:	6813      	ldr	r3, [r2, #0]
 800776c:	b933      	cbnz	r3, 800777c <_free_r+0x2c>
 800776e:	6063      	str	r3, [r4, #4]
 8007770:	6014      	str	r4, [r2, #0]
 8007772:	4628      	mov	r0, r5
 8007774:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007778:	f000 b8e4 	b.w	8007944 <__malloc_unlock>
 800777c:	42a3      	cmp	r3, r4
 800777e:	d908      	bls.n	8007792 <_free_r+0x42>
 8007780:	6820      	ldr	r0, [r4, #0]
 8007782:	1821      	adds	r1, r4, r0
 8007784:	428b      	cmp	r3, r1
 8007786:	bf01      	itttt	eq
 8007788:	6819      	ldreq	r1, [r3, #0]
 800778a:	685b      	ldreq	r3, [r3, #4]
 800778c:	1809      	addeq	r1, r1, r0
 800778e:	6021      	streq	r1, [r4, #0]
 8007790:	e7ed      	b.n	800776e <_free_r+0x1e>
 8007792:	461a      	mov	r2, r3
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	b10b      	cbz	r3, 800779c <_free_r+0x4c>
 8007798:	42a3      	cmp	r3, r4
 800779a:	d9fa      	bls.n	8007792 <_free_r+0x42>
 800779c:	6811      	ldr	r1, [r2, #0]
 800779e:	1850      	adds	r0, r2, r1
 80077a0:	42a0      	cmp	r0, r4
 80077a2:	d10b      	bne.n	80077bc <_free_r+0x6c>
 80077a4:	6820      	ldr	r0, [r4, #0]
 80077a6:	4401      	add	r1, r0
 80077a8:	1850      	adds	r0, r2, r1
 80077aa:	4283      	cmp	r3, r0
 80077ac:	6011      	str	r1, [r2, #0]
 80077ae:	d1e0      	bne.n	8007772 <_free_r+0x22>
 80077b0:	6818      	ldr	r0, [r3, #0]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	6053      	str	r3, [r2, #4]
 80077b6:	4408      	add	r0, r1
 80077b8:	6010      	str	r0, [r2, #0]
 80077ba:	e7da      	b.n	8007772 <_free_r+0x22>
 80077bc:	d902      	bls.n	80077c4 <_free_r+0x74>
 80077be:	230c      	movs	r3, #12
 80077c0:	602b      	str	r3, [r5, #0]
 80077c2:	e7d6      	b.n	8007772 <_free_r+0x22>
 80077c4:	6820      	ldr	r0, [r4, #0]
 80077c6:	1821      	adds	r1, r4, r0
 80077c8:	428b      	cmp	r3, r1
 80077ca:	bf04      	itt	eq
 80077cc:	6819      	ldreq	r1, [r3, #0]
 80077ce:	685b      	ldreq	r3, [r3, #4]
 80077d0:	6063      	str	r3, [r4, #4]
 80077d2:	bf04      	itt	eq
 80077d4:	1809      	addeq	r1, r1, r0
 80077d6:	6021      	streq	r1, [r4, #0]
 80077d8:	6054      	str	r4, [r2, #4]
 80077da:	e7ca      	b.n	8007772 <_free_r+0x22>
 80077dc:	bd38      	pop	{r3, r4, r5, pc}
 80077de:	bf00      	nop
 80077e0:	200053a8 	.word	0x200053a8

080077e4 <malloc>:
 80077e4:	4b02      	ldr	r3, [pc, #8]	@ (80077f0 <malloc+0xc>)
 80077e6:	4601      	mov	r1, r0
 80077e8:	6818      	ldr	r0, [r3, #0]
 80077ea:	f000 b825 	b.w	8007838 <_malloc_r>
 80077ee:	bf00      	nop
 80077f0:	20000020 	.word	0x20000020

080077f4 <sbrk_aligned>:
 80077f4:	b570      	push	{r4, r5, r6, lr}
 80077f6:	4e0f      	ldr	r6, [pc, #60]	@ (8007834 <sbrk_aligned+0x40>)
 80077f8:	460c      	mov	r4, r1
 80077fa:	6831      	ldr	r1, [r6, #0]
 80077fc:	4605      	mov	r5, r0
 80077fe:	b911      	cbnz	r1, 8007806 <sbrk_aligned+0x12>
 8007800:	f001 ffd2 	bl	80097a8 <_sbrk_r>
 8007804:	6030      	str	r0, [r6, #0]
 8007806:	4621      	mov	r1, r4
 8007808:	4628      	mov	r0, r5
 800780a:	f001 ffcd 	bl	80097a8 <_sbrk_r>
 800780e:	1c43      	adds	r3, r0, #1
 8007810:	d103      	bne.n	800781a <sbrk_aligned+0x26>
 8007812:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007816:	4620      	mov	r0, r4
 8007818:	bd70      	pop	{r4, r5, r6, pc}
 800781a:	1cc4      	adds	r4, r0, #3
 800781c:	f024 0403 	bic.w	r4, r4, #3
 8007820:	42a0      	cmp	r0, r4
 8007822:	d0f8      	beq.n	8007816 <sbrk_aligned+0x22>
 8007824:	1a21      	subs	r1, r4, r0
 8007826:	4628      	mov	r0, r5
 8007828:	f001 ffbe 	bl	80097a8 <_sbrk_r>
 800782c:	3001      	adds	r0, #1
 800782e:	d1f2      	bne.n	8007816 <sbrk_aligned+0x22>
 8007830:	e7ef      	b.n	8007812 <sbrk_aligned+0x1e>
 8007832:	bf00      	nop
 8007834:	200053a4 	.word	0x200053a4

08007838 <_malloc_r>:
 8007838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800783c:	1ccd      	adds	r5, r1, #3
 800783e:	f025 0503 	bic.w	r5, r5, #3
 8007842:	3508      	adds	r5, #8
 8007844:	2d0c      	cmp	r5, #12
 8007846:	bf38      	it	cc
 8007848:	250c      	movcc	r5, #12
 800784a:	2d00      	cmp	r5, #0
 800784c:	4606      	mov	r6, r0
 800784e:	db01      	blt.n	8007854 <_malloc_r+0x1c>
 8007850:	42a9      	cmp	r1, r5
 8007852:	d904      	bls.n	800785e <_malloc_r+0x26>
 8007854:	230c      	movs	r3, #12
 8007856:	6033      	str	r3, [r6, #0]
 8007858:	2000      	movs	r0, #0
 800785a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800785e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007934 <_malloc_r+0xfc>
 8007862:	f000 f869 	bl	8007938 <__malloc_lock>
 8007866:	f8d8 3000 	ldr.w	r3, [r8]
 800786a:	461c      	mov	r4, r3
 800786c:	bb44      	cbnz	r4, 80078c0 <_malloc_r+0x88>
 800786e:	4629      	mov	r1, r5
 8007870:	4630      	mov	r0, r6
 8007872:	f7ff ffbf 	bl	80077f4 <sbrk_aligned>
 8007876:	1c43      	adds	r3, r0, #1
 8007878:	4604      	mov	r4, r0
 800787a:	d158      	bne.n	800792e <_malloc_r+0xf6>
 800787c:	f8d8 4000 	ldr.w	r4, [r8]
 8007880:	4627      	mov	r7, r4
 8007882:	2f00      	cmp	r7, #0
 8007884:	d143      	bne.n	800790e <_malloc_r+0xd6>
 8007886:	2c00      	cmp	r4, #0
 8007888:	d04b      	beq.n	8007922 <_malloc_r+0xea>
 800788a:	6823      	ldr	r3, [r4, #0]
 800788c:	4639      	mov	r1, r7
 800788e:	4630      	mov	r0, r6
 8007890:	eb04 0903 	add.w	r9, r4, r3
 8007894:	f001 ff88 	bl	80097a8 <_sbrk_r>
 8007898:	4581      	cmp	r9, r0
 800789a:	d142      	bne.n	8007922 <_malloc_r+0xea>
 800789c:	6821      	ldr	r1, [r4, #0]
 800789e:	1a6d      	subs	r5, r5, r1
 80078a0:	4629      	mov	r1, r5
 80078a2:	4630      	mov	r0, r6
 80078a4:	f7ff ffa6 	bl	80077f4 <sbrk_aligned>
 80078a8:	3001      	adds	r0, #1
 80078aa:	d03a      	beq.n	8007922 <_malloc_r+0xea>
 80078ac:	6823      	ldr	r3, [r4, #0]
 80078ae:	442b      	add	r3, r5
 80078b0:	6023      	str	r3, [r4, #0]
 80078b2:	f8d8 3000 	ldr.w	r3, [r8]
 80078b6:	685a      	ldr	r2, [r3, #4]
 80078b8:	bb62      	cbnz	r2, 8007914 <_malloc_r+0xdc>
 80078ba:	f8c8 7000 	str.w	r7, [r8]
 80078be:	e00f      	b.n	80078e0 <_malloc_r+0xa8>
 80078c0:	6822      	ldr	r2, [r4, #0]
 80078c2:	1b52      	subs	r2, r2, r5
 80078c4:	d420      	bmi.n	8007908 <_malloc_r+0xd0>
 80078c6:	2a0b      	cmp	r2, #11
 80078c8:	d917      	bls.n	80078fa <_malloc_r+0xc2>
 80078ca:	1961      	adds	r1, r4, r5
 80078cc:	42a3      	cmp	r3, r4
 80078ce:	6025      	str	r5, [r4, #0]
 80078d0:	bf18      	it	ne
 80078d2:	6059      	strne	r1, [r3, #4]
 80078d4:	6863      	ldr	r3, [r4, #4]
 80078d6:	bf08      	it	eq
 80078d8:	f8c8 1000 	streq.w	r1, [r8]
 80078dc:	5162      	str	r2, [r4, r5]
 80078de:	604b      	str	r3, [r1, #4]
 80078e0:	4630      	mov	r0, r6
 80078e2:	f000 f82f 	bl	8007944 <__malloc_unlock>
 80078e6:	f104 000b 	add.w	r0, r4, #11
 80078ea:	1d23      	adds	r3, r4, #4
 80078ec:	f020 0007 	bic.w	r0, r0, #7
 80078f0:	1ac2      	subs	r2, r0, r3
 80078f2:	bf1c      	itt	ne
 80078f4:	1a1b      	subne	r3, r3, r0
 80078f6:	50a3      	strne	r3, [r4, r2]
 80078f8:	e7af      	b.n	800785a <_malloc_r+0x22>
 80078fa:	6862      	ldr	r2, [r4, #4]
 80078fc:	42a3      	cmp	r3, r4
 80078fe:	bf0c      	ite	eq
 8007900:	f8c8 2000 	streq.w	r2, [r8]
 8007904:	605a      	strne	r2, [r3, #4]
 8007906:	e7eb      	b.n	80078e0 <_malloc_r+0xa8>
 8007908:	4623      	mov	r3, r4
 800790a:	6864      	ldr	r4, [r4, #4]
 800790c:	e7ae      	b.n	800786c <_malloc_r+0x34>
 800790e:	463c      	mov	r4, r7
 8007910:	687f      	ldr	r7, [r7, #4]
 8007912:	e7b6      	b.n	8007882 <_malloc_r+0x4a>
 8007914:	461a      	mov	r2, r3
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	42a3      	cmp	r3, r4
 800791a:	d1fb      	bne.n	8007914 <_malloc_r+0xdc>
 800791c:	2300      	movs	r3, #0
 800791e:	6053      	str	r3, [r2, #4]
 8007920:	e7de      	b.n	80078e0 <_malloc_r+0xa8>
 8007922:	230c      	movs	r3, #12
 8007924:	6033      	str	r3, [r6, #0]
 8007926:	4630      	mov	r0, r6
 8007928:	f000 f80c 	bl	8007944 <__malloc_unlock>
 800792c:	e794      	b.n	8007858 <_malloc_r+0x20>
 800792e:	6005      	str	r5, [r0, #0]
 8007930:	e7d6      	b.n	80078e0 <_malloc_r+0xa8>
 8007932:	bf00      	nop
 8007934:	200053a8 	.word	0x200053a8

08007938 <__malloc_lock>:
 8007938:	4801      	ldr	r0, [pc, #4]	@ (8007940 <__malloc_lock+0x8>)
 800793a:	f7ff b8a4 	b.w	8006a86 <__retarget_lock_acquire_recursive>
 800793e:	bf00      	nop
 8007940:	200053a0 	.word	0x200053a0

08007944 <__malloc_unlock>:
 8007944:	4801      	ldr	r0, [pc, #4]	@ (800794c <__malloc_unlock+0x8>)
 8007946:	f7ff b89f 	b.w	8006a88 <__retarget_lock_release_recursive>
 800794a:	bf00      	nop
 800794c:	200053a0 	.word	0x200053a0

08007950 <_Balloc>:
 8007950:	b570      	push	{r4, r5, r6, lr}
 8007952:	69c6      	ldr	r6, [r0, #28]
 8007954:	4604      	mov	r4, r0
 8007956:	460d      	mov	r5, r1
 8007958:	b976      	cbnz	r6, 8007978 <_Balloc+0x28>
 800795a:	2010      	movs	r0, #16
 800795c:	f7ff ff42 	bl	80077e4 <malloc>
 8007960:	4602      	mov	r2, r0
 8007962:	61e0      	str	r0, [r4, #28]
 8007964:	b920      	cbnz	r0, 8007970 <_Balloc+0x20>
 8007966:	4b18      	ldr	r3, [pc, #96]	@ (80079c8 <_Balloc+0x78>)
 8007968:	4818      	ldr	r0, [pc, #96]	@ (80079cc <_Balloc+0x7c>)
 800796a:	216b      	movs	r1, #107	@ 0x6b
 800796c:	f001 ff34 	bl	80097d8 <__assert_func>
 8007970:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007974:	6006      	str	r6, [r0, #0]
 8007976:	60c6      	str	r6, [r0, #12]
 8007978:	69e6      	ldr	r6, [r4, #28]
 800797a:	68f3      	ldr	r3, [r6, #12]
 800797c:	b183      	cbz	r3, 80079a0 <_Balloc+0x50>
 800797e:	69e3      	ldr	r3, [r4, #28]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007986:	b9b8      	cbnz	r0, 80079b8 <_Balloc+0x68>
 8007988:	2101      	movs	r1, #1
 800798a:	fa01 f605 	lsl.w	r6, r1, r5
 800798e:	1d72      	adds	r2, r6, #5
 8007990:	0092      	lsls	r2, r2, #2
 8007992:	4620      	mov	r0, r4
 8007994:	f001 ff3e 	bl	8009814 <_calloc_r>
 8007998:	b160      	cbz	r0, 80079b4 <_Balloc+0x64>
 800799a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800799e:	e00e      	b.n	80079be <_Balloc+0x6e>
 80079a0:	2221      	movs	r2, #33	@ 0x21
 80079a2:	2104      	movs	r1, #4
 80079a4:	4620      	mov	r0, r4
 80079a6:	f001 ff35 	bl	8009814 <_calloc_r>
 80079aa:	69e3      	ldr	r3, [r4, #28]
 80079ac:	60f0      	str	r0, [r6, #12]
 80079ae:	68db      	ldr	r3, [r3, #12]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d1e4      	bne.n	800797e <_Balloc+0x2e>
 80079b4:	2000      	movs	r0, #0
 80079b6:	bd70      	pop	{r4, r5, r6, pc}
 80079b8:	6802      	ldr	r2, [r0, #0]
 80079ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80079be:	2300      	movs	r3, #0
 80079c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80079c4:	e7f7      	b.n	80079b6 <_Balloc+0x66>
 80079c6:	bf00      	nop
 80079c8:	0800a282 	.word	0x0800a282
 80079cc:	0800a302 	.word	0x0800a302

080079d0 <_Bfree>:
 80079d0:	b570      	push	{r4, r5, r6, lr}
 80079d2:	69c6      	ldr	r6, [r0, #28]
 80079d4:	4605      	mov	r5, r0
 80079d6:	460c      	mov	r4, r1
 80079d8:	b976      	cbnz	r6, 80079f8 <_Bfree+0x28>
 80079da:	2010      	movs	r0, #16
 80079dc:	f7ff ff02 	bl	80077e4 <malloc>
 80079e0:	4602      	mov	r2, r0
 80079e2:	61e8      	str	r0, [r5, #28]
 80079e4:	b920      	cbnz	r0, 80079f0 <_Bfree+0x20>
 80079e6:	4b09      	ldr	r3, [pc, #36]	@ (8007a0c <_Bfree+0x3c>)
 80079e8:	4809      	ldr	r0, [pc, #36]	@ (8007a10 <_Bfree+0x40>)
 80079ea:	218f      	movs	r1, #143	@ 0x8f
 80079ec:	f001 fef4 	bl	80097d8 <__assert_func>
 80079f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079f4:	6006      	str	r6, [r0, #0]
 80079f6:	60c6      	str	r6, [r0, #12]
 80079f8:	b13c      	cbz	r4, 8007a0a <_Bfree+0x3a>
 80079fa:	69eb      	ldr	r3, [r5, #28]
 80079fc:	6862      	ldr	r2, [r4, #4]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a04:	6021      	str	r1, [r4, #0]
 8007a06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007a0a:	bd70      	pop	{r4, r5, r6, pc}
 8007a0c:	0800a282 	.word	0x0800a282
 8007a10:	0800a302 	.word	0x0800a302

08007a14 <__multadd>:
 8007a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a18:	690d      	ldr	r5, [r1, #16]
 8007a1a:	4607      	mov	r7, r0
 8007a1c:	460c      	mov	r4, r1
 8007a1e:	461e      	mov	r6, r3
 8007a20:	f101 0c14 	add.w	ip, r1, #20
 8007a24:	2000      	movs	r0, #0
 8007a26:	f8dc 3000 	ldr.w	r3, [ip]
 8007a2a:	b299      	uxth	r1, r3
 8007a2c:	fb02 6101 	mla	r1, r2, r1, r6
 8007a30:	0c1e      	lsrs	r6, r3, #16
 8007a32:	0c0b      	lsrs	r3, r1, #16
 8007a34:	fb02 3306 	mla	r3, r2, r6, r3
 8007a38:	b289      	uxth	r1, r1
 8007a3a:	3001      	adds	r0, #1
 8007a3c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007a40:	4285      	cmp	r5, r0
 8007a42:	f84c 1b04 	str.w	r1, [ip], #4
 8007a46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007a4a:	dcec      	bgt.n	8007a26 <__multadd+0x12>
 8007a4c:	b30e      	cbz	r6, 8007a92 <__multadd+0x7e>
 8007a4e:	68a3      	ldr	r3, [r4, #8]
 8007a50:	42ab      	cmp	r3, r5
 8007a52:	dc19      	bgt.n	8007a88 <__multadd+0x74>
 8007a54:	6861      	ldr	r1, [r4, #4]
 8007a56:	4638      	mov	r0, r7
 8007a58:	3101      	adds	r1, #1
 8007a5a:	f7ff ff79 	bl	8007950 <_Balloc>
 8007a5e:	4680      	mov	r8, r0
 8007a60:	b928      	cbnz	r0, 8007a6e <__multadd+0x5a>
 8007a62:	4602      	mov	r2, r0
 8007a64:	4b0c      	ldr	r3, [pc, #48]	@ (8007a98 <__multadd+0x84>)
 8007a66:	480d      	ldr	r0, [pc, #52]	@ (8007a9c <__multadd+0x88>)
 8007a68:	21ba      	movs	r1, #186	@ 0xba
 8007a6a:	f001 feb5 	bl	80097d8 <__assert_func>
 8007a6e:	6922      	ldr	r2, [r4, #16]
 8007a70:	3202      	adds	r2, #2
 8007a72:	f104 010c 	add.w	r1, r4, #12
 8007a76:	0092      	lsls	r2, r2, #2
 8007a78:	300c      	adds	r0, #12
 8007a7a:	f7ff f806 	bl	8006a8a <memcpy>
 8007a7e:	4621      	mov	r1, r4
 8007a80:	4638      	mov	r0, r7
 8007a82:	f7ff ffa5 	bl	80079d0 <_Bfree>
 8007a86:	4644      	mov	r4, r8
 8007a88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007a8c:	3501      	adds	r5, #1
 8007a8e:	615e      	str	r6, [r3, #20]
 8007a90:	6125      	str	r5, [r4, #16]
 8007a92:	4620      	mov	r0, r4
 8007a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a98:	0800a2f1 	.word	0x0800a2f1
 8007a9c:	0800a302 	.word	0x0800a302

08007aa0 <__s2b>:
 8007aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007aa4:	460c      	mov	r4, r1
 8007aa6:	4615      	mov	r5, r2
 8007aa8:	461f      	mov	r7, r3
 8007aaa:	2209      	movs	r2, #9
 8007aac:	3308      	adds	r3, #8
 8007aae:	4606      	mov	r6, r0
 8007ab0:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	db09      	blt.n	8007ad0 <__s2b+0x30>
 8007abc:	4630      	mov	r0, r6
 8007abe:	f7ff ff47 	bl	8007950 <_Balloc>
 8007ac2:	b940      	cbnz	r0, 8007ad6 <__s2b+0x36>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	4b19      	ldr	r3, [pc, #100]	@ (8007b2c <__s2b+0x8c>)
 8007ac8:	4819      	ldr	r0, [pc, #100]	@ (8007b30 <__s2b+0x90>)
 8007aca:	21d3      	movs	r1, #211	@ 0xd3
 8007acc:	f001 fe84 	bl	80097d8 <__assert_func>
 8007ad0:	0052      	lsls	r2, r2, #1
 8007ad2:	3101      	adds	r1, #1
 8007ad4:	e7f0      	b.n	8007ab8 <__s2b+0x18>
 8007ad6:	9b08      	ldr	r3, [sp, #32]
 8007ad8:	6143      	str	r3, [r0, #20]
 8007ada:	2d09      	cmp	r5, #9
 8007adc:	f04f 0301 	mov.w	r3, #1
 8007ae0:	6103      	str	r3, [r0, #16]
 8007ae2:	dd16      	ble.n	8007b12 <__s2b+0x72>
 8007ae4:	f104 0909 	add.w	r9, r4, #9
 8007ae8:	46c8      	mov	r8, r9
 8007aea:	442c      	add	r4, r5
 8007aec:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007af0:	4601      	mov	r1, r0
 8007af2:	3b30      	subs	r3, #48	@ 0x30
 8007af4:	220a      	movs	r2, #10
 8007af6:	4630      	mov	r0, r6
 8007af8:	f7ff ff8c 	bl	8007a14 <__multadd>
 8007afc:	45a0      	cmp	r8, r4
 8007afe:	d1f5      	bne.n	8007aec <__s2b+0x4c>
 8007b00:	f1a5 0408 	sub.w	r4, r5, #8
 8007b04:	444c      	add	r4, r9
 8007b06:	1b2d      	subs	r5, r5, r4
 8007b08:	1963      	adds	r3, r4, r5
 8007b0a:	42bb      	cmp	r3, r7
 8007b0c:	db04      	blt.n	8007b18 <__s2b+0x78>
 8007b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b12:	340a      	adds	r4, #10
 8007b14:	2509      	movs	r5, #9
 8007b16:	e7f6      	b.n	8007b06 <__s2b+0x66>
 8007b18:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007b1c:	4601      	mov	r1, r0
 8007b1e:	3b30      	subs	r3, #48	@ 0x30
 8007b20:	220a      	movs	r2, #10
 8007b22:	4630      	mov	r0, r6
 8007b24:	f7ff ff76 	bl	8007a14 <__multadd>
 8007b28:	e7ee      	b.n	8007b08 <__s2b+0x68>
 8007b2a:	bf00      	nop
 8007b2c:	0800a2f1 	.word	0x0800a2f1
 8007b30:	0800a302 	.word	0x0800a302

08007b34 <__hi0bits>:
 8007b34:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007b38:	4603      	mov	r3, r0
 8007b3a:	bf36      	itet	cc
 8007b3c:	0403      	lslcc	r3, r0, #16
 8007b3e:	2000      	movcs	r0, #0
 8007b40:	2010      	movcc	r0, #16
 8007b42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b46:	bf3c      	itt	cc
 8007b48:	021b      	lslcc	r3, r3, #8
 8007b4a:	3008      	addcc	r0, #8
 8007b4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b50:	bf3c      	itt	cc
 8007b52:	011b      	lslcc	r3, r3, #4
 8007b54:	3004      	addcc	r0, #4
 8007b56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b5a:	bf3c      	itt	cc
 8007b5c:	009b      	lslcc	r3, r3, #2
 8007b5e:	3002      	addcc	r0, #2
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	db05      	blt.n	8007b70 <__hi0bits+0x3c>
 8007b64:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007b68:	f100 0001 	add.w	r0, r0, #1
 8007b6c:	bf08      	it	eq
 8007b6e:	2020      	moveq	r0, #32
 8007b70:	4770      	bx	lr

08007b72 <__lo0bits>:
 8007b72:	6803      	ldr	r3, [r0, #0]
 8007b74:	4602      	mov	r2, r0
 8007b76:	f013 0007 	ands.w	r0, r3, #7
 8007b7a:	d00b      	beq.n	8007b94 <__lo0bits+0x22>
 8007b7c:	07d9      	lsls	r1, r3, #31
 8007b7e:	d421      	bmi.n	8007bc4 <__lo0bits+0x52>
 8007b80:	0798      	lsls	r0, r3, #30
 8007b82:	bf49      	itett	mi
 8007b84:	085b      	lsrmi	r3, r3, #1
 8007b86:	089b      	lsrpl	r3, r3, #2
 8007b88:	2001      	movmi	r0, #1
 8007b8a:	6013      	strmi	r3, [r2, #0]
 8007b8c:	bf5c      	itt	pl
 8007b8e:	6013      	strpl	r3, [r2, #0]
 8007b90:	2002      	movpl	r0, #2
 8007b92:	4770      	bx	lr
 8007b94:	b299      	uxth	r1, r3
 8007b96:	b909      	cbnz	r1, 8007b9c <__lo0bits+0x2a>
 8007b98:	0c1b      	lsrs	r3, r3, #16
 8007b9a:	2010      	movs	r0, #16
 8007b9c:	b2d9      	uxtb	r1, r3
 8007b9e:	b909      	cbnz	r1, 8007ba4 <__lo0bits+0x32>
 8007ba0:	3008      	adds	r0, #8
 8007ba2:	0a1b      	lsrs	r3, r3, #8
 8007ba4:	0719      	lsls	r1, r3, #28
 8007ba6:	bf04      	itt	eq
 8007ba8:	091b      	lsreq	r3, r3, #4
 8007baa:	3004      	addeq	r0, #4
 8007bac:	0799      	lsls	r1, r3, #30
 8007bae:	bf04      	itt	eq
 8007bb0:	089b      	lsreq	r3, r3, #2
 8007bb2:	3002      	addeq	r0, #2
 8007bb4:	07d9      	lsls	r1, r3, #31
 8007bb6:	d403      	bmi.n	8007bc0 <__lo0bits+0x4e>
 8007bb8:	085b      	lsrs	r3, r3, #1
 8007bba:	f100 0001 	add.w	r0, r0, #1
 8007bbe:	d003      	beq.n	8007bc8 <__lo0bits+0x56>
 8007bc0:	6013      	str	r3, [r2, #0]
 8007bc2:	4770      	bx	lr
 8007bc4:	2000      	movs	r0, #0
 8007bc6:	4770      	bx	lr
 8007bc8:	2020      	movs	r0, #32
 8007bca:	4770      	bx	lr

08007bcc <__i2b>:
 8007bcc:	b510      	push	{r4, lr}
 8007bce:	460c      	mov	r4, r1
 8007bd0:	2101      	movs	r1, #1
 8007bd2:	f7ff febd 	bl	8007950 <_Balloc>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	b928      	cbnz	r0, 8007be6 <__i2b+0x1a>
 8007bda:	4b05      	ldr	r3, [pc, #20]	@ (8007bf0 <__i2b+0x24>)
 8007bdc:	4805      	ldr	r0, [pc, #20]	@ (8007bf4 <__i2b+0x28>)
 8007bde:	f240 1145 	movw	r1, #325	@ 0x145
 8007be2:	f001 fdf9 	bl	80097d8 <__assert_func>
 8007be6:	2301      	movs	r3, #1
 8007be8:	6144      	str	r4, [r0, #20]
 8007bea:	6103      	str	r3, [r0, #16]
 8007bec:	bd10      	pop	{r4, pc}
 8007bee:	bf00      	nop
 8007bf0:	0800a2f1 	.word	0x0800a2f1
 8007bf4:	0800a302 	.word	0x0800a302

08007bf8 <__multiply>:
 8007bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bfc:	4614      	mov	r4, r2
 8007bfe:	690a      	ldr	r2, [r1, #16]
 8007c00:	6923      	ldr	r3, [r4, #16]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	bfa8      	it	ge
 8007c06:	4623      	movge	r3, r4
 8007c08:	460f      	mov	r7, r1
 8007c0a:	bfa4      	itt	ge
 8007c0c:	460c      	movge	r4, r1
 8007c0e:	461f      	movge	r7, r3
 8007c10:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007c14:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007c18:	68a3      	ldr	r3, [r4, #8]
 8007c1a:	6861      	ldr	r1, [r4, #4]
 8007c1c:	eb0a 0609 	add.w	r6, sl, r9
 8007c20:	42b3      	cmp	r3, r6
 8007c22:	b085      	sub	sp, #20
 8007c24:	bfb8      	it	lt
 8007c26:	3101      	addlt	r1, #1
 8007c28:	f7ff fe92 	bl	8007950 <_Balloc>
 8007c2c:	b930      	cbnz	r0, 8007c3c <__multiply+0x44>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	4b44      	ldr	r3, [pc, #272]	@ (8007d44 <__multiply+0x14c>)
 8007c32:	4845      	ldr	r0, [pc, #276]	@ (8007d48 <__multiply+0x150>)
 8007c34:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007c38:	f001 fdce 	bl	80097d8 <__assert_func>
 8007c3c:	f100 0514 	add.w	r5, r0, #20
 8007c40:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007c44:	462b      	mov	r3, r5
 8007c46:	2200      	movs	r2, #0
 8007c48:	4543      	cmp	r3, r8
 8007c4a:	d321      	bcc.n	8007c90 <__multiply+0x98>
 8007c4c:	f107 0114 	add.w	r1, r7, #20
 8007c50:	f104 0214 	add.w	r2, r4, #20
 8007c54:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007c58:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007c5c:	9302      	str	r3, [sp, #8]
 8007c5e:	1b13      	subs	r3, r2, r4
 8007c60:	3b15      	subs	r3, #21
 8007c62:	f023 0303 	bic.w	r3, r3, #3
 8007c66:	3304      	adds	r3, #4
 8007c68:	f104 0715 	add.w	r7, r4, #21
 8007c6c:	42ba      	cmp	r2, r7
 8007c6e:	bf38      	it	cc
 8007c70:	2304      	movcc	r3, #4
 8007c72:	9301      	str	r3, [sp, #4]
 8007c74:	9b02      	ldr	r3, [sp, #8]
 8007c76:	9103      	str	r1, [sp, #12]
 8007c78:	428b      	cmp	r3, r1
 8007c7a:	d80c      	bhi.n	8007c96 <__multiply+0x9e>
 8007c7c:	2e00      	cmp	r6, #0
 8007c7e:	dd03      	ble.n	8007c88 <__multiply+0x90>
 8007c80:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d05b      	beq.n	8007d40 <__multiply+0x148>
 8007c88:	6106      	str	r6, [r0, #16]
 8007c8a:	b005      	add	sp, #20
 8007c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c90:	f843 2b04 	str.w	r2, [r3], #4
 8007c94:	e7d8      	b.n	8007c48 <__multiply+0x50>
 8007c96:	f8b1 a000 	ldrh.w	sl, [r1]
 8007c9a:	f1ba 0f00 	cmp.w	sl, #0
 8007c9e:	d024      	beq.n	8007cea <__multiply+0xf2>
 8007ca0:	f104 0e14 	add.w	lr, r4, #20
 8007ca4:	46a9      	mov	r9, r5
 8007ca6:	f04f 0c00 	mov.w	ip, #0
 8007caa:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007cae:	f8d9 3000 	ldr.w	r3, [r9]
 8007cb2:	fa1f fb87 	uxth.w	fp, r7
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	fb0a 330b 	mla	r3, sl, fp, r3
 8007cbc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007cc0:	f8d9 7000 	ldr.w	r7, [r9]
 8007cc4:	4463      	add	r3, ip
 8007cc6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007cca:	fb0a c70b 	mla	r7, sl, fp, ip
 8007cce:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007cd8:	4572      	cmp	r2, lr
 8007cda:	f849 3b04 	str.w	r3, [r9], #4
 8007cde:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007ce2:	d8e2      	bhi.n	8007caa <__multiply+0xb2>
 8007ce4:	9b01      	ldr	r3, [sp, #4]
 8007ce6:	f845 c003 	str.w	ip, [r5, r3]
 8007cea:	9b03      	ldr	r3, [sp, #12]
 8007cec:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007cf0:	3104      	adds	r1, #4
 8007cf2:	f1b9 0f00 	cmp.w	r9, #0
 8007cf6:	d021      	beq.n	8007d3c <__multiply+0x144>
 8007cf8:	682b      	ldr	r3, [r5, #0]
 8007cfa:	f104 0c14 	add.w	ip, r4, #20
 8007cfe:	46ae      	mov	lr, r5
 8007d00:	f04f 0a00 	mov.w	sl, #0
 8007d04:	f8bc b000 	ldrh.w	fp, [ip]
 8007d08:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007d0c:	fb09 770b 	mla	r7, r9, fp, r7
 8007d10:	4457      	add	r7, sl
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007d18:	f84e 3b04 	str.w	r3, [lr], #4
 8007d1c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007d20:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d24:	f8be 3000 	ldrh.w	r3, [lr]
 8007d28:	fb09 330a 	mla	r3, r9, sl, r3
 8007d2c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007d30:	4562      	cmp	r2, ip
 8007d32:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d36:	d8e5      	bhi.n	8007d04 <__multiply+0x10c>
 8007d38:	9f01      	ldr	r7, [sp, #4]
 8007d3a:	51eb      	str	r3, [r5, r7]
 8007d3c:	3504      	adds	r5, #4
 8007d3e:	e799      	b.n	8007c74 <__multiply+0x7c>
 8007d40:	3e01      	subs	r6, #1
 8007d42:	e79b      	b.n	8007c7c <__multiply+0x84>
 8007d44:	0800a2f1 	.word	0x0800a2f1
 8007d48:	0800a302 	.word	0x0800a302

08007d4c <__pow5mult>:
 8007d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d50:	4615      	mov	r5, r2
 8007d52:	f012 0203 	ands.w	r2, r2, #3
 8007d56:	4607      	mov	r7, r0
 8007d58:	460e      	mov	r6, r1
 8007d5a:	d007      	beq.n	8007d6c <__pow5mult+0x20>
 8007d5c:	4c25      	ldr	r4, [pc, #148]	@ (8007df4 <__pow5mult+0xa8>)
 8007d5e:	3a01      	subs	r2, #1
 8007d60:	2300      	movs	r3, #0
 8007d62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007d66:	f7ff fe55 	bl	8007a14 <__multadd>
 8007d6a:	4606      	mov	r6, r0
 8007d6c:	10ad      	asrs	r5, r5, #2
 8007d6e:	d03d      	beq.n	8007dec <__pow5mult+0xa0>
 8007d70:	69fc      	ldr	r4, [r7, #28]
 8007d72:	b97c      	cbnz	r4, 8007d94 <__pow5mult+0x48>
 8007d74:	2010      	movs	r0, #16
 8007d76:	f7ff fd35 	bl	80077e4 <malloc>
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	61f8      	str	r0, [r7, #28]
 8007d7e:	b928      	cbnz	r0, 8007d8c <__pow5mult+0x40>
 8007d80:	4b1d      	ldr	r3, [pc, #116]	@ (8007df8 <__pow5mult+0xac>)
 8007d82:	481e      	ldr	r0, [pc, #120]	@ (8007dfc <__pow5mult+0xb0>)
 8007d84:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007d88:	f001 fd26 	bl	80097d8 <__assert_func>
 8007d8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d90:	6004      	str	r4, [r0, #0]
 8007d92:	60c4      	str	r4, [r0, #12]
 8007d94:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007d98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d9c:	b94c      	cbnz	r4, 8007db2 <__pow5mult+0x66>
 8007d9e:	f240 2171 	movw	r1, #625	@ 0x271
 8007da2:	4638      	mov	r0, r7
 8007da4:	f7ff ff12 	bl	8007bcc <__i2b>
 8007da8:	2300      	movs	r3, #0
 8007daa:	f8c8 0008 	str.w	r0, [r8, #8]
 8007dae:	4604      	mov	r4, r0
 8007db0:	6003      	str	r3, [r0, #0]
 8007db2:	f04f 0900 	mov.w	r9, #0
 8007db6:	07eb      	lsls	r3, r5, #31
 8007db8:	d50a      	bpl.n	8007dd0 <__pow5mult+0x84>
 8007dba:	4631      	mov	r1, r6
 8007dbc:	4622      	mov	r2, r4
 8007dbe:	4638      	mov	r0, r7
 8007dc0:	f7ff ff1a 	bl	8007bf8 <__multiply>
 8007dc4:	4631      	mov	r1, r6
 8007dc6:	4680      	mov	r8, r0
 8007dc8:	4638      	mov	r0, r7
 8007dca:	f7ff fe01 	bl	80079d0 <_Bfree>
 8007dce:	4646      	mov	r6, r8
 8007dd0:	106d      	asrs	r5, r5, #1
 8007dd2:	d00b      	beq.n	8007dec <__pow5mult+0xa0>
 8007dd4:	6820      	ldr	r0, [r4, #0]
 8007dd6:	b938      	cbnz	r0, 8007de8 <__pow5mult+0x9c>
 8007dd8:	4622      	mov	r2, r4
 8007dda:	4621      	mov	r1, r4
 8007ddc:	4638      	mov	r0, r7
 8007dde:	f7ff ff0b 	bl	8007bf8 <__multiply>
 8007de2:	6020      	str	r0, [r4, #0]
 8007de4:	f8c0 9000 	str.w	r9, [r0]
 8007de8:	4604      	mov	r4, r0
 8007dea:	e7e4      	b.n	8007db6 <__pow5mult+0x6a>
 8007dec:	4630      	mov	r0, r6
 8007dee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007df2:	bf00      	nop
 8007df4:	0800a35c 	.word	0x0800a35c
 8007df8:	0800a282 	.word	0x0800a282
 8007dfc:	0800a302 	.word	0x0800a302

08007e00 <__lshift>:
 8007e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e04:	460c      	mov	r4, r1
 8007e06:	6849      	ldr	r1, [r1, #4]
 8007e08:	6923      	ldr	r3, [r4, #16]
 8007e0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007e0e:	68a3      	ldr	r3, [r4, #8]
 8007e10:	4607      	mov	r7, r0
 8007e12:	4691      	mov	r9, r2
 8007e14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e18:	f108 0601 	add.w	r6, r8, #1
 8007e1c:	42b3      	cmp	r3, r6
 8007e1e:	db0b      	blt.n	8007e38 <__lshift+0x38>
 8007e20:	4638      	mov	r0, r7
 8007e22:	f7ff fd95 	bl	8007950 <_Balloc>
 8007e26:	4605      	mov	r5, r0
 8007e28:	b948      	cbnz	r0, 8007e3e <__lshift+0x3e>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	4b28      	ldr	r3, [pc, #160]	@ (8007ed0 <__lshift+0xd0>)
 8007e2e:	4829      	ldr	r0, [pc, #164]	@ (8007ed4 <__lshift+0xd4>)
 8007e30:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007e34:	f001 fcd0 	bl	80097d8 <__assert_func>
 8007e38:	3101      	adds	r1, #1
 8007e3a:	005b      	lsls	r3, r3, #1
 8007e3c:	e7ee      	b.n	8007e1c <__lshift+0x1c>
 8007e3e:	2300      	movs	r3, #0
 8007e40:	f100 0114 	add.w	r1, r0, #20
 8007e44:	f100 0210 	add.w	r2, r0, #16
 8007e48:	4618      	mov	r0, r3
 8007e4a:	4553      	cmp	r3, sl
 8007e4c:	db33      	blt.n	8007eb6 <__lshift+0xb6>
 8007e4e:	6920      	ldr	r0, [r4, #16]
 8007e50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e54:	f104 0314 	add.w	r3, r4, #20
 8007e58:	f019 091f 	ands.w	r9, r9, #31
 8007e5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007e60:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007e64:	d02b      	beq.n	8007ebe <__lshift+0xbe>
 8007e66:	f1c9 0e20 	rsb	lr, r9, #32
 8007e6a:	468a      	mov	sl, r1
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	6818      	ldr	r0, [r3, #0]
 8007e70:	fa00 f009 	lsl.w	r0, r0, r9
 8007e74:	4310      	orrs	r0, r2
 8007e76:	f84a 0b04 	str.w	r0, [sl], #4
 8007e7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e7e:	459c      	cmp	ip, r3
 8007e80:	fa22 f20e 	lsr.w	r2, r2, lr
 8007e84:	d8f3      	bhi.n	8007e6e <__lshift+0x6e>
 8007e86:	ebac 0304 	sub.w	r3, ip, r4
 8007e8a:	3b15      	subs	r3, #21
 8007e8c:	f023 0303 	bic.w	r3, r3, #3
 8007e90:	3304      	adds	r3, #4
 8007e92:	f104 0015 	add.w	r0, r4, #21
 8007e96:	4584      	cmp	ip, r0
 8007e98:	bf38      	it	cc
 8007e9a:	2304      	movcc	r3, #4
 8007e9c:	50ca      	str	r2, [r1, r3]
 8007e9e:	b10a      	cbz	r2, 8007ea4 <__lshift+0xa4>
 8007ea0:	f108 0602 	add.w	r6, r8, #2
 8007ea4:	3e01      	subs	r6, #1
 8007ea6:	4638      	mov	r0, r7
 8007ea8:	612e      	str	r6, [r5, #16]
 8007eaa:	4621      	mov	r1, r4
 8007eac:	f7ff fd90 	bl	80079d0 <_Bfree>
 8007eb0:	4628      	mov	r0, r5
 8007eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eb6:	f842 0f04 	str.w	r0, [r2, #4]!
 8007eba:	3301      	adds	r3, #1
 8007ebc:	e7c5      	b.n	8007e4a <__lshift+0x4a>
 8007ebe:	3904      	subs	r1, #4
 8007ec0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ec4:	f841 2f04 	str.w	r2, [r1, #4]!
 8007ec8:	459c      	cmp	ip, r3
 8007eca:	d8f9      	bhi.n	8007ec0 <__lshift+0xc0>
 8007ecc:	e7ea      	b.n	8007ea4 <__lshift+0xa4>
 8007ece:	bf00      	nop
 8007ed0:	0800a2f1 	.word	0x0800a2f1
 8007ed4:	0800a302 	.word	0x0800a302

08007ed8 <__mcmp>:
 8007ed8:	690a      	ldr	r2, [r1, #16]
 8007eda:	4603      	mov	r3, r0
 8007edc:	6900      	ldr	r0, [r0, #16]
 8007ede:	1a80      	subs	r0, r0, r2
 8007ee0:	b530      	push	{r4, r5, lr}
 8007ee2:	d10e      	bne.n	8007f02 <__mcmp+0x2a>
 8007ee4:	3314      	adds	r3, #20
 8007ee6:	3114      	adds	r1, #20
 8007ee8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007eec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007ef0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007ef4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007ef8:	4295      	cmp	r5, r2
 8007efa:	d003      	beq.n	8007f04 <__mcmp+0x2c>
 8007efc:	d205      	bcs.n	8007f0a <__mcmp+0x32>
 8007efe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007f02:	bd30      	pop	{r4, r5, pc}
 8007f04:	42a3      	cmp	r3, r4
 8007f06:	d3f3      	bcc.n	8007ef0 <__mcmp+0x18>
 8007f08:	e7fb      	b.n	8007f02 <__mcmp+0x2a>
 8007f0a:	2001      	movs	r0, #1
 8007f0c:	e7f9      	b.n	8007f02 <__mcmp+0x2a>
	...

08007f10 <__mdiff>:
 8007f10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f14:	4689      	mov	r9, r1
 8007f16:	4606      	mov	r6, r0
 8007f18:	4611      	mov	r1, r2
 8007f1a:	4648      	mov	r0, r9
 8007f1c:	4614      	mov	r4, r2
 8007f1e:	f7ff ffdb 	bl	8007ed8 <__mcmp>
 8007f22:	1e05      	subs	r5, r0, #0
 8007f24:	d112      	bne.n	8007f4c <__mdiff+0x3c>
 8007f26:	4629      	mov	r1, r5
 8007f28:	4630      	mov	r0, r6
 8007f2a:	f7ff fd11 	bl	8007950 <_Balloc>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	b928      	cbnz	r0, 8007f3e <__mdiff+0x2e>
 8007f32:	4b3f      	ldr	r3, [pc, #252]	@ (8008030 <__mdiff+0x120>)
 8007f34:	f240 2137 	movw	r1, #567	@ 0x237
 8007f38:	483e      	ldr	r0, [pc, #248]	@ (8008034 <__mdiff+0x124>)
 8007f3a:	f001 fc4d 	bl	80097d8 <__assert_func>
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007f44:	4610      	mov	r0, r2
 8007f46:	b003      	add	sp, #12
 8007f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f4c:	bfbc      	itt	lt
 8007f4e:	464b      	movlt	r3, r9
 8007f50:	46a1      	movlt	r9, r4
 8007f52:	4630      	mov	r0, r6
 8007f54:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007f58:	bfba      	itte	lt
 8007f5a:	461c      	movlt	r4, r3
 8007f5c:	2501      	movlt	r5, #1
 8007f5e:	2500      	movge	r5, #0
 8007f60:	f7ff fcf6 	bl	8007950 <_Balloc>
 8007f64:	4602      	mov	r2, r0
 8007f66:	b918      	cbnz	r0, 8007f70 <__mdiff+0x60>
 8007f68:	4b31      	ldr	r3, [pc, #196]	@ (8008030 <__mdiff+0x120>)
 8007f6a:	f240 2145 	movw	r1, #581	@ 0x245
 8007f6e:	e7e3      	b.n	8007f38 <__mdiff+0x28>
 8007f70:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007f74:	6926      	ldr	r6, [r4, #16]
 8007f76:	60c5      	str	r5, [r0, #12]
 8007f78:	f109 0310 	add.w	r3, r9, #16
 8007f7c:	f109 0514 	add.w	r5, r9, #20
 8007f80:	f104 0e14 	add.w	lr, r4, #20
 8007f84:	f100 0b14 	add.w	fp, r0, #20
 8007f88:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007f8c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007f90:	9301      	str	r3, [sp, #4]
 8007f92:	46d9      	mov	r9, fp
 8007f94:	f04f 0c00 	mov.w	ip, #0
 8007f98:	9b01      	ldr	r3, [sp, #4]
 8007f9a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007f9e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007fa2:	9301      	str	r3, [sp, #4]
 8007fa4:	fa1f f38a 	uxth.w	r3, sl
 8007fa8:	4619      	mov	r1, r3
 8007faa:	b283      	uxth	r3, r0
 8007fac:	1acb      	subs	r3, r1, r3
 8007fae:	0c00      	lsrs	r0, r0, #16
 8007fb0:	4463      	add	r3, ip
 8007fb2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007fb6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007fc0:	4576      	cmp	r6, lr
 8007fc2:	f849 3b04 	str.w	r3, [r9], #4
 8007fc6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007fca:	d8e5      	bhi.n	8007f98 <__mdiff+0x88>
 8007fcc:	1b33      	subs	r3, r6, r4
 8007fce:	3b15      	subs	r3, #21
 8007fd0:	f023 0303 	bic.w	r3, r3, #3
 8007fd4:	3415      	adds	r4, #21
 8007fd6:	3304      	adds	r3, #4
 8007fd8:	42a6      	cmp	r6, r4
 8007fda:	bf38      	it	cc
 8007fdc:	2304      	movcc	r3, #4
 8007fde:	441d      	add	r5, r3
 8007fe0:	445b      	add	r3, fp
 8007fe2:	461e      	mov	r6, r3
 8007fe4:	462c      	mov	r4, r5
 8007fe6:	4544      	cmp	r4, r8
 8007fe8:	d30e      	bcc.n	8008008 <__mdiff+0xf8>
 8007fea:	f108 0103 	add.w	r1, r8, #3
 8007fee:	1b49      	subs	r1, r1, r5
 8007ff0:	f021 0103 	bic.w	r1, r1, #3
 8007ff4:	3d03      	subs	r5, #3
 8007ff6:	45a8      	cmp	r8, r5
 8007ff8:	bf38      	it	cc
 8007ffa:	2100      	movcc	r1, #0
 8007ffc:	440b      	add	r3, r1
 8007ffe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008002:	b191      	cbz	r1, 800802a <__mdiff+0x11a>
 8008004:	6117      	str	r7, [r2, #16]
 8008006:	e79d      	b.n	8007f44 <__mdiff+0x34>
 8008008:	f854 1b04 	ldr.w	r1, [r4], #4
 800800c:	46e6      	mov	lr, ip
 800800e:	0c08      	lsrs	r0, r1, #16
 8008010:	fa1c fc81 	uxtah	ip, ip, r1
 8008014:	4471      	add	r1, lr
 8008016:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800801a:	b289      	uxth	r1, r1
 800801c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008020:	f846 1b04 	str.w	r1, [r6], #4
 8008024:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008028:	e7dd      	b.n	8007fe6 <__mdiff+0xd6>
 800802a:	3f01      	subs	r7, #1
 800802c:	e7e7      	b.n	8007ffe <__mdiff+0xee>
 800802e:	bf00      	nop
 8008030:	0800a2f1 	.word	0x0800a2f1
 8008034:	0800a302 	.word	0x0800a302

08008038 <__ulp>:
 8008038:	b082      	sub	sp, #8
 800803a:	ed8d 0b00 	vstr	d0, [sp]
 800803e:	9a01      	ldr	r2, [sp, #4]
 8008040:	4b0f      	ldr	r3, [pc, #60]	@ (8008080 <__ulp+0x48>)
 8008042:	4013      	ands	r3, r2
 8008044:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008048:	2b00      	cmp	r3, #0
 800804a:	dc08      	bgt.n	800805e <__ulp+0x26>
 800804c:	425b      	negs	r3, r3
 800804e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008052:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008056:	da04      	bge.n	8008062 <__ulp+0x2a>
 8008058:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800805c:	4113      	asrs	r3, r2
 800805e:	2200      	movs	r2, #0
 8008060:	e008      	b.n	8008074 <__ulp+0x3c>
 8008062:	f1a2 0314 	sub.w	r3, r2, #20
 8008066:	2b1e      	cmp	r3, #30
 8008068:	bfda      	itte	le
 800806a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800806e:	40da      	lsrle	r2, r3
 8008070:	2201      	movgt	r2, #1
 8008072:	2300      	movs	r3, #0
 8008074:	4619      	mov	r1, r3
 8008076:	4610      	mov	r0, r2
 8008078:	ec41 0b10 	vmov	d0, r0, r1
 800807c:	b002      	add	sp, #8
 800807e:	4770      	bx	lr
 8008080:	7ff00000 	.word	0x7ff00000

08008084 <__b2d>:
 8008084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008088:	6906      	ldr	r6, [r0, #16]
 800808a:	f100 0814 	add.w	r8, r0, #20
 800808e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008092:	1f37      	subs	r7, r6, #4
 8008094:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008098:	4610      	mov	r0, r2
 800809a:	f7ff fd4b 	bl	8007b34 <__hi0bits>
 800809e:	f1c0 0320 	rsb	r3, r0, #32
 80080a2:	280a      	cmp	r0, #10
 80080a4:	600b      	str	r3, [r1, #0]
 80080a6:	491b      	ldr	r1, [pc, #108]	@ (8008114 <__b2d+0x90>)
 80080a8:	dc15      	bgt.n	80080d6 <__b2d+0x52>
 80080aa:	f1c0 0c0b 	rsb	ip, r0, #11
 80080ae:	fa22 f30c 	lsr.w	r3, r2, ip
 80080b2:	45b8      	cmp	r8, r7
 80080b4:	ea43 0501 	orr.w	r5, r3, r1
 80080b8:	bf34      	ite	cc
 80080ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80080be:	2300      	movcs	r3, #0
 80080c0:	3015      	adds	r0, #21
 80080c2:	fa02 f000 	lsl.w	r0, r2, r0
 80080c6:	fa23 f30c 	lsr.w	r3, r3, ip
 80080ca:	4303      	orrs	r3, r0
 80080cc:	461c      	mov	r4, r3
 80080ce:	ec45 4b10 	vmov	d0, r4, r5
 80080d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080d6:	45b8      	cmp	r8, r7
 80080d8:	bf3a      	itte	cc
 80080da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80080de:	f1a6 0708 	subcc.w	r7, r6, #8
 80080e2:	2300      	movcs	r3, #0
 80080e4:	380b      	subs	r0, #11
 80080e6:	d012      	beq.n	800810e <__b2d+0x8a>
 80080e8:	f1c0 0120 	rsb	r1, r0, #32
 80080ec:	fa23 f401 	lsr.w	r4, r3, r1
 80080f0:	4082      	lsls	r2, r0
 80080f2:	4322      	orrs	r2, r4
 80080f4:	4547      	cmp	r7, r8
 80080f6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80080fa:	bf8c      	ite	hi
 80080fc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008100:	2200      	movls	r2, #0
 8008102:	4083      	lsls	r3, r0
 8008104:	40ca      	lsrs	r2, r1
 8008106:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800810a:	4313      	orrs	r3, r2
 800810c:	e7de      	b.n	80080cc <__b2d+0x48>
 800810e:	ea42 0501 	orr.w	r5, r2, r1
 8008112:	e7db      	b.n	80080cc <__b2d+0x48>
 8008114:	3ff00000 	.word	0x3ff00000

08008118 <__d2b>:
 8008118:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800811c:	460f      	mov	r7, r1
 800811e:	2101      	movs	r1, #1
 8008120:	ec59 8b10 	vmov	r8, r9, d0
 8008124:	4616      	mov	r6, r2
 8008126:	f7ff fc13 	bl	8007950 <_Balloc>
 800812a:	4604      	mov	r4, r0
 800812c:	b930      	cbnz	r0, 800813c <__d2b+0x24>
 800812e:	4602      	mov	r2, r0
 8008130:	4b23      	ldr	r3, [pc, #140]	@ (80081c0 <__d2b+0xa8>)
 8008132:	4824      	ldr	r0, [pc, #144]	@ (80081c4 <__d2b+0xac>)
 8008134:	f240 310f 	movw	r1, #783	@ 0x30f
 8008138:	f001 fb4e 	bl	80097d8 <__assert_func>
 800813c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008140:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008144:	b10d      	cbz	r5, 800814a <__d2b+0x32>
 8008146:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800814a:	9301      	str	r3, [sp, #4]
 800814c:	f1b8 0300 	subs.w	r3, r8, #0
 8008150:	d023      	beq.n	800819a <__d2b+0x82>
 8008152:	4668      	mov	r0, sp
 8008154:	9300      	str	r3, [sp, #0]
 8008156:	f7ff fd0c 	bl	8007b72 <__lo0bits>
 800815a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800815e:	b1d0      	cbz	r0, 8008196 <__d2b+0x7e>
 8008160:	f1c0 0320 	rsb	r3, r0, #32
 8008164:	fa02 f303 	lsl.w	r3, r2, r3
 8008168:	430b      	orrs	r3, r1
 800816a:	40c2      	lsrs	r2, r0
 800816c:	6163      	str	r3, [r4, #20]
 800816e:	9201      	str	r2, [sp, #4]
 8008170:	9b01      	ldr	r3, [sp, #4]
 8008172:	61a3      	str	r3, [r4, #24]
 8008174:	2b00      	cmp	r3, #0
 8008176:	bf0c      	ite	eq
 8008178:	2201      	moveq	r2, #1
 800817a:	2202      	movne	r2, #2
 800817c:	6122      	str	r2, [r4, #16]
 800817e:	b1a5      	cbz	r5, 80081aa <__d2b+0x92>
 8008180:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008184:	4405      	add	r5, r0
 8008186:	603d      	str	r5, [r7, #0]
 8008188:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800818c:	6030      	str	r0, [r6, #0]
 800818e:	4620      	mov	r0, r4
 8008190:	b003      	add	sp, #12
 8008192:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008196:	6161      	str	r1, [r4, #20]
 8008198:	e7ea      	b.n	8008170 <__d2b+0x58>
 800819a:	a801      	add	r0, sp, #4
 800819c:	f7ff fce9 	bl	8007b72 <__lo0bits>
 80081a0:	9b01      	ldr	r3, [sp, #4]
 80081a2:	6163      	str	r3, [r4, #20]
 80081a4:	3020      	adds	r0, #32
 80081a6:	2201      	movs	r2, #1
 80081a8:	e7e8      	b.n	800817c <__d2b+0x64>
 80081aa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80081ae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80081b2:	6038      	str	r0, [r7, #0]
 80081b4:	6918      	ldr	r0, [r3, #16]
 80081b6:	f7ff fcbd 	bl	8007b34 <__hi0bits>
 80081ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80081be:	e7e5      	b.n	800818c <__d2b+0x74>
 80081c0:	0800a2f1 	.word	0x0800a2f1
 80081c4:	0800a302 	.word	0x0800a302

080081c8 <__ratio>:
 80081c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081cc:	b085      	sub	sp, #20
 80081ce:	e9cd 1000 	strd	r1, r0, [sp]
 80081d2:	a902      	add	r1, sp, #8
 80081d4:	f7ff ff56 	bl	8008084 <__b2d>
 80081d8:	9800      	ldr	r0, [sp, #0]
 80081da:	a903      	add	r1, sp, #12
 80081dc:	ec55 4b10 	vmov	r4, r5, d0
 80081e0:	f7ff ff50 	bl	8008084 <__b2d>
 80081e4:	9b01      	ldr	r3, [sp, #4]
 80081e6:	6919      	ldr	r1, [r3, #16]
 80081e8:	9b00      	ldr	r3, [sp, #0]
 80081ea:	691b      	ldr	r3, [r3, #16]
 80081ec:	1ac9      	subs	r1, r1, r3
 80081ee:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80081f2:	1a9b      	subs	r3, r3, r2
 80081f4:	ec5b ab10 	vmov	sl, fp, d0
 80081f8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	bfce      	itee	gt
 8008200:	462a      	movgt	r2, r5
 8008202:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008206:	465a      	movle	r2, fp
 8008208:	462f      	mov	r7, r5
 800820a:	46d9      	mov	r9, fp
 800820c:	bfcc      	ite	gt
 800820e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008212:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008216:	464b      	mov	r3, r9
 8008218:	4652      	mov	r2, sl
 800821a:	4620      	mov	r0, r4
 800821c:	4639      	mov	r1, r7
 800821e:	f7f8 fb3d 	bl	800089c <__aeabi_ddiv>
 8008222:	ec41 0b10 	vmov	d0, r0, r1
 8008226:	b005      	add	sp, #20
 8008228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800822c <__copybits>:
 800822c:	3901      	subs	r1, #1
 800822e:	b570      	push	{r4, r5, r6, lr}
 8008230:	1149      	asrs	r1, r1, #5
 8008232:	6914      	ldr	r4, [r2, #16]
 8008234:	3101      	adds	r1, #1
 8008236:	f102 0314 	add.w	r3, r2, #20
 800823a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800823e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008242:	1f05      	subs	r5, r0, #4
 8008244:	42a3      	cmp	r3, r4
 8008246:	d30c      	bcc.n	8008262 <__copybits+0x36>
 8008248:	1aa3      	subs	r3, r4, r2
 800824a:	3b11      	subs	r3, #17
 800824c:	f023 0303 	bic.w	r3, r3, #3
 8008250:	3211      	adds	r2, #17
 8008252:	42a2      	cmp	r2, r4
 8008254:	bf88      	it	hi
 8008256:	2300      	movhi	r3, #0
 8008258:	4418      	add	r0, r3
 800825a:	2300      	movs	r3, #0
 800825c:	4288      	cmp	r0, r1
 800825e:	d305      	bcc.n	800826c <__copybits+0x40>
 8008260:	bd70      	pop	{r4, r5, r6, pc}
 8008262:	f853 6b04 	ldr.w	r6, [r3], #4
 8008266:	f845 6f04 	str.w	r6, [r5, #4]!
 800826a:	e7eb      	b.n	8008244 <__copybits+0x18>
 800826c:	f840 3b04 	str.w	r3, [r0], #4
 8008270:	e7f4      	b.n	800825c <__copybits+0x30>

08008272 <__any_on>:
 8008272:	f100 0214 	add.w	r2, r0, #20
 8008276:	6900      	ldr	r0, [r0, #16]
 8008278:	114b      	asrs	r3, r1, #5
 800827a:	4298      	cmp	r0, r3
 800827c:	b510      	push	{r4, lr}
 800827e:	db11      	blt.n	80082a4 <__any_on+0x32>
 8008280:	dd0a      	ble.n	8008298 <__any_on+0x26>
 8008282:	f011 011f 	ands.w	r1, r1, #31
 8008286:	d007      	beq.n	8008298 <__any_on+0x26>
 8008288:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800828c:	fa24 f001 	lsr.w	r0, r4, r1
 8008290:	fa00 f101 	lsl.w	r1, r0, r1
 8008294:	428c      	cmp	r4, r1
 8008296:	d10b      	bne.n	80082b0 <__any_on+0x3e>
 8008298:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800829c:	4293      	cmp	r3, r2
 800829e:	d803      	bhi.n	80082a8 <__any_on+0x36>
 80082a0:	2000      	movs	r0, #0
 80082a2:	bd10      	pop	{r4, pc}
 80082a4:	4603      	mov	r3, r0
 80082a6:	e7f7      	b.n	8008298 <__any_on+0x26>
 80082a8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80082ac:	2900      	cmp	r1, #0
 80082ae:	d0f5      	beq.n	800829c <__any_on+0x2a>
 80082b0:	2001      	movs	r0, #1
 80082b2:	e7f6      	b.n	80082a2 <__any_on+0x30>

080082b4 <sulp>:
 80082b4:	b570      	push	{r4, r5, r6, lr}
 80082b6:	4604      	mov	r4, r0
 80082b8:	460d      	mov	r5, r1
 80082ba:	ec45 4b10 	vmov	d0, r4, r5
 80082be:	4616      	mov	r6, r2
 80082c0:	f7ff feba 	bl	8008038 <__ulp>
 80082c4:	ec51 0b10 	vmov	r0, r1, d0
 80082c8:	b17e      	cbz	r6, 80082ea <sulp+0x36>
 80082ca:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80082ce:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	dd09      	ble.n	80082ea <sulp+0x36>
 80082d6:	051b      	lsls	r3, r3, #20
 80082d8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80082dc:	2400      	movs	r4, #0
 80082de:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80082e2:	4622      	mov	r2, r4
 80082e4:	462b      	mov	r3, r5
 80082e6:	f7f8 f9af 	bl	8000648 <__aeabi_dmul>
 80082ea:	ec41 0b10 	vmov	d0, r0, r1
 80082ee:	bd70      	pop	{r4, r5, r6, pc}

080082f0 <_strtod_l>:
 80082f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f4:	b09f      	sub	sp, #124	@ 0x7c
 80082f6:	460c      	mov	r4, r1
 80082f8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80082fa:	2200      	movs	r2, #0
 80082fc:	921a      	str	r2, [sp, #104]	@ 0x68
 80082fe:	9005      	str	r0, [sp, #20]
 8008300:	f04f 0a00 	mov.w	sl, #0
 8008304:	f04f 0b00 	mov.w	fp, #0
 8008308:	460a      	mov	r2, r1
 800830a:	9219      	str	r2, [sp, #100]	@ 0x64
 800830c:	7811      	ldrb	r1, [r2, #0]
 800830e:	292b      	cmp	r1, #43	@ 0x2b
 8008310:	d04a      	beq.n	80083a8 <_strtod_l+0xb8>
 8008312:	d838      	bhi.n	8008386 <_strtod_l+0x96>
 8008314:	290d      	cmp	r1, #13
 8008316:	d832      	bhi.n	800837e <_strtod_l+0x8e>
 8008318:	2908      	cmp	r1, #8
 800831a:	d832      	bhi.n	8008382 <_strtod_l+0x92>
 800831c:	2900      	cmp	r1, #0
 800831e:	d03b      	beq.n	8008398 <_strtod_l+0xa8>
 8008320:	2200      	movs	r2, #0
 8008322:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008324:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008326:	782a      	ldrb	r2, [r5, #0]
 8008328:	2a30      	cmp	r2, #48	@ 0x30
 800832a:	f040 80b3 	bne.w	8008494 <_strtod_l+0x1a4>
 800832e:	786a      	ldrb	r2, [r5, #1]
 8008330:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008334:	2a58      	cmp	r2, #88	@ 0x58
 8008336:	d16e      	bne.n	8008416 <_strtod_l+0x126>
 8008338:	9302      	str	r3, [sp, #8]
 800833a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800833c:	9301      	str	r3, [sp, #4]
 800833e:	ab1a      	add	r3, sp, #104	@ 0x68
 8008340:	9300      	str	r3, [sp, #0]
 8008342:	4a8e      	ldr	r2, [pc, #568]	@ (800857c <_strtod_l+0x28c>)
 8008344:	9805      	ldr	r0, [sp, #20]
 8008346:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008348:	a919      	add	r1, sp, #100	@ 0x64
 800834a:	f001 fadf 	bl	800990c <__gethex>
 800834e:	f010 060f 	ands.w	r6, r0, #15
 8008352:	4604      	mov	r4, r0
 8008354:	d005      	beq.n	8008362 <_strtod_l+0x72>
 8008356:	2e06      	cmp	r6, #6
 8008358:	d128      	bne.n	80083ac <_strtod_l+0xbc>
 800835a:	3501      	adds	r5, #1
 800835c:	2300      	movs	r3, #0
 800835e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008360:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008362:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008364:	2b00      	cmp	r3, #0
 8008366:	f040 858e 	bne.w	8008e86 <_strtod_l+0xb96>
 800836a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800836c:	b1cb      	cbz	r3, 80083a2 <_strtod_l+0xb2>
 800836e:	4652      	mov	r2, sl
 8008370:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008374:	ec43 2b10 	vmov	d0, r2, r3
 8008378:	b01f      	add	sp, #124	@ 0x7c
 800837a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800837e:	2920      	cmp	r1, #32
 8008380:	d1ce      	bne.n	8008320 <_strtod_l+0x30>
 8008382:	3201      	adds	r2, #1
 8008384:	e7c1      	b.n	800830a <_strtod_l+0x1a>
 8008386:	292d      	cmp	r1, #45	@ 0x2d
 8008388:	d1ca      	bne.n	8008320 <_strtod_l+0x30>
 800838a:	2101      	movs	r1, #1
 800838c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800838e:	1c51      	adds	r1, r2, #1
 8008390:	9119      	str	r1, [sp, #100]	@ 0x64
 8008392:	7852      	ldrb	r2, [r2, #1]
 8008394:	2a00      	cmp	r2, #0
 8008396:	d1c5      	bne.n	8008324 <_strtod_l+0x34>
 8008398:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800839a:	9419      	str	r4, [sp, #100]	@ 0x64
 800839c:	2b00      	cmp	r3, #0
 800839e:	f040 8570 	bne.w	8008e82 <_strtod_l+0xb92>
 80083a2:	4652      	mov	r2, sl
 80083a4:	465b      	mov	r3, fp
 80083a6:	e7e5      	b.n	8008374 <_strtod_l+0x84>
 80083a8:	2100      	movs	r1, #0
 80083aa:	e7ef      	b.n	800838c <_strtod_l+0x9c>
 80083ac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80083ae:	b13a      	cbz	r2, 80083c0 <_strtod_l+0xd0>
 80083b0:	2135      	movs	r1, #53	@ 0x35
 80083b2:	a81c      	add	r0, sp, #112	@ 0x70
 80083b4:	f7ff ff3a 	bl	800822c <__copybits>
 80083b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80083ba:	9805      	ldr	r0, [sp, #20]
 80083bc:	f7ff fb08 	bl	80079d0 <_Bfree>
 80083c0:	3e01      	subs	r6, #1
 80083c2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80083c4:	2e04      	cmp	r6, #4
 80083c6:	d806      	bhi.n	80083d6 <_strtod_l+0xe6>
 80083c8:	e8df f006 	tbb	[pc, r6]
 80083cc:	201d0314 	.word	0x201d0314
 80083d0:	14          	.byte	0x14
 80083d1:	00          	.byte	0x00
 80083d2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80083d6:	05e1      	lsls	r1, r4, #23
 80083d8:	bf48      	it	mi
 80083da:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80083de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80083e2:	0d1b      	lsrs	r3, r3, #20
 80083e4:	051b      	lsls	r3, r3, #20
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d1bb      	bne.n	8008362 <_strtod_l+0x72>
 80083ea:	f7fe fb21 	bl	8006a30 <__errno>
 80083ee:	2322      	movs	r3, #34	@ 0x22
 80083f0:	6003      	str	r3, [r0, #0]
 80083f2:	e7b6      	b.n	8008362 <_strtod_l+0x72>
 80083f4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80083f8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80083fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008400:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008404:	e7e7      	b.n	80083d6 <_strtod_l+0xe6>
 8008406:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008584 <_strtod_l+0x294>
 800840a:	e7e4      	b.n	80083d6 <_strtod_l+0xe6>
 800840c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008410:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8008414:	e7df      	b.n	80083d6 <_strtod_l+0xe6>
 8008416:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008418:	1c5a      	adds	r2, r3, #1
 800841a:	9219      	str	r2, [sp, #100]	@ 0x64
 800841c:	785b      	ldrb	r3, [r3, #1]
 800841e:	2b30      	cmp	r3, #48	@ 0x30
 8008420:	d0f9      	beq.n	8008416 <_strtod_l+0x126>
 8008422:	2b00      	cmp	r3, #0
 8008424:	d09d      	beq.n	8008362 <_strtod_l+0x72>
 8008426:	2301      	movs	r3, #1
 8008428:	9309      	str	r3, [sp, #36]	@ 0x24
 800842a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800842c:	930c      	str	r3, [sp, #48]	@ 0x30
 800842e:	2300      	movs	r3, #0
 8008430:	9308      	str	r3, [sp, #32]
 8008432:	930a      	str	r3, [sp, #40]	@ 0x28
 8008434:	461f      	mov	r7, r3
 8008436:	220a      	movs	r2, #10
 8008438:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800843a:	7805      	ldrb	r5, [r0, #0]
 800843c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008440:	b2d9      	uxtb	r1, r3
 8008442:	2909      	cmp	r1, #9
 8008444:	d928      	bls.n	8008498 <_strtod_l+0x1a8>
 8008446:	494e      	ldr	r1, [pc, #312]	@ (8008580 <_strtod_l+0x290>)
 8008448:	2201      	movs	r2, #1
 800844a:	f001 f979 	bl	8009740 <strncmp>
 800844e:	2800      	cmp	r0, #0
 8008450:	d032      	beq.n	80084b8 <_strtod_l+0x1c8>
 8008452:	2000      	movs	r0, #0
 8008454:	462a      	mov	r2, r5
 8008456:	4681      	mov	r9, r0
 8008458:	463d      	mov	r5, r7
 800845a:	4603      	mov	r3, r0
 800845c:	2a65      	cmp	r2, #101	@ 0x65
 800845e:	d001      	beq.n	8008464 <_strtod_l+0x174>
 8008460:	2a45      	cmp	r2, #69	@ 0x45
 8008462:	d114      	bne.n	800848e <_strtod_l+0x19e>
 8008464:	b91d      	cbnz	r5, 800846e <_strtod_l+0x17e>
 8008466:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008468:	4302      	orrs	r2, r0
 800846a:	d095      	beq.n	8008398 <_strtod_l+0xa8>
 800846c:	2500      	movs	r5, #0
 800846e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008470:	1c62      	adds	r2, r4, #1
 8008472:	9219      	str	r2, [sp, #100]	@ 0x64
 8008474:	7862      	ldrb	r2, [r4, #1]
 8008476:	2a2b      	cmp	r2, #43	@ 0x2b
 8008478:	d077      	beq.n	800856a <_strtod_l+0x27a>
 800847a:	2a2d      	cmp	r2, #45	@ 0x2d
 800847c:	d07b      	beq.n	8008576 <_strtod_l+0x286>
 800847e:	f04f 0c00 	mov.w	ip, #0
 8008482:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008486:	2909      	cmp	r1, #9
 8008488:	f240 8082 	bls.w	8008590 <_strtod_l+0x2a0>
 800848c:	9419      	str	r4, [sp, #100]	@ 0x64
 800848e:	f04f 0800 	mov.w	r8, #0
 8008492:	e0a2      	b.n	80085da <_strtod_l+0x2ea>
 8008494:	2300      	movs	r3, #0
 8008496:	e7c7      	b.n	8008428 <_strtod_l+0x138>
 8008498:	2f08      	cmp	r7, #8
 800849a:	bfd5      	itete	le
 800849c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800849e:	9908      	ldrgt	r1, [sp, #32]
 80084a0:	fb02 3301 	mlale	r3, r2, r1, r3
 80084a4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80084a8:	f100 0001 	add.w	r0, r0, #1
 80084ac:	bfd4      	ite	le
 80084ae:	930a      	strle	r3, [sp, #40]	@ 0x28
 80084b0:	9308      	strgt	r3, [sp, #32]
 80084b2:	3701      	adds	r7, #1
 80084b4:	9019      	str	r0, [sp, #100]	@ 0x64
 80084b6:	e7bf      	b.n	8008438 <_strtod_l+0x148>
 80084b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80084ba:	1c5a      	adds	r2, r3, #1
 80084bc:	9219      	str	r2, [sp, #100]	@ 0x64
 80084be:	785a      	ldrb	r2, [r3, #1]
 80084c0:	b37f      	cbz	r7, 8008522 <_strtod_l+0x232>
 80084c2:	4681      	mov	r9, r0
 80084c4:	463d      	mov	r5, r7
 80084c6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80084ca:	2b09      	cmp	r3, #9
 80084cc:	d912      	bls.n	80084f4 <_strtod_l+0x204>
 80084ce:	2301      	movs	r3, #1
 80084d0:	e7c4      	b.n	800845c <_strtod_l+0x16c>
 80084d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80084d4:	1c5a      	adds	r2, r3, #1
 80084d6:	9219      	str	r2, [sp, #100]	@ 0x64
 80084d8:	785a      	ldrb	r2, [r3, #1]
 80084da:	3001      	adds	r0, #1
 80084dc:	2a30      	cmp	r2, #48	@ 0x30
 80084de:	d0f8      	beq.n	80084d2 <_strtod_l+0x1e2>
 80084e0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80084e4:	2b08      	cmp	r3, #8
 80084e6:	f200 84d3 	bhi.w	8008e90 <_strtod_l+0xba0>
 80084ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80084ec:	930c      	str	r3, [sp, #48]	@ 0x30
 80084ee:	4681      	mov	r9, r0
 80084f0:	2000      	movs	r0, #0
 80084f2:	4605      	mov	r5, r0
 80084f4:	3a30      	subs	r2, #48	@ 0x30
 80084f6:	f100 0301 	add.w	r3, r0, #1
 80084fa:	d02a      	beq.n	8008552 <_strtod_l+0x262>
 80084fc:	4499      	add	r9, r3
 80084fe:	eb00 0c05 	add.w	ip, r0, r5
 8008502:	462b      	mov	r3, r5
 8008504:	210a      	movs	r1, #10
 8008506:	4563      	cmp	r3, ip
 8008508:	d10d      	bne.n	8008526 <_strtod_l+0x236>
 800850a:	1c69      	adds	r1, r5, #1
 800850c:	4401      	add	r1, r0
 800850e:	4428      	add	r0, r5
 8008510:	2808      	cmp	r0, #8
 8008512:	dc16      	bgt.n	8008542 <_strtod_l+0x252>
 8008514:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008516:	230a      	movs	r3, #10
 8008518:	fb03 2300 	mla	r3, r3, r0, r2
 800851c:	930a      	str	r3, [sp, #40]	@ 0x28
 800851e:	2300      	movs	r3, #0
 8008520:	e018      	b.n	8008554 <_strtod_l+0x264>
 8008522:	4638      	mov	r0, r7
 8008524:	e7da      	b.n	80084dc <_strtod_l+0x1ec>
 8008526:	2b08      	cmp	r3, #8
 8008528:	f103 0301 	add.w	r3, r3, #1
 800852c:	dc03      	bgt.n	8008536 <_strtod_l+0x246>
 800852e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008530:	434e      	muls	r6, r1
 8008532:	960a      	str	r6, [sp, #40]	@ 0x28
 8008534:	e7e7      	b.n	8008506 <_strtod_l+0x216>
 8008536:	2b10      	cmp	r3, #16
 8008538:	bfde      	ittt	le
 800853a:	9e08      	ldrle	r6, [sp, #32]
 800853c:	434e      	mulle	r6, r1
 800853e:	9608      	strle	r6, [sp, #32]
 8008540:	e7e1      	b.n	8008506 <_strtod_l+0x216>
 8008542:	280f      	cmp	r0, #15
 8008544:	dceb      	bgt.n	800851e <_strtod_l+0x22e>
 8008546:	9808      	ldr	r0, [sp, #32]
 8008548:	230a      	movs	r3, #10
 800854a:	fb03 2300 	mla	r3, r3, r0, r2
 800854e:	9308      	str	r3, [sp, #32]
 8008550:	e7e5      	b.n	800851e <_strtod_l+0x22e>
 8008552:	4629      	mov	r1, r5
 8008554:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008556:	1c50      	adds	r0, r2, #1
 8008558:	9019      	str	r0, [sp, #100]	@ 0x64
 800855a:	7852      	ldrb	r2, [r2, #1]
 800855c:	4618      	mov	r0, r3
 800855e:	460d      	mov	r5, r1
 8008560:	e7b1      	b.n	80084c6 <_strtod_l+0x1d6>
 8008562:	f04f 0900 	mov.w	r9, #0
 8008566:	2301      	movs	r3, #1
 8008568:	e77d      	b.n	8008466 <_strtod_l+0x176>
 800856a:	f04f 0c00 	mov.w	ip, #0
 800856e:	1ca2      	adds	r2, r4, #2
 8008570:	9219      	str	r2, [sp, #100]	@ 0x64
 8008572:	78a2      	ldrb	r2, [r4, #2]
 8008574:	e785      	b.n	8008482 <_strtod_l+0x192>
 8008576:	f04f 0c01 	mov.w	ip, #1
 800857a:	e7f8      	b.n	800856e <_strtod_l+0x27e>
 800857c:	0800a470 	.word	0x0800a470
 8008580:	0800a458 	.word	0x0800a458
 8008584:	7ff00000 	.word	0x7ff00000
 8008588:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800858a:	1c51      	adds	r1, r2, #1
 800858c:	9119      	str	r1, [sp, #100]	@ 0x64
 800858e:	7852      	ldrb	r2, [r2, #1]
 8008590:	2a30      	cmp	r2, #48	@ 0x30
 8008592:	d0f9      	beq.n	8008588 <_strtod_l+0x298>
 8008594:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008598:	2908      	cmp	r1, #8
 800859a:	f63f af78 	bhi.w	800848e <_strtod_l+0x19e>
 800859e:	3a30      	subs	r2, #48	@ 0x30
 80085a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80085a2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80085a4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80085a6:	f04f 080a 	mov.w	r8, #10
 80085aa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80085ac:	1c56      	adds	r6, r2, #1
 80085ae:	9619      	str	r6, [sp, #100]	@ 0x64
 80085b0:	7852      	ldrb	r2, [r2, #1]
 80085b2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80085b6:	f1be 0f09 	cmp.w	lr, #9
 80085ba:	d939      	bls.n	8008630 <_strtod_l+0x340>
 80085bc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80085be:	1a76      	subs	r6, r6, r1
 80085c0:	2e08      	cmp	r6, #8
 80085c2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80085c6:	dc03      	bgt.n	80085d0 <_strtod_l+0x2e0>
 80085c8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80085ca:	4588      	cmp	r8, r1
 80085cc:	bfa8      	it	ge
 80085ce:	4688      	movge	r8, r1
 80085d0:	f1bc 0f00 	cmp.w	ip, #0
 80085d4:	d001      	beq.n	80085da <_strtod_l+0x2ea>
 80085d6:	f1c8 0800 	rsb	r8, r8, #0
 80085da:	2d00      	cmp	r5, #0
 80085dc:	d14e      	bne.n	800867c <_strtod_l+0x38c>
 80085de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80085e0:	4308      	orrs	r0, r1
 80085e2:	f47f aebe 	bne.w	8008362 <_strtod_l+0x72>
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	f47f aed6 	bne.w	8008398 <_strtod_l+0xa8>
 80085ec:	2a69      	cmp	r2, #105	@ 0x69
 80085ee:	d028      	beq.n	8008642 <_strtod_l+0x352>
 80085f0:	dc25      	bgt.n	800863e <_strtod_l+0x34e>
 80085f2:	2a49      	cmp	r2, #73	@ 0x49
 80085f4:	d025      	beq.n	8008642 <_strtod_l+0x352>
 80085f6:	2a4e      	cmp	r2, #78	@ 0x4e
 80085f8:	f47f aece 	bne.w	8008398 <_strtod_l+0xa8>
 80085fc:	499b      	ldr	r1, [pc, #620]	@ (800886c <_strtod_l+0x57c>)
 80085fe:	a819      	add	r0, sp, #100	@ 0x64
 8008600:	f001 fba6 	bl	8009d50 <__match>
 8008604:	2800      	cmp	r0, #0
 8008606:	f43f aec7 	beq.w	8008398 <_strtod_l+0xa8>
 800860a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	2b28      	cmp	r3, #40	@ 0x28
 8008610:	d12e      	bne.n	8008670 <_strtod_l+0x380>
 8008612:	4997      	ldr	r1, [pc, #604]	@ (8008870 <_strtod_l+0x580>)
 8008614:	aa1c      	add	r2, sp, #112	@ 0x70
 8008616:	a819      	add	r0, sp, #100	@ 0x64
 8008618:	f001 fbae 	bl	8009d78 <__hexnan>
 800861c:	2805      	cmp	r0, #5
 800861e:	d127      	bne.n	8008670 <_strtod_l+0x380>
 8008620:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008622:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008626:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800862a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800862e:	e698      	b.n	8008362 <_strtod_l+0x72>
 8008630:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008632:	fb08 2101 	mla	r1, r8, r1, r2
 8008636:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800863a:	920e      	str	r2, [sp, #56]	@ 0x38
 800863c:	e7b5      	b.n	80085aa <_strtod_l+0x2ba>
 800863e:	2a6e      	cmp	r2, #110	@ 0x6e
 8008640:	e7da      	b.n	80085f8 <_strtod_l+0x308>
 8008642:	498c      	ldr	r1, [pc, #560]	@ (8008874 <_strtod_l+0x584>)
 8008644:	a819      	add	r0, sp, #100	@ 0x64
 8008646:	f001 fb83 	bl	8009d50 <__match>
 800864a:	2800      	cmp	r0, #0
 800864c:	f43f aea4 	beq.w	8008398 <_strtod_l+0xa8>
 8008650:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008652:	4989      	ldr	r1, [pc, #548]	@ (8008878 <_strtod_l+0x588>)
 8008654:	3b01      	subs	r3, #1
 8008656:	a819      	add	r0, sp, #100	@ 0x64
 8008658:	9319      	str	r3, [sp, #100]	@ 0x64
 800865a:	f001 fb79 	bl	8009d50 <__match>
 800865e:	b910      	cbnz	r0, 8008666 <_strtod_l+0x376>
 8008660:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008662:	3301      	adds	r3, #1
 8008664:	9319      	str	r3, [sp, #100]	@ 0x64
 8008666:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008888 <_strtod_l+0x598>
 800866a:	f04f 0a00 	mov.w	sl, #0
 800866e:	e678      	b.n	8008362 <_strtod_l+0x72>
 8008670:	4882      	ldr	r0, [pc, #520]	@ (800887c <_strtod_l+0x58c>)
 8008672:	f001 f8a9 	bl	80097c8 <nan>
 8008676:	ec5b ab10 	vmov	sl, fp, d0
 800867a:	e672      	b.n	8008362 <_strtod_l+0x72>
 800867c:	eba8 0309 	sub.w	r3, r8, r9
 8008680:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008682:	9309      	str	r3, [sp, #36]	@ 0x24
 8008684:	2f00      	cmp	r7, #0
 8008686:	bf08      	it	eq
 8008688:	462f      	moveq	r7, r5
 800868a:	2d10      	cmp	r5, #16
 800868c:	462c      	mov	r4, r5
 800868e:	bfa8      	it	ge
 8008690:	2410      	movge	r4, #16
 8008692:	f7f7 ff5f 	bl	8000554 <__aeabi_ui2d>
 8008696:	2d09      	cmp	r5, #9
 8008698:	4682      	mov	sl, r0
 800869a:	468b      	mov	fp, r1
 800869c:	dc13      	bgt.n	80086c6 <_strtod_l+0x3d6>
 800869e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	f43f ae5e 	beq.w	8008362 <_strtod_l+0x72>
 80086a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086a8:	dd78      	ble.n	800879c <_strtod_l+0x4ac>
 80086aa:	2b16      	cmp	r3, #22
 80086ac:	dc5f      	bgt.n	800876e <_strtod_l+0x47e>
 80086ae:	4974      	ldr	r1, [pc, #464]	@ (8008880 <_strtod_l+0x590>)
 80086b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80086b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086b8:	4652      	mov	r2, sl
 80086ba:	465b      	mov	r3, fp
 80086bc:	f7f7 ffc4 	bl	8000648 <__aeabi_dmul>
 80086c0:	4682      	mov	sl, r0
 80086c2:	468b      	mov	fp, r1
 80086c4:	e64d      	b.n	8008362 <_strtod_l+0x72>
 80086c6:	4b6e      	ldr	r3, [pc, #440]	@ (8008880 <_strtod_l+0x590>)
 80086c8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80086cc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80086d0:	f7f7 ffba 	bl	8000648 <__aeabi_dmul>
 80086d4:	4682      	mov	sl, r0
 80086d6:	9808      	ldr	r0, [sp, #32]
 80086d8:	468b      	mov	fp, r1
 80086da:	f7f7 ff3b 	bl	8000554 <__aeabi_ui2d>
 80086de:	4602      	mov	r2, r0
 80086e0:	460b      	mov	r3, r1
 80086e2:	4650      	mov	r0, sl
 80086e4:	4659      	mov	r1, fp
 80086e6:	f7f7 fdf9 	bl	80002dc <__adddf3>
 80086ea:	2d0f      	cmp	r5, #15
 80086ec:	4682      	mov	sl, r0
 80086ee:	468b      	mov	fp, r1
 80086f0:	ddd5      	ble.n	800869e <_strtod_l+0x3ae>
 80086f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086f4:	1b2c      	subs	r4, r5, r4
 80086f6:	441c      	add	r4, r3
 80086f8:	2c00      	cmp	r4, #0
 80086fa:	f340 8096 	ble.w	800882a <_strtod_l+0x53a>
 80086fe:	f014 030f 	ands.w	r3, r4, #15
 8008702:	d00a      	beq.n	800871a <_strtod_l+0x42a>
 8008704:	495e      	ldr	r1, [pc, #376]	@ (8008880 <_strtod_l+0x590>)
 8008706:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800870a:	4652      	mov	r2, sl
 800870c:	465b      	mov	r3, fp
 800870e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008712:	f7f7 ff99 	bl	8000648 <__aeabi_dmul>
 8008716:	4682      	mov	sl, r0
 8008718:	468b      	mov	fp, r1
 800871a:	f034 040f 	bics.w	r4, r4, #15
 800871e:	d073      	beq.n	8008808 <_strtod_l+0x518>
 8008720:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008724:	dd48      	ble.n	80087b8 <_strtod_l+0x4c8>
 8008726:	2400      	movs	r4, #0
 8008728:	46a0      	mov	r8, r4
 800872a:	940a      	str	r4, [sp, #40]	@ 0x28
 800872c:	46a1      	mov	r9, r4
 800872e:	9a05      	ldr	r2, [sp, #20]
 8008730:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008888 <_strtod_l+0x598>
 8008734:	2322      	movs	r3, #34	@ 0x22
 8008736:	6013      	str	r3, [r2, #0]
 8008738:	f04f 0a00 	mov.w	sl, #0
 800873c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800873e:	2b00      	cmp	r3, #0
 8008740:	f43f ae0f 	beq.w	8008362 <_strtod_l+0x72>
 8008744:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008746:	9805      	ldr	r0, [sp, #20]
 8008748:	f7ff f942 	bl	80079d0 <_Bfree>
 800874c:	9805      	ldr	r0, [sp, #20]
 800874e:	4649      	mov	r1, r9
 8008750:	f7ff f93e 	bl	80079d0 <_Bfree>
 8008754:	9805      	ldr	r0, [sp, #20]
 8008756:	4641      	mov	r1, r8
 8008758:	f7ff f93a 	bl	80079d0 <_Bfree>
 800875c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800875e:	9805      	ldr	r0, [sp, #20]
 8008760:	f7ff f936 	bl	80079d0 <_Bfree>
 8008764:	9805      	ldr	r0, [sp, #20]
 8008766:	4621      	mov	r1, r4
 8008768:	f7ff f932 	bl	80079d0 <_Bfree>
 800876c:	e5f9      	b.n	8008362 <_strtod_l+0x72>
 800876e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008770:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008774:	4293      	cmp	r3, r2
 8008776:	dbbc      	blt.n	80086f2 <_strtod_l+0x402>
 8008778:	4c41      	ldr	r4, [pc, #260]	@ (8008880 <_strtod_l+0x590>)
 800877a:	f1c5 050f 	rsb	r5, r5, #15
 800877e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008782:	4652      	mov	r2, sl
 8008784:	465b      	mov	r3, fp
 8008786:	e9d1 0100 	ldrd	r0, r1, [r1]
 800878a:	f7f7 ff5d 	bl	8000648 <__aeabi_dmul>
 800878e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008790:	1b5d      	subs	r5, r3, r5
 8008792:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008796:	e9d4 2300 	ldrd	r2, r3, [r4]
 800879a:	e78f      	b.n	80086bc <_strtod_l+0x3cc>
 800879c:	3316      	adds	r3, #22
 800879e:	dba8      	blt.n	80086f2 <_strtod_l+0x402>
 80087a0:	4b37      	ldr	r3, [pc, #220]	@ (8008880 <_strtod_l+0x590>)
 80087a2:	eba9 0808 	sub.w	r8, r9, r8
 80087a6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80087aa:	e9d8 2300 	ldrd	r2, r3, [r8]
 80087ae:	4650      	mov	r0, sl
 80087b0:	4659      	mov	r1, fp
 80087b2:	f7f8 f873 	bl	800089c <__aeabi_ddiv>
 80087b6:	e783      	b.n	80086c0 <_strtod_l+0x3d0>
 80087b8:	4b32      	ldr	r3, [pc, #200]	@ (8008884 <_strtod_l+0x594>)
 80087ba:	9308      	str	r3, [sp, #32]
 80087bc:	2300      	movs	r3, #0
 80087be:	1124      	asrs	r4, r4, #4
 80087c0:	4650      	mov	r0, sl
 80087c2:	4659      	mov	r1, fp
 80087c4:	461e      	mov	r6, r3
 80087c6:	2c01      	cmp	r4, #1
 80087c8:	dc21      	bgt.n	800880e <_strtod_l+0x51e>
 80087ca:	b10b      	cbz	r3, 80087d0 <_strtod_l+0x4e0>
 80087cc:	4682      	mov	sl, r0
 80087ce:	468b      	mov	fp, r1
 80087d0:	492c      	ldr	r1, [pc, #176]	@ (8008884 <_strtod_l+0x594>)
 80087d2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80087d6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80087da:	4652      	mov	r2, sl
 80087dc:	465b      	mov	r3, fp
 80087de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087e2:	f7f7 ff31 	bl	8000648 <__aeabi_dmul>
 80087e6:	4b28      	ldr	r3, [pc, #160]	@ (8008888 <_strtod_l+0x598>)
 80087e8:	460a      	mov	r2, r1
 80087ea:	400b      	ands	r3, r1
 80087ec:	4927      	ldr	r1, [pc, #156]	@ (800888c <_strtod_l+0x59c>)
 80087ee:	428b      	cmp	r3, r1
 80087f0:	4682      	mov	sl, r0
 80087f2:	d898      	bhi.n	8008726 <_strtod_l+0x436>
 80087f4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80087f8:	428b      	cmp	r3, r1
 80087fa:	bf86      	itte	hi
 80087fc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008890 <_strtod_l+0x5a0>
 8008800:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8008804:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008808:	2300      	movs	r3, #0
 800880a:	9308      	str	r3, [sp, #32]
 800880c:	e07a      	b.n	8008904 <_strtod_l+0x614>
 800880e:	07e2      	lsls	r2, r4, #31
 8008810:	d505      	bpl.n	800881e <_strtod_l+0x52e>
 8008812:	9b08      	ldr	r3, [sp, #32]
 8008814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008818:	f7f7 ff16 	bl	8000648 <__aeabi_dmul>
 800881c:	2301      	movs	r3, #1
 800881e:	9a08      	ldr	r2, [sp, #32]
 8008820:	3208      	adds	r2, #8
 8008822:	3601      	adds	r6, #1
 8008824:	1064      	asrs	r4, r4, #1
 8008826:	9208      	str	r2, [sp, #32]
 8008828:	e7cd      	b.n	80087c6 <_strtod_l+0x4d6>
 800882a:	d0ed      	beq.n	8008808 <_strtod_l+0x518>
 800882c:	4264      	negs	r4, r4
 800882e:	f014 020f 	ands.w	r2, r4, #15
 8008832:	d00a      	beq.n	800884a <_strtod_l+0x55a>
 8008834:	4b12      	ldr	r3, [pc, #72]	@ (8008880 <_strtod_l+0x590>)
 8008836:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800883a:	4650      	mov	r0, sl
 800883c:	4659      	mov	r1, fp
 800883e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008842:	f7f8 f82b 	bl	800089c <__aeabi_ddiv>
 8008846:	4682      	mov	sl, r0
 8008848:	468b      	mov	fp, r1
 800884a:	1124      	asrs	r4, r4, #4
 800884c:	d0dc      	beq.n	8008808 <_strtod_l+0x518>
 800884e:	2c1f      	cmp	r4, #31
 8008850:	dd20      	ble.n	8008894 <_strtod_l+0x5a4>
 8008852:	2400      	movs	r4, #0
 8008854:	46a0      	mov	r8, r4
 8008856:	940a      	str	r4, [sp, #40]	@ 0x28
 8008858:	46a1      	mov	r9, r4
 800885a:	9a05      	ldr	r2, [sp, #20]
 800885c:	2322      	movs	r3, #34	@ 0x22
 800885e:	f04f 0a00 	mov.w	sl, #0
 8008862:	f04f 0b00 	mov.w	fp, #0
 8008866:	6013      	str	r3, [r2, #0]
 8008868:	e768      	b.n	800873c <_strtod_l+0x44c>
 800886a:	bf00      	nop
 800886c:	0800a249 	.word	0x0800a249
 8008870:	0800a45c 	.word	0x0800a45c
 8008874:	0800a241 	.word	0x0800a241
 8008878:	0800a278 	.word	0x0800a278
 800887c:	0800a605 	.word	0x0800a605
 8008880:	0800a390 	.word	0x0800a390
 8008884:	0800a368 	.word	0x0800a368
 8008888:	7ff00000 	.word	0x7ff00000
 800888c:	7ca00000 	.word	0x7ca00000
 8008890:	7fefffff 	.word	0x7fefffff
 8008894:	f014 0310 	ands.w	r3, r4, #16
 8008898:	bf18      	it	ne
 800889a:	236a      	movne	r3, #106	@ 0x6a
 800889c:	4ea9      	ldr	r6, [pc, #676]	@ (8008b44 <_strtod_l+0x854>)
 800889e:	9308      	str	r3, [sp, #32]
 80088a0:	4650      	mov	r0, sl
 80088a2:	4659      	mov	r1, fp
 80088a4:	2300      	movs	r3, #0
 80088a6:	07e2      	lsls	r2, r4, #31
 80088a8:	d504      	bpl.n	80088b4 <_strtod_l+0x5c4>
 80088aa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80088ae:	f7f7 fecb 	bl	8000648 <__aeabi_dmul>
 80088b2:	2301      	movs	r3, #1
 80088b4:	1064      	asrs	r4, r4, #1
 80088b6:	f106 0608 	add.w	r6, r6, #8
 80088ba:	d1f4      	bne.n	80088a6 <_strtod_l+0x5b6>
 80088bc:	b10b      	cbz	r3, 80088c2 <_strtod_l+0x5d2>
 80088be:	4682      	mov	sl, r0
 80088c0:	468b      	mov	fp, r1
 80088c2:	9b08      	ldr	r3, [sp, #32]
 80088c4:	b1b3      	cbz	r3, 80088f4 <_strtod_l+0x604>
 80088c6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80088ca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	4659      	mov	r1, fp
 80088d2:	dd0f      	ble.n	80088f4 <_strtod_l+0x604>
 80088d4:	2b1f      	cmp	r3, #31
 80088d6:	dd55      	ble.n	8008984 <_strtod_l+0x694>
 80088d8:	2b34      	cmp	r3, #52	@ 0x34
 80088da:	bfde      	ittt	le
 80088dc:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 80088e0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80088e4:	4093      	lslle	r3, r2
 80088e6:	f04f 0a00 	mov.w	sl, #0
 80088ea:	bfcc      	ite	gt
 80088ec:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80088f0:	ea03 0b01 	andle.w	fp, r3, r1
 80088f4:	2200      	movs	r2, #0
 80088f6:	2300      	movs	r3, #0
 80088f8:	4650      	mov	r0, sl
 80088fa:	4659      	mov	r1, fp
 80088fc:	f7f8 f90c 	bl	8000b18 <__aeabi_dcmpeq>
 8008900:	2800      	cmp	r0, #0
 8008902:	d1a6      	bne.n	8008852 <_strtod_l+0x562>
 8008904:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008906:	9300      	str	r3, [sp, #0]
 8008908:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800890a:	9805      	ldr	r0, [sp, #20]
 800890c:	462b      	mov	r3, r5
 800890e:	463a      	mov	r2, r7
 8008910:	f7ff f8c6 	bl	8007aa0 <__s2b>
 8008914:	900a      	str	r0, [sp, #40]	@ 0x28
 8008916:	2800      	cmp	r0, #0
 8008918:	f43f af05 	beq.w	8008726 <_strtod_l+0x436>
 800891c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800891e:	2a00      	cmp	r2, #0
 8008920:	eba9 0308 	sub.w	r3, r9, r8
 8008924:	bfa8      	it	ge
 8008926:	2300      	movge	r3, #0
 8008928:	9312      	str	r3, [sp, #72]	@ 0x48
 800892a:	2400      	movs	r4, #0
 800892c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008930:	9316      	str	r3, [sp, #88]	@ 0x58
 8008932:	46a0      	mov	r8, r4
 8008934:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008936:	9805      	ldr	r0, [sp, #20]
 8008938:	6859      	ldr	r1, [r3, #4]
 800893a:	f7ff f809 	bl	8007950 <_Balloc>
 800893e:	4681      	mov	r9, r0
 8008940:	2800      	cmp	r0, #0
 8008942:	f43f aef4 	beq.w	800872e <_strtod_l+0x43e>
 8008946:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008948:	691a      	ldr	r2, [r3, #16]
 800894a:	3202      	adds	r2, #2
 800894c:	f103 010c 	add.w	r1, r3, #12
 8008950:	0092      	lsls	r2, r2, #2
 8008952:	300c      	adds	r0, #12
 8008954:	f7fe f899 	bl	8006a8a <memcpy>
 8008958:	ec4b ab10 	vmov	d0, sl, fp
 800895c:	9805      	ldr	r0, [sp, #20]
 800895e:	aa1c      	add	r2, sp, #112	@ 0x70
 8008960:	a91b      	add	r1, sp, #108	@ 0x6c
 8008962:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008966:	f7ff fbd7 	bl	8008118 <__d2b>
 800896a:	901a      	str	r0, [sp, #104]	@ 0x68
 800896c:	2800      	cmp	r0, #0
 800896e:	f43f aede 	beq.w	800872e <_strtod_l+0x43e>
 8008972:	9805      	ldr	r0, [sp, #20]
 8008974:	2101      	movs	r1, #1
 8008976:	f7ff f929 	bl	8007bcc <__i2b>
 800897a:	4680      	mov	r8, r0
 800897c:	b948      	cbnz	r0, 8008992 <_strtod_l+0x6a2>
 800897e:	f04f 0800 	mov.w	r8, #0
 8008982:	e6d4      	b.n	800872e <_strtod_l+0x43e>
 8008984:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008988:	fa02 f303 	lsl.w	r3, r2, r3
 800898c:	ea03 0a0a 	and.w	sl, r3, sl
 8008990:	e7b0      	b.n	80088f4 <_strtod_l+0x604>
 8008992:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008994:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008996:	2d00      	cmp	r5, #0
 8008998:	bfab      	itete	ge
 800899a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800899c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800899e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80089a0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80089a2:	bfac      	ite	ge
 80089a4:	18ef      	addge	r7, r5, r3
 80089a6:	1b5e      	sublt	r6, r3, r5
 80089a8:	9b08      	ldr	r3, [sp, #32]
 80089aa:	1aed      	subs	r5, r5, r3
 80089ac:	4415      	add	r5, r2
 80089ae:	4b66      	ldr	r3, [pc, #408]	@ (8008b48 <_strtod_l+0x858>)
 80089b0:	3d01      	subs	r5, #1
 80089b2:	429d      	cmp	r5, r3
 80089b4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80089b8:	da50      	bge.n	8008a5c <_strtod_l+0x76c>
 80089ba:	1b5b      	subs	r3, r3, r5
 80089bc:	2b1f      	cmp	r3, #31
 80089be:	eba2 0203 	sub.w	r2, r2, r3
 80089c2:	f04f 0101 	mov.w	r1, #1
 80089c6:	dc3d      	bgt.n	8008a44 <_strtod_l+0x754>
 80089c8:	fa01 f303 	lsl.w	r3, r1, r3
 80089cc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80089ce:	2300      	movs	r3, #0
 80089d0:	9310      	str	r3, [sp, #64]	@ 0x40
 80089d2:	18bd      	adds	r5, r7, r2
 80089d4:	9b08      	ldr	r3, [sp, #32]
 80089d6:	42af      	cmp	r7, r5
 80089d8:	4416      	add	r6, r2
 80089da:	441e      	add	r6, r3
 80089dc:	463b      	mov	r3, r7
 80089de:	bfa8      	it	ge
 80089e0:	462b      	movge	r3, r5
 80089e2:	42b3      	cmp	r3, r6
 80089e4:	bfa8      	it	ge
 80089e6:	4633      	movge	r3, r6
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	bfc2      	ittt	gt
 80089ec:	1aed      	subgt	r5, r5, r3
 80089ee:	1af6      	subgt	r6, r6, r3
 80089f0:	1aff      	subgt	r7, r7, r3
 80089f2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	dd16      	ble.n	8008a26 <_strtod_l+0x736>
 80089f8:	4641      	mov	r1, r8
 80089fa:	9805      	ldr	r0, [sp, #20]
 80089fc:	461a      	mov	r2, r3
 80089fe:	f7ff f9a5 	bl	8007d4c <__pow5mult>
 8008a02:	4680      	mov	r8, r0
 8008a04:	2800      	cmp	r0, #0
 8008a06:	d0ba      	beq.n	800897e <_strtod_l+0x68e>
 8008a08:	4601      	mov	r1, r0
 8008a0a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008a0c:	9805      	ldr	r0, [sp, #20]
 8008a0e:	f7ff f8f3 	bl	8007bf8 <__multiply>
 8008a12:	900e      	str	r0, [sp, #56]	@ 0x38
 8008a14:	2800      	cmp	r0, #0
 8008a16:	f43f ae8a 	beq.w	800872e <_strtod_l+0x43e>
 8008a1a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008a1c:	9805      	ldr	r0, [sp, #20]
 8008a1e:	f7fe ffd7 	bl	80079d0 <_Bfree>
 8008a22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a24:	931a      	str	r3, [sp, #104]	@ 0x68
 8008a26:	2d00      	cmp	r5, #0
 8008a28:	dc1d      	bgt.n	8008a66 <_strtod_l+0x776>
 8008a2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	dd23      	ble.n	8008a78 <_strtod_l+0x788>
 8008a30:	4649      	mov	r1, r9
 8008a32:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008a34:	9805      	ldr	r0, [sp, #20]
 8008a36:	f7ff f989 	bl	8007d4c <__pow5mult>
 8008a3a:	4681      	mov	r9, r0
 8008a3c:	b9e0      	cbnz	r0, 8008a78 <_strtod_l+0x788>
 8008a3e:	f04f 0900 	mov.w	r9, #0
 8008a42:	e674      	b.n	800872e <_strtod_l+0x43e>
 8008a44:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008a48:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008a4c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008a50:	35e2      	adds	r5, #226	@ 0xe2
 8008a52:	fa01 f305 	lsl.w	r3, r1, r5
 8008a56:	9310      	str	r3, [sp, #64]	@ 0x40
 8008a58:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008a5a:	e7ba      	b.n	80089d2 <_strtod_l+0x6e2>
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008a60:	2301      	movs	r3, #1
 8008a62:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008a64:	e7b5      	b.n	80089d2 <_strtod_l+0x6e2>
 8008a66:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008a68:	9805      	ldr	r0, [sp, #20]
 8008a6a:	462a      	mov	r2, r5
 8008a6c:	f7ff f9c8 	bl	8007e00 <__lshift>
 8008a70:	901a      	str	r0, [sp, #104]	@ 0x68
 8008a72:	2800      	cmp	r0, #0
 8008a74:	d1d9      	bne.n	8008a2a <_strtod_l+0x73a>
 8008a76:	e65a      	b.n	800872e <_strtod_l+0x43e>
 8008a78:	2e00      	cmp	r6, #0
 8008a7a:	dd07      	ble.n	8008a8c <_strtod_l+0x79c>
 8008a7c:	4649      	mov	r1, r9
 8008a7e:	9805      	ldr	r0, [sp, #20]
 8008a80:	4632      	mov	r2, r6
 8008a82:	f7ff f9bd 	bl	8007e00 <__lshift>
 8008a86:	4681      	mov	r9, r0
 8008a88:	2800      	cmp	r0, #0
 8008a8a:	d0d8      	beq.n	8008a3e <_strtod_l+0x74e>
 8008a8c:	2f00      	cmp	r7, #0
 8008a8e:	dd08      	ble.n	8008aa2 <_strtod_l+0x7b2>
 8008a90:	4641      	mov	r1, r8
 8008a92:	9805      	ldr	r0, [sp, #20]
 8008a94:	463a      	mov	r2, r7
 8008a96:	f7ff f9b3 	bl	8007e00 <__lshift>
 8008a9a:	4680      	mov	r8, r0
 8008a9c:	2800      	cmp	r0, #0
 8008a9e:	f43f ae46 	beq.w	800872e <_strtod_l+0x43e>
 8008aa2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008aa4:	9805      	ldr	r0, [sp, #20]
 8008aa6:	464a      	mov	r2, r9
 8008aa8:	f7ff fa32 	bl	8007f10 <__mdiff>
 8008aac:	4604      	mov	r4, r0
 8008aae:	2800      	cmp	r0, #0
 8008ab0:	f43f ae3d 	beq.w	800872e <_strtod_l+0x43e>
 8008ab4:	68c3      	ldr	r3, [r0, #12]
 8008ab6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008ab8:	2300      	movs	r3, #0
 8008aba:	60c3      	str	r3, [r0, #12]
 8008abc:	4641      	mov	r1, r8
 8008abe:	f7ff fa0b 	bl	8007ed8 <__mcmp>
 8008ac2:	2800      	cmp	r0, #0
 8008ac4:	da46      	bge.n	8008b54 <_strtod_l+0x864>
 8008ac6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ac8:	ea53 030a 	orrs.w	r3, r3, sl
 8008acc:	d16c      	bne.n	8008ba8 <_strtod_l+0x8b8>
 8008ace:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d168      	bne.n	8008ba8 <_strtod_l+0x8b8>
 8008ad6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008ada:	0d1b      	lsrs	r3, r3, #20
 8008adc:	051b      	lsls	r3, r3, #20
 8008ade:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008ae2:	d961      	bls.n	8008ba8 <_strtod_l+0x8b8>
 8008ae4:	6963      	ldr	r3, [r4, #20]
 8008ae6:	b913      	cbnz	r3, 8008aee <_strtod_l+0x7fe>
 8008ae8:	6923      	ldr	r3, [r4, #16]
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	dd5c      	ble.n	8008ba8 <_strtod_l+0x8b8>
 8008aee:	4621      	mov	r1, r4
 8008af0:	2201      	movs	r2, #1
 8008af2:	9805      	ldr	r0, [sp, #20]
 8008af4:	f7ff f984 	bl	8007e00 <__lshift>
 8008af8:	4641      	mov	r1, r8
 8008afa:	4604      	mov	r4, r0
 8008afc:	f7ff f9ec 	bl	8007ed8 <__mcmp>
 8008b00:	2800      	cmp	r0, #0
 8008b02:	dd51      	ble.n	8008ba8 <_strtod_l+0x8b8>
 8008b04:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008b08:	9a08      	ldr	r2, [sp, #32]
 8008b0a:	0d1b      	lsrs	r3, r3, #20
 8008b0c:	051b      	lsls	r3, r3, #20
 8008b0e:	2a00      	cmp	r2, #0
 8008b10:	d06b      	beq.n	8008bea <_strtod_l+0x8fa>
 8008b12:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008b16:	d868      	bhi.n	8008bea <_strtod_l+0x8fa>
 8008b18:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008b1c:	f67f ae9d 	bls.w	800885a <_strtod_l+0x56a>
 8008b20:	4b0a      	ldr	r3, [pc, #40]	@ (8008b4c <_strtod_l+0x85c>)
 8008b22:	4650      	mov	r0, sl
 8008b24:	4659      	mov	r1, fp
 8008b26:	2200      	movs	r2, #0
 8008b28:	f7f7 fd8e 	bl	8000648 <__aeabi_dmul>
 8008b2c:	4b08      	ldr	r3, [pc, #32]	@ (8008b50 <_strtod_l+0x860>)
 8008b2e:	400b      	ands	r3, r1
 8008b30:	4682      	mov	sl, r0
 8008b32:	468b      	mov	fp, r1
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	f47f ae05 	bne.w	8008744 <_strtod_l+0x454>
 8008b3a:	9a05      	ldr	r2, [sp, #20]
 8008b3c:	2322      	movs	r3, #34	@ 0x22
 8008b3e:	6013      	str	r3, [r2, #0]
 8008b40:	e600      	b.n	8008744 <_strtod_l+0x454>
 8008b42:	bf00      	nop
 8008b44:	0800a488 	.word	0x0800a488
 8008b48:	fffffc02 	.word	0xfffffc02
 8008b4c:	39500000 	.word	0x39500000
 8008b50:	7ff00000 	.word	0x7ff00000
 8008b54:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008b58:	d165      	bne.n	8008c26 <_strtod_l+0x936>
 8008b5a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008b5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b60:	b35a      	cbz	r2, 8008bba <_strtod_l+0x8ca>
 8008b62:	4a9f      	ldr	r2, [pc, #636]	@ (8008de0 <_strtod_l+0xaf0>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d12b      	bne.n	8008bc0 <_strtod_l+0x8d0>
 8008b68:	9b08      	ldr	r3, [sp, #32]
 8008b6a:	4651      	mov	r1, sl
 8008b6c:	b303      	cbz	r3, 8008bb0 <_strtod_l+0x8c0>
 8008b6e:	4b9d      	ldr	r3, [pc, #628]	@ (8008de4 <_strtod_l+0xaf4>)
 8008b70:	465a      	mov	r2, fp
 8008b72:	4013      	ands	r3, r2
 8008b74:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008b78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008b7c:	d81b      	bhi.n	8008bb6 <_strtod_l+0x8c6>
 8008b7e:	0d1b      	lsrs	r3, r3, #20
 8008b80:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008b84:	fa02 f303 	lsl.w	r3, r2, r3
 8008b88:	4299      	cmp	r1, r3
 8008b8a:	d119      	bne.n	8008bc0 <_strtod_l+0x8d0>
 8008b8c:	4b96      	ldr	r3, [pc, #600]	@ (8008de8 <_strtod_l+0xaf8>)
 8008b8e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d102      	bne.n	8008b9a <_strtod_l+0x8aa>
 8008b94:	3101      	adds	r1, #1
 8008b96:	f43f adca 	beq.w	800872e <_strtod_l+0x43e>
 8008b9a:	4b92      	ldr	r3, [pc, #584]	@ (8008de4 <_strtod_l+0xaf4>)
 8008b9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b9e:	401a      	ands	r2, r3
 8008ba0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008ba4:	f04f 0a00 	mov.w	sl, #0
 8008ba8:	9b08      	ldr	r3, [sp, #32]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d1b8      	bne.n	8008b20 <_strtod_l+0x830>
 8008bae:	e5c9      	b.n	8008744 <_strtod_l+0x454>
 8008bb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008bb4:	e7e8      	b.n	8008b88 <_strtod_l+0x898>
 8008bb6:	4613      	mov	r3, r2
 8008bb8:	e7e6      	b.n	8008b88 <_strtod_l+0x898>
 8008bba:	ea53 030a 	orrs.w	r3, r3, sl
 8008bbe:	d0a1      	beq.n	8008b04 <_strtod_l+0x814>
 8008bc0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008bc2:	b1db      	cbz	r3, 8008bfc <_strtod_l+0x90c>
 8008bc4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008bc6:	4213      	tst	r3, r2
 8008bc8:	d0ee      	beq.n	8008ba8 <_strtod_l+0x8b8>
 8008bca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bcc:	9a08      	ldr	r2, [sp, #32]
 8008bce:	4650      	mov	r0, sl
 8008bd0:	4659      	mov	r1, fp
 8008bd2:	b1bb      	cbz	r3, 8008c04 <_strtod_l+0x914>
 8008bd4:	f7ff fb6e 	bl	80082b4 <sulp>
 8008bd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008bdc:	ec53 2b10 	vmov	r2, r3, d0
 8008be0:	f7f7 fb7c 	bl	80002dc <__adddf3>
 8008be4:	4682      	mov	sl, r0
 8008be6:	468b      	mov	fp, r1
 8008be8:	e7de      	b.n	8008ba8 <_strtod_l+0x8b8>
 8008bea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008bee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008bf2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008bf6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8008bfa:	e7d5      	b.n	8008ba8 <_strtod_l+0x8b8>
 8008bfc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008bfe:	ea13 0f0a 	tst.w	r3, sl
 8008c02:	e7e1      	b.n	8008bc8 <_strtod_l+0x8d8>
 8008c04:	f7ff fb56 	bl	80082b4 <sulp>
 8008c08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008c0c:	ec53 2b10 	vmov	r2, r3, d0
 8008c10:	f7f7 fb62 	bl	80002d8 <__aeabi_dsub>
 8008c14:	2200      	movs	r2, #0
 8008c16:	2300      	movs	r3, #0
 8008c18:	4682      	mov	sl, r0
 8008c1a:	468b      	mov	fp, r1
 8008c1c:	f7f7 ff7c 	bl	8000b18 <__aeabi_dcmpeq>
 8008c20:	2800      	cmp	r0, #0
 8008c22:	d0c1      	beq.n	8008ba8 <_strtod_l+0x8b8>
 8008c24:	e619      	b.n	800885a <_strtod_l+0x56a>
 8008c26:	4641      	mov	r1, r8
 8008c28:	4620      	mov	r0, r4
 8008c2a:	f7ff facd 	bl	80081c8 <__ratio>
 8008c2e:	ec57 6b10 	vmov	r6, r7, d0
 8008c32:	2200      	movs	r2, #0
 8008c34:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008c38:	4630      	mov	r0, r6
 8008c3a:	4639      	mov	r1, r7
 8008c3c:	f7f7 ff80 	bl	8000b40 <__aeabi_dcmple>
 8008c40:	2800      	cmp	r0, #0
 8008c42:	d06f      	beq.n	8008d24 <_strtod_l+0xa34>
 8008c44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d17a      	bne.n	8008d40 <_strtod_l+0xa50>
 8008c4a:	f1ba 0f00 	cmp.w	sl, #0
 8008c4e:	d158      	bne.n	8008d02 <_strtod_l+0xa12>
 8008c50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d15a      	bne.n	8008d10 <_strtod_l+0xa20>
 8008c5a:	4b64      	ldr	r3, [pc, #400]	@ (8008dec <_strtod_l+0xafc>)
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	4630      	mov	r0, r6
 8008c60:	4639      	mov	r1, r7
 8008c62:	f7f7 ff63 	bl	8000b2c <__aeabi_dcmplt>
 8008c66:	2800      	cmp	r0, #0
 8008c68:	d159      	bne.n	8008d1e <_strtod_l+0xa2e>
 8008c6a:	4630      	mov	r0, r6
 8008c6c:	4639      	mov	r1, r7
 8008c6e:	4b60      	ldr	r3, [pc, #384]	@ (8008df0 <_strtod_l+0xb00>)
 8008c70:	2200      	movs	r2, #0
 8008c72:	f7f7 fce9 	bl	8000648 <__aeabi_dmul>
 8008c76:	4606      	mov	r6, r0
 8008c78:	460f      	mov	r7, r1
 8008c7a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008c7e:	9606      	str	r6, [sp, #24]
 8008c80:	9307      	str	r3, [sp, #28]
 8008c82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c86:	4d57      	ldr	r5, [pc, #348]	@ (8008de4 <_strtod_l+0xaf4>)
 8008c88:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008c8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c8e:	401d      	ands	r5, r3
 8008c90:	4b58      	ldr	r3, [pc, #352]	@ (8008df4 <_strtod_l+0xb04>)
 8008c92:	429d      	cmp	r5, r3
 8008c94:	f040 80b2 	bne.w	8008dfc <_strtod_l+0xb0c>
 8008c98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c9a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008c9e:	ec4b ab10 	vmov	d0, sl, fp
 8008ca2:	f7ff f9c9 	bl	8008038 <__ulp>
 8008ca6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008caa:	ec51 0b10 	vmov	r0, r1, d0
 8008cae:	f7f7 fccb 	bl	8000648 <__aeabi_dmul>
 8008cb2:	4652      	mov	r2, sl
 8008cb4:	465b      	mov	r3, fp
 8008cb6:	f7f7 fb11 	bl	80002dc <__adddf3>
 8008cba:	460b      	mov	r3, r1
 8008cbc:	4949      	ldr	r1, [pc, #292]	@ (8008de4 <_strtod_l+0xaf4>)
 8008cbe:	4a4e      	ldr	r2, [pc, #312]	@ (8008df8 <_strtod_l+0xb08>)
 8008cc0:	4019      	ands	r1, r3
 8008cc2:	4291      	cmp	r1, r2
 8008cc4:	4682      	mov	sl, r0
 8008cc6:	d942      	bls.n	8008d4e <_strtod_l+0xa5e>
 8008cc8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008cca:	4b47      	ldr	r3, [pc, #284]	@ (8008de8 <_strtod_l+0xaf8>)
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d103      	bne.n	8008cd8 <_strtod_l+0x9e8>
 8008cd0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	f43f ad2b 	beq.w	800872e <_strtod_l+0x43e>
 8008cd8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008de8 <_strtod_l+0xaf8>
 8008cdc:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8008ce0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008ce2:	9805      	ldr	r0, [sp, #20]
 8008ce4:	f7fe fe74 	bl	80079d0 <_Bfree>
 8008ce8:	9805      	ldr	r0, [sp, #20]
 8008cea:	4649      	mov	r1, r9
 8008cec:	f7fe fe70 	bl	80079d0 <_Bfree>
 8008cf0:	9805      	ldr	r0, [sp, #20]
 8008cf2:	4641      	mov	r1, r8
 8008cf4:	f7fe fe6c 	bl	80079d0 <_Bfree>
 8008cf8:	9805      	ldr	r0, [sp, #20]
 8008cfa:	4621      	mov	r1, r4
 8008cfc:	f7fe fe68 	bl	80079d0 <_Bfree>
 8008d00:	e618      	b.n	8008934 <_strtod_l+0x644>
 8008d02:	f1ba 0f01 	cmp.w	sl, #1
 8008d06:	d103      	bne.n	8008d10 <_strtod_l+0xa20>
 8008d08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	f43f ada5 	beq.w	800885a <_strtod_l+0x56a>
 8008d10:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008dc0 <_strtod_l+0xad0>
 8008d14:	4f35      	ldr	r7, [pc, #212]	@ (8008dec <_strtod_l+0xafc>)
 8008d16:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008d1a:	2600      	movs	r6, #0
 8008d1c:	e7b1      	b.n	8008c82 <_strtod_l+0x992>
 8008d1e:	4f34      	ldr	r7, [pc, #208]	@ (8008df0 <_strtod_l+0xb00>)
 8008d20:	2600      	movs	r6, #0
 8008d22:	e7aa      	b.n	8008c7a <_strtod_l+0x98a>
 8008d24:	4b32      	ldr	r3, [pc, #200]	@ (8008df0 <_strtod_l+0xb00>)
 8008d26:	4630      	mov	r0, r6
 8008d28:	4639      	mov	r1, r7
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f7f7 fc8c 	bl	8000648 <__aeabi_dmul>
 8008d30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d32:	4606      	mov	r6, r0
 8008d34:	460f      	mov	r7, r1
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d09f      	beq.n	8008c7a <_strtod_l+0x98a>
 8008d3a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008d3e:	e7a0      	b.n	8008c82 <_strtod_l+0x992>
 8008d40:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008dc8 <_strtod_l+0xad8>
 8008d44:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008d48:	ec57 6b17 	vmov	r6, r7, d7
 8008d4c:	e799      	b.n	8008c82 <_strtod_l+0x992>
 8008d4e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008d52:	9b08      	ldr	r3, [sp, #32]
 8008d54:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d1c1      	bne.n	8008ce0 <_strtod_l+0x9f0>
 8008d5c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008d60:	0d1b      	lsrs	r3, r3, #20
 8008d62:	051b      	lsls	r3, r3, #20
 8008d64:	429d      	cmp	r5, r3
 8008d66:	d1bb      	bne.n	8008ce0 <_strtod_l+0x9f0>
 8008d68:	4630      	mov	r0, r6
 8008d6a:	4639      	mov	r1, r7
 8008d6c:	f7f7 ffcc 	bl	8000d08 <__aeabi_d2lz>
 8008d70:	f7f7 fc3c 	bl	80005ec <__aeabi_l2d>
 8008d74:	4602      	mov	r2, r0
 8008d76:	460b      	mov	r3, r1
 8008d78:	4630      	mov	r0, r6
 8008d7a:	4639      	mov	r1, r7
 8008d7c:	f7f7 faac 	bl	80002d8 <__aeabi_dsub>
 8008d80:	460b      	mov	r3, r1
 8008d82:	4602      	mov	r2, r0
 8008d84:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008d88:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008d8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d8e:	ea46 060a 	orr.w	r6, r6, sl
 8008d92:	431e      	orrs	r6, r3
 8008d94:	d06f      	beq.n	8008e76 <_strtod_l+0xb86>
 8008d96:	a30e      	add	r3, pc, #56	@ (adr r3, 8008dd0 <_strtod_l+0xae0>)
 8008d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d9c:	f7f7 fec6 	bl	8000b2c <__aeabi_dcmplt>
 8008da0:	2800      	cmp	r0, #0
 8008da2:	f47f accf 	bne.w	8008744 <_strtod_l+0x454>
 8008da6:	a30c      	add	r3, pc, #48	@ (adr r3, 8008dd8 <_strtod_l+0xae8>)
 8008da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008db0:	f7f7 feda 	bl	8000b68 <__aeabi_dcmpgt>
 8008db4:	2800      	cmp	r0, #0
 8008db6:	d093      	beq.n	8008ce0 <_strtod_l+0x9f0>
 8008db8:	e4c4      	b.n	8008744 <_strtod_l+0x454>
 8008dba:	bf00      	nop
 8008dbc:	f3af 8000 	nop.w
 8008dc0:	00000000 	.word	0x00000000
 8008dc4:	bff00000 	.word	0xbff00000
 8008dc8:	00000000 	.word	0x00000000
 8008dcc:	3ff00000 	.word	0x3ff00000
 8008dd0:	94a03595 	.word	0x94a03595
 8008dd4:	3fdfffff 	.word	0x3fdfffff
 8008dd8:	35afe535 	.word	0x35afe535
 8008ddc:	3fe00000 	.word	0x3fe00000
 8008de0:	000fffff 	.word	0x000fffff
 8008de4:	7ff00000 	.word	0x7ff00000
 8008de8:	7fefffff 	.word	0x7fefffff
 8008dec:	3ff00000 	.word	0x3ff00000
 8008df0:	3fe00000 	.word	0x3fe00000
 8008df4:	7fe00000 	.word	0x7fe00000
 8008df8:	7c9fffff 	.word	0x7c9fffff
 8008dfc:	9b08      	ldr	r3, [sp, #32]
 8008dfe:	b323      	cbz	r3, 8008e4a <_strtod_l+0xb5a>
 8008e00:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008e04:	d821      	bhi.n	8008e4a <_strtod_l+0xb5a>
 8008e06:	a328      	add	r3, pc, #160	@ (adr r3, 8008ea8 <_strtod_l+0xbb8>)
 8008e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e0c:	4630      	mov	r0, r6
 8008e0e:	4639      	mov	r1, r7
 8008e10:	f7f7 fe96 	bl	8000b40 <__aeabi_dcmple>
 8008e14:	b1a0      	cbz	r0, 8008e40 <_strtod_l+0xb50>
 8008e16:	4639      	mov	r1, r7
 8008e18:	4630      	mov	r0, r6
 8008e1a:	f7f7 feed 	bl	8000bf8 <__aeabi_d2uiz>
 8008e1e:	2801      	cmp	r0, #1
 8008e20:	bf38      	it	cc
 8008e22:	2001      	movcc	r0, #1
 8008e24:	f7f7 fb96 	bl	8000554 <__aeabi_ui2d>
 8008e28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e2a:	4606      	mov	r6, r0
 8008e2c:	460f      	mov	r7, r1
 8008e2e:	b9fb      	cbnz	r3, 8008e70 <_strtod_l+0xb80>
 8008e30:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008e34:	9014      	str	r0, [sp, #80]	@ 0x50
 8008e36:	9315      	str	r3, [sp, #84]	@ 0x54
 8008e38:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008e3c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008e40:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008e42:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008e46:	1b5b      	subs	r3, r3, r5
 8008e48:	9311      	str	r3, [sp, #68]	@ 0x44
 8008e4a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008e4e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008e52:	f7ff f8f1 	bl	8008038 <__ulp>
 8008e56:	4650      	mov	r0, sl
 8008e58:	ec53 2b10 	vmov	r2, r3, d0
 8008e5c:	4659      	mov	r1, fp
 8008e5e:	f7f7 fbf3 	bl	8000648 <__aeabi_dmul>
 8008e62:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008e66:	f7f7 fa39 	bl	80002dc <__adddf3>
 8008e6a:	4682      	mov	sl, r0
 8008e6c:	468b      	mov	fp, r1
 8008e6e:	e770      	b.n	8008d52 <_strtod_l+0xa62>
 8008e70:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008e74:	e7e0      	b.n	8008e38 <_strtod_l+0xb48>
 8008e76:	a30e      	add	r3, pc, #56	@ (adr r3, 8008eb0 <_strtod_l+0xbc0>)
 8008e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e7c:	f7f7 fe56 	bl	8000b2c <__aeabi_dcmplt>
 8008e80:	e798      	b.n	8008db4 <_strtod_l+0xac4>
 8008e82:	2300      	movs	r3, #0
 8008e84:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008e86:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008e88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e8a:	6013      	str	r3, [r2, #0]
 8008e8c:	f7ff ba6d 	b.w	800836a <_strtod_l+0x7a>
 8008e90:	2a65      	cmp	r2, #101	@ 0x65
 8008e92:	f43f ab66 	beq.w	8008562 <_strtod_l+0x272>
 8008e96:	2a45      	cmp	r2, #69	@ 0x45
 8008e98:	f43f ab63 	beq.w	8008562 <_strtod_l+0x272>
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	f7ff bb9e 	b.w	80085de <_strtod_l+0x2ee>
 8008ea2:	bf00      	nop
 8008ea4:	f3af 8000 	nop.w
 8008ea8:	ffc00000 	.word	0xffc00000
 8008eac:	41dfffff 	.word	0x41dfffff
 8008eb0:	94a03595 	.word	0x94a03595
 8008eb4:	3fcfffff 	.word	0x3fcfffff

08008eb8 <_strtod_r>:
 8008eb8:	4b01      	ldr	r3, [pc, #4]	@ (8008ec0 <_strtod_r+0x8>)
 8008eba:	f7ff ba19 	b.w	80082f0 <_strtod_l>
 8008ebe:	bf00      	nop
 8008ec0:	20000070 	.word	0x20000070

08008ec4 <_strtol_l.constprop.0>:
 8008ec4:	2b24      	cmp	r3, #36	@ 0x24
 8008ec6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008eca:	4686      	mov	lr, r0
 8008ecc:	4690      	mov	r8, r2
 8008ece:	d801      	bhi.n	8008ed4 <_strtol_l.constprop.0+0x10>
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d106      	bne.n	8008ee2 <_strtol_l.constprop.0+0x1e>
 8008ed4:	f7fd fdac 	bl	8006a30 <__errno>
 8008ed8:	2316      	movs	r3, #22
 8008eda:	6003      	str	r3, [r0, #0]
 8008edc:	2000      	movs	r0, #0
 8008ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ee2:	4834      	ldr	r0, [pc, #208]	@ (8008fb4 <_strtol_l.constprop.0+0xf0>)
 8008ee4:	460d      	mov	r5, r1
 8008ee6:	462a      	mov	r2, r5
 8008ee8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008eec:	5d06      	ldrb	r6, [r0, r4]
 8008eee:	f016 0608 	ands.w	r6, r6, #8
 8008ef2:	d1f8      	bne.n	8008ee6 <_strtol_l.constprop.0+0x22>
 8008ef4:	2c2d      	cmp	r4, #45	@ 0x2d
 8008ef6:	d12d      	bne.n	8008f54 <_strtol_l.constprop.0+0x90>
 8008ef8:	782c      	ldrb	r4, [r5, #0]
 8008efa:	2601      	movs	r6, #1
 8008efc:	1c95      	adds	r5, r2, #2
 8008efe:	f033 0210 	bics.w	r2, r3, #16
 8008f02:	d109      	bne.n	8008f18 <_strtol_l.constprop.0+0x54>
 8008f04:	2c30      	cmp	r4, #48	@ 0x30
 8008f06:	d12a      	bne.n	8008f5e <_strtol_l.constprop.0+0x9a>
 8008f08:	782a      	ldrb	r2, [r5, #0]
 8008f0a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008f0e:	2a58      	cmp	r2, #88	@ 0x58
 8008f10:	d125      	bne.n	8008f5e <_strtol_l.constprop.0+0x9a>
 8008f12:	786c      	ldrb	r4, [r5, #1]
 8008f14:	2310      	movs	r3, #16
 8008f16:	3502      	adds	r5, #2
 8008f18:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008f1c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8008f20:	2200      	movs	r2, #0
 8008f22:	fbbc f9f3 	udiv	r9, ip, r3
 8008f26:	4610      	mov	r0, r2
 8008f28:	fb03 ca19 	mls	sl, r3, r9, ip
 8008f2c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008f30:	2f09      	cmp	r7, #9
 8008f32:	d81b      	bhi.n	8008f6c <_strtol_l.constprop.0+0xa8>
 8008f34:	463c      	mov	r4, r7
 8008f36:	42a3      	cmp	r3, r4
 8008f38:	dd27      	ble.n	8008f8a <_strtol_l.constprop.0+0xc6>
 8008f3a:	1c57      	adds	r7, r2, #1
 8008f3c:	d007      	beq.n	8008f4e <_strtol_l.constprop.0+0x8a>
 8008f3e:	4581      	cmp	r9, r0
 8008f40:	d320      	bcc.n	8008f84 <_strtol_l.constprop.0+0xc0>
 8008f42:	d101      	bne.n	8008f48 <_strtol_l.constprop.0+0x84>
 8008f44:	45a2      	cmp	sl, r4
 8008f46:	db1d      	blt.n	8008f84 <_strtol_l.constprop.0+0xc0>
 8008f48:	fb00 4003 	mla	r0, r0, r3, r4
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f52:	e7eb      	b.n	8008f2c <_strtol_l.constprop.0+0x68>
 8008f54:	2c2b      	cmp	r4, #43	@ 0x2b
 8008f56:	bf04      	itt	eq
 8008f58:	782c      	ldrbeq	r4, [r5, #0]
 8008f5a:	1c95      	addeq	r5, r2, #2
 8008f5c:	e7cf      	b.n	8008efe <_strtol_l.constprop.0+0x3a>
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d1da      	bne.n	8008f18 <_strtol_l.constprop.0+0x54>
 8008f62:	2c30      	cmp	r4, #48	@ 0x30
 8008f64:	bf0c      	ite	eq
 8008f66:	2308      	moveq	r3, #8
 8008f68:	230a      	movne	r3, #10
 8008f6a:	e7d5      	b.n	8008f18 <_strtol_l.constprop.0+0x54>
 8008f6c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008f70:	2f19      	cmp	r7, #25
 8008f72:	d801      	bhi.n	8008f78 <_strtol_l.constprop.0+0xb4>
 8008f74:	3c37      	subs	r4, #55	@ 0x37
 8008f76:	e7de      	b.n	8008f36 <_strtol_l.constprop.0+0x72>
 8008f78:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008f7c:	2f19      	cmp	r7, #25
 8008f7e:	d804      	bhi.n	8008f8a <_strtol_l.constprop.0+0xc6>
 8008f80:	3c57      	subs	r4, #87	@ 0x57
 8008f82:	e7d8      	b.n	8008f36 <_strtol_l.constprop.0+0x72>
 8008f84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008f88:	e7e1      	b.n	8008f4e <_strtol_l.constprop.0+0x8a>
 8008f8a:	1c53      	adds	r3, r2, #1
 8008f8c:	d108      	bne.n	8008fa0 <_strtol_l.constprop.0+0xdc>
 8008f8e:	2322      	movs	r3, #34	@ 0x22
 8008f90:	f8ce 3000 	str.w	r3, [lr]
 8008f94:	4660      	mov	r0, ip
 8008f96:	f1b8 0f00 	cmp.w	r8, #0
 8008f9a:	d0a0      	beq.n	8008ede <_strtol_l.constprop.0+0x1a>
 8008f9c:	1e69      	subs	r1, r5, #1
 8008f9e:	e006      	b.n	8008fae <_strtol_l.constprop.0+0xea>
 8008fa0:	b106      	cbz	r6, 8008fa4 <_strtol_l.constprop.0+0xe0>
 8008fa2:	4240      	negs	r0, r0
 8008fa4:	f1b8 0f00 	cmp.w	r8, #0
 8008fa8:	d099      	beq.n	8008ede <_strtol_l.constprop.0+0x1a>
 8008faa:	2a00      	cmp	r2, #0
 8008fac:	d1f6      	bne.n	8008f9c <_strtol_l.constprop.0+0xd8>
 8008fae:	f8c8 1000 	str.w	r1, [r8]
 8008fb2:	e794      	b.n	8008ede <_strtol_l.constprop.0+0x1a>
 8008fb4:	0800a4b1 	.word	0x0800a4b1

08008fb8 <_strtol_r>:
 8008fb8:	f7ff bf84 	b.w	8008ec4 <_strtol_l.constprop.0>

08008fbc <__ssputs_r>:
 8008fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fc0:	688e      	ldr	r6, [r1, #8]
 8008fc2:	461f      	mov	r7, r3
 8008fc4:	42be      	cmp	r6, r7
 8008fc6:	680b      	ldr	r3, [r1, #0]
 8008fc8:	4682      	mov	sl, r0
 8008fca:	460c      	mov	r4, r1
 8008fcc:	4690      	mov	r8, r2
 8008fce:	d82d      	bhi.n	800902c <__ssputs_r+0x70>
 8008fd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008fd4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008fd8:	d026      	beq.n	8009028 <__ssputs_r+0x6c>
 8008fda:	6965      	ldr	r5, [r4, #20]
 8008fdc:	6909      	ldr	r1, [r1, #16]
 8008fde:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008fe2:	eba3 0901 	sub.w	r9, r3, r1
 8008fe6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008fea:	1c7b      	adds	r3, r7, #1
 8008fec:	444b      	add	r3, r9
 8008fee:	106d      	asrs	r5, r5, #1
 8008ff0:	429d      	cmp	r5, r3
 8008ff2:	bf38      	it	cc
 8008ff4:	461d      	movcc	r5, r3
 8008ff6:	0553      	lsls	r3, r2, #21
 8008ff8:	d527      	bpl.n	800904a <__ssputs_r+0x8e>
 8008ffa:	4629      	mov	r1, r5
 8008ffc:	f7fe fc1c 	bl	8007838 <_malloc_r>
 8009000:	4606      	mov	r6, r0
 8009002:	b360      	cbz	r0, 800905e <__ssputs_r+0xa2>
 8009004:	6921      	ldr	r1, [r4, #16]
 8009006:	464a      	mov	r2, r9
 8009008:	f7fd fd3f 	bl	8006a8a <memcpy>
 800900c:	89a3      	ldrh	r3, [r4, #12]
 800900e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009012:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009016:	81a3      	strh	r3, [r4, #12]
 8009018:	6126      	str	r6, [r4, #16]
 800901a:	6165      	str	r5, [r4, #20]
 800901c:	444e      	add	r6, r9
 800901e:	eba5 0509 	sub.w	r5, r5, r9
 8009022:	6026      	str	r6, [r4, #0]
 8009024:	60a5      	str	r5, [r4, #8]
 8009026:	463e      	mov	r6, r7
 8009028:	42be      	cmp	r6, r7
 800902a:	d900      	bls.n	800902e <__ssputs_r+0x72>
 800902c:	463e      	mov	r6, r7
 800902e:	6820      	ldr	r0, [r4, #0]
 8009030:	4632      	mov	r2, r6
 8009032:	4641      	mov	r1, r8
 8009034:	f000 fb6a 	bl	800970c <memmove>
 8009038:	68a3      	ldr	r3, [r4, #8]
 800903a:	1b9b      	subs	r3, r3, r6
 800903c:	60a3      	str	r3, [r4, #8]
 800903e:	6823      	ldr	r3, [r4, #0]
 8009040:	4433      	add	r3, r6
 8009042:	6023      	str	r3, [r4, #0]
 8009044:	2000      	movs	r0, #0
 8009046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800904a:	462a      	mov	r2, r5
 800904c:	f000 ff41 	bl	8009ed2 <_realloc_r>
 8009050:	4606      	mov	r6, r0
 8009052:	2800      	cmp	r0, #0
 8009054:	d1e0      	bne.n	8009018 <__ssputs_r+0x5c>
 8009056:	6921      	ldr	r1, [r4, #16]
 8009058:	4650      	mov	r0, sl
 800905a:	f7fe fb79 	bl	8007750 <_free_r>
 800905e:	230c      	movs	r3, #12
 8009060:	f8ca 3000 	str.w	r3, [sl]
 8009064:	89a3      	ldrh	r3, [r4, #12]
 8009066:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800906a:	81a3      	strh	r3, [r4, #12]
 800906c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009070:	e7e9      	b.n	8009046 <__ssputs_r+0x8a>
	...

08009074 <_svfiprintf_r>:
 8009074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009078:	4698      	mov	r8, r3
 800907a:	898b      	ldrh	r3, [r1, #12]
 800907c:	061b      	lsls	r3, r3, #24
 800907e:	b09d      	sub	sp, #116	@ 0x74
 8009080:	4607      	mov	r7, r0
 8009082:	460d      	mov	r5, r1
 8009084:	4614      	mov	r4, r2
 8009086:	d510      	bpl.n	80090aa <_svfiprintf_r+0x36>
 8009088:	690b      	ldr	r3, [r1, #16]
 800908a:	b973      	cbnz	r3, 80090aa <_svfiprintf_r+0x36>
 800908c:	2140      	movs	r1, #64	@ 0x40
 800908e:	f7fe fbd3 	bl	8007838 <_malloc_r>
 8009092:	6028      	str	r0, [r5, #0]
 8009094:	6128      	str	r0, [r5, #16]
 8009096:	b930      	cbnz	r0, 80090a6 <_svfiprintf_r+0x32>
 8009098:	230c      	movs	r3, #12
 800909a:	603b      	str	r3, [r7, #0]
 800909c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80090a0:	b01d      	add	sp, #116	@ 0x74
 80090a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090a6:	2340      	movs	r3, #64	@ 0x40
 80090a8:	616b      	str	r3, [r5, #20]
 80090aa:	2300      	movs	r3, #0
 80090ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80090ae:	2320      	movs	r3, #32
 80090b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80090b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80090b8:	2330      	movs	r3, #48	@ 0x30
 80090ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009258 <_svfiprintf_r+0x1e4>
 80090be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80090c2:	f04f 0901 	mov.w	r9, #1
 80090c6:	4623      	mov	r3, r4
 80090c8:	469a      	mov	sl, r3
 80090ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090ce:	b10a      	cbz	r2, 80090d4 <_svfiprintf_r+0x60>
 80090d0:	2a25      	cmp	r2, #37	@ 0x25
 80090d2:	d1f9      	bne.n	80090c8 <_svfiprintf_r+0x54>
 80090d4:	ebba 0b04 	subs.w	fp, sl, r4
 80090d8:	d00b      	beq.n	80090f2 <_svfiprintf_r+0x7e>
 80090da:	465b      	mov	r3, fp
 80090dc:	4622      	mov	r2, r4
 80090de:	4629      	mov	r1, r5
 80090e0:	4638      	mov	r0, r7
 80090e2:	f7ff ff6b 	bl	8008fbc <__ssputs_r>
 80090e6:	3001      	adds	r0, #1
 80090e8:	f000 80a7 	beq.w	800923a <_svfiprintf_r+0x1c6>
 80090ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090ee:	445a      	add	r2, fp
 80090f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80090f2:	f89a 3000 	ldrb.w	r3, [sl]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	f000 809f 	beq.w	800923a <_svfiprintf_r+0x1c6>
 80090fc:	2300      	movs	r3, #0
 80090fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009102:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009106:	f10a 0a01 	add.w	sl, sl, #1
 800910a:	9304      	str	r3, [sp, #16]
 800910c:	9307      	str	r3, [sp, #28]
 800910e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009112:	931a      	str	r3, [sp, #104]	@ 0x68
 8009114:	4654      	mov	r4, sl
 8009116:	2205      	movs	r2, #5
 8009118:	f814 1b01 	ldrb.w	r1, [r4], #1
 800911c:	484e      	ldr	r0, [pc, #312]	@ (8009258 <_svfiprintf_r+0x1e4>)
 800911e:	f7f7 f87f 	bl	8000220 <memchr>
 8009122:	9a04      	ldr	r2, [sp, #16]
 8009124:	b9d8      	cbnz	r0, 800915e <_svfiprintf_r+0xea>
 8009126:	06d0      	lsls	r0, r2, #27
 8009128:	bf44      	itt	mi
 800912a:	2320      	movmi	r3, #32
 800912c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009130:	0711      	lsls	r1, r2, #28
 8009132:	bf44      	itt	mi
 8009134:	232b      	movmi	r3, #43	@ 0x2b
 8009136:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800913a:	f89a 3000 	ldrb.w	r3, [sl]
 800913e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009140:	d015      	beq.n	800916e <_svfiprintf_r+0xfa>
 8009142:	9a07      	ldr	r2, [sp, #28]
 8009144:	4654      	mov	r4, sl
 8009146:	2000      	movs	r0, #0
 8009148:	f04f 0c0a 	mov.w	ip, #10
 800914c:	4621      	mov	r1, r4
 800914e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009152:	3b30      	subs	r3, #48	@ 0x30
 8009154:	2b09      	cmp	r3, #9
 8009156:	d94b      	bls.n	80091f0 <_svfiprintf_r+0x17c>
 8009158:	b1b0      	cbz	r0, 8009188 <_svfiprintf_r+0x114>
 800915a:	9207      	str	r2, [sp, #28]
 800915c:	e014      	b.n	8009188 <_svfiprintf_r+0x114>
 800915e:	eba0 0308 	sub.w	r3, r0, r8
 8009162:	fa09 f303 	lsl.w	r3, r9, r3
 8009166:	4313      	orrs	r3, r2
 8009168:	9304      	str	r3, [sp, #16]
 800916a:	46a2      	mov	sl, r4
 800916c:	e7d2      	b.n	8009114 <_svfiprintf_r+0xa0>
 800916e:	9b03      	ldr	r3, [sp, #12]
 8009170:	1d19      	adds	r1, r3, #4
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	9103      	str	r1, [sp, #12]
 8009176:	2b00      	cmp	r3, #0
 8009178:	bfbb      	ittet	lt
 800917a:	425b      	neglt	r3, r3
 800917c:	f042 0202 	orrlt.w	r2, r2, #2
 8009180:	9307      	strge	r3, [sp, #28]
 8009182:	9307      	strlt	r3, [sp, #28]
 8009184:	bfb8      	it	lt
 8009186:	9204      	strlt	r2, [sp, #16]
 8009188:	7823      	ldrb	r3, [r4, #0]
 800918a:	2b2e      	cmp	r3, #46	@ 0x2e
 800918c:	d10a      	bne.n	80091a4 <_svfiprintf_r+0x130>
 800918e:	7863      	ldrb	r3, [r4, #1]
 8009190:	2b2a      	cmp	r3, #42	@ 0x2a
 8009192:	d132      	bne.n	80091fa <_svfiprintf_r+0x186>
 8009194:	9b03      	ldr	r3, [sp, #12]
 8009196:	1d1a      	adds	r2, r3, #4
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	9203      	str	r2, [sp, #12]
 800919c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80091a0:	3402      	adds	r4, #2
 80091a2:	9305      	str	r3, [sp, #20]
 80091a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009268 <_svfiprintf_r+0x1f4>
 80091a8:	7821      	ldrb	r1, [r4, #0]
 80091aa:	2203      	movs	r2, #3
 80091ac:	4650      	mov	r0, sl
 80091ae:	f7f7 f837 	bl	8000220 <memchr>
 80091b2:	b138      	cbz	r0, 80091c4 <_svfiprintf_r+0x150>
 80091b4:	9b04      	ldr	r3, [sp, #16]
 80091b6:	eba0 000a 	sub.w	r0, r0, sl
 80091ba:	2240      	movs	r2, #64	@ 0x40
 80091bc:	4082      	lsls	r2, r0
 80091be:	4313      	orrs	r3, r2
 80091c0:	3401      	adds	r4, #1
 80091c2:	9304      	str	r3, [sp, #16]
 80091c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091c8:	4824      	ldr	r0, [pc, #144]	@ (800925c <_svfiprintf_r+0x1e8>)
 80091ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80091ce:	2206      	movs	r2, #6
 80091d0:	f7f7 f826 	bl	8000220 <memchr>
 80091d4:	2800      	cmp	r0, #0
 80091d6:	d036      	beq.n	8009246 <_svfiprintf_r+0x1d2>
 80091d8:	4b21      	ldr	r3, [pc, #132]	@ (8009260 <_svfiprintf_r+0x1ec>)
 80091da:	bb1b      	cbnz	r3, 8009224 <_svfiprintf_r+0x1b0>
 80091dc:	9b03      	ldr	r3, [sp, #12]
 80091de:	3307      	adds	r3, #7
 80091e0:	f023 0307 	bic.w	r3, r3, #7
 80091e4:	3308      	adds	r3, #8
 80091e6:	9303      	str	r3, [sp, #12]
 80091e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091ea:	4433      	add	r3, r6
 80091ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80091ee:	e76a      	b.n	80090c6 <_svfiprintf_r+0x52>
 80091f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80091f4:	460c      	mov	r4, r1
 80091f6:	2001      	movs	r0, #1
 80091f8:	e7a8      	b.n	800914c <_svfiprintf_r+0xd8>
 80091fa:	2300      	movs	r3, #0
 80091fc:	3401      	adds	r4, #1
 80091fe:	9305      	str	r3, [sp, #20]
 8009200:	4619      	mov	r1, r3
 8009202:	f04f 0c0a 	mov.w	ip, #10
 8009206:	4620      	mov	r0, r4
 8009208:	f810 2b01 	ldrb.w	r2, [r0], #1
 800920c:	3a30      	subs	r2, #48	@ 0x30
 800920e:	2a09      	cmp	r2, #9
 8009210:	d903      	bls.n	800921a <_svfiprintf_r+0x1a6>
 8009212:	2b00      	cmp	r3, #0
 8009214:	d0c6      	beq.n	80091a4 <_svfiprintf_r+0x130>
 8009216:	9105      	str	r1, [sp, #20]
 8009218:	e7c4      	b.n	80091a4 <_svfiprintf_r+0x130>
 800921a:	fb0c 2101 	mla	r1, ip, r1, r2
 800921e:	4604      	mov	r4, r0
 8009220:	2301      	movs	r3, #1
 8009222:	e7f0      	b.n	8009206 <_svfiprintf_r+0x192>
 8009224:	ab03      	add	r3, sp, #12
 8009226:	9300      	str	r3, [sp, #0]
 8009228:	462a      	mov	r2, r5
 800922a:	4b0e      	ldr	r3, [pc, #56]	@ (8009264 <_svfiprintf_r+0x1f0>)
 800922c:	a904      	add	r1, sp, #16
 800922e:	4638      	mov	r0, r7
 8009230:	f7fc fb60 	bl	80058f4 <_printf_float>
 8009234:	1c42      	adds	r2, r0, #1
 8009236:	4606      	mov	r6, r0
 8009238:	d1d6      	bne.n	80091e8 <_svfiprintf_r+0x174>
 800923a:	89ab      	ldrh	r3, [r5, #12]
 800923c:	065b      	lsls	r3, r3, #25
 800923e:	f53f af2d 	bmi.w	800909c <_svfiprintf_r+0x28>
 8009242:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009244:	e72c      	b.n	80090a0 <_svfiprintf_r+0x2c>
 8009246:	ab03      	add	r3, sp, #12
 8009248:	9300      	str	r3, [sp, #0]
 800924a:	462a      	mov	r2, r5
 800924c:	4b05      	ldr	r3, [pc, #20]	@ (8009264 <_svfiprintf_r+0x1f0>)
 800924e:	a904      	add	r1, sp, #16
 8009250:	4638      	mov	r0, r7
 8009252:	f7fc fde7 	bl	8005e24 <_printf_i>
 8009256:	e7ed      	b.n	8009234 <_svfiprintf_r+0x1c0>
 8009258:	0800a5b1 	.word	0x0800a5b1
 800925c:	0800a5bb 	.word	0x0800a5bb
 8009260:	080058f5 	.word	0x080058f5
 8009264:	08008fbd 	.word	0x08008fbd
 8009268:	0800a5b7 	.word	0x0800a5b7

0800926c <__sfputc_r>:
 800926c:	6893      	ldr	r3, [r2, #8]
 800926e:	3b01      	subs	r3, #1
 8009270:	2b00      	cmp	r3, #0
 8009272:	b410      	push	{r4}
 8009274:	6093      	str	r3, [r2, #8]
 8009276:	da08      	bge.n	800928a <__sfputc_r+0x1e>
 8009278:	6994      	ldr	r4, [r2, #24]
 800927a:	42a3      	cmp	r3, r4
 800927c:	db01      	blt.n	8009282 <__sfputc_r+0x16>
 800927e:	290a      	cmp	r1, #10
 8009280:	d103      	bne.n	800928a <__sfputc_r+0x1e>
 8009282:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009286:	f7fd ba96 	b.w	80067b6 <__swbuf_r>
 800928a:	6813      	ldr	r3, [r2, #0]
 800928c:	1c58      	adds	r0, r3, #1
 800928e:	6010      	str	r0, [r2, #0]
 8009290:	7019      	strb	r1, [r3, #0]
 8009292:	4608      	mov	r0, r1
 8009294:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009298:	4770      	bx	lr

0800929a <__sfputs_r>:
 800929a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800929c:	4606      	mov	r6, r0
 800929e:	460f      	mov	r7, r1
 80092a0:	4614      	mov	r4, r2
 80092a2:	18d5      	adds	r5, r2, r3
 80092a4:	42ac      	cmp	r4, r5
 80092a6:	d101      	bne.n	80092ac <__sfputs_r+0x12>
 80092a8:	2000      	movs	r0, #0
 80092aa:	e007      	b.n	80092bc <__sfputs_r+0x22>
 80092ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092b0:	463a      	mov	r2, r7
 80092b2:	4630      	mov	r0, r6
 80092b4:	f7ff ffda 	bl	800926c <__sfputc_r>
 80092b8:	1c43      	adds	r3, r0, #1
 80092ba:	d1f3      	bne.n	80092a4 <__sfputs_r+0xa>
 80092bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080092c0 <_vfiprintf_r>:
 80092c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092c4:	460d      	mov	r5, r1
 80092c6:	b09d      	sub	sp, #116	@ 0x74
 80092c8:	4614      	mov	r4, r2
 80092ca:	4698      	mov	r8, r3
 80092cc:	4606      	mov	r6, r0
 80092ce:	b118      	cbz	r0, 80092d8 <_vfiprintf_r+0x18>
 80092d0:	6a03      	ldr	r3, [r0, #32]
 80092d2:	b90b      	cbnz	r3, 80092d8 <_vfiprintf_r+0x18>
 80092d4:	f7fd f966 	bl	80065a4 <__sinit>
 80092d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80092da:	07d9      	lsls	r1, r3, #31
 80092dc:	d405      	bmi.n	80092ea <_vfiprintf_r+0x2a>
 80092de:	89ab      	ldrh	r3, [r5, #12]
 80092e0:	059a      	lsls	r2, r3, #22
 80092e2:	d402      	bmi.n	80092ea <_vfiprintf_r+0x2a>
 80092e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80092e6:	f7fd fbce 	bl	8006a86 <__retarget_lock_acquire_recursive>
 80092ea:	89ab      	ldrh	r3, [r5, #12]
 80092ec:	071b      	lsls	r3, r3, #28
 80092ee:	d501      	bpl.n	80092f4 <_vfiprintf_r+0x34>
 80092f0:	692b      	ldr	r3, [r5, #16]
 80092f2:	b99b      	cbnz	r3, 800931c <_vfiprintf_r+0x5c>
 80092f4:	4629      	mov	r1, r5
 80092f6:	4630      	mov	r0, r6
 80092f8:	f7fd fa9c 	bl	8006834 <__swsetup_r>
 80092fc:	b170      	cbz	r0, 800931c <_vfiprintf_r+0x5c>
 80092fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009300:	07dc      	lsls	r4, r3, #31
 8009302:	d504      	bpl.n	800930e <_vfiprintf_r+0x4e>
 8009304:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009308:	b01d      	add	sp, #116	@ 0x74
 800930a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800930e:	89ab      	ldrh	r3, [r5, #12]
 8009310:	0598      	lsls	r0, r3, #22
 8009312:	d4f7      	bmi.n	8009304 <_vfiprintf_r+0x44>
 8009314:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009316:	f7fd fbb7 	bl	8006a88 <__retarget_lock_release_recursive>
 800931a:	e7f3      	b.n	8009304 <_vfiprintf_r+0x44>
 800931c:	2300      	movs	r3, #0
 800931e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009320:	2320      	movs	r3, #32
 8009322:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009326:	f8cd 800c 	str.w	r8, [sp, #12]
 800932a:	2330      	movs	r3, #48	@ 0x30
 800932c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80094dc <_vfiprintf_r+0x21c>
 8009330:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009334:	f04f 0901 	mov.w	r9, #1
 8009338:	4623      	mov	r3, r4
 800933a:	469a      	mov	sl, r3
 800933c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009340:	b10a      	cbz	r2, 8009346 <_vfiprintf_r+0x86>
 8009342:	2a25      	cmp	r2, #37	@ 0x25
 8009344:	d1f9      	bne.n	800933a <_vfiprintf_r+0x7a>
 8009346:	ebba 0b04 	subs.w	fp, sl, r4
 800934a:	d00b      	beq.n	8009364 <_vfiprintf_r+0xa4>
 800934c:	465b      	mov	r3, fp
 800934e:	4622      	mov	r2, r4
 8009350:	4629      	mov	r1, r5
 8009352:	4630      	mov	r0, r6
 8009354:	f7ff ffa1 	bl	800929a <__sfputs_r>
 8009358:	3001      	adds	r0, #1
 800935a:	f000 80a7 	beq.w	80094ac <_vfiprintf_r+0x1ec>
 800935e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009360:	445a      	add	r2, fp
 8009362:	9209      	str	r2, [sp, #36]	@ 0x24
 8009364:	f89a 3000 	ldrb.w	r3, [sl]
 8009368:	2b00      	cmp	r3, #0
 800936a:	f000 809f 	beq.w	80094ac <_vfiprintf_r+0x1ec>
 800936e:	2300      	movs	r3, #0
 8009370:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009374:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009378:	f10a 0a01 	add.w	sl, sl, #1
 800937c:	9304      	str	r3, [sp, #16]
 800937e:	9307      	str	r3, [sp, #28]
 8009380:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009384:	931a      	str	r3, [sp, #104]	@ 0x68
 8009386:	4654      	mov	r4, sl
 8009388:	2205      	movs	r2, #5
 800938a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800938e:	4853      	ldr	r0, [pc, #332]	@ (80094dc <_vfiprintf_r+0x21c>)
 8009390:	f7f6 ff46 	bl	8000220 <memchr>
 8009394:	9a04      	ldr	r2, [sp, #16]
 8009396:	b9d8      	cbnz	r0, 80093d0 <_vfiprintf_r+0x110>
 8009398:	06d1      	lsls	r1, r2, #27
 800939a:	bf44      	itt	mi
 800939c:	2320      	movmi	r3, #32
 800939e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80093a2:	0713      	lsls	r3, r2, #28
 80093a4:	bf44      	itt	mi
 80093a6:	232b      	movmi	r3, #43	@ 0x2b
 80093a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80093ac:	f89a 3000 	ldrb.w	r3, [sl]
 80093b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80093b2:	d015      	beq.n	80093e0 <_vfiprintf_r+0x120>
 80093b4:	9a07      	ldr	r2, [sp, #28]
 80093b6:	4654      	mov	r4, sl
 80093b8:	2000      	movs	r0, #0
 80093ba:	f04f 0c0a 	mov.w	ip, #10
 80093be:	4621      	mov	r1, r4
 80093c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093c4:	3b30      	subs	r3, #48	@ 0x30
 80093c6:	2b09      	cmp	r3, #9
 80093c8:	d94b      	bls.n	8009462 <_vfiprintf_r+0x1a2>
 80093ca:	b1b0      	cbz	r0, 80093fa <_vfiprintf_r+0x13a>
 80093cc:	9207      	str	r2, [sp, #28]
 80093ce:	e014      	b.n	80093fa <_vfiprintf_r+0x13a>
 80093d0:	eba0 0308 	sub.w	r3, r0, r8
 80093d4:	fa09 f303 	lsl.w	r3, r9, r3
 80093d8:	4313      	orrs	r3, r2
 80093da:	9304      	str	r3, [sp, #16]
 80093dc:	46a2      	mov	sl, r4
 80093de:	e7d2      	b.n	8009386 <_vfiprintf_r+0xc6>
 80093e0:	9b03      	ldr	r3, [sp, #12]
 80093e2:	1d19      	adds	r1, r3, #4
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	9103      	str	r1, [sp, #12]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	bfbb      	ittet	lt
 80093ec:	425b      	neglt	r3, r3
 80093ee:	f042 0202 	orrlt.w	r2, r2, #2
 80093f2:	9307      	strge	r3, [sp, #28]
 80093f4:	9307      	strlt	r3, [sp, #28]
 80093f6:	bfb8      	it	lt
 80093f8:	9204      	strlt	r2, [sp, #16]
 80093fa:	7823      	ldrb	r3, [r4, #0]
 80093fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80093fe:	d10a      	bne.n	8009416 <_vfiprintf_r+0x156>
 8009400:	7863      	ldrb	r3, [r4, #1]
 8009402:	2b2a      	cmp	r3, #42	@ 0x2a
 8009404:	d132      	bne.n	800946c <_vfiprintf_r+0x1ac>
 8009406:	9b03      	ldr	r3, [sp, #12]
 8009408:	1d1a      	adds	r2, r3, #4
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	9203      	str	r2, [sp, #12]
 800940e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009412:	3402      	adds	r4, #2
 8009414:	9305      	str	r3, [sp, #20]
 8009416:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80094ec <_vfiprintf_r+0x22c>
 800941a:	7821      	ldrb	r1, [r4, #0]
 800941c:	2203      	movs	r2, #3
 800941e:	4650      	mov	r0, sl
 8009420:	f7f6 fefe 	bl	8000220 <memchr>
 8009424:	b138      	cbz	r0, 8009436 <_vfiprintf_r+0x176>
 8009426:	9b04      	ldr	r3, [sp, #16]
 8009428:	eba0 000a 	sub.w	r0, r0, sl
 800942c:	2240      	movs	r2, #64	@ 0x40
 800942e:	4082      	lsls	r2, r0
 8009430:	4313      	orrs	r3, r2
 8009432:	3401      	adds	r4, #1
 8009434:	9304      	str	r3, [sp, #16]
 8009436:	f814 1b01 	ldrb.w	r1, [r4], #1
 800943a:	4829      	ldr	r0, [pc, #164]	@ (80094e0 <_vfiprintf_r+0x220>)
 800943c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009440:	2206      	movs	r2, #6
 8009442:	f7f6 feed 	bl	8000220 <memchr>
 8009446:	2800      	cmp	r0, #0
 8009448:	d03f      	beq.n	80094ca <_vfiprintf_r+0x20a>
 800944a:	4b26      	ldr	r3, [pc, #152]	@ (80094e4 <_vfiprintf_r+0x224>)
 800944c:	bb1b      	cbnz	r3, 8009496 <_vfiprintf_r+0x1d6>
 800944e:	9b03      	ldr	r3, [sp, #12]
 8009450:	3307      	adds	r3, #7
 8009452:	f023 0307 	bic.w	r3, r3, #7
 8009456:	3308      	adds	r3, #8
 8009458:	9303      	str	r3, [sp, #12]
 800945a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800945c:	443b      	add	r3, r7
 800945e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009460:	e76a      	b.n	8009338 <_vfiprintf_r+0x78>
 8009462:	fb0c 3202 	mla	r2, ip, r2, r3
 8009466:	460c      	mov	r4, r1
 8009468:	2001      	movs	r0, #1
 800946a:	e7a8      	b.n	80093be <_vfiprintf_r+0xfe>
 800946c:	2300      	movs	r3, #0
 800946e:	3401      	adds	r4, #1
 8009470:	9305      	str	r3, [sp, #20]
 8009472:	4619      	mov	r1, r3
 8009474:	f04f 0c0a 	mov.w	ip, #10
 8009478:	4620      	mov	r0, r4
 800947a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800947e:	3a30      	subs	r2, #48	@ 0x30
 8009480:	2a09      	cmp	r2, #9
 8009482:	d903      	bls.n	800948c <_vfiprintf_r+0x1cc>
 8009484:	2b00      	cmp	r3, #0
 8009486:	d0c6      	beq.n	8009416 <_vfiprintf_r+0x156>
 8009488:	9105      	str	r1, [sp, #20]
 800948a:	e7c4      	b.n	8009416 <_vfiprintf_r+0x156>
 800948c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009490:	4604      	mov	r4, r0
 8009492:	2301      	movs	r3, #1
 8009494:	e7f0      	b.n	8009478 <_vfiprintf_r+0x1b8>
 8009496:	ab03      	add	r3, sp, #12
 8009498:	9300      	str	r3, [sp, #0]
 800949a:	462a      	mov	r2, r5
 800949c:	4b12      	ldr	r3, [pc, #72]	@ (80094e8 <_vfiprintf_r+0x228>)
 800949e:	a904      	add	r1, sp, #16
 80094a0:	4630      	mov	r0, r6
 80094a2:	f7fc fa27 	bl	80058f4 <_printf_float>
 80094a6:	4607      	mov	r7, r0
 80094a8:	1c78      	adds	r0, r7, #1
 80094aa:	d1d6      	bne.n	800945a <_vfiprintf_r+0x19a>
 80094ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80094ae:	07d9      	lsls	r1, r3, #31
 80094b0:	d405      	bmi.n	80094be <_vfiprintf_r+0x1fe>
 80094b2:	89ab      	ldrh	r3, [r5, #12]
 80094b4:	059a      	lsls	r2, r3, #22
 80094b6:	d402      	bmi.n	80094be <_vfiprintf_r+0x1fe>
 80094b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80094ba:	f7fd fae5 	bl	8006a88 <__retarget_lock_release_recursive>
 80094be:	89ab      	ldrh	r3, [r5, #12]
 80094c0:	065b      	lsls	r3, r3, #25
 80094c2:	f53f af1f 	bmi.w	8009304 <_vfiprintf_r+0x44>
 80094c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80094c8:	e71e      	b.n	8009308 <_vfiprintf_r+0x48>
 80094ca:	ab03      	add	r3, sp, #12
 80094cc:	9300      	str	r3, [sp, #0]
 80094ce:	462a      	mov	r2, r5
 80094d0:	4b05      	ldr	r3, [pc, #20]	@ (80094e8 <_vfiprintf_r+0x228>)
 80094d2:	a904      	add	r1, sp, #16
 80094d4:	4630      	mov	r0, r6
 80094d6:	f7fc fca5 	bl	8005e24 <_printf_i>
 80094da:	e7e4      	b.n	80094a6 <_vfiprintf_r+0x1e6>
 80094dc:	0800a5b1 	.word	0x0800a5b1
 80094e0:	0800a5bb 	.word	0x0800a5bb
 80094e4:	080058f5 	.word	0x080058f5
 80094e8:	0800929b 	.word	0x0800929b
 80094ec:	0800a5b7 	.word	0x0800a5b7

080094f0 <__sflush_r>:
 80094f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80094f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094f8:	0716      	lsls	r6, r2, #28
 80094fa:	4605      	mov	r5, r0
 80094fc:	460c      	mov	r4, r1
 80094fe:	d454      	bmi.n	80095aa <__sflush_r+0xba>
 8009500:	684b      	ldr	r3, [r1, #4]
 8009502:	2b00      	cmp	r3, #0
 8009504:	dc02      	bgt.n	800950c <__sflush_r+0x1c>
 8009506:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009508:	2b00      	cmp	r3, #0
 800950a:	dd48      	ble.n	800959e <__sflush_r+0xae>
 800950c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800950e:	2e00      	cmp	r6, #0
 8009510:	d045      	beq.n	800959e <__sflush_r+0xae>
 8009512:	2300      	movs	r3, #0
 8009514:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009518:	682f      	ldr	r7, [r5, #0]
 800951a:	6a21      	ldr	r1, [r4, #32]
 800951c:	602b      	str	r3, [r5, #0]
 800951e:	d030      	beq.n	8009582 <__sflush_r+0x92>
 8009520:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009522:	89a3      	ldrh	r3, [r4, #12]
 8009524:	0759      	lsls	r1, r3, #29
 8009526:	d505      	bpl.n	8009534 <__sflush_r+0x44>
 8009528:	6863      	ldr	r3, [r4, #4]
 800952a:	1ad2      	subs	r2, r2, r3
 800952c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800952e:	b10b      	cbz	r3, 8009534 <__sflush_r+0x44>
 8009530:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009532:	1ad2      	subs	r2, r2, r3
 8009534:	2300      	movs	r3, #0
 8009536:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009538:	6a21      	ldr	r1, [r4, #32]
 800953a:	4628      	mov	r0, r5
 800953c:	47b0      	blx	r6
 800953e:	1c43      	adds	r3, r0, #1
 8009540:	89a3      	ldrh	r3, [r4, #12]
 8009542:	d106      	bne.n	8009552 <__sflush_r+0x62>
 8009544:	6829      	ldr	r1, [r5, #0]
 8009546:	291d      	cmp	r1, #29
 8009548:	d82b      	bhi.n	80095a2 <__sflush_r+0xb2>
 800954a:	4a2a      	ldr	r2, [pc, #168]	@ (80095f4 <__sflush_r+0x104>)
 800954c:	410a      	asrs	r2, r1
 800954e:	07d6      	lsls	r6, r2, #31
 8009550:	d427      	bmi.n	80095a2 <__sflush_r+0xb2>
 8009552:	2200      	movs	r2, #0
 8009554:	6062      	str	r2, [r4, #4]
 8009556:	04d9      	lsls	r1, r3, #19
 8009558:	6922      	ldr	r2, [r4, #16]
 800955a:	6022      	str	r2, [r4, #0]
 800955c:	d504      	bpl.n	8009568 <__sflush_r+0x78>
 800955e:	1c42      	adds	r2, r0, #1
 8009560:	d101      	bne.n	8009566 <__sflush_r+0x76>
 8009562:	682b      	ldr	r3, [r5, #0]
 8009564:	b903      	cbnz	r3, 8009568 <__sflush_r+0x78>
 8009566:	6560      	str	r0, [r4, #84]	@ 0x54
 8009568:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800956a:	602f      	str	r7, [r5, #0]
 800956c:	b1b9      	cbz	r1, 800959e <__sflush_r+0xae>
 800956e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009572:	4299      	cmp	r1, r3
 8009574:	d002      	beq.n	800957c <__sflush_r+0x8c>
 8009576:	4628      	mov	r0, r5
 8009578:	f7fe f8ea 	bl	8007750 <_free_r>
 800957c:	2300      	movs	r3, #0
 800957e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009580:	e00d      	b.n	800959e <__sflush_r+0xae>
 8009582:	2301      	movs	r3, #1
 8009584:	4628      	mov	r0, r5
 8009586:	47b0      	blx	r6
 8009588:	4602      	mov	r2, r0
 800958a:	1c50      	adds	r0, r2, #1
 800958c:	d1c9      	bne.n	8009522 <__sflush_r+0x32>
 800958e:	682b      	ldr	r3, [r5, #0]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d0c6      	beq.n	8009522 <__sflush_r+0x32>
 8009594:	2b1d      	cmp	r3, #29
 8009596:	d001      	beq.n	800959c <__sflush_r+0xac>
 8009598:	2b16      	cmp	r3, #22
 800959a:	d11e      	bne.n	80095da <__sflush_r+0xea>
 800959c:	602f      	str	r7, [r5, #0]
 800959e:	2000      	movs	r0, #0
 80095a0:	e022      	b.n	80095e8 <__sflush_r+0xf8>
 80095a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095a6:	b21b      	sxth	r3, r3
 80095a8:	e01b      	b.n	80095e2 <__sflush_r+0xf2>
 80095aa:	690f      	ldr	r7, [r1, #16]
 80095ac:	2f00      	cmp	r7, #0
 80095ae:	d0f6      	beq.n	800959e <__sflush_r+0xae>
 80095b0:	0793      	lsls	r3, r2, #30
 80095b2:	680e      	ldr	r6, [r1, #0]
 80095b4:	bf08      	it	eq
 80095b6:	694b      	ldreq	r3, [r1, #20]
 80095b8:	600f      	str	r7, [r1, #0]
 80095ba:	bf18      	it	ne
 80095bc:	2300      	movne	r3, #0
 80095be:	eba6 0807 	sub.w	r8, r6, r7
 80095c2:	608b      	str	r3, [r1, #8]
 80095c4:	f1b8 0f00 	cmp.w	r8, #0
 80095c8:	dde9      	ble.n	800959e <__sflush_r+0xae>
 80095ca:	6a21      	ldr	r1, [r4, #32]
 80095cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80095ce:	4643      	mov	r3, r8
 80095d0:	463a      	mov	r2, r7
 80095d2:	4628      	mov	r0, r5
 80095d4:	47b0      	blx	r6
 80095d6:	2800      	cmp	r0, #0
 80095d8:	dc08      	bgt.n	80095ec <__sflush_r+0xfc>
 80095da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095e2:	81a3      	strh	r3, [r4, #12]
 80095e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80095e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095ec:	4407      	add	r7, r0
 80095ee:	eba8 0800 	sub.w	r8, r8, r0
 80095f2:	e7e7      	b.n	80095c4 <__sflush_r+0xd4>
 80095f4:	dfbffffe 	.word	0xdfbffffe

080095f8 <_fflush_r>:
 80095f8:	b538      	push	{r3, r4, r5, lr}
 80095fa:	690b      	ldr	r3, [r1, #16]
 80095fc:	4605      	mov	r5, r0
 80095fe:	460c      	mov	r4, r1
 8009600:	b913      	cbnz	r3, 8009608 <_fflush_r+0x10>
 8009602:	2500      	movs	r5, #0
 8009604:	4628      	mov	r0, r5
 8009606:	bd38      	pop	{r3, r4, r5, pc}
 8009608:	b118      	cbz	r0, 8009612 <_fflush_r+0x1a>
 800960a:	6a03      	ldr	r3, [r0, #32]
 800960c:	b90b      	cbnz	r3, 8009612 <_fflush_r+0x1a>
 800960e:	f7fc ffc9 	bl	80065a4 <__sinit>
 8009612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d0f3      	beq.n	8009602 <_fflush_r+0xa>
 800961a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800961c:	07d0      	lsls	r0, r2, #31
 800961e:	d404      	bmi.n	800962a <_fflush_r+0x32>
 8009620:	0599      	lsls	r1, r3, #22
 8009622:	d402      	bmi.n	800962a <_fflush_r+0x32>
 8009624:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009626:	f7fd fa2e 	bl	8006a86 <__retarget_lock_acquire_recursive>
 800962a:	4628      	mov	r0, r5
 800962c:	4621      	mov	r1, r4
 800962e:	f7ff ff5f 	bl	80094f0 <__sflush_r>
 8009632:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009634:	07da      	lsls	r2, r3, #31
 8009636:	4605      	mov	r5, r0
 8009638:	d4e4      	bmi.n	8009604 <_fflush_r+0xc>
 800963a:	89a3      	ldrh	r3, [r4, #12]
 800963c:	059b      	lsls	r3, r3, #22
 800963e:	d4e1      	bmi.n	8009604 <_fflush_r+0xc>
 8009640:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009642:	f7fd fa21 	bl	8006a88 <__retarget_lock_release_recursive>
 8009646:	e7dd      	b.n	8009604 <_fflush_r+0xc>

08009648 <__swhatbuf_r>:
 8009648:	b570      	push	{r4, r5, r6, lr}
 800964a:	460c      	mov	r4, r1
 800964c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009650:	2900      	cmp	r1, #0
 8009652:	b096      	sub	sp, #88	@ 0x58
 8009654:	4615      	mov	r5, r2
 8009656:	461e      	mov	r6, r3
 8009658:	da0d      	bge.n	8009676 <__swhatbuf_r+0x2e>
 800965a:	89a3      	ldrh	r3, [r4, #12]
 800965c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009660:	f04f 0100 	mov.w	r1, #0
 8009664:	bf14      	ite	ne
 8009666:	2340      	movne	r3, #64	@ 0x40
 8009668:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800966c:	2000      	movs	r0, #0
 800966e:	6031      	str	r1, [r6, #0]
 8009670:	602b      	str	r3, [r5, #0]
 8009672:	b016      	add	sp, #88	@ 0x58
 8009674:	bd70      	pop	{r4, r5, r6, pc}
 8009676:	466a      	mov	r2, sp
 8009678:	f000 f874 	bl	8009764 <_fstat_r>
 800967c:	2800      	cmp	r0, #0
 800967e:	dbec      	blt.n	800965a <__swhatbuf_r+0x12>
 8009680:	9901      	ldr	r1, [sp, #4]
 8009682:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009686:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800968a:	4259      	negs	r1, r3
 800968c:	4159      	adcs	r1, r3
 800968e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009692:	e7eb      	b.n	800966c <__swhatbuf_r+0x24>

08009694 <__smakebuf_r>:
 8009694:	898b      	ldrh	r3, [r1, #12]
 8009696:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009698:	079d      	lsls	r5, r3, #30
 800969a:	4606      	mov	r6, r0
 800969c:	460c      	mov	r4, r1
 800969e:	d507      	bpl.n	80096b0 <__smakebuf_r+0x1c>
 80096a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80096a4:	6023      	str	r3, [r4, #0]
 80096a6:	6123      	str	r3, [r4, #16]
 80096a8:	2301      	movs	r3, #1
 80096aa:	6163      	str	r3, [r4, #20]
 80096ac:	b003      	add	sp, #12
 80096ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096b0:	ab01      	add	r3, sp, #4
 80096b2:	466a      	mov	r2, sp
 80096b4:	f7ff ffc8 	bl	8009648 <__swhatbuf_r>
 80096b8:	9f00      	ldr	r7, [sp, #0]
 80096ba:	4605      	mov	r5, r0
 80096bc:	4639      	mov	r1, r7
 80096be:	4630      	mov	r0, r6
 80096c0:	f7fe f8ba 	bl	8007838 <_malloc_r>
 80096c4:	b948      	cbnz	r0, 80096da <__smakebuf_r+0x46>
 80096c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096ca:	059a      	lsls	r2, r3, #22
 80096cc:	d4ee      	bmi.n	80096ac <__smakebuf_r+0x18>
 80096ce:	f023 0303 	bic.w	r3, r3, #3
 80096d2:	f043 0302 	orr.w	r3, r3, #2
 80096d6:	81a3      	strh	r3, [r4, #12]
 80096d8:	e7e2      	b.n	80096a0 <__smakebuf_r+0xc>
 80096da:	89a3      	ldrh	r3, [r4, #12]
 80096dc:	6020      	str	r0, [r4, #0]
 80096de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096e2:	81a3      	strh	r3, [r4, #12]
 80096e4:	9b01      	ldr	r3, [sp, #4]
 80096e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80096ea:	b15b      	cbz	r3, 8009704 <__smakebuf_r+0x70>
 80096ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096f0:	4630      	mov	r0, r6
 80096f2:	f000 f849 	bl	8009788 <_isatty_r>
 80096f6:	b128      	cbz	r0, 8009704 <__smakebuf_r+0x70>
 80096f8:	89a3      	ldrh	r3, [r4, #12]
 80096fa:	f023 0303 	bic.w	r3, r3, #3
 80096fe:	f043 0301 	orr.w	r3, r3, #1
 8009702:	81a3      	strh	r3, [r4, #12]
 8009704:	89a3      	ldrh	r3, [r4, #12]
 8009706:	431d      	orrs	r5, r3
 8009708:	81a5      	strh	r5, [r4, #12]
 800970a:	e7cf      	b.n	80096ac <__smakebuf_r+0x18>

0800970c <memmove>:
 800970c:	4288      	cmp	r0, r1
 800970e:	b510      	push	{r4, lr}
 8009710:	eb01 0402 	add.w	r4, r1, r2
 8009714:	d902      	bls.n	800971c <memmove+0x10>
 8009716:	4284      	cmp	r4, r0
 8009718:	4623      	mov	r3, r4
 800971a:	d807      	bhi.n	800972c <memmove+0x20>
 800971c:	1e43      	subs	r3, r0, #1
 800971e:	42a1      	cmp	r1, r4
 8009720:	d008      	beq.n	8009734 <memmove+0x28>
 8009722:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009726:	f803 2f01 	strb.w	r2, [r3, #1]!
 800972a:	e7f8      	b.n	800971e <memmove+0x12>
 800972c:	4402      	add	r2, r0
 800972e:	4601      	mov	r1, r0
 8009730:	428a      	cmp	r2, r1
 8009732:	d100      	bne.n	8009736 <memmove+0x2a>
 8009734:	bd10      	pop	{r4, pc}
 8009736:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800973a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800973e:	e7f7      	b.n	8009730 <memmove+0x24>

08009740 <strncmp>:
 8009740:	b510      	push	{r4, lr}
 8009742:	b16a      	cbz	r2, 8009760 <strncmp+0x20>
 8009744:	3901      	subs	r1, #1
 8009746:	1884      	adds	r4, r0, r2
 8009748:	f810 2b01 	ldrb.w	r2, [r0], #1
 800974c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009750:	429a      	cmp	r2, r3
 8009752:	d103      	bne.n	800975c <strncmp+0x1c>
 8009754:	42a0      	cmp	r0, r4
 8009756:	d001      	beq.n	800975c <strncmp+0x1c>
 8009758:	2a00      	cmp	r2, #0
 800975a:	d1f5      	bne.n	8009748 <strncmp+0x8>
 800975c:	1ad0      	subs	r0, r2, r3
 800975e:	bd10      	pop	{r4, pc}
 8009760:	4610      	mov	r0, r2
 8009762:	e7fc      	b.n	800975e <strncmp+0x1e>

08009764 <_fstat_r>:
 8009764:	b538      	push	{r3, r4, r5, lr}
 8009766:	4d07      	ldr	r5, [pc, #28]	@ (8009784 <_fstat_r+0x20>)
 8009768:	2300      	movs	r3, #0
 800976a:	4604      	mov	r4, r0
 800976c:	4608      	mov	r0, r1
 800976e:	4611      	mov	r1, r2
 8009770:	602b      	str	r3, [r5, #0]
 8009772:	f7f7 ff47 	bl	8001604 <_fstat>
 8009776:	1c43      	adds	r3, r0, #1
 8009778:	d102      	bne.n	8009780 <_fstat_r+0x1c>
 800977a:	682b      	ldr	r3, [r5, #0]
 800977c:	b103      	cbz	r3, 8009780 <_fstat_r+0x1c>
 800977e:	6023      	str	r3, [r4, #0]
 8009780:	bd38      	pop	{r3, r4, r5, pc}
 8009782:	bf00      	nop
 8009784:	2000539c 	.word	0x2000539c

08009788 <_isatty_r>:
 8009788:	b538      	push	{r3, r4, r5, lr}
 800978a:	4d06      	ldr	r5, [pc, #24]	@ (80097a4 <_isatty_r+0x1c>)
 800978c:	2300      	movs	r3, #0
 800978e:	4604      	mov	r4, r0
 8009790:	4608      	mov	r0, r1
 8009792:	602b      	str	r3, [r5, #0]
 8009794:	f7f7 ff46 	bl	8001624 <_isatty>
 8009798:	1c43      	adds	r3, r0, #1
 800979a:	d102      	bne.n	80097a2 <_isatty_r+0x1a>
 800979c:	682b      	ldr	r3, [r5, #0]
 800979e:	b103      	cbz	r3, 80097a2 <_isatty_r+0x1a>
 80097a0:	6023      	str	r3, [r4, #0]
 80097a2:	bd38      	pop	{r3, r4, r5, pc}
 80097a4:	2000539c 	.word	0x2000539c

080097a8 <_sbrk_r>:
 80097a8:	b538      	push	{r3, r4, r5, lr}
 80097aa:	4d06      	ldr	r5, [pc, #24]	@ (80097c4 <_sbrk_r+0x1c>)
 80097ac:	2300      	movs	r3, #0
 80097ae:	4604      	mov	r4, r0
 80097b0:	4608      	mov	r0, r1
 80097b2:	602b      	str	r3, [r5, #0]
 80097b4:	f7f7 ff4e 	bl	8001654 <_sbrk>
 80097b8:	1c43      	adds	r3, r0, #1
 80097ba:	d102      	bne.n	80097c2 <_sbrk_r+0x1a>
 80097bc:	682b      	ldr	r3, [r5, #0]
 80097be:	b103      	cbz	r3, 80097c2 <_sbrk_r+0x1a>
 80097c0:	6023      	str	r3, [r4, #0]
 80097c2:	bd38      	pop	{r3, r4, r5, pc}
 80097c4:	2000539c 	.word	0x2000539c

080097c8 <nan>:
 80097c8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80097d0 <nan+0x8>
 80097cc:	4770      	bx	lr
 80097ce:	bf00      	nop
 80097d0:	00000000 	.word	0x00000000
 80097d4:	7ff80000 	.word	0x7ff80000

080097d8 <__assert_func>:
 80097d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80097da:	4614      	mov	r4, r2
 80097dc:	461a      	mov	r2, r3
 80097de:	4b09      	ldr	r3, [pc, #36]	@ (8009804 <__assert_func+0x2c>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4605      	mov	r5, r0
 80097e4:	68d8      	ldr	r0, [r3, #12]
 80097e6:	b954      	cbnz	r4, 80097fe <__assert_func+0x26>
 80097e8:	4b07      	ldr	r3, [pc, #28]	@ (8009808 <__assert_func+0x30>)
 80097ea:	461c      	mov	r4, r3
 80097ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80097f0:	9100      	str	r1, [sp, #0]
 80097f2:	462b      	mov	r3, r5
 80097f4:	4905      	ldr	r1, [pc, #20]	@ (800980c <__assert_func+0x34>)
 80097f6:	f000 fba7 	bl	8009f48 <fiprintf>
 80097fa:	f000 fbb7 	bl	8009f6c <abort>
 80097fe:	4b04      	ldr	r3, [pc, #16]	@ (8009810 <__assert_func+0x38>)
 8009800:	e7f4      	b.n	80097ec <__assert_func+0x14>
 8009802:	bf00      	nop
 8009804:	20000020 	.word	0x20000020
 8009808:	0800a605 	.word	0x0800a605
 800980c:	0800a5d7 	.word	0x0800a5d7
 8009810:	0800a5ca 	.word	0x0800a5ca

08009814 <_calloc_r>:
 8009814:	b570      	push	{r4, r5, r6, lr}
 8009816:	fba1 5402 	umull	r5, r4, r1, r2
 800981a:	b93c      	cbnz	r4, 800982c <_calloc_r+0x18>
 800981c:	4629      	mov	r1, r5
 800981e:	f7fe f80b 	bl	8007838 <_malloc_r>
 8009822:	4606      	mov	r6, r0
 8009824:	b928      	cbnz	r0, 8009832 <_calloc_r+0x1e>
 8009826:	2600      	movs	r6, #0
 8009828:	4630      	mov	r0, r6
 800982a:	bd70      	pop	{r4, r5, r6, pc}
 800982c:	220c      	movs	r2, #12
 800982e:	6002      	str	r2, [r0, #0]
 8009830:	e7f9      	b.n	8009826 <_calloc_r+0x12>
 8009832:	462a      	mov	r2, r5
 8009834:	4621      	mov	r1, r4
 8009836:	f7fd f853 	bl	80068e0 <memset>
 800983a:	e7f5      	b.n	8009828 <_calloc_r+0x14>

0800983c <rshift>:
 800983c:	6903      	ldr	r3, [r0, #16]
 800983e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009842:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009846:	ea4f 1261 	mov.w	r2, r1, asr #5
 800984a:	f100 0414 	add.w	r4, r0, #20
 800984e:	dd45      	ble.n	80098dc <rshift+0xa0>
 8009850:	f011 011f 	ands.w	r1, r1, #31
 8009854:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009858:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800985c:	d10c      	bne.n	8009878 <rshift+0x3c>
 800985e:	f100 0710 	add.w	r7, r0, #16
 8009862:	4629      	mov	r1, r5
 8009864:	42b1      	cmp	r1, r6
 8009866:	d334      	bcc.n	80098d2 <rshift+0x96>
 8009868:	1a9b      	subs	r3, r3, r2
 800986a:	009b      	lsls	r3, r3, #2
 800986c:	1eea      	subs	r2, r5, #3
 800986e:	4296      	cmp	r6, r2
 8009870:	bf38      	it	cc
 8009872:	2300      	movcc	r3, #0
 8009874:	4423      	add	r3, r4
 8009876:	e015      	b.n	80098a4 <rshift+0x68>
 8009878:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800987c:	f1c1 0820 	rsb	r8, r1, #32
 8009880:	40cf      	lsrs	r7, r1
 8009882:	f105 0e04 	add.w	lr, r5, #4
 8009886:	46a1      	mov	r9, r4
 8009888:	4576      	cmp	r6, lr
 800988a:	46f4      	mov	ip, lr
 800988c:	d815      	bhi.n	80098ba <rshift+0x7e>
 800988e:	1a9a      	subs	r2, r3, r2
 8009890:	0092      	lsls	r2, r2, #2
 8009892:	3a04      	subs	r2, #4
 8009894:	3501      	adds	r5, #1
 8009896:	42ae      	cmp	r6, r5
 8009898:	bf38      	it	cc
 800989a:	2200      	movcc	r2, #0
 800989c:	18a3      	adds	r3, r4, r2
 800989e:	50a7      	str	r7, [r4, r2]
 80098a0:	b107      	cbz	r7, 80098a4 <rshift+0x68>
 80098a2:	3304      	adds	r3, #4
 80098a4:	1b1a      	subs	r2, r3, r4
 80098a6:	42a3      	cmp	r3, r4
 80098a8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80098ac:	bf08      	it	eq
 80098ae:	2300      	moveq	r3, #0
 80098b0:	6102      	str	r2, [r0, #16]
 80098b2:	bf08      	it	eq
 80098b4:	6143      	streq	r3, [r0, #20]
 80098b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098ba:	f8dc c000 	ldr.w	ip, [ip]
 80098be:	fa0c fc08 	lsl.w	ip, ip, r8
 80098c2:	ea4c 0707 	orr.w	r7, ip, r7
 80098c6:	f849 7b04 	str.w	r7, [r9], #4
 80098ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 80098ce:	40cf      	lsrs	r7, r1
 80098d0:	e7da      	b.n	8009888 <rshift+0x4c>
 80098d2:	f851 cb04 	ldr.w	ip, [r1], #4
 80098d6:	f847 cf04 	str.w	ip, [r7, #4]!
 80098da:	e7c3      	b.n	8009864 <rshift+0x28>
 80098dc:	4623      	mov	r3, r4
 80098de:	e7e1      	b.n	80098a4 <rshift+0x68>

080098e0 <__hexdig_fun>:
 80098e0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80098e4:	2b09      	cmp	r3, #9
 80098e6:	d802      	bhi.n	80098ee <__hexdig_fun+0xe>
 80098e8:	3820      	subs	r0, #32
 80098ea:	b2c0      	uxtb	r0, r0
 80098ec:	4770      	bx	lr
 80098ee:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80098f2:	2b05      	cmp	r3, #5
 80098f4:	d801      	bhi.n	80098fa <__hexdig_fun+0x1a>
 80098f6:	3847      	subs	r0, #71	@ 0x47
 80098f8:	e7f7      	b.n	80098ea <__hexdig_fun+0xa>
 80098fa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80098fe:	2b05      	cmp	r3, #5
 8009900:	d801      	bhi.n	8009906 <__hexdig_fun+0x26>
 8009902:	3827      	subs	r0, #39	@ 0x27
 8009904:	e7f1      	b.n	80098ea <__hexdig_fun+0xa>
 8009906:	2000      	movs	r0, #0
 8009908:	4770      	bx	lr
	...

0800990c <__gethex>:
 800990c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009910:	b085      	sub	sp, #20
 8009912:	468a      	mov	sl, r1
 8009914:	9302      	str	r3, [sp, #8]
 8009916:	680b      	ldr	r3, [r1, #0]
 8009918:	9001      	str	r0, [sp, #4]
 800991a:	4690      	mov	r8, r2
 800991c:	1c9c      	adds	r4, r3, #2
 800991e:	46a1      	mov	r9, r4
 8009920:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009924:	2830      	cmp	r0, #48	@ 0x30
 8009926:	d0fa      	beq.n	800991e <__gethex+0x12>
 8009928:	eba9 0303 	sub.w	r3, r9, r3
 800992c:	f1a3 0b02 	sub.w	fp, r3, #2
 8009930:	f7ff ffd6 	bl	80098e0 <__hexdig_fun>
 8009934:	4605      	mov	r5, r0
 8009936:	2800      	cmp	r0, #0
 8009938:	d168      	bne.n	8009a0c <__gethex+0x100>
 800993a:	49a0      	ldr	r1, [pc, #640]	@ (8009bbc <__gethex+0x2b0>)
 800993c:	2201      	movs	r2, #1
 800993e:	4648      	mov	r0, r9
 8009940:	f7ff fefe 	bl	8009740 <strncmp>
 8009944:	4607      	mov	r7, r0
 8009946:	2800      	cmp	r0, #0
 8009948:	d167      	bne.n	8009a1a <__gethex+0x10e>
 800994a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800994e:	4626      	mov	r6, r4
 8009950:	f7ff ffc6 	bl	80098e0 <__hexdig_fun>
 8009954:	2800      	cmp	r0, #0
 8009956:	d062      	beq.n	8009a1e <__gethex+0x112>
 8009958:	4623      	mov	r3, r4
 800995a:	7818      	ldrb	r0, [r3, #0]
 800995c:	2830      	cmp	r0, #48	@ 0x30
 800995e:	4699      	mov	r9, r3
 8009960:	f103 0301 	add.w	r3, r3, #1
 8009964:	d0f9      	beq.n	800995a <__gethex+0x4e>
 8009966:	f7ff ffbb 	bl	80098e0 <__hexdig_fun>
 800996a:	fab0 f580 	clz	r5, r0
 800996e:	096d      	lsrs	r5, r5, #5
 8009970:	f04f 0b01 	mov.w	fp, #1
 8009974:	464a      	mov	r2, r9
 8009976:	4616      	mov	r6, r2
 8009978:	3201      	adds	r2, #1
 800997a:	7830      	ldrb	r0, [r6, #0]
 800997c:	f7ff ffb0 	bl	80098e0 <__hexdig_fun>
 8009980:	2800      	cmp	r0, #0
 8009982:	d1f8      	bne.n	8009976 <__gethex+0x6a>
 8009984:	498d      	ldr	r1, [pc, #564]	@ (8009bbc <__gethex+0x2b0>)
 8009986:	2201      	movs	r2, #1
 8009988:	4630      	mov	r0, r6
 800998a:	f7ff fed9 	bl	8009740 <strncmp>
 800998e:	2800      	cmp	r0, #0
 8009990:	d13f      	bne.n	8009a12 <__gethex+0x106>
 8009992:	b944      	cbnz	r4, 80099a6 <__gethex+0x9a>
 8009994:	1c74      	adds	r4, r6, #1
 8009996:	4622      	mov	r2, r4
 8009998:	4616      	mov	r6, r2
 800999a:	3201      	adds	r2, #1
 800999c:	7830      	ldrb	r0, [r6, #0]
 800999e:	f7ff ff9f 	bl	80098e0 <__hexdig_fun>
 80099a2:	2800      	cmp	r0, #0
 80099a4:	d1f8      	bne.n	8009998 <__gethex+0x8c>
 80099a6:	1ba4      	subs	r4, r4, r6
 80099a8:	00a7      	lsls	r7, r4, #2
 80099aa:	7833      	ldrb	r3, [r6, #0]
 80099ac:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80099b0:	2b50      	cmp	r3, #80	@ 0x50
 80099b2:	d13e      	bne.n	8009a32 <__gethex+0x126>
 80099b4:	7873      	ldrb	r3, [r6, #1]
 80099b6:	2b2b      	cmp	r3, #43	@ 0x2b
 80099b8:	d033      	beq.n	8009a22 <__gethex+0x116>
 80099ba:	2b2d      	cmp	r3, #45	@ 0x2d
 80099bc:	d034      	beq.n	8009a28 <__gethex+0x11c>
 80099be:	1c71      	adds	r1, r6, #1
 80099c0:	2400      	movs	r4, #0
 80099c2:	7808      	ldrb	r0, [r1, #0]
 80099c4:	f7ff ff8c 	bl	80098e0 <__hexdig_fun>
 80099c8:	1e43      	subs	r3, r0, #1
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	2b18      	cmp	r3, #24
 80099ce:	d830      	bhi.n	8009a32 <__gethex+0x126>
 80099d0:	f1a0 0210 	sub.w	r2, r0, #16
 80099d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80099d8:	f7ff ff82 	bl	80098e0 <__hexdig_fun>
 80099dc:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 80099e0:	fa5f fc8c 	uxtb.w	ip, ip
 80099e4:	f1bc 0f18 	cmp.w	ip, #24
 80099e8:	f04f 030a 	mov.w	r3, #10
 80099ec:	d91e      	bls.n	8009a2c <__gethex+0x120>
 80099ee:	b104      	cbz	r4, 80099f2 <__gethex+0xe6>
 80099f0:	4252      	negs	r2, r2
 80099f2:	4417      	add	r7, r2
 80099f4:	f8ca 1000 	str.w	r1, [sl]
 80099f8:	b1ed      	cbz	r5, 8009a36 <__gethex+0x12a>
 80099fa:	f1bb 0f00 	cmp.w	fp, #0
 80099fe:	bf0c      	ite	eq
 8009a00:	2506      	moveq	r5, #6
 8009a02:	2500      	movne	r5, #0
 8009a04:	4628      	mov	r0, r5
 8009a06:	b005      	add	sp, #20
 8009a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a0c:	2500      	movs	r5, #0
 8009a0e:	462c      	mov	r4, r5
 8009a10:	e7b0      	b.n	8009974 <__gethex+0x68>
 8009a12:	2c00      	cmp	r4, #0
 8009a14:	d1c7      	bne.n	80099a6 <__gethex+0x9a>
 8009a16:	4627      	mov	r7, r4
 8009a18:	e7c7      	b.n	80099aa <__gethex+0x9e>
 8009a1a:	464e      	mov	r6, r9
 8009a1c:	462f      	mov	r7, r5
 8009a1e:	2501      	movs	r5, #1
 8009a20:	e7c3      	b.n	80099aa <__gethex+0x9e>
 8009a22:	2400      	movs	r4, #0
 8009a24:	1cb1      	adds	r1, r6, #2
 8009a26:	e7cc      	b.n	80099c2 <__gethex+0xb6>
 8009a28:	2401      	movs	r4, #1
 8009a2a:	e7fb      	b.n	8009a24 <__gethex+0x118>
 8009a2c:	fb03 0002 	mla	r0, r3, r2, r0
 8009a30:	e7ce      	b.n	80099d0 <__gethex+0xc4>
 8009a32:	4631      	mov	r1, r6
 8009a34:	e7de      	b.n	80099f4 <__gethex+0xe8>
 8009a36:	eba6 0309 	sub.w	r3, r6, r9
 8009a3a:	3b01      	subs	r3, #1
 8009a3c:	4629      	mov	r1, r5
 8009a3e:	2b07      	cmp	r3, #7
 8009a40:	dc0a      	bgt.n	8009a58 <__gethex+0x14c>
 8009a42:	9801      	ldr	r0, [sp, #4]
 8009a44:	f7fd ff84 	bl	8007950 <_Balloc>
 8009a48:	4604      	mov	r4, r0
 8009a4a:	b940      	cbnz	r0, 8009a5e <__gethex+0x152>
 8009a4c:	4b5c      	ldr	r3, [pc, #368]	@ (8009bc0 <__gethex+0x2b4>)
 8009a4e:	4602      	mov	r2, r0
 8009a50:	21e4      	movs	r1, #228	@ 0xe4
 8009a52:	485c      	ldr	r0, [pc, #368]	@ (8009bc4 <__gethex+0x2b8>)
 8009a54:	f7ff fec0 	bl	80097d8 <__assert_func>
 8009a58:	3101      	adds	r1, #1
 8009a5a:	105b      	asrs	r3, r3, #1
 8009a5c:	e7ef      	b.n	8009a3e <__gethex+0x132>
 8009a5e:	f100 0a14 	add.w	sl, r0, #20
 8009a62:	2300      	movs	r3, #0
 8009a64:	4655      	mov	r5, sl
 8009a66:	469b      	mov	fp, r3
 8009a68:	45b1      	cmp	r9, r6
 8009a6a:	d337      	bcc.n	8009adc <__gethex+0x1d0>
 8009a6c:	f845 bb04 	str.w	fp, [r5], #4
 8009a70:	eba5 050a 	sub.w	r5, r5, sl
 8009a74:	10ad      	asrs	r5, r5, #2
 8009a76:	6125      	str	r5, [r4, #16]
 8009a78:	4658      	mov	r0, fp
 8009a7a:	f7fe f85b 	bl	8007b34 <__hi0bits>
 8009a7e:	016d      	lsls	r5, r5, #5
 8009a80:	f8d8 6000 	ldr.w	r6, [r8]
 8009a84:	1a2d      	subs	r5, r5, r0
 8009a86:	42b5      	cmp	r5, r6
 8009a88:	dd54      	ble.n	8009b34 <__gethex+0x228>
 8009a8a:	1bad      	subs	r5, r5, r6
 8009a8c:	4629      	mov	r1, r5
 8009a8e:	4620      	mov	r0, r4
 8009a90:	f7fe fbef 	bl	8008272 <__any_on>
 8009a94:	4681      	mov	r9, r0
 8009a96:	b178      	cbz	r0, 8009ab8 <__gethex+0x1ac>
 8009a98:	1e6b      	subs	r3, r5, #1
 8009a9a:	1159      	asrs	r1, r3, #5
 8009a9c:	f003 021f 	and.w	r2, r3, #31
 8009aa0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009aa4:	f04f 0901 	mov.w	r9, #1
 8009aa8:	fa09 f202 	lsl.w	r2, r9, r2
 8009aac:	420a      	tst	r2, r1
 8009aae:	d003      	beq.n	8009ab8 <__gethex+0x1ac>
 8009ab0:	454b      	cmp	r3, r9
 8009ab2:	dc36      	bgt.n	8009b22 <__gethex+0x216>
 8009ab4:	f04f 0902 	mov.w	r9, #2
 8009ab8:	4629      	mov	r1, r5
 8009aba:	4620      	mov	r0, r4
 8009abc:	f7ff febe 	bl	800983c <rshift>
 8009ac0:	442f      	add	r7, r5
 8009ac2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009ac6:	42bb      	cmp	r3, r7
 8009ac8:	da42      	bge.n	8009b50 <__gethex+0x244>
 8009aca:	9801      	ldr	r0, [sp, #4]
 8009acc:	4621      	mov	r1, r4
 8009ace:	f7fd ff7f 	bl	80079d0 <_Bfree>
 8009ad2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	6013      	str	r3, [r2, #0]
 8009ad8:	25a3      	movs	r5, #163	@ 0xa3
 8009ada:	e793      	b.n	8009a04 <__gethex+0xf8>
 8009adc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009ae0:	2a2e      	cmp	r2, #46	@ 0x2e
 8009ae2:	d012      	beq.n	8009b0a <__gethex+0x1fe>
 8009ae4:	2b20      	cmp	r3, #32
 8009ae6:	d104      	bne.n	8009af2 <__gethex+0x1e6>
 8009ae8:	f845 bb04 	str.w	fp, [r5], #4
 8009aec:	f04f 0b00 	mov.w	fp, #0
 8009af0:	465b      	mov	r3, fp
 8009af2:	7830      	ldrb	r0, [r6, #0]
 8009af4:	9303      	str	r3, [sp, #12]
 8009af6:	f7ff fef3 	bl	80098e0 <__hexdig_fun>
 8009afa:	9b03      	ldr	r3, [sp, #12]
 8009afc:	f000 000f 	and.w	r0, r0, #15
 8009b00:	4098      	lsls	r0, r3
 8009b02:	ea4b 0b00 	orr.w	fp, fp, r0
 8009b06:	3304      	adds	r3, #4
 8009b08:	e7ae      	b.n	8009a68 <__gethex+0x15c>
 8009b0a:	45b1      	cmp	r9, r6
 8009b0c:	d8ea      	bhi.n	8009ae4 <__gethex+0x1d8>
 8009b0e:	492b      	ldr	r1, [pc, #172]	@ (8009bbc <__gethex+0x2b0>)
 8009b10:	9303      	str	r3, [sp, #12]
 8009b12:	2201      	movs	r2, #1
 8009b14:	4630      	mov	r0, r6
 8009b16:	f7ff fe13 	bl	8009740 <strncmp>
 8009b1a:	9b03      	ldr	r3, [sp, #12]
 8009b1c:	2800      	cmp	r0, #0
 8009b1e:	d1e1      	bne.n	8009ae4 <__gethex+0x1d8>
 8009b20:	e7a2      	b.n	8009a68 <__gethex+0x15c>
 8009b22:	1ea9      	subs	r1, r5, #2
 8009b24:	4620      	mov	r0, r4
 8009b26:	f7fe fba4 	bl	8008272 <__any_on>
 8009b2a:	2800      	cmp	r0, #0
 8009b2c:	d0c2      	beq.n	8009ab4 <__gethex+0x1a8>
 8009b2e:	f04f 0903 	mov.w	r9, #3
 8009b32:	e7c1      	b.n	8009ab8 <__gethex+0x1ac>
 8009b34:	da09      	bge.n	8009b4a <__gethex+0x23e>
 8009b36:	1b75      	subs	r5, r6, r5
 8009b38:	4621      	mov	r1, r4
 8009b3a:	9801      	ldr	r0, [sp, #4]
 8009b3c:	462a      	mov	r2, r5
 8009b3e:	f7fe f95f 	bl	8007e00 <__lshift>
 8009b42:	1b7f      	subs	r7, r7, r5
 8009b44:	4604      	mov	r4, r0
 8009b46:	f100 0a14 	add.w	sl, r0, #20
 8009b4a:	f04f 0900 	mov.w	r9, #0
 8009b4e:	e7b8      	b.n	8009ac2 <__gethex+0x1b6>
 8009b50:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009b54:	42bd      	cmp	r5, r7
 8009b56:	dd6f      	ble.n	8009c38 <__gethex+0x32c>
 8009b58:	1bed      	subs	r5, r5, r7
 8009b5a:	42ae      	cmp	r6, r5
 8009b5c:	dc34      	bgt.n	8009bc8 <__gethex+0x2bc>
 8009b5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009b62:	2b02      	cmp	r3, #2
 8009b64:	d022      	beq.n	8009bac <__gethex+0x2a0>
 8009b66:	2b03      	cmp	r3, #3
 8009b68:	d024      	beq.n	8009bb4 <__gethex+0x2a8>
 8009b6a:	2b01      	cmp	r3, #1
 8009b6c:	d115      	bne.n	8009b9a <__gethex+0x28e>
 8009b6e:	42ae      	cmp	r6, r5
 8009b70:	d113      	bne.n	8009b9a <__gethex+0x28e>
 8009b72:	2e01      	cmp	r6, #1
 8009b74:	d10b      	bne.n	8009b8e <__gethex+0x282>
 8009b76:	9a02      	ldr	r2, [sp, #8]
 8009b78:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009b7c:	6013      	str	r3, [r2, #0]
 8009b7e:	2301      	movs	r3, #1
 8009b80:	6123      	str	r3, [r4, #16]
 8009b82:	f8ca 3000 	str.w	r3, [sl]
 8009b86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b88:	2562      	movs	r5, #98	@ 0x62
 8009b8a:	601c      	str	r4, [r3, #0]
 8009b8c:	e73a      	b.n	8009a04 <__gethex+0xf8>
 8009b8e:	1e71      	subs	r1, r6, #1
 8009b90:	4620      	mov	r0, r4
 8009b92:	f7fe fb6e 	bl	8008272 <__any_on>
 8009b96:	2800      	cmp	r0, #0
 8009b98:	d1ed      	bne.n	8009b76 <__gethex+0x26a>
 8009b9a:	9801      	ldr	r0, [sp, #4]
 8009b9c:	4621      	mov	r1, r4
 8009b9e:	f7fd ff17 	bl	80079d0 <_Bfree>
 8009ba2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	6013      	str	r3, [r2, #0]
 8009ba8:	2550      	movs	r5, #80	@ 0x50
 8009baa:	e72b      	b.n	8009a04 <__gethex+0xf8>
 8009bac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d1f3      	bne.n	8009b9a <__gethex+0x28e>
 8009bb2:	e7e0      	b.n	8009b76 <__gethex+0x26a>
 8009bb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d1dd      	bne.n	8009b76 <__gethex+0x26a>
 8009bba:	e7ee      	b.n	8009b9a <__gethex+0x28e>
 8009bbc:	0800a458 	.word	0x0800a458
 8009bc0:	0800a2f1 	.word	0x0800a2f1
 8009bc4:	0800a606 	.word	0x0800a606
 8009bc8:	1e6f      	subs	r7, r5, #1
 8009bca:	f1b9 0f00 	cmp.w	r9, #0
 8009bce:	d130      	bne.n	8009c32 <__gethex+0x326>
 8009bd0:	b127      	cbz	r7, 8009bdc <__gethex+0x2d0>
 8009bd2:	4639      	mov	r1, r7
 8009bd4:	4620      	mov	r0, r4
 8009bd6:	f7fe fb4c 	bl	8008272 <__any_on>
 8009bda:	4681      	mov	r9, r0
 8009bdc:	117a      	asrs	r2, r7, #5
 8009bde:	2301      	movs	r3, #1
 8009be0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009be4:	f007 071f 	and.w	r7, r7, #31
 8009be8:	40bb      	lsls	r3, r7
 8009bea:	4213      	tst	r3, r2
 8009bec:	4629      	mov	r1, r5
 8009bee:	4620      	mov	r0, r4
 8009bf0:	bf18      	it	ne
 8009bf2:	f049 0902 	orrne.w	r9, r9, #2
 8009bf6:	f7ff fe21 	bl	800983c <rshift>
 8009bfa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009bfe:	1b76      	subs	r6, r6, r5
 8009c00:	2502      	movs	r5, #2
 8009c02:	f1b9 0f00 	cmp.w	r9, #0
 8009c06:	d047      	beq.n	8009c98 <__gethex+0x38c>
 8009c08:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009c0c:	2b02      	cmp	r3, #2
 8009c0e:	d015      	beq.n	8009c3c <__gethex+0x330>
 8009c10:	2b03      	cmp	r3, #3
 8009c12:	d017      	beq.n	8009c44 <__gethex+0x338>
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d109      	bne.n	8009c2c <__gethex+0x320>
 8009c18:	f019 0f02 	tst.w	r9, #2
 8009c1c:	d006      	beq.n	8009c2c <__gethex+0x320>
 8009c1e:	f8da 3000 	ldr.w	r3, [sl]
 8009c22:	ea49 0903 	orr.w	r9, r9, r3
 8009c26:	f019 0f01 	tst.w	r9, #1
 8009c2a:	d10e      	bne.n	8009c4a <__gethex+0x33e>
 8009c2c:	f045 0510 	orr.w	r5, r5, #16
 8009c30:	e032      	b.n	8009c98 <__gethex+0x38c>
 8009c32:	f04f 0901 	mov.w	r9, #1
 8009c36:	e7d1      	b.n	8009bdc <__gethex+0x2d0>
 8009c38:	2501      	movs	r5, #1
 8009c3a:	e7e2      	b.n	8009c02 <__gethex+0x2f6>
 8009c3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c3e:	f1c3 0301 	rsb	r3, r3, #1
 8009c42:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009c44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d0f0      	beq.n	8009c2c <__gethex+0x320>
 8009c4a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009c4e:	f104 0314 	add.w	r3, r4, #20
 8009c52:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009c56:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009c5a:	f04f 0c00 	mov.w	ip, #0
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c64:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8009c68:	d01b      	beq.n	8009ca2 <__gethex+0x396>
 8009c6a:	3201      	adds	r2, #1
 8009c6c:	6002      	str	r2, [r0, #0]
 8009c6e:	2d02      	cmp	r5, #2
 8009c70:	f104 0314 	add.w	r3, r4, #20
 8009c74:	d13c      	bne.n	8009cf0 <__gethex+0x3e4>
 8009c76:	f8d8 2000 	ldr.w	r2, [r8]
 8009c7a:	3a01      	subs	r2, #1
 8009c7c:	42b2      	cmp	r2, r6
 8009c7e:	d109      	bne.n	8009c94 <__gethex+0x388>
 8009c80:	1171      	asrs	r1, r6, #5
 8009c82:	2201      	movs	r2, #1
 8009c84:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009c88:	f006 061f 	and.w	r6, r6, #31
 8009c8c:	fa02 f606 	lsl.w	r6, r2, r6
 8009c90:	421e      	tst	r6, r3
 8009c92:	d13a      	bne.n	8009d0a <__gethex+0x3fe>
 8009c94:	f045 0520 	orr.w	r5, r5, #32
 8009c98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c9a:	601c      	str	r4, [r3, #0]
 8009c9c:	9b02      	ldr	r3, [sp, #8]
 8009c9e:	601f      	str	r7, [r3, #0]
 8009ca0:	e6b0      	b.n	8009a04 <__gethex+0xf8>
 8009ca2:	4299      	cmp	r1, r3
 8009ca4:	f843 cc04 	str.w	ip, [r3, #-4]
 8009ca8:	d8d9      	bhi.n	8009c5e <__gethex+0x352>
 8009caa:	68a3      	ldr	r3, [r4, #8]
 8009cac:	459b      	cmp	fp, r3
 8009cae:	db17      	blt.n	8009ce0 <__gethex+0x3d4>
 8009cb0:	6861      	ldr	r1, [r4, #4]
 8009cb2:	9801      	ldr	r0, [sp, #4]
 8009cb4:	3101      	adds	r1, #1
 8009cb6:	f7fd fe4b 	bl	8007950 <_Balloc>
 8009cba:	4681      	mov	r9, r0
 8009cbc:	b918      	cbnz	r0, 8009cc6 <__gethex+0x3ba>
 8009cbe:	4b1a      	ldr	r3, [pc, #104]	@ (8009d28 <__gethex+0x41c>)
 8009cc0:	4602      	mov	r2, r0
 8009cc2:	2184      	movs	r1, #132	@ 0x84
 8009cc4:	e6c5      	b.n	8009a52 <__gethex+0x146>
 8009cc6:	6922      	ldr	r2, [r4, #16]
 8009cc8:	3202      	adds	r2, #2
 8009cca:	f104 010c 	add.w	r1, r4, #12
 8009cce:	0092      	lsls	r2, r2, #2
 8009cd0:	300c      	adds	r0, #12
 8009cd2:	f7fc feda 	bl	8006a8a <memcpy>
 8009cd6:	4621      	mov	r1, r4
 8009cd8:	9801      	ldr	r0, [sp, #4]
 8009cda:	f7fd fe79 	bl	80079d0 <_Bfree>
 8009cde:	464c      	mov	r4, r9
 8009ce0:	6923      	ldr	r3, [r4, #16]
 8009ce2:	1c5a      	adds	r2, r3, #1
 8009ce4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009ce8:	6122      	str	r2, [r4, #16]
 8009cea:	2201      	movs	r2, #1
 8009cec:	615a      	str	r2, [r3, #20]
 8009cee:	e7be      	b.n	8009c6e <__gethex+0x362>
 8009cf0:	6922      	ldr	r2, [r4, #16]
 8009cf2:	455a      	cmp	r2, fp
 8009cf4:	dd0b      	ble.n	8009d0e <__gethex+0x402>
 8009cf6:	2101      	movs	r1, #1
 8009cf8:	4620      	mov	r0, r4
 8009cfa:	f7ff fd9f 	bl	800983c <rshift>
 8009cfe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009d02:	3701      	adds	r7, #1
 8009d04:	42bb      	cmp	r3, r7
 8009d06:	f6ff aee0 	blt.w	8009aca <__gethex+0x1be>
 8009d0a:	2501      	movs	r5, #1
 8009d0c:	e7c2      	b.n	8009c94 <__gethex+0x388>
 8009d0e:	f016 061f 	ands.w	r6, r6, #31
 8009d12:	d0fa      	beq.n	8009d0a <__gethex+0x3fe>
 8009d14:	4453      	add	r3, sl
 8009d16:	f1c6 0620 	rsb	r6, r6, #32
 8009d1a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009d1e:	f7fd ff09 	bl	8007b34 <__hi0bits>
 8009d22:	42b0      	cmp	r0, r6
 8009d24:	dbe7      	blt.n	8009cf6 <__gethex+0x3ea>
 8009d26:	e7f0      	b.n	8009d0a <__gethex+0x3fe>
 8009d28:	0800a2f1 	.word	0x0800a2f1

08009d2c <L_shift>:
 8009d2c:	f1c2 0208 	rsb	r2, r2, #8
 8009d30:	0092      	lsls	r2, r2, #2
 8009d32:	b570      	push	{r4, r5, r6, lr}
 8009d34:	f1c2 0620 	rsb	r6, r2, #32
 8009d38:	6843      	ldr	r3, [r0, #4]
 8009d3a:	6804      	ldr	r4, [r0, #0]
 8009d3c:	fa03 f506 	lsl.w	r5, r3, r6
 8009d40:	432c      	orrs	r4, r5
 8009d42:	40d3      	lsrs	r3, r2
 8009d44:	6004      	str	r4, [r0, #0]
 8009d46:	f840 3f04 	str.w	r3, [r0, #4]!
 8009d4a:	4288      	cmp	r0, r1
 8009d4c:	d3f4      	bcc.n	8009d38 <L_shift+0xc>
 8009d4e:	bd70      	pop	{r4, r5, r6, pc}

08009d50 <__match>:
 8009d50:	b530      	push	{r4, r5, lr}
 8009d52:	6803      	ldr	r3, [r0, #0]
 8009d54:	3301      	adds	r3, #1
 8009d56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d5a:	b914      	cbnz	r4, 8009d62 <__match+0x12>
 8009d5c:	6003      	str	r3, [r0, #0]
 8009d5e:	2001      	movs	r0, #1
 8009d60:	bd30      	pop	{r4, r5, pc}
 8009d62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d66:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009d6a:	2d19      	cmp	r5, #25
 8009d6c:	bf98      	it	ls
 8009d6e:	3220      	addls	r2, #32
 8009d70:	42a2      	cmp	r2, r4
 8009d72:	d0f0      	beq.n	8009d56 <__match+0x6>
 8009d74:	2000      	movs	r0, #0
 8009d76:	e7f3      	b.n	8009d60 <__match+0x10>

08009d78 <__hexnan>:
 8009d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d7c:	680b      	ldr	r3, [r1, #0]
 8009d7e:	6801      	ldr	r1, [r0, #0]
 8009d80:	115e      	asrs	r6, r3, #5
 8009d82:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009d86:	f013 031f 	ands.w	r3, r3, #31
 8009d8a:	b087      	sub	sp, #28
 8009d8c:	bf18      	it	ne
 8009d8e:	3604      	addne	r6, #4
 8009d90:	2500      	movs	r5, #0
 8009d92:	1f37      	subs	r7, r6, #4
 8009d94:	4682      	mov	sl, r0
 8009d96:	4690      	mov	r8, r2
 8009d98:	9301      	str	r3, [sp, #4]
 8009d9a:	f846 5c04 	str.w	r5, [r6, #-4]
 8009d9e:	46b9      	mov	r9, r7
 8009da0:	463c      	mov	r4, r7
 8009da2:	9502      	str	r5, [sp, #8]
 8009da4:	46ab      	mov	fp, r5
 8009da6:	784a      	ldrb	r2, [r1, #1]
 8009da8:	1c4b      	adds	r3, r1, #1
 8009daa:	9303      	str	r3, [sp, #12]
 8009dac:	b342      	cbz	r2, 8009e00 <__hexnan+0x88>
 8009dae:	4610      	mov	r0, r2
 8009db0:	9105      	str	r1, [sp, #20]
 8009db2:	9204      	str	r2, [sp, #16]
 8009db4:	f7ff fd94 	bl	80098e0 <__hexdig_fun>
 8009db8:	2800      	cmp	r0, #0
 8009dba:	d151      	bne.n	8009e60 <__hexnan+0xe8>
 8009dbc:	9a04      	ldr	r2, [sp, #16]
 8009dbe:	9905      	ldr	r1, [sp, #20]
 8009dc0:	2a20      	cmp	r2, #32
 8009dc2:	d818      	bhi.n	8009df6 <__hexnan+0x7e>
 8009dc4:	9b02      	ldr	r3, [sp, #8]
 8009dc6:	459b      	cmp	fp, r3
 8009dc8:	dd13      	ble.n	8009df2 <__hexnan+0x7a>
 8009dca:	454c      	cmp	r4, r9
 8009dcc:	d206      	bcs.n	8009ddc <__hexnan+0x64>
 8009dce:	2d07      	cmp	r5, #7
 8009dd0:	dc04      	bgt.n	8009ddc <__hexnan+0x64>
 8009dd2:	462a      	mov	r2, r5
 8009dd4:	4649      	mov	r1, r9
 8009dd6:	4620      	mov	r0, r4
 8009dd8:	f7ff ffa8 	bl	8009d2c <L_shift>
 8009ddc:	4544      	cmp	r4, r8
 8009dde:	d952      	bls.n	8009e86 <__hexnan+0x10e>
 8009de0:	2300      	movs	r3, #0
 8009de2:	f1a4 0904 	sub.w	r9, r4, #4
 8009de6:	f844 3c04 	str.w	r3, [r4, #-4]
 8009dea:	f8cd b008 	str.w	fp, [sp, #8]
 8009dee:	464c      	mov	r4, r9
 8009df0:	461d      	mov	r5, r3
 8009df2:	9903      	ldr	r1, [sp, #12]
 8009df4:	e7d7      	b.n	8009da6 <__hexnan+0x2e>
 8009df6:	2a29      	cmp	r2, #41	@ 0x29
 8009df8:	d157      	bne.n	8009eaa <__hexnan+0x132>
 8009dfa:	3102      	adds	r1, #2
 8009dfc:	f8ca 1000 	str.w	r1, [sl]
 8009e00:	f1bb 0f00 	cmp.w	fp, #0
 8009e04:	d051      	beq.n	8009eaa <__hexnan+0x132>
 8009e06:	454c      	cmp	r4, r9
 8009e08:	d206      	bcs.n	8009e18 <__hexnan+0xa0>
 8009e0a:	2d07      	cmp	r5, #7
 8009e0c:	dc04      	bgt.n	8009e18 <__hexnan+0xa0>
 8009e0e:	462a      	mov	r2, r5
 8009e10:	4649      	mov	r1, r9
 8009e12:	4620      	mov	r0, r4
 8009e14:	f7ff ff8a 	bl	8009d2c <L_shift>
 8009e18:	4544      	cmp	r4, r8
 8009e1a:	d936      	bls.n	8009e8a <__hexnan+0x112>
 8009e1c:	f1a8 0204 	sub.w	r2, r8, #4
 8009e20:	4623      	mov	r3, r4
 8009e22:	f853 1b04 	ldr.w	r1, [r3], #4
 8009e26:	f842 1f04 	str.w	r1, [r2, #4]!
 8009e2a:	429f      	cmp	r7, r3
 8009e2c:	d2f9      	bcs.n	8009e22 <__hexnan+0xaa>
 8009e2e:	1b3b      	subs	r3, r7, r4
 8009e30:	f023 0303 	bic.w	r3, r3, #3
 8009e34:	3304      	adds	r3, #4
 8009e36:	3401      	adds	r4, #1
 8009e38:	3e03      	subs	r6, #3
 8009e3a:	42b4      	cmp	r4, r6
 8009e3c:	bf88      	it	hi
 8009e3e:	2304      	movhi	r3, #4
 8009e40:	4443      	add	r3, r8
 8009e42:	2200      	movs	r2, #0
 8009e44:	f843 2b04 	str.w	r2, [r3], #4
 8009e48:	429f      	cmp	r7, r3
 8009e4a:	d2fb      	bcs.n	8009e44 <__hexnan+0xcc>
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	b91b      	cbnz	r3, 8009e58 <__hexnan+0xe0>
 8009e50:	4547      	cmp	r7, r8
 8009e52:	d128      	bne.n	8009ea6 <__hexnan+0x12e>
 8009e54:	2301      	movs	r3, #1
 8009e56:	603b      	str	r3, [r7, #0]
 8009e58:	2005      	movs	r0, #5
 8009e5a:	b007      	add	sp, #28
 8009e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e60:	3501      	adds	r5, #1
 8009e62:	2d08      	cmp	r5, #8
 8009e64:	f10b 0b01 	add.w	fp, fp, #1
 8009e68:	dd06      	ble.n	8009e78 <__hexnan+0x100>
 8009e6a:	4544      	cmp	r4, r8
 8009e6c:	d9c1      	bls.n	8009df2 <__hexnan+0x7a>
 8009e6e:	2300      	movs	r3, #0
 8009e70:	f844 3c04 	str.w	r3, [r4, #-4]
 8009e74:	2501      	movs	r5, #1
 8009e76:	3c04      	subs	r4, #4
 8009e78:	6822      	ldr	r2, [r4, #0]
 8009e7a:	f000 000f 	and.w	r0, r0, #15
 8009e7e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009e82:	6020      	str	r0, [r4, #0]
 8009e84:	e7b5      	b.n	8009df2 <__hexnan+0x7a>
 8009e86:	2508      	movs	r5, #8
 8009e88:	e7b3      	b.n	8009df2 <__hexnan+0x7a>
 8009e8a:	9b01      	ldr	r3, [sp, #4]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d0dd      	beq.n	8009e4c <__hexnan+0xd4>
 8009e90:	f1c3 0320 	rsb	r3, r3, #32
 8009e94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009e98:	40da      	lsrs	r2, r3
 8009e9a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009e9e:	4013      	ands	r3, r2
 8009ea0:	f846 3c04 	str.w	r3, [r6, #-4]
 8009ea4:	e7d2      	b.n	8009e4c <__hexnan+0xd4>
 8009ea6:	3f04      	subs	r7, #4
 8009ea8:	e7d0      	b.n	8009e4c <__hexnan+0xd4>
 8009eaa:	2004      	movs	r0, #4
 8009eac:	e7d5      	b.n	8009e5a <__hexnan+0xe2>

08009eae <__ascii_mbtowc>:
 8009eae:	b082      	sub	sp, #8
 8009eb0:	b901      	cbnz	r1, 8009eb4 <__ascii_mbtowc+0x6>
 8009eb2:	a901      	add	r1, sp, #4
 8009eb4:	b142      	cbz	r2, 8009ec8 <__ascii_mbtowc+0x1a>
 8009eb6:	b14b      	cbz	r3, 8009ecc <__ascii_mbtowc+0x1e>
 8009eb8:	7813      	ldrb	r3, [r2, #0]
 8009eba:	600b      	str	r3, [r1, #0]
 8009ebc:	7812      	ldrb	r2, [r2, #0]
 8009ebe:	1e10      	subs	r0, r2, #0
 8009ec0:	bf18      	it	ne
 8009ec2:	2001      	movne	r0, #1
 8009ec4:	b002      	add	sp, #8
 8009ec6:	4770      	bx	lr
 8009ec8:	4610      	mov	r0, r2
 8009eca:	e7fb      	b.n	8009ec4 <__ascii_mbtowc+0x16>
 8009ecc:	f06f 0001 	mvn.w	r0, #1
 8009ed0:	e7f8      	b.n	8009ec4 <__ascii_mbtowc+0x16>

08009ed2 <_realloc_r>:
 8009ed2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ed6:	4680      	mov	r8, r0
 8009ed8:	4615      	mov	r5, r2
 8009eda:	460c      	mov	r4, r1
 8009edc:	b921      	cbnz	r1, 8009ee8 <_realloc_r+0x16>
 8009ede:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ee2:	4611      	mov	r1, r2
 8009ee4:	f7fd bca8 	b.w	8007838 <_malloc_r>
 8009ee8:	b92a      	cbnz	r2, 8009ef6 <_realloc_r+0x24>
 8009eea:	f7fd fc31 	bl	8007750 <_free_r>
 8009eee:	2400      	movs	r4, #0
 8009ef0:	4620      	mov	r0, r4
 8009ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ef6:	f000 f840 	bl	8009f7a <_malloc_usable_size_r>
 8009efa:	4285      	cmp	r5, r0
 8009efc:	4606      	mov	r6, r0
 8009efe:	d802      	bhi.n	8009f06 <_realloc_r+0x34>
 8009f00:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009f04:	d8f4      	bhi.n	8009ef0 <_realloc_r+0x1e>
 8009f06:	4629      	mov	r1, r5
 8009f08:	4640      	mov	r0, r8
 8009f0a:	f7fd fc95 	bl	8007838 <_malloc_r>
 8009f0e:	4607      	mov	r7, r0
 8009f10:	2800      	cmp	r0, #0
 8009f12:	d0ec      	beq.n	8009eee <_realloc_r+0x1c>
 8009f14:	42b5      	cmp	r5, r6
 8009f16:	462a      	mov	r2, r5
 8009f18:	4621      	mov	r1, r4
 8009f1a:	bf28      	it	cs
 8009f1c:	4632      	movcs	r2, r6
 8009f1e:	f7fc fdb4 	bl	8006a8a <memcpy>
 8009f22:	4621      	mov	r1, r4
 8009f24:	4640      	mov	r0, r8
 8009f26:	f7fd fc13 	bl	8007750 <_free_r>
 8009f2a:	463c      	mov	r4, r7
 8009f2c:	e7e0      	b.n	8009ef0 <_realloc_r+0x1e>

08009f2e <__ascii_wctomb>:
 8009f2e:	4603      	mov	r3, r0
 8009f30:	4608      	mov	r0, r1
 8009f32:	b141      	cbz	r1, 8009f46 <__ascii_wctomb+0x18>
 8009f34:	2aff      	cmp	r2, #255	@ 0xff
 8009f36:	d904      	bls.n	8009f42 <__ascii_wctomb+0x14>
 8009f38:	228a      	movs	r2, #138	@ 0x8a
 8009f3a:	601a      	str	r2, [r3, #0]
 8009f3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009f40:	4770      	bx	lr
 8009f42:	700a      	strb	r2, [r1, #0]
 8009f44:	2001      	movs	r0, #1
 8009f46:	4770      	bx	lr

08009f48 <fiprintf>:
 8009f48:	b40e      	push	{r1, r2, r3}
 8009f4a:	b503      	push	{r0, r1, lr}
 8009f4c:	4601      	mov	r1, r0
 8009f4e:	ab03      	add	r3, sp, #12
 8009f50:	4805      	ldr	r0, [pc, #20]	@ (8009f68 <fiprintf+0x20>)
 8009f52:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f56:	6800      	ldr	r0, [r0, #0]
 8009f58:	9301      	str	r3, [sp, #4]
 8009f5a:	f7ff f9b1 	bl	80092c0 <_vfiprintf_r>
 8009f5e:	b002      	add	sp, #8
 8009f60:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f64:	b003      	add	sp, #12
 8009f66:	4770      	bx	lr
 8009f68:	20000020 	.word	0x20000020

08009f6c <abort>:
 8009f6c:	b508      	push	{r3, lr}
 8009f6e:	2006      	movs	r0, #6
 8009f70:	f000 f834 	bl	8009fdc <raise>
 8009f74:	2001      	movs	r0, #1
 8009f76:	f7f7 faf5 	bl	8001564 <_exit>

08009f7a <_malloc_usable_size_r>:
 8009f7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f7e:	1f18      	subs	r0, r3, #4
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	bfbc      	itt	lt
 8009f84:	580b      	ldrlt	r3, [r1, r0]
 8009f86:	18c0      	addlt	r0, r0, r3
 8009f88:	4770      	bx	lr

08009f8a <_raise_r>:
 8009f8a:	291f      	cmp	r1, #31
 8009f8c:	b538      	push	{r3, r4, r5, lr}
 8009f8e:	4605      	mov	r5, r0
 8009f90:	460c      	mov	r4, r1
 8009f92:	d904      	bls.n	8009f9e <_raise_r+0x14>
 8009f94:	2316      	movs	r3, #22
 8009f96:	6003      	str	r3, [r0, #0]
 8009f98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009f9c:	bd38      	pop	{r3, r4, r5, pc}
 8009f9e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009fa0:	b112      	cbz	r2, 8009fa8 <_raise_r+0x1e>
 8009fa2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009fa6:	b94b      	cbnz	r3, 8009fbc <_raise_r+0x32>
 8009fa8:	4628      	mov	r0, r5
 8009faa:	f000 f831 	bl	800a010 <_getpid_r>
 8009fae:	4622      	mov	r2, r4
 8009fb0:	4601      	mov	r1, r0
 8009fb2:	4628      	mov	r0, r5
 8009fb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fb8:	f000 b818 	b.w	8009fec <_kill_r>
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	d00a      	beq.n	8009fd6 <_raise_r+0x4c>
 8009fc0:	1c59      	adds	r1, r3, #1
 8009fc2:	d103      	bne.n	8009fcc <_raise_r+0x42>
 8009fc4:	2316      	movs	r3, #22
 8009fc6:	6003      	str	r3, [r0, #0]
 8009fc8:	2001      	movs	r0, #1
 8009fca:	e7e7      	b.n	8009f9c <_raise_r+0x12>
 8009fcc:	2100      	movs	r1, #0
 8009fce:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009fd2:	4620      	mov	r0, r4
 8009fd4:	4798      	blx	r3
 8009fd6:	2000      	movs	r0, #0
 8009fd8:	e7e0      	b.n	8009f9c <_raise_r+0x12>
	...

08009fdc <raise>:
 8009fdc:	4b02      	ldr	r3, [pc, #8]	@ (8009fe8 <raise+0xc>)
 8009fde:	4601      	mov	r1, r0
 8009fe0:	6818      	ldr	r0, [r3, #0]
 8009fe2:	f7ff bfd2 	b.w	8009f8a <_raise_r>
 8009fe6:	bf00      	nop
 8009fe8:	20000020 	.word	0x20000020

08009fec <_kill_r>:
 8009fec:	b538      	push	{r3, r4, r5, lr}
 8009fee:	4d07      	ldr	r5, [pc, #28]	@ (800a00c <_kill_r+0x20>)
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	4604      	mov	r4, r0
 8009ff4:	4608      	mov	r0, r1
 8009ff6:	4611      	mov	r1, r2
 8009ff8:	602b      	str	r3, [r5, #0]
 8009ffa:	f7f7 faa3 	bl	8001544 <_kill>
 8009ffe:	1c43      	adds	r3, r0, #1
 800a000:	d102      	bne.n	800a008 <_kill_r+0x1c>
 800a002:	682b      	ldr	r3, [r5, #0]
 800a004:	b103      	cbz	r3, 800a008 <_kill_r+0x1c>
 800a006:	6023      	str	r3, [r4, #0]
 800a008:	bd38      	pop	{r3, r4, r5, pc}
 800a00a:	bf00      	nop
 800a00c:	2000539c 	.word	0x2000539c

0800a010 <_getpid_r>:
 800a010:	f7f7 ba90 	b.w	8001534 <_getpid>

0800a014 <_init>:
 800a014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a016:	bf00      	nop
 800a018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a01a:	bc08      	pop	{r3}
 800a01c:	469e      	mov	lr, r3
 800a01e:	4770      	bx	lr

0800a020 <_fini>:
 800a020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a022:	bf00      	nop
 800a024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a026:	bc08      	pop	{r3}
 800a028:	469e      	mov	lr, r3
 800a02a:	4770      	bx	lr
