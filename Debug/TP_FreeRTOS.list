
TP_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b30  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08005d10  08005d10  00006d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ea0  08005ea0  0000706c  2**0
                  CONTENTS
  4 .ARM          00000008  08005ea0  08005ea0  00006ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ea8  08005ea8  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ea8  08005ea8  00006ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005eac  08005eac  00006eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005eb0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000051cc  2000006c  08005f1c  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005238  08005f1c  00007238  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018a97  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a83  00000000  00000000  0001fb33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001688  00000000  00000000  000235b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000116a  00000000  00000000  00024c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021506  00000000  00000000  00025daa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019949  00000000  00000000  000472b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0681  00000000  00000000  00060bf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013127a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063e8  00000000  00000000  001312c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001376a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005cf8 	.word	0x08005cf8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	08005cf8 	.word	0x08005cf8

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000234:	f000 b96a 	b.w	800050c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	460c      	mov	r4, r1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d14e      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025c:	4694      	mov	ip, r2
 800025e:	458c      	cmp	ip, r1
 8000260:	4686      	mov	lr, r0
 8000262:	fab2 f282 	clz	r2, r2
 8000266:	d962      	bls.n	800032e <__udivmoddi4+0xde>
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0320 	rsb	r3, r2, #32
 800026e:	4091      	lsls	r1, r2
 8000270:	fa20 f303 	lsr.w	r3, r0, r3
 8000274:	fa0c fc02 	lsl.w	ip, ip, r2
 8000278:	4319      	orrs	r1, r3
 800027a:	fa00 fe02 	lsl.w	lr, r0, r2
 800027e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000282:	fa1f f68c 	uxth.w	r6, ip
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800028e:	fb07 1114 	mls	r1, r7, r4, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb04 f106 	mul.w	r1, r4, r6
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002a6:	f080 8112 	bcs.w	80004ce <__udivmoddi4+0x27e>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 810f 	bls.w	80004ce <__udivmoddi4+0x27e>
 80002b0:	3c02      	subs	r4, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a59      	subs	r1, r3, r1
 80002b6:	fa1f f38e 	uxth.w	r3, lr
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb00 f606 	mul.w	r6, r0, r6
 80002ca:	429e      	cmp	r6, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002d6:	f080 80fc 	bcs.w	80004d2 <__udivmoddi4+0x282>
 80002da:	429e      	cmp	r6, r3
 80002dc:	f240 80f9 	bls.w	80004d2 <__udivmoddi4+0x282>
 80002e0:	4463      	add	r3, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	1b9b      	subs	r3, r3, r6
 80002e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ea:	2100      	movs	r1, #0
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa6>
 80002ee:	40d3      	lsrs	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xba>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb4>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa6>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x150>
 8000312:	42a3      	cmp	r3, r4
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xcc>
 8000316:	4290      	cmp	r0, r2
 8000318:	f0c0 80f0 	bcc.w	80004fc <__udivmoddi4+0x2ac>
 800031c:	1a86      	subs	r6, r0, r2
 800031e:	eb64 0303 	sbc.w	r3, r4, r3
 8000322:	2001      	movs	r0, #1
 8000324:	2d00      	cmp	r5, #0
 8000326:	d0e6      	beq.n	80002f6 <__udivmoddi4+0xa6>
 8000328:	e9c5 6300 	strd	r6, r3, [r5]
 800032c:	e7e3      	b.n	80002f6 <__udivmoddi4+0xa6>
 800032e:	2a00      	cmp	r2, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x204>
 8000334:	eba1 040c 	sub.w	r4, r1, ip
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	fa1f f78c 	uxth.w	r7, ip
 8000340:	2101      	movs	r1, #1
 8000342:	fbb4 f6f8 	udiv	r6, r4, r8
 8000346:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb07 f006 	mul.w	r0, r7, r6
 8000356:	4298      	cmp	r0, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x11c>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x11a>
 8000364:	4298      	cmp	r0, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 800036a:	4626      	mov	r6, r4
 800036c:	1a1c      	subs	r4, r3, r0
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037e:	fb00 f707 	mul.w	r7, r0, r7
 8000382:	429f      	cmp	r7, r3
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x148>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x146>
 8000390:	429f      	cmp	r7, r3
 8000392:	f200 80b0 	bhi.w	80004f6 <__udivmoddi4+0x2a6>
 8000396:	4620      	mov	r0, r4
 8000398:	1bdb      	subs	r3, r3, r7
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x9c>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b0:	fa04 f301 	lsl.w	r3, r4, r1
 80003b4:	ea43 030c 	orr.w	r3, r3, ip
 80003b8:	40f4      	lsrs	r4, r6
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	0c38      	lsrs	r0, r7, #16
 80003c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003c4:	fbb4 fef0 	udiv	lr, r4, r0
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	fb00 441e 	mls	r4, r0, lr, r4
 80003d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d4:	fb0e f90c 	mul.w	r9, lr, ip
 80003d8:	45a1      	cmp	r9, r4
 80003da:	fa02 f201 	lsl.w	r2, r2, r1
 80003de:	d90a      	bls.n	80003f6 <__udivmoddi4+0x1a6>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003e6:	f080 8084 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80003ea:	45a1      	cmp	r9, r4
 80003ec:	f240 8081 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80003f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	eba4 0409 	sub.w	r4, r4, r9
 80003fa:	fa1f f983 	uxth.w	r9, r3
 80003fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000402:	fb00 4413 	mls	r4, r0, r3, r4
 8000406:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800040a:	fb03 fc0c 	mul.w	ip, r3, ip
 800040e:	45a4      	cmp	ip, r4
 8000410:	d907      	bls.n	8000422 <__udivmoddi4+0x1d2>
 8000412:	193c      	adds	r4, r7, r4
 8000414:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000418:	d267      	bcs.n	80004ea <__udivmoddi4+0x29a>
 800041a:	45a4      	cmp	ip, r4
 800041c:	d965      	bls.n	80004ea <__udivmoddi4+0x29a>
 800041e:	3b02      	subs	r3, #2
 8000420:	443c      	add	r4, r7
 8000422:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000426:	fba0 9302 	umull	r9, r3, r0, r2
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	429c      	cmp	r4, r3
 8000430:	46ce      	mov	lr, r9
 8000432:	469c      	mov	ip, r3
 8000434:	d351      	bcc.n	80004da <__udivmoddi4+0x28a>
 8000436:	d04e      	beq.n	80004d6 <__udivmoddi4+0x286>
 8000438:	b155      	cbz	r5, 8000450 <__udivmoddi4+0x200>
 800043a:	ebb8 030e 	subs.w	r3, r8, lr
 800043e:	eb64 040c 	sbc.w	r4, r4, ip
 8000442:	fa04 f606 	lsl.w	r6, r4, r6
 8000446:	40cb      	lsrs	r3, r1
 8000448:	431e      	orrs	r6, r3
 800044a:	40cc      	lsrs	r4, r1
 800044c:	e9c5 6400 	strd	r6, r4, [r5]
 8000450:	2100      	movs	r1, #0
 8000452:	e750      	b.n	80002f6 <__udivmoddi4+0xa6>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f103 	lsr.w	r1, r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa24 f303 	lsr.w	r3, r4, r3
 8000464:	4094      	lsls	r4, r2
 8000466:	430c      	orrs	r4, r1
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000470:	fa1f f78c 	uxth.w	r7, ip
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3110 	mls	r1, r8, r0, r3
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x24c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29e>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29e>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a4:	fb08 3311 	mls	r3, r8, r1, r3
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x276>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x296>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x296>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e739      	b.n	8000342 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f0      	b.n	80002b4 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e706      	b.n	80002e4 <__udivmoddi4+0x94>
 80004d6:	45c8      	cmp	r8, r9
 80004d8:	d2ae      	bcs.n	8000438 <__udivmoddi4+0x1e8>
 80004da:	ebb9 0e02 	subs.w	lr, r9, r2
 80004de:	eb63 0c07 	sbc.w	ip, r3, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a8      	b.n	8000438 <__udivmoddi4+0x1e8>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x276>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e799      	b.n	8000422 <__udivmoddi4+0x1d2>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x24c>
 80004f2:	46d6      	mov	lr, sl
 80004f4:	e77f      	b.n	80003f6 <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74d      	b.n	8000398 <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e70f      	b.n	8000324 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e730      	b.n	800036c <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000510:	b5b0      	push	{r4, r5, r7, lr}
 8000512:	b086      	sub	sp, #24
 8000514:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000516:	4b09      	ldr	r3, [pc, #36]	@ (800053c <MX_FREERTOS_Init+0x2c>)
 8000518:	1d3c      	adds	r4, r7, #4
 800051a:	461d      	mov	r5, r3
 800051c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800051e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000520:	682b      	ldr	r3, [r5, #0]
 8000522:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000524:	1d3b      	adds	r3, r7, #4
 8000526:	2100      	movs	r1, #0
 8000528:	4618      	mov	r0, r3
 800052a:	f003 f89e 	bl	800366a <osThreadCreate>
 800052e:	4603      	mov	r3, r0
 8000530:	4a03      	ldr	r2, [pc, #12]	@ (8000540 <MX_FREERTOS_Init+0x30>)
 8000532:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000534:	bf00      	nop
 8000536:	3718      	adds	r7, #24
 8000538:	46bd      	mov	sp, r7
 800053a:	bdb0      	pop	{r4, r5, r7, pc}
 800053c:	08005d1c 	.word	0x08005d1c
 8000540:	20000088 	.word	0x20000088

08000544 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800054c:	2001      	movs	r0, #1
 800054e:	f003 f8b3 	bl	80036b8 <osDelay>
 8000552:	e7fb      	b.n	800054c <StartDefaultTask+0x8>

08000554 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b08a      	sub	sp, #40	@ 0x28
 8000558:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055a:	f107 0314 	add.w	r3, r7, #20
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	60da      	str	r2, [r3, #12]
 8000568:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800056a:	4b2b      	ldr	r3, [pc, #172]	@ (8000618 <MX_GPIO_Init+0xc4>)
 800056c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800056e:	4a2a      	ldr	r2, [pc, #168]	@ (8000618 <MX_GPIO_Init+0xc4>)
 8000570:	f043 0304 	orr.w	r3, r3, #4
 8000574:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000576:	4b28      	ldr	r3, [pc, #160]	@ (8000618 <MX_GPIO_Init+0xc4>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057a:	f003 0304 	and.w	r3, r3, #4
 800057e:	613b      	str	r3, [r7, #16]
 8000580:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000582:	4b25      	ldr	r3, [pc, #148]	@ (8000618 <MX_GPIO_Init+0xc4>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000586:	4a24      	ldr	r2, [pc, #144]	@ (8000618 <MX_GPIO_Init+0xc4>)
 8000588:	f043 0320 	orr.w	r3, r3, #32
 800058c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800058e:	4b22      	ldr	r3, [pc, #136]	@ (8000618 <MX_GPIO_Init+0xc4>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000592:	f003 0320 	and.w	r3, r3, #32
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	4b1f      	ldr	r3, [pc, #124]	@ (8000618 <MX_GPIO_Init+0xc4>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059e:	4a1e      	ldr	r2, [pc, #120]	@ (8000618 <MX_GPIO_Init+0xc4>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000618 <MX_GPIO_Init+0xc4>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b2:	4b19      	ldr	r3, [pc, #100]	@ (8000618 <MX_GPIO_Init+0xc4>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b6:	4a18      	ldr	r2, [pc, #96]	@ (8000618 <MX_GPIO_Init+0xc4>)
 80005b8:	f043 0302 	orr.w	r3, r3, #2
 80005bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005be:	4b16      	ldr	r3, [pc, #88]	@ (8000618 <MX_GPIO_Init+0xc4>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c2:	f003 0302 	and.w	r3, r3, #2
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2120      	movs	r1, #32
 80005ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005d2:	f000 fe1d 	bl	8001210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005dc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80005e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	4619      	mov	r1, r3
 80005ec:	480b      	ldr	r0, [pc, #44]	@ (800061c <MX_GPIO_Init+0xc8>)
 80005ee:	f000 fc8d 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005f2:	2320      	movs	r3, #32
 80005f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f6:	2301      	movs	r3, #1
 80005f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fe:	2300      	movs	r3, #0
 8000600:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	4619      	mov	r1, r3
 8000608:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800060c:	f000 fc7e 	bl	8000f0c <HAL_GPIO_Init>

}
 8000610:	bf00      	nop
 8000612:	3728      	adds	r7, #40	@ 0x28
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40021000 	.word	0x40021000
 800061c:	48000800 	.word	0x48000800

08000620 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000628:	1d39      	adds	r1, r7, #4
 800062a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800062e:	2201      	movs	r2, #1
 8000630:	4803      	ldr	r0, [pc, #12]	@ (8000640 <__io_putchar+0x20>)
 8000632:	f002 f97f 	bl	8002934 <HAL_UART_Transmit>
	return ch;
 8000636:	687b      	ldr	r3, [r7, #4]
}
 8000638:	4618      	mov	r0, r3
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	200000e0 	.word	0x200000e0

08000644 <errHandler_xTaskCreate>:
/**
 * @brief  Gestion d'erreurs de création de tâche.
 * @param	BaseType_t	Retour de xTaskCreate.
 */
void errHandler_xTaskCreate(BaseType_t r)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	/* Vérification si la tâche a été créée avec succès */
	if (pdPASS == r) {
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2b01      	cmp	r3, #1
 8000650:	d103      	bne.n	800065a <errHandler_xTaskCreate+0x16>
		/* Si la tâche est créée avec succès, démarrer le scheduler */
		printf("Tâche crée avec succès\r\n");
 8000652:	480b      	ldr	r0, [pc, #44]	@ (8000680 <errHandler_xTaskCreate+0x3c>)
 8000654:	f004 ff66 	bl	8005524 <puts>
	} else {
		/* Cas improbable : code d'erreur non prévu pour xTaskCreate */
		printf("Erreur inconnue lors de la création de la tâche\r\n");
		Error_Handler();  // Gestion d'erreur générique
	}
}
 8000658:	e00e      	b.n	8000678 <errHandler_xTaskCreate+0x34>
	} else if (errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY == r) {
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000660:	d105      	bne.n	800066e <errHandler_xTaskCreate+0x2a>
		printf("Erreur: Mémoire insuffisante\r\n");
 8000662:	4808      	ldr	r0, [pc, #32]	@ (8000684 <errHandler_xTaskCreate+0x40>)
 8000664:	f004 ff5e 	bl	8005524 <puts>
		Error_Handler();
 8000668:	f000 f8f4 	bl	8000854 <Error_Handler>
}
 800066c:	e004      	b.n	8000678 <errHandler_xTaskCreate+0x34>
		printf("Erreur inconnue lors de la création de la tâche\r\n");
 800066e:	4806      	ldr	r0, [pc, #24]	@ (8000688 <errHandler_xTaskCreate+0x44>)
 8000670:	f004 ff58 	bl	8005524 <puts>
		Error_Handler();  // Gestion d'erreur générique
 8000674:	f000 f8ee 	bl	8000854 <Error_Handler>
}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	08005d30 	.word	0x08005d30
 8000684:	08005d4c 	.word	0x08005d4c
 8000688:	08005d6c 	.word	0x08005d6c

0800068c <taskGive>:
		vTaskDelay( duree / portTICK_PERIOD_MS );  // Délai de 100 ms
		compteur++;
	}
}

void taskGive (void * pvParameters) {
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	int duree = (int) pvParameters;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	60fb      	str	r3, [r7, #12]

	while (1) {
		printf("Avant sémaphore taskGive\r\n");
 8000698:	4809      	ldr	r0, [pc, #36]	@ (80006c0 <taskGive+0x34>)
 800069a:	f004 ff43 	bl	8005524 <puts>
		xSemaphoreTake(task_sync, duree);
 800069e:	4b09      	ldr	r3, [pc, #36]	@ (80006c4 <taskGive+0x38>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	68fa      	ldr	r2, [r7, #12]
 80006a4:	4611      	mov	r1, r2
 80006a6:	4618      	mov	r0, r3
 80006a8:	f003 f98e 	bl	80039c8 <xQueueSemaphoreTake>
		printf("Après sémaphore taskGive\r\n");
 80006ac:	4806      	ldr	r0, [pc, #24]	@ (80006c8 <taskGive+0x3c>)
 80006ae:	f004 ff39 	bl	8005524 <puts>
		vTaskDelay( duree / portTICK_PERIOD_MS );
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	4618      	mov	r0, r3
 80006b6:	f003 fc63 	bl	8003f80 <vTaskDelay>
		printf("Avant sémaphore taskGive\r\n");
 80006ba:	bf00      	nop
 80006bc:	e7ec      	b.n	8000698 <taskGive+0xc>
 80006be:	bf00      	nop
 80006c0:	08005dd0 	.word	0x08005dd0
 80006c4:	2000008c 	.word	0x2000008c
 80006c8:	08005dec 	.word	0x08005dec

080006cc <taskTake>:
	}
}

void taskTake (void * pvParameters) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	int duree = (int) pvParameters;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	60fb      	str	r3, [r7, #12]

	while (1) {
		printf("Avant sémaphore taskTake\r\n");
 80006d8:	4809      	ldr	r0, [pc, #36]	@ (8000700 <taskTake+0x34>)
 80006da:	f004 ff23 	bl	8005524 <puts>
		xSemaphoreTake(task_sync, duree);
 80006de:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <taskTake+0x38>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	68fa      	ldr	r2, [r7, #12]
 80006e4:	4611      	mov	r1, r2
 80006e6:	4618      	mov	r0, r3
 80006e8:	f003 f96e 	bl	80039c8 <xQueueSemaphoreTake>
		printf("Après sémaphore taskTake\r\n");
 80006ec:	4806      	ldr	r0, [pc, #24]	@ (8000708 <taskTake+0x3c>)
 80006ee:	f004 ff19 	bl	8005524 <puts>
		vTaskDelay( duree / portTICK_PERIOD_MS );
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f003 fc43 	bl	8003f80 <vTaskDelay>
		printf("Avant sémaphore taskTake\r\n");
 80006fa:	bf00      	nop
 80006fc:	e7ec      	b.n	80006d8 <taskTake+0xc>
 80006fe:	bf00      	nop
 8000700:	08005e08 	.word	0x08005e08
 8000704:	2000008c 	.word	0x2000008c
 8000708:	08005e24 	.word	0x08005e24

0800070c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af02      	add	r7, sp, #8

	/* USER CODE BEGIN 1 */
	BaseType_t xReturned;
	TaskHandle_t xHandle1 = NULL;
 8000712:	2300      	movs	r3, #0
 8000714:	60bb      	str	r3, [r7, #8]
	TaskHandle_t xHandle2 = NULL;
 8000716:	2300      	movs	r3, #0
 8000718:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800071a:	f000 fae0 	bl	8000cde <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800071e:	f000 f83b 	bl	8000798 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000722:	f7ff ff17 	bl	8000554 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000726:	f000 fa0d 	bl	8000b44 <MX_USART2_UART_Init>

	errHandler_xTaskCreate(xReturned);
	*/

	/* 1.2 */
	task_sync = xSemaphoreCreateBinary();
 800072a:	2203      	movs	r2, #3
 800072c:	2100      	movs	r1, #0
 800072e:	2001      	movs	r0, #1
 8000730:	f003 f8f4 	bl	800391c <xQueueGenericCreate>
 8000734:	4603      	mov	r3, r0
 8000736:	4a13      	ldr	r2, [pc, #76]	@ (8000784 <main+0x78>)
 8000738:	6013      	str	r3, [r2, #0]

	xReturned = xTaskCreate(
 800073a:	f107 0308 	add.w	r3, r7, #8
 800073e:	9301      	str	r3, [sp, #4]
 8000740:	2301      	movs	r3, #1
 8000742:	9300      	str	r3, [sp, #0]
 8000744:	2364      	movs	r3, #100	@ 0x64
 8000746:	22fa      	movs	r2, #250	@ 0xfa
 8000748:	490f      	ldr	r1, [pc, #60]	@ (8000788 <main+0x7c>)
 800074a:	4810      	ldr	r0, [pc, #64]	@ (800078c <main+0x80>)
 800074c:	f003 facc 	bl	8003ce8 <xTaskCreate>
 8000750:	60f8      	str	r0, [r7, #12]
			STACK_SIZE, // Stack size in words, not bytes.
			(void *) DELAY_1, // Parameter passed into the task.
			(UBaseType_t) 1U,// Priority at which the task is created.
			&xHandle1); // Used to pass out the created task's handle.

	errHandler_xTaskCreate(xReturned);
 8000752:	68f8      	ldr	r0, [r7, #12]
 8000754:	f7ff ff76 	bl	8000644 <errHandler_xTaskCreate>

	xReturned = xTaskCreate(
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	9301      	str	r3, [sp, #4]
 800075c:	2300      	movs	r3, #0
 800075e:	9300      	str	r3, [sp, #0]
 8000760:	2364      	movs	r3, #100	@ 0x64
 8000762:	22fa      	movs	r2, #250	@ 0xfa
 8000764:	490a      	ldr	r1, [pc, #40]	@ (8000790 <main+0x84>)
 8000766:	480b      	ldr	r0, [pc, #44]	@ (8000794 <main+0x88>)
 8000768:	f003 fabe 	bl	8003ce8 <xTaskCreate>
 800076c:	60f8      	str	r0, [r7, #12]
			STACK_SIZE, // Stack size in words, not bytes.
			(void *) DELAY_1, // Parameter passed into the task.
			tskIDLE_PRIORITY,// Priority at which the task is created.
			&xHandle2); // Used to pass out the created task's handle.

	errHandler_xTaskCreate(xReturned);
 800076e:	68f8      	ldr	r0, [r7, #12]
 8000770:	f7ff ff68 	bl	8000644 <errHandler_xTaskCreate>

	vTaskStartScheduler();
 8000774:	f003 fc3a 	bl	8003fec <vTaskStartScheduler>

	/* USER CODE END 2 */

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();
 8000778:	f7ff feca 	bl	8000510 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 800077c:	f002 ff6e 	bl	800365c <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000780:	bf00      	nop
 8000782:	e7fd      	b.n	8000780 <main+0x74>
 8000784:	2000008c 	.word	0x2000008c
 8000788:	08005e40 	.word	0x08005e40
 800078c:	0800068d 	.word	0x0800068d
 8000790:	08005e4c 	.word	0x08005e4c
 8000794:	080006cd 	.word	0x080006cd

08000798 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b094      	sub	sp, #80	@ 0x50
 800079c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079e:	f107 0318 	add.w	r3, r7, #24
 80007a2:	2238      	movs	r2, #56	@ 0x38
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f004 ff9c 	bl	80056e4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80007ba:	2000      	movs	r0, #0
 80007bc:	f000 fd40 	bl	8001240 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c0:	2302      	movs	r3, #2
 80007c2:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007c8:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ca:	2340      	movs	r3, #64	@ 0x40
 80007cc:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ce:	2302      	movs	r3, #2
 80007d0:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007d2:	2302      	movs	r3, #2
 80007d4:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80007d6:	2304      	movs	r3, #4
 80007d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80007da:	2355      	movs	r3, #85	@ 0x55
 80007dc:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007de:	2302      	movs	r3, #2
 80007e0:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007e2:	2302      	movs	r3, #2
 80007e4:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007e6:	2302      	movs	r3, #2
 80007e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ea:	f107 0318 	add.w	r3, r7, #24
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 fdda 	bl	80013a8 <HAL_RCC_OscConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0x66>
	{
		Error_Handler();
 80007fa:	f000 f82b 	bl	8000854 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fe:	230f      	movs	r3, #15
 8000800:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000802:	2303      	movs	r3, #3
 8000804:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	2104      	movs	r1, #4
 8000816:	4618      	mov	r0, r3
 8000818:	f001 f8d8 	bl	80019cc <HAL_RCC_ClockConfig>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0x8e>
	{
		Error_Handler();
 8000822:	f000 f817 	bl	8000854 <Error_Handler>
	}
}
 8000826:	bf00      	nop
 8000828:	3750      	adds	r7, #80	@ 0x50
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
	...

08000830 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM16) {
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a04      	ldr	r2, [pc, #16]	@ (8000850 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d101      	bne.n	8000846 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000842:	f000 fa65 	bl	8000d10 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40014400 	.word	0x40014400

08000854 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000858:	b672      	cpsid	i
}
 800085a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800085c:	bf00      	nop
 800085e:	e7fd      	b.n	800085c <Error_Handler+0x8>

08000860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000866:	4b12      	ldr	r3, [pc, #72]	@ (80008b0 <HAL_MspInit+0x50>)
 8000868:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800086a:	4a11      	ldr	r2, [pc, #68]	@ (80008b0 <HAL_MspInit+0x50>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6613      	str	r3, [r2, #96]	@ 0x60
 8000872:	4b0f      	ldr	r3, [pc, #60]	@ (80008b0 <HAL_MspInit+0x50>)
 8000874:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087e:	4b0c      	ldr	r3, [pc, #48]	@ (80008b0 <HAL_MspInit+0x50>)
 8000880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000882:	4a0b      	ldr	r2, [pc, #44]	@ (80008b0 <HAL_MspInit+0x50>)
 8000884:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000888:	6593      	str	r3, [r2, #88]	@ 0x58
 800088a:	4b09      	ldr	r3, [pc, #36]	@ (80008b0 <HAL_MspInit+0x50>)
 800088c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800088e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000892:	603b      	str	r3, [r7, #0]
 8000894:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000896:	2200      	movs	r2, #0
 8000898:	210f      	movs	r1, #15
 800089a:	f06f 0001 	mvn.w	r0, #1
 800089e:	f000 fb0d 	bl	8000ebc <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80008a2:	f000 fd71 	bl	8001388 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40021000 	.word	0x40021000

080008b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08c      	sub	sp, #48	@ 0x30
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 80008c4:	4b2c      	ldr	r3, [pc, #176]	@ (8000978 <HAL_InitTick+0xc4>)
 80008c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008c8:	4a2b      	ldr	r2, [pc, #172]	@ (8000978 <HAL_InitTick+0xc4>)
 80008ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008ce:	6613      	str	r3, [r2, #96]	@ 0x60
 80008d0:	4b29      	ldr	r3, [pc, #164]	@ (8000978 <HAL_InitTick+0xc4>)
 80008d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008d8:	60bb      	str	r3, [r7, #8]
 80008da:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008dc:	f107 020c 	add.w	r2, r7, #12
 80008e0:	f107 0310 	add.w	r3, r7, #16
 80008e4:	4611      	mov	r1, r2
 80008e6:	4618      	mov	r0, r3
 80008e8:	f001 fa46 	bl	8001d78 <HAL_RCC_GetClockConfig>
  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80008ec:	f001 fa2e 	bl	8001d4c <HAL_RCC_GetPCLK2Freq>
 80008f0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008f4:	4a21      	ldr	r2, [pc, #132]	@ (800097c <HAL_InitTick+0xc8>)
 80008f6:	fba2 2303 	umull	r2, r3, r2, r3
 80008fa:	0c9b      	lsrs	r3, r3, #18
 80008fc:	3b01      	subs	r3, #1
 80008fe:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8000900:	4b1f      	ldr	r3, [pc, #124]	@ (8000980 <HAL_InitTick+0xcc>)
 8000902:	4a20      	ldr	r2, [pc, #128]	@ (8000984 <HAL_InitTick+0xd0>)
 8000904:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8000906:	4b1e      	ldr	r3, [pc, #120]	@ (8000980 <HAL_InitTick+0xcc>)
 8000908:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800090c:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 800090e:	4a1c      	ldr	r2, [pc, #112]	@ (8000980 <HAL_InitTick+0xcc>)
 8000910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000912:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8000914:	4b1a      	ldr	r3, [pc, #104]	@ (8000980 <HAL_InitTick+0xcc>)
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091a:	4b19      	ldr	r3, [pc, #100]	@ (8000980 <HAL_InitTick+0xcc>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim16);
 8000920:	4817      	ldr	r0, [pc, #92]	@ (8000980 <HAL_InitTick+0xcc>)
 8000922:	f001 fc91 	bl	8002248 <HAL_TIM_Base_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800092c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000930:	2b00      	cmp	r3, #0
 8000932:	d11b      	bne.n	800096c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 8000934:	4812      	ldr	r0, [pc, #72]	@ (8000980 <HAL_InitTick+0xcc>)
 8000936:	f001 fce9 	bl	800230c <HAL_TIM_Base_Start_IT>
 800093a:	4603      	mov	r3, r0
 800093c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000940:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000944:	2b00      	cmp	r3, #0
 8000946:	d111      	bne.n	800096c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000948:	2019      	movs	r0, #25
 800094a:	f000 fad1 	bl	8000ef0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2b0f      	cmp	r3, #15
 8000952:	d808      	bhi.n	8000966 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000954:	2200      	movs	r2, #0
 8000956:	6879      	ldr	r1, [r7, #4]
 8000958:	2019      	movs	r0, #25
 800095a:	f000 faaf 	bl	8000ebc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800095e:	4a0a      	ldr	r2, [pc, #40]	@ (8000988 <HAL_InitTick+0xd4>)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6013      	str	r3, [r2, #0]
 8000964:	e002      	b.n	800096c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000966:	2301      	movs	r3, #1
 8000968:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800096c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000970:	4618      	mov	r0, r3
 8000972:	3730      	adds	r7, #48	@ 0x30
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40021000 	.word	0x40021000
 800097c:	431bde83 	.word	0x431bde83
 8000980:	20000090 	.word	0x20000090
 8000984:	40014400 	.word	0x40014400
 8000988:	20000004 	.word	0x20000004

0800098c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <NMI_Handler+0x4>

08000994 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000998:	bf00      	nop
 800099a:	e7fd      	b.n	8000998 <HardFault_Handler+0x4>

0800099c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a0:	bf00      	nop
 80009a2:	e7fd      	b.n	80009a0 <MemManage_Handler+0x4>

080009a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a8:	bf00      	nop
 80009aa:	e7fd      	b.n	80009a8 <BusFault_Handler+0x4>

080009ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b0:	bf00      	nop
 80009b2:	e7fd      	b.n	80009b0 <UsageFault_Handler+0x4>

080009b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
	...

080009c4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80009c8:	4802      	ldr	r0, [pc, #8]	@ (80009d4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80009ca:	f001 fd09 	bl	80023e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000090 	.word	0x20000090

080009d8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	e00a      	b.n	8000a00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009ea:	f3af 8000 	nop.w
 80009ee:	4601      	mov	r1, r0
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	1c5a      	adds	r2, r3, #1
 80009f4:	60ba      	str	r2, [r7, #8]
 80009f6:	b2ca      	uxtb	r2, r1
 80009f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	3301      	adds	r3, #1
 80009fe:	617b      	str	r3, [r7, #20]
 8000a00:	697a      	ldr	r2, [r7, #20]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	dbf0      	blt.n	80009ea <_read+0x12>
  }

  return len;
 8000a08:	687b      	ldr	r3, [r7, #4]
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3718      	adds	r7, #24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b086      	sub	sp, #24
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	60f8      	str	r0, [r7, #12]
 8000a1a:	60b9      	str	r1, [r7, #8]
 8000a1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]
 8000a22:	e009      	b.n	8000a38 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	1c5a      	adds	r2, r3, #1
 8000a28:	60ba      	str	r2, [r7, #8]
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff fdf7 	bl	8000620 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	3301      	adds	r3, #1
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	697a      	ldr	r2, [r7, #20]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	dbf1      	blt.n	8000a24 <_write+0x12>
  }
  return len;
 8000a40:	687b      	ldr	r3, [r7, #4]
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3718      	adds	r7, #24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <_close>:

int _close(int file)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a62:	b480      	push	{r7}
 8000a64:	b083      	sub	sp, #12
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
 8000a6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a72:	605a      	str	r2, [r3, #4]
  return 0;
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <_isatty>:

int _isatty(int file)
{
 8000a82:	b480      	push	{r7}
 8000a84:	b083      	sub	sp, #12
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a8a:	2301      	movs	r3, #1
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000aa4:	2300      	movs	r3, #0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3714      	adds	r7, #20
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
	...

08000ab4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000abc:	4a14      	ldr	r2, [pc, #80]	@ (8000b10 <_sbrk+0x5c>)
 8000abe:	4b15      	ldr	r3, [pc, #84]	@ (8000b14 <_sbrk+0x60>)
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ac8:	4b13      	ldr	r3, [pc, #76]	@ (8000b18 <_sbrk+0x64>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d102      	bne.n	8000ad6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ad0:	4b11      	ldr	r3, [pc, #68]	@ (8000b18 <_sbrk+0x64>)
 8000ad2:	4a12      	ldr	r2, [pc, #72]	@ (8000b1c <_sbrk+0x68>)
 8000ad4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ad6:	4b10      	ldr	r3, [pc, #64]	@ (8000b18 <_sbrk+0x64>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4413      	add	r3, r2
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d207      	bcs.n	8000af4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ae4:	f004 fea2 	bl	800582c <__errno>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	220c      	movs	r2, #12
 8000aec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000af2:	e009      	b.n	8000b08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000af4:	4b08      	ldr	r3, [pc, #32]	@ (8000b18 <_sbrk+0x64>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000afa:	4b07      	ldr	r3, [pc, #28]	@ (8000b18 <_sbrk+0x64>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4413      	add	r3, r2
 8000b02:	4a05      	ldr	r2, [pc, #20]	@ (8000b18 <_sbrk+0x64>)
 8000b04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b06:	68fb      	ldr	r3, [r7, #12]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3718      	adds	r7, #24
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20008000 	.word	0x20008000
 8000b14:	00000400 	.word	0x00000400
 8000b18:	200000dc 	.word	0x200000dc
 8000b1c:	20005238 	.word	0x20005238

08000b20 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b24:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <SystemInit+0x20>)
 8000b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b2a:	4a05      	ldr	r2, [pc, #20]	@ (8000b40 <SystemInit+0x20>)
 8000b2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b48:	4b22      	ldr	r3, [pc, #136]	@ (8000bd4 <MX_USART2_UART_Init+0x90>)
 8000b4a:	4a23      	ldr	r2, [pc, #140]	@ (8000bd8 <MX_USART2_UART_Init+0x94>)
 8000b4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b4e:	4b21      	ldr	r3, [pc, #132]	@ (8000bd4 <MX_USART2_UART_Init+0x90>)
 8000b50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b56:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd4 <MX_USART2_UART_Init+0x90>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000bd4 <MX_USART2_UART_Init+0x90>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b62:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd4 <MX_USART2_UART_Init+0x90>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b68:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd4 <MX_USART2_UART_Init+0x90>)
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6e:	4b19      	ldr	r3, [pc, #100]	@ (8000bd4 <MX_USART2_UART_Init+0x90>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b74:	4b17      	ldr	r3, [pc, #92]	@ (8000bd4 <MX_USART2_UART_Init+0x90>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b7a:	4b16      	ldr	r3, [pc, #88]	@ (8000bd4 <MX_USART2_UART_Init+0x90>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b80:	4b14      	ldr	r3, [pc, #80]	@ (8000bd4 <MX_USART2_UART_Init+0x90>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b86:	4b13      	ldr	r3, [pc, #76]	@ (8000bd4 <MX_USART2_UART_Init+0x90>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b8c:	4811      	ldr	r0, [pc, #68]	@ (8000bd4 <MX_USART2_UART_Init+0x90>)
 8000b8e:	f001 fe81 	bl	8002894 <HAL_UART_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000b98:	f7ff fe5c 	bl	8000854 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	480d      	ldr	r0, [pc, #52]	@ (8000bd4 <MX_USART2_UART_Init+0x90>)
 8000ba0:	f002 fc7a 	bl	8003498 <HAL_UARTEx_SetTxFifoThreshold>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000baa:	f7ff fe53 	bl	8000854 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4808      	ldr	r0, [pc, #32]	@ (8000bd4 <MX_USART2_UART_Init+0x90>)
 8000bb2:	f002 fcaf 	bl	8003514 <HAL_UARTEx_SetRxFifoThreshold>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000bbc:	f7ff fe4a 	bl	8000854 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000bc0:	4804      	ldr	r0, [pc, #16]	@ (8000bd4 <MX_USART2_UART_Init+0x90>)
 8000bc2:	f002 fc30 	bl	8003426 <HAL_UARTEx_DisableFifoMode>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000bcc:	f7ff fe42 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	200000e0 	.word	0x200000e0
 8000bd8:	40004400 	.word	0x40004400

08000bdc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b09a      	sub	sp, #104	@ 0x68
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bf4:	f107 0310 	add.w	r3, r7, #16
 8000bf8:	2244      	movs	r2, #68	@ 0x44
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f004 fd71 	bl	80056e4 <memset>
  if(uartHandle->Instance==USART2)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a1f      	ldr	r2, [pc, #124]	@ (8000c84 <HAL_UART_MspInit+0xa8>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d136      	bne.n	8000c7a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c14:	f107 0310 	add.w	r3, r7, #16
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f001 f925 	bl	8001e68 <HAL_RCCEx_PeriphCLKConfig>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c24:	f7ff fe16 	bl	8000854 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c28:	4b17      	ldr	r3, [pc, #92]	@ (8000c88 <HAL_UART_MspInit+0xac>)
 8000c2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c2c:	4a16      	ldr	r2, [pc, #88]	@ (8000c88 <HAL_UART_MspInit+0xac>)
 8000c2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c32:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c34:	4b14      	ldr	r3, [pc, #80]	@ (8000c88 <HAL_UART_MspInit+0xac>)
 8000c36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c40:	4b11      	ldr	r3, [pc, #68]	@ (8000c88 <HAL_UART_MspInit+0xac>)
 8000c42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c44:	4a10      	ldr	r2, [pc, #64]	@ (8000c88 <HAL_UART_MspInit+0xac>)
 8000c46:	f043 0301 	orr.w	r3, r3, #1
 8000c4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c88 <HAL_UART_MspInit+0xac>)
 8000c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c58:	230c      	movs	r3, #12
 8000c5a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c64:	2300      	movs	r3, #0
 8000c66:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c68:	2307      	movs	r3, #7
 8000c6a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000c70:	4619      	mov	r1, r3
 8000c72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c76:	f000 f949 	bl	8000f0c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	3768      	adds	r7, #104	@ 0x68
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40004400 	.word	0x40004400
 8000c88:	40021000 	.word	0x40021000

08000c8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c8c:	480d      	ldr	r0, [pc, #52]	@ (8000cc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c8e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c90:	f7ff ff46 	bl	8000b20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c94:	480c      	ldr	r0, [pc, #48]	@ (8000cc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c96:	490d      	ldr	r1, [pc, #52]	@ (8000ccc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c98:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd0 <LoopForever+0xe>)
  movs r3, #0
 8000c9a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c9c:	e002      	b.n	8000ca4 <LoopCopyDataInit>

08000c9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca2:	3304      	adds	r3, #4

08000ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca8:	d3f9      	bcc.n	8000c9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000caa:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cac:	4c0a      	ldr	r4, [pc, #40]	@ (8000cd8 <LoopForever+0x16>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb0:	e001      	b.n	8000cb6 <LoopFillZerobss>

08000cb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb4:	3204      	adds	r2, #4

08000cb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb8:	d3fb      	bcc.n	8000cb2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000cba:	f004 fdbd 	bl	8005838 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cbe:	f7ff fd25 	bl	800070c <main>

08000cc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000cc2:	e7fe      	b.n	8000cc2 <LoopForever>
  ldr   r0, =_estack
 8000cc4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000cc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ccc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000cd0:	08005eb0 	.word	0x08005eb0
  ldr r2, =_sbss
 8000cd4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000cd8:	20005238 	.word	0x20005238

08000cdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cdc:	e7fe      	b.n	8000cdc <ADC1_2_IRQHandler>

08000cde <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b082      	sub	sp, #8
 8000ce2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce8:	2003      	movs	r0, #3
 8000cea:	f000 f8dc 	bl	8000ea6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cee:	200f      	movs	r0, #15
 8000cf0:	f7ff fde0 	bl	80008b4 <HAL_InitTick>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d002      	beq.n	8000d00 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	71fb      	strb	r3, [r7, #7]
 8000cfe:	e001      	b.n	8000d04 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d00:	f7ff fdae 	bl	8000860 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d04:	79fb      	ldrb	r3, [r7, #7]

}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d14:	4b05      	ldr	r3, [pc, #20]	@ (8000d2c <HAL_IncTick+0x1c>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	4b05      	ldr	r3, [pc, #20]	@ (8000d30 <HAL_IncTick+0x20>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	4a03      	ldr	r2, [pc, #12]	@ (8000d2c <HAL_IncTick+0x1c>)
 8000d20:	6013      	str	r3, [r2, #0]
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	20000174 	.word	0x20000174
 8000d30:	20000008 	.word	0x20000008

08000d34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  return uwTick;
 8000d38:	4b03      	ldr	r3, [pc, #12]	@ (8000d48 <HAL_GetTick+0x14>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	20000174 	.word	0x20000174

08000d4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d90 <__NVIC_SetPriorityGrouping+0x44>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d62:	68ba      	ldr	r2, [r7, #8]
 8000d64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d68:	4013      	ands	r3, r2
 8000d6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d7e:	4a04      	ldr	r2, [pc, #16]	@ (8000d90 <__NVIC_SetPriorityGrouping+0x44>)
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	60d3      	str	r3, [r2, #12]
}
 8000d84:	bf00      	nop
 8000d86:	3714      	adds	r7, #20
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d98:	4b04      	ldr	r3, [pc, #16]	@ (8000dac <__NVIC_GetPriorityGrouping+0x18>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	0a1b      	lsrs	r3, r3, #8
 8000d9e:	f003 0307 	and.w	r3, r3, #7
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	db0b      	blt.n	8000dda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	f003 021f 	and.w	r2, r3, #31
 8000dc8:	4907      	ldr	r1, [pc, #28]	@ (8000de8 <__NVIC_EnableIRQ+0x38>)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	095b      	lsrs	r3, r3, #5
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	e000e100 	.word	0xe000e100

08000dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	6039      	str	r1, [r7, #0]
 8000df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	db0a      	blt.n	8000e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	490c      	ldr	r1, [pc, #48]	@ (8000e38 <__NVIC_SetPriority+0x4c>)
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	0112      	lsls	r2, r2, #4
 8000e0c:	b2d2      	uxtb	r2, r2
 8000e0e:	440b      	add	r3, r1
 8000e10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e14:	e00a      	b.n	8000e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	4908      	ldr	r1, [pc, #32]	@ (8000e3c <__NVIC_SetPriority+0x50>)
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	f003 030f 	and.w	r3, r3, #15
 8000e22:	3b04      	subs	r3, #4
 8000e24:	0112      	lsls	r2, r2, #4
 8000e26:	b2d2      	uxtb	r2, r2
 8000e28:	440b      	add	r3, r1
 8000e2a:	761a      	strb	r2, [r3, #24]
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000e100 	.word	0xe000e100
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b089      	sub	sp, #36	@ 0x24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	f1c3 0307 	rsb	r3, r3, #7
 8000e5a:	2b04      	cmp	r3, #4
 8000e5c:	bf28      	it	cs
 8000e5e:	2304      	movcs	r3, #4
 8000e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3304      	adds	r3, #4
 8000e66:	2b06      	cmp	r3, #6
 8000e68:	d902      	bls.n	8000e70 <NVIC_EncodePriority+0x30>
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3b03      	subs	r3, #3
 8000e6e:	e000      	b.n	8000e72 <NVIC_EncodePriority+0x32>
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43da      	mvns	r2, r3
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	401a      	ands	r2, r3
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e88:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e92:	43d9      	mvns	r1, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	4313      	orrs	r3, r2
         );
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3724      	adds	r7, #36	@ 0x24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff ff4c 	bl	8000d4c <__NVIC_SetPriorityGrouping>
}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
 8000ec8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000eca:	f7ff ff63 	bl	8000d94 <__NVIC_GetPriorityGrouping>
 8000ece:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	68b9      	ldr	r1, [r7, #8]
 8000ed4:	6978      	ldr	r0, [r7, #20]
 8000ed6:	f7ff ffb3 	bl	8000e40 <NVIC_EncodePriority>
 8000eda:	4602      	mov	r2, r0
 8000edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee0:	4611      	mov	r1, r2
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff ff82 	bl	8000dec <__NVIC_SetPriority>
}
 8000ee8:	bf00      	nop
 8000eea:	3718      	adds	r7, #24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff ff56 	bl	8000db0 <__NVIC_EnableIRQ>
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b087      	sub	sp, #28
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f1a:	e15a      	b.n	80011d2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	2101      	movs	r1, #1
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	fa01 f303 	lsl.w	r3, r1, r3
 8000f28:	4013      	ands	r3, r2
 8000f2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	f000 814c 	beq.w	80011cc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f003 0303 	and.w	r3, r3, #3
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d005      	beq.n	8000f4c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d130      	bne.n	8000fae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	2203      	movs	r2, #3
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	4013      	ands	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	68da      	ldr	r2, [r3, #12]
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f82:	2201      	movs	r2, #1
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	091b      	lsrs	r3, r3, #4
 8000f98:	f003 0201 	and.w	r2, r3, #1
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f003 0303 	and.w	r3, r3, #3
 8000fb6:	2b03      	cmp	r3, #3
 8000fb8:	d017      	beq.n	8000fea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	68db      	ldr	r3, [r3, #12]
 8000fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	2203      	movs	r2, #3
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	689a      	ldr	r2, [r3, #8]
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f003 0303 	and.w	r3, r3, #3
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d123      	bne.n	800103e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	08da      	lsrs	r2, r3, #3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	3208      	adds	r2, #8
 8000ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001002:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	220f      	movs	r2, #15
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43db      	mvns	r3, r3
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	4013      	ands	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	691a      	ldr	r2, [r3, #16]
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	f003 0307 	and.w	r3, r3, #7
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4313      	orrs	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	08da      	lsrs	r2, r3, #3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3208      	adds	r2, #8
 8001038:	6939      	ldr	r1, [r7, #16]
 800103a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	2203      	movs	r2, #3
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43db      	mvns	r3, r3
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	4013      	ands	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f003 0203 	and.w	r2, r3, #3
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4313      	orrs	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800107a:	2b00      	cmp	r3, #0
 800107c:	f000 80a6 	beq.w	80011cc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001080:	4b5b      	ldr	r3, [pc, #364]	@ (80011f0 <HAL_GPIO_Init+0x2e4>)
 8001082:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001084:	4a5a      	ldr	r2, [pc, #360]	@ (80011f0 <HAL_GPIO_Init+0x2e4>)
 8001086:	f043 0301 	orr.w	r3, r3, #1
 800108a:	6613      	str	r3, [r2, #96]	@ 0x60
 800108c:	4b58      	ldr	r3, [pc, #352]	@ (80011f0 <HAL_GPIO_Init+0x2e4>)
 800108e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001090:	f003 0301 	and.w	r3, r3, #1
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001098:	4a56      	ldr	r2, [pc, #344]	@ (80011f4 <HAL_GPIO_Init+0x2e8>)
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	089b      	lsrs	r3, r3, #2
 800109e:	3302      	adds	r3, #2
 80010a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	f003 0303 	and.w	r3, r3, #3
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	220f      	movs	r2, #15
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4013      	ands	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80010c2:	d01f      	beq.n	8001104 <HAL_GPIO_Init+0x1f8>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a4c      	ldr	r2, [pc, #304]	@ (80011f8 <HAL_GPIO_Init+0x2ec>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d019      	beq.n	8001100 <HAL_GPIO_Init+0x1f4>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a4b      	ldr	r2, [pc, #300]	@ (80011fc <HAL_GPIO_Init+0x2f0>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d013      	beq.n	80010fc <HAL_GPIO_Init+0x1f0>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a4a      	ldr	r2, [pc, #296]	@ (8001200 <HAL_GPIO_Init+0x2f4>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d00d      	beq.n	80010f8 <HAL_GPIO_Init+0x1ec>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a49      	ldr	r2, [pc, #292]	@ (8001204 <HAL_GPIO_Init+0x2f8>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d007      	beq.n	80010f4 <HAL_GPIO_Init+0x1e8>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a48      	ldr	r2, [pc, #288]	@ (8001208 <HAL_GPIO_Init+0x2fc>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d101      	bne.n	80010f0 <HAL_GPIO_Init+0x1e4>
 80010ec:	2305      	movs	r3, #5
 80010ee:	e00a      	b.n	8001106 <HAL_GPIO_Init+0x1fa>
 80010f0:	2306      	movs	r3, #6
 80010f2:	e008      	b.n	8001106 <HAL_GPIO_Init+0x1fa>
 80010f4:	2304      	movs	r3, #4
 80010f6:	e006      	b.n	8001106 <HAL_GPIO_Init+0x1fa>
 80010f8:	2303      	movs	r3, #3
 80010fa:	e004      	b.n	8001106 <HAL_GPIO_Init+0x1fa>
 80010fc:	2302      	movs	r3, #2
 80010fe:	e002      	b.n	8001106 <HAL_GPIO_Init+0x1fa>
 8001100:	2301      	movs	r3, #1
 8001102:	e000      	b.n	8001106 <HAL_GPIO_Init+0x1fa>
 8001104:	2300      	movs	r3, #0
 8001106:	697a      	ldr	r2, [r7, #20]
 8001108:	f002 0203 	and.w	r2, r2, #3
 800110c:	0092      	lsls	r2, r2, #2
 800110e:	4093      	lsls	r3, r2
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	4313      	orrs	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001116:	4937      	ldr	r1, [pc, #220]	@ (80011f4 <HAL_GPIO_Init+0x2e8>)
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	089b      	lsrs	r3, r3, #2
 800111c:	3302      	adds	r3, #2
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001124:	4b39      	ldr	r3, [pc, #228]	@ (800120c <HAL_GPIO_Init+0x300>)
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	43db      	mvns	r3, r3
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	4013      	ands	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d003      	beq.n	8001148 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	4313      	orrs	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001148:	4a30      	ldr	r2, [pc, #192]	@ (800120c <HAL_GPIO_Init+0x300>)
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800114e:	4b2f      	ldr	r3, [pc, #188]	@ (800120c <HAL_GPIO_Init+0x300>)
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	43db      	mvns	r3, r3
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	4013      	ands	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4313      	orrs	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001172:	4a26      	ldr	r2, [pc, #152]	@ (800120c <HAL_GPIO_Init+0x300>)
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001178:	4b24      	ldr	r3, [pc, #144]	@ (800120c <HAL_GPIO_Init+0x300>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	43db      	mvns	r3, r3
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d003      	beq.n	800119c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800119c:	4a1b      	ldr	r2, [pc, #108]	@ (800120c <HAL_GPIO_Init+0x300>)
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80011a2:	4b1a      	ldr	r3, [pc, #104]	@ (800120c <HAL_GPIO_Init+0x300>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	43db      	mvns	r3, r3
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4013      	ands	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011c6:	4a11      	ldr	r2, [pc, #68]	@ (800120c <HAL_GPIO_Init+0x300>)
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	3301      	adds	r3, #1
 80011d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	fa22 f303 	lsr.w	r3, r2, r3
 80011dc:	2b00      	cmp	r3, #0
 80011de:	f47f ae9d 	bne.w	8000f1c <HAL_GPIO_Init+0x10>
  }
}
 80011e2:	bf00      	nop
 80011e4:	bf00      	nop
 80011e6:	371c      	adds	r7, #28
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	40021000 	.word	0x40021000
 80011f4:	40010000 	.word	0x40010000
 80011f8:	48000400 	.word	0x48000400
 80011fc:	48000800 	.word	0x48000800
 8001200:	48000c00 	.word	0x48000c00
 8001204:	48001000 	.word	0x48001000
 8001208:	48001400 	.word	0x48001400
 800120c:	40010400 	.word	0x40010400

08001210 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	807b      	strh	r3, [r7, #2]
 800121c:	4613      	mov	r3, r2
 800121e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001220:	787b      	ldrb	r3, [r7, #1]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001226:	887a      	ldrh	r2, [r7, #2]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800122c:	e002      	b.n	8001234 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800122e:	887a      	ldrh	r2, [r7, #2]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d141      	bne.n	80012d2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800124e:	4b4b      	ldr	r3, [pc, #300]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001256:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800125a:	d131      	bne.n	80012c0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800125c:	4b47      	ldr	r3, [pc, #284]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800125e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001262:	4a46      	ldr	r2, [pc, #280]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001264:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001268:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800126c:	4b43      	ldr	r3, [pc, #268]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001274:	4a41      	ldr	r2, [pc, #260]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001276:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800127a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800127c:	4b40      	ldr	r3, [pc, #256]	@ (8001380 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2232      	movs	r2, #50	@ 0x32
 8001282:	fb02 f303 	mul.w	r3, r2, r3
 8001286:	4a3f      	ldr	r2, [pc, #252]	@ (8001384 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001288:	fba2 2303 	umull	r2, r3, r2, r3
 800128c:	0c9b      	lsrs	r3, r3, #18
 800128e:	3301      	adds	r3, #1
 8001290:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001292:	e002      	b.n	800129a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	3b01      	subs	r3, #1
 8001298:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800129a:	4b38      	ldr	r3, [pc, #224]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012a6:	d102      	bne.n	80012ae <HAL_PWREx_ControlVoltageScaling+0x6e>
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d1f2      	bne.n	8001294 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012ae:	4b33      	ldr	r3, [pc, #204]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012ba:	d158      	bne.n	800136e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80012bc:	2303      	movs	r3, #3
 80012be:	e057      	b.n	8001370 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012c0:	4b2e      	ldr	r3, [pc, #184]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012c6:	4a2d      	ldr	r2, [pc, #180]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80012cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80012d0:	e04d      	b.n	800136e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012d8:	d141      	bne.n	800135e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80012da:	4b28      	ldr	r3, [pc, #160]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012e6:	d131      	bne.n	800134c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012e8:	4b24      	ldr	r3, [pc, #144]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012ee:	4a23      	ldr	r2, [pc, #140]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012f8:	4b20      	ldr	r3, [pc, #128]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001300:	4a1e      	ldr	r2, [pc, #120]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001302:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001306:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001308:	4b1d      	ldr	r3, [pc, #116]	@ (8001380 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2232      	movs	r2, #50	@ 0x32
 800130e:	fb02 f303 	mul.w	r3, r2, r3
 8001312:	4a1c      	ldr	r2, [pc, #112]	@ (8001384 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001314:	fba2 2303 	umull	r2, r3, r2, r3
 8001318:	0c9b      	lsrs	r3, r3, #18
 800131a:	3301      	adds	r3, #1
 800131c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800131e:	e002      	b.n	8001326 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	3b01      	subs	r3, #1
 8001324:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001326:	4b15      	ldr	r3, [pc, #84]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800132e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001332:	d102      	bne.n	800133a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1f2      	bne.n	8001320 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800133a:	4b10      	ldr	r3, [pc, #64]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001342:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001346:	d112      	bne.n	800136e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e011      	b.n	8001370 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800134c:	4b0b      	ldr	r3, [pc, #44]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800134e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001352:	4a0a      	ldr	r2, [pc, #40]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001354:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001358:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800135c:	e007      	b.n	800136e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800135e:	4b07      	ldr	r3, [pc, #28]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001366:	4a05      	ldr	r2, [pc, #20]	@ (800137c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001368:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800136c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	40007000 	.word	0x40007000
 8001380:	20000000 	.word	0x20000000
 8001384:	431bde83 	.word	0x431bde83

08001388 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800138c:	4b05      	ldr	r3, [pc, #20]	@ (80013a4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	4a04      	ldr	r2, [pc, #16]	@ (80013a4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001392:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001396:	6093      	str	r3, [r2, #8]
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	40007000 	.word	0x40007000

080013a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e2fe      	b.n	80019b8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d075      	beq.n	80014b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013c6:	4b97      	ldr	r3, [pc, #604]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f003 030c 	and.w	r3, r3, #12
 80013ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013d0:	4b94      	ldr	r3, [pc, #592]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	f003 0303 	and.w	r3, r3, #3
 80013d8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	2b0c      	cmp	r3, #12
 80013de:	d102      	bne.n	80013e6 <HAL_RCC_OscConfig+0x3e>
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	2b03      	cmp	r3, #3
 80013e4:	d002      	beq.n	80013ec <HAL_RCC_OscConfig+0x44>
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	2b08      	cmp	r3, #8
 80013ea:	d10b      	bne.n	8001404 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ec:	4b8d      	ldr	r3, [pc, #564]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d05b      	beq.n	80014b0 <HAL_RCC_OscConfig+0x108>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d157      	bne.n	80014b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e2d9      	b.n	80019b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800140c:	d106      	bne.n	800141c <HAL_RCC_OscConfig+0x74>
 800140e:	4b85      	ldr	r3, [pc, #532]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a84      	ldr	r2, [pc, #528]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 8001414:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001418:	6013      	str	r3, [r2, #0]
 800141a:	e01d      	b.n	8001458 <HAL_RCC_OscConfig+0xb0>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001424:	d10c      	bne.n	8001440 <HAL_RCC_OscConfig+0x98>
 8001426:	4b7f      	ldr	r3, [pc, #508]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a7e      	ldr	r2, [pc, #504]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 800142c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	4b7c      	ldr	r3, [pc, #496]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a7b      	ldr	r2, [pc, #492]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 8001438:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	e00b      	b.n	8001458 <HAL_RCC_OscConfig+0xb0>
 8001440:	4b78      	ldr	r3, [pc, #480]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a77      	ldr	r2, [pc, #476]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 8001446:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	4b75      	ldr	r3, [pc, #468]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a74      	ldr	r2, [pc, #464]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 8001452:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001456:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d013      	beq.n	8001488 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001460:	f7ff fc68 	bl	8000d34 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001468:	f7ff fc64 	bl	8000d34 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b64      	cmp	r3, #100	@ 0x64
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e29e      	b.n	80019b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800147a:	4b6a      	ldr	r3, [pc, #424]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d0f0      	beq.n	8001468 <HAL_RCC_OscConfig+0xc0>
 8001486:	e014      	b.n	80014b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001488:	f7ff fc54 	bl	8000d34 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001490:	f7ff fc50 	bl	8000d34 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b64      	cmp	r3, #100	@ 0x64
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e28a      	b.n	80019b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014a2:	4b60      	ldr	r3, [pc, #384]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1f0      	bne.n	8001490 <HAL_RCC_OscConfig+0xe8>
 80014ae:	e000      	b.n	80014b2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d075      	beq.n	80015aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014be:	4b59      	ldr	r3, [pc, #356]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 030c 	and.w	r3, r3, #12
 80014c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014c8:	4b56      	ldr	r3, [pc, #344]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	f003 0303 	and.w	r3, r3, #3
 80014d0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	2b0c      	cmp	r3, #12
 80014d6:	d102      	bne.n	80014de <HAL_RCC_OscConfig+0x136>
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d002      	beq.n	80014e4 <HAL_RCC_OscConfig+0x13c>
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	2b04      	cmp	r3, #4
 80014e2:	d11f      	bne.n	8001524 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014e4:	4b4f      	ldr	r3, [pc, #316]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d005      	beq.n	80014fc <HAL_RCC_OscConfig+0x154>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d101      	bne.n	80014fc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e25d      	b.n	80019b8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014fc:	4b49      	ldr	r3, [pc, #292]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	691b      	ldr	r3, [r3, #16]
 8001508:	061b      	lsls	r3, r3, #24
 800150a:	4946      	ldr	r1, [pc, #280]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 800150c:	4313      	orrs	r3, r2
 800150e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001510:	4b45      	ldr	r3, [pc, #276]	@ (8001628 <HAL_RCC_OscConfig+0x280>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff f9cd 	bl	80008b4 <HAL_InitTick>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d043      	beq.n	80015a8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e249      	b.n	80019b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d023      	beq.n	8001574 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800152c:	4b3d      	ldr	r3, [pc, #244]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a3c      	ldr	r2, [pc, #240]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 8001532:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001536:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001538:	f7ff fbfc 	bl	8000d34 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001540:	f7ff fbf8 	bl	8000d34 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e232      	b.n	80019b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001552:	4b34      	ldr	r3, [pc, #208]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800155a:	2b00      	cmp	r3, #0
 800155c:	d0f0      	beq.n	8001540 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800155e:	4b31      	ldr	r3, [pc, #196]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	061b      	lsls	r3, r3, #24
 800156c:	492d      	ldr	r1, [pc, #180]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 800156e:	4313      	orrs	r3, r2
 8001570:	604b      	str	r3, [r1, #4]
 8001572:	e01a      	b.n	80015aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001574:	4b2b      	ldr	r3, [pc, #172]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a2a      	ldr	r2, [pc, #168]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 800157a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800157e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001580:	f7ff fbd8 	bl	8000d34 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001588:	f7ff fbd4 	bl	8000d34 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e20e      	b.n	80019b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800159a:	4b22      	ldr	r3, [pc, #136]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f0      	bne.n	8001588 <HAL_RCC_OscConfig+0x1e0>
 80015a6:	e000      	b.n	80015aa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015a8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0308 	and.w	r3, r3, #8
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d041      	beq.n	800163a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d01c      	beq.n	80015f8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015be:	4b19      	ldr	r3, [pc, #100]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 80015c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015c4:	4a17      	ldr	r2, [pc, #92]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ce:	f7ff fbb1 	bl	8000d34 <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015d6:	f7ff fbad 	bl	8000d34 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e1e7      	b.n	80019b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 80015ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d0ef      	beq.n	80015d6 <HAL_RCC_OscConfig+0x22e>
 80015f6:	e020      	b.n	800163a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 80015fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015fe:	4a09      	ldr	r2, [pc, #36]	@ (8001624 <HAL_RCC_OscConfig+0x27c>)
 8001600:	f023 0301 	bic.w	r3, r3, #1
 8001604:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001608:	f7ff fb94 	bl	8000d34 <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800160e:	e00d      	b.n	800162c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001610:	f7ff fb90 	bl	8000d34 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d906      	bls.n	800162c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e1ca      	b.n	80019b8 <HAL_RCC_OscConfig+0x610>
 8001622:	bf00      	nop
 8001624:	40021000 	.word	0x40021000
 8001628:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800162c:	4b8c      	ldr	r3, [pc, #560]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 800162e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1ea      	bne.n	8001610 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0304 	and.w	r3, r3, #4
 8001642:	2b00      	cmp	r3, #0
 8001644:	f000 80a6 	beq.w	8001794 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001648:	2300      	movs	r3, #0
 800164a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800164c:	4b84      	ldr	r3, [pc, #528]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 800164e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001650:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d101      	bne.n	800165c <HAL_RCC_OscConfig+0x2b4>
 8001658:	2301      	movs	r3, #1
 800165a:	e000      	b.n	800165e <HAL_RCC_OscConfig+0x2b6>
 800165c:	2300      	movs	r3, #0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d00d      	beq.n	800167e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001662:	4b7f      	ldr	r3, [pc, #508]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 8001664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001666:	4a7e      	ldr	r2, [pc, #504]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 8001668:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800166c:	6593      	str	r3, [r2, #88]	@ 0x58
 800166e:	4b7c      	ldr	r3, [pc, #496]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 8001670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001672:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800167a:	2301      	movs	r3, #1
 800167c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800167e:	4b79      	ldr	r3, [pc, #484]	@ (8001864 <HAL_RCC_OscConfig+0x4bc>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001686:	2b00      	cmp	r3, #0
 8001688:	d118      	bne.n	80016bc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800168a:	4b76      	ldr	r3, [pc, #472]	@ (8001864 <HAL_RCC_OscConfig+0x4bc>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a75      	ldr	r2, [pc, #468]	@ (8001864 <HAL_RCC_OscConfig+0x4bc>)
 8001690:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001694:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001696:	f7ff fb4d 	bl	8000d34 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800169e:	f7ff fb49 	bl	8000d34 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e183      	b.n	80019b8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016b0:	4b6c      	ldr	r3, [pc, #432]	@ (8001864 <HAL_RCC_OscConfig+0x4bc>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0f0      	beq.n	800169e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d108      	bne.n	80016d6 <HAL_RCC_OscConfig+0x32e>
 80016c4:	4b66      	ldr	r3, [pc, #408]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 80016c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016ca:	4a65      	ldr	r2, [pc, #404]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016d4:	e024      	b.n	8001720 <HAL_RCC_OscConfig+0x378>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	2b05      	cmp	r3, #5
 80016dc:	d110      	bne.n	8001700 <HAL_RCC_OscConfig+0x358>
 80016de:	4b60      	ldr	r3, [pc, #384]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 80016e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016e4:	4a5e      	ldr	r2, [pc, #376]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 80016e6:	f043 0304 	orr.w	r3, r3, #4
 80016ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016ee:	4b5c      	ldr	r3, [pc, #368]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 80016f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016f4:	4a5a      	ldr	r2, [pc, #360]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 80016f6:	f043 0301 	orr.w	r3, r3, #1
 80016fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016fe:	e00f      	b.n	8001720 <HAL_RCC_OscConfig+0x378>
 8001700:	4b57      	ldr	r3, [pc, #348]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 8001702:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001706:	4a56      	ldr	r2, [pc, #344]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 8001708:	f023 0301 	bic.w	r3, r3, #1
 800170c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001710:	4b53      	ldr	r3, [pc, #332]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 8001712:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001716:	4a52      	ldr	r2, [pc, #328]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 8001718:	f023 0304 	bic.w	r3, r3, #4
 800171c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d016      	beq.n	8001756 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001728:	f7ff fb04 	bl	8000d34 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800172e:	e00a      	b.n	8001746 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001730:	f7ff fb00 	bl	8000d34 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800173e:	4293      	cmp	r3, r2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e138      	b.n	80019b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001746:	4b46      	ldr	r3, [pc, #280]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 8001748:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d0ed      	beq.n	8001730 <HAL_RCC_OscConfig+0x388>
 8001754:	e015      	b.n	8001782 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001756:	f7ff faed 	bl	8000d34 <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800175c:	e00a      	b.n	8001774 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800175e:	f7ff fae9 	bl	8000d34 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	f241 3288 	movw	r2, #5000	@ 0x1388
 800176c:	4293      	cmp	r3, r2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e121      	b.n	80019b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001774:	4b3a      	ldr	r3, [pc, #232]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 8001776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1ed      	bne.n	800175e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001782:	7ffb      	ldrb	r3, [r7, #31]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d105      	bne.n	8001794 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001788:	4b35      	ldr	r3, [pc, #212]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 800178a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800178c:	4a34      	ldr	r2, [pc, #208]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 800178e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001792:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0320 	and.w	r3, r3, #32
 800179c:	2b00      	cmp	r3, #0
 800179e:	d03c      	beq.n	800181a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d01c      	beq.n	80017e2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 80017aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017ae:	4a2c      	ldr	r2, [pc, #176]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b8:	f7ff fabc 	bl	8000d34 <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017c0:	f7ff fab8 	bl	8000d34 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e0f2      	b.n	80019b8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017d2:	4b23      	ldr	r3, [pc, #140]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 80017d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d0ef      	beq.n	80017c0 <HAL_RCC_OscConfig+0x418>
 80017e0:	e01b      	b.n	800181a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 80017e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 80017ea:	f023 0301 	bic.w	r3, r3, #1
 80017ee:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f2:	f7ff fa9f 	bl	8000d34 <HAL_GetTick>
 80017f6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017f8:	e008      	b.n	800180c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017fa:	f7ff fa9b 	bl	8000d34 <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d901      	bls.n	800180c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e0d5      	b.n	80019b8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800180c:	4b14      	ldr	r3, [pc, #80]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 800180e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1ef      	bne.n	80017fa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	69db      	ldr	r3, [r3, #28]
 800181e:	2b00      	cmp	r3, #0
 8001820:	f000 80c9 	beq.w	80019b6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001824:	4b0e      	ldr	r3, [pc, #56]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f003 030c 	and.w	r3, r3, #12
 800182c:	2b0c      	cmp	r3, #12
 800182e:	f000 8083 	beq.w	8001938 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	2b02      	cmp	r3, #2
 8001838:	d15e      	bne.n	80018f8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800183a:	4b09      	ldr	r3, [pc, #36]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a08      	ldr	r2, [pc, #32]	@ (8001860 <HAL_RCC_OscConfig+0x4b8>)
 8001840:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001844:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001846:	f7ff fa75 	bl	8000d34 <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800184c:	e00c      	b.n	8001868 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800184e:	f7ff fa71 	bl	8000d34 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d905      	bls.n	8001868 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e0ab      	b.n	80019b8 <HAL_RCC_OscConfig+0x610>
 8001860:	40021000 	.word	0x40021000
 8001864:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001868:	4b55      	ldr	r3, [pc, #340]	@ (80019c0 <HAL_RCC_OscConfig+0x618>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1ec      	bne.n	800184e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001874:	4b52      	ldr	r3, [pc, #328]	@ (80019c0 <HAL_RCC_OscConfig+0x618>)
 8001876:	68da      	ldr	r2, [r3, #12]
 8001878:	4b52      	ldr	r3, [pc, #328]	@ (80019c4 <HAL_RCC_OscConfig+0x61c>)
 800187a:	4013      	ands	r3, r2
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	6a11      	ldr	r1, [r2, #32]
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001884:	3a01      	subs	r2, #1
 8001886:	0112      	lsls	r2, r2, #4
 8001888:	4311      	orrs	r1, r2
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800188e:	0212      	lsls	r2, r2, #8
 8001890:	4311      	orrs	r1, r2
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001896:	0852      	lsrs	r2, r2, #1
 8001898:	3a01      	subs	r2, #1
 800189a:	0552      	lsls	r2, r2, #21
 800189c:	4311      	orrs	r1, r2
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80018a2:	0852      	lsrs	r2, r2, #1
 80018a4:	3a01      	subs	r2, #1
 80018a6:	0652      	lsls	r2, r2, #25
 80018a8:	4311      	orrs	r1, r2
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80018ae:	06d2      	lsls	r2, r2, #27
 80018b0:	430a      	orrs	r2, r1
 80018b2:	4943      	ldr	r1, [pc, #268]	@ (80019c0 <HAL_RCC_OscConfig+0x618>)
 80018b4:	4313      	orrs	r3, r2
 80018b6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018b8:	4b41      	ldr	r3, [pc, #260]	@ (80019c0 <HAL_RCC_OscConfig+0x618>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a40      	ldr	r2, [pc, #256]	@ (80019c0 <HAL_RCC_OscConfig+0x618>)
 80018be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018c2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018c4:	4b3e      	ldr	r3, [pc, #248]	@ (80019c0 <HAL_RCC_OscConfig+0x618>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	4a3d      	ldr	r2, [pc, #244]	@ (80019c0 <HAL_RCC_OscConfig+0x618>)
 80018ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018ce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d0:	f7ff fa30 	bl	8000d34 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d8:	f7ff fa2c 	bl	8000d34 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e066      	b.n	80019b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ea:	4b35      	ldr	r3, [pc, #212]	@ (80019c0 <HAL_RCC_OscConfig+0x618>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0f0      	beq.n	80018d8 <HAL_RCC_OscConfig+0x530>
 80018f6:	e05e      	b.n	80019b6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f8:	4b31      	ldr	r3, [pc, #196]	@ (80019c0 <HAL_RCC_OscConfig+0x618>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a30      	ldr	r2, [pc, #192]	@ (80019c0 <HAL_RCC_OscConfig+0x618>)
 80018fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001902:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001904:	f7ff fa16 	bl	8000d34 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800190c:	f7ff fa12 	bl	8000d34 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e04c      	b.n	80019b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800191e:	4b28      	ldr	r3, [pc, #160]	@ (80019c0 <HAL_RCC_OscConfig+0x618>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f0      	bne.n	800190c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800192a:	4b25      	ldr	r3, [pc, #148]	@ (80019c0 <HAL_RCC_OscConfig+0x618>)
 800192c:	68da      	ldr	r2, [r3, #12]
 800192e:	4924      	ldr	r1, [pc, #144]	@ (80019c0 <HAL_RCC_OscConfig+0x618>)
 8001930:	4b25      	ldr	r3, [pc, #148]	@ (80019c8 <HAL_RCC_OscConfig+0x620>)
 8001932:	4013      	ands	r3, r2
 8001934:	60cb      	str	r3, [r1, #12]
 8001936:	e03e      	b.n	80019b6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	69db      	ldr	r3, [r3, #28]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d101      	bne.n	8001944 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e039      	b.n	80019b8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001944:	4b1e      	ldr	r3, [pc, #120]	@ (80019c0 <HAL_RCC_OscConfig+0x618>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	f003 0203 	and.w	r2, r3, #3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	429a      	cmp	r2, r3
 8001956:	d12c      	bne.n	80019b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001962:	3b01      	subs	r3, #1
 8001964:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001966:	429a      	cmp	r2, r3
 8001968:	d123      	bne.n	80019b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001974:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001976:	429a      	cmp	r2, r3
 8001978:	d11b      	bne.n	80019b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001984:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001986:	429a      	cmp	r2, r3
 8001988:	d113      	bne.n	80019b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001994:	085b      	lsrs	r3, r3, #1
 8001996:	3b01      	subs	r3, #1
 8001998:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800199a:	429a      	cmp	r2, r3
 800199c:	d109      	bne.n	80019b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019a8:	085b      	lsrs	r3, r3, #1
 80019aa:	3b01      	subs	r3, #1
 80019ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d001      	beq.n	80019b6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e000      	b.n	80019b8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3720      	adds	r7, #32
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40021000 	.word	0x40021000
 80019c4:	019f800c 	.word	0x019f800c
 80019c8:	feeefffc 	.word	0xfeeefffc

080019cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e11e      	b.n	8001c22 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019e4:	4b91      	ldr	r3, [pc, #580]	@ (8001c2c <HAL_RCC_ClockConfig+0x260>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 030f 	and.w	r3, r3, #15
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d910      	bls.n	8001a14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f2:	4b8e      	ldr	r3, [pc, #568]	@ (8001c2c <HAL_RCC_ClockConfig+0x260>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f023 020f 	bic.w	r2, r3, #15
 80019fa:	498c      	ldr	r1, [pc, #560]	@ (8001c2c <HAL_RCC_ClockConfig+0x260>)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a02:	4b8a      	ldr	r3, [pc, #552]	@ (8001c2c <HAL_RCC_ClockConfig+0x260>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 030f 	and.w	r3, r3, #15
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d001      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e106      	b.n	8001c22 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d073      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	2b03      	cmp	r3, #3
 8001a26:	d129      	bne.n	8001a7c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a28:	4b81      	ldr	r3, [pc, #516]	@ (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d101      	bne.n	8001a38 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e0f4      	b.n	8001c22 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001a38:	f000 f9d0 	bl	8001ddc <RCC_GetSysClockFreqFromPLLSource>
 8001a3c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	4a7c      	ldr	r2, [pc, #496]	@ (8001c34 <HAL_RCC_ClockConfig+0x268>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d93f      	bls.n	8001ac6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001a46:	4b7a      	ldr	r3, [pc, #488]	@ (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d009      	beq.n	8001a66 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d033      	beq.n	8001ac6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d12f      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a66:	4b72      	ldr	r3, [pc, #456]	@ (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a6e:	4a70      	ldr	r2, [pc, #448]	@ (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001a70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a74:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001a76:	2380      	movs	r3, #128	@ 0x80
 8001a78:	617b      	str	r3, [r7, #20]
 8001a7a:	e024      	b.n	8001ac6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d107      	bne.n	8001a94 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a84:	4b6a      	ldr	r3, [pc, #424]	@ (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d109      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e0c6      	b.n	8001c22 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a94:	4b66      	ldr	r3, [pc, #408]	@ (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d101      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e0be      	b.n	8001c22 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001aa4:	f000 f8ce 	bl	8001c44 <HAL_RCC_GetSysClockFreq>
 8001aa8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	4a61      	ldr	r2, [pc, #388]	@ (8001c34 <HAL_RCC_ClockConfig+0x268>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d909      	bls.n	8001ac6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ab2:	4b5f      	ldr	r3, [pc, #380]	@ (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001aba:	4a5d      	ldr	r2, [pc, #372]	@ (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001abc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ac0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001ac2:	2380      	movs	r3, #128	@ 0x80
 8001ac4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ac6:	4b5a      	ldr	r3, [pc, #360]	@ (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f023 0203 	bic.w	r2, r3, #3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	4957      	ldr	r1, [pc, #348]	@ (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ad8:	f7ff f92c 	bl	8000d34 <HAL_GetTick>
 8001adc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ade:	e00a      	b.n	8001af6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ae0:	f7ff f928 	bl	8000d34 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e095      	b.n	8001c22 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001af6:	4b4e      	ldr	r3, [pc, #312]	@ (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 020c 	and.w	r2, r3, #12
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d1eb      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d023      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d005      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b20:	4b43      	ldr	r3, [pc, #268]	@ (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	4a42      	ldr	r2, [pc, #264]	@ (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001b26:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001b2a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0308 	and.w	r3, r3, #8
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d007      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001b38:	4b3d      	ldr	r3, [pc, #244]	@ (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001b40:	4a3b      	ldr	r2, [pc, #236]	@ (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001b42:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001b46:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b48:	4b39      	ldr	r3, [pc, #228]	@ (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	4936      	ldr	r1, [pc, #216]	@ (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	608b      	str	r3, [r1, #8]
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	2b80      	cmp	r3, #128	@ 0x80
 8001b60:	d105      	bne.n	8001b6e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001b62:	4b33      	ldr	r3, [pc, #204]	@ (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	4a32      	ldr	r2, [pc, #200]	@ (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001b68:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b6c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b6e:	4b2f      	ldr	r3, [pc, #188]	@ (8001c2c <HAL_RCC_ClockConfig+0x260>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 030f 	and.w	r3, r3, #15
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d21d      	bcs.n	8001bb8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7c:	4b2b      	ldr	r3, [pc, #172]	@ (8001c2c <HAL_RCC_ClockConfig+0x260>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f023 020f 	bic.w	r2, r3, #15
 8001b84:	4929      	ldr	r1, [pc, #164]	@ (8001c2c <HAL_RCC_ClockConfig+0x260>)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b8c:	f7ff f8d2 	bl	8000d34 <HAL_GetTick>
 8001b90:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b92:	e00a      	b.n	8001baa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b94:	f7ff f8ce 	bl	8000d34 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e03b      	b.n	8001c22 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001baa:	4b20      	ldr	r3, [pc, #128]	@ (8001c2c <HAL_RCC_ClockConfig+0x260>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d1ed      	bne.n	8001b94 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d008      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	4917      	ldr	r1, [pc, #92]	@ (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0308 	and.w	r3, r3, #8
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d009      	beq.n	8001bf6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001be2:	4b13      	ldr	r3, [pc, #76]	@ (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	490f      	ldr	r1, [pc, #60]	@ (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bf6:	f000 f825 	bl	8001c44 <HAL_RCC_GetSysClockFreq>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8001c30 <HAL_RCC_ClockConfig+0x264>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	091b      	lsrs	r3, r3, #4
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	490c      	ldr	r1, [pc, #48]	@ (8001c38 <HAL_RCC_ClockConfig+0x26c>)
 8001c08:	5ccb      	ldrb	r3, [r1, r3]
 8001c0a:	f003 031f 	and.w	r3, r3, #31
 8001c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c12:	4a0a      	ldr	r2, [pc, #40]	@ (8001c3c <HAL_RCC_ClockConfig+0x270>)
 8001c14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001c16:	4b0a      	ldr	r3, [pc, #40]	@ (8001c40 <HAL_RCC_ClockConfig+0x274>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7fe fe4a 	bl	80008b4 <HAL_InitTick>
 8001c20:	4603      	mov	r3, r0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3718      	adds	r7, #24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40022000 	.word	0x40022000
 8001c30:	40021000 	.word	0x40021000
 8001c34:	04c4b400 	.word	0x04c4b400
 8001c38:	08005e60 	.word	0x08005e60
 8001c3c:	20000000 	.word	0x20000000
 8001c40:	20000004 	.word	0x20000004

08001c44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b087      	sub	sp, #28
 8001c48:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001c4a:	4b2c      	ldr	r3, [pc, #176]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f003 030c 	and.w	r3, r3, #12
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d102      	bne.n	8001c5c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c56:	4b2a      	ldr	r3, [pc, #168]	@ (8001d00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c58:	613b      	str	r3, [r7, #16]
 8001c5a:	e047      	b.n	8001cec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001c5c:	4b27      	ldr	r3, [pc, #156]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f003 030c 	and.w	r3, r3, #12
 8001c64:	2b08      	cmp	r3, #8
 8001c66:	d102      	bne.n	8001c6e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c68:	4b26      	ldr	r3, [pc, #152]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c6a:	613b      	str	r3, [r7, #16]
 8001c6c:	e03e      	b.n	8001cec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001c6e:	4b23      	ldr	r3, [pc, #140]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 030c 	and.w	r3, r3, #12
 8001c76:	2b0c      	cmp	r3, #12
 8001c78:	d136      	bne.n	8001ce8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c7a:	4b20      	ldr	r3, [pc, #128]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	f003 0303 	and.w	r3, r3, #3
 8001c82:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c84:	4b1d      	ldr	r3, [pc, #116]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	091b      	lsrs	r3, r3, #4
 8001c8a:	f003 030f 	and.w	r3, r3, #15
 8001c8e:	3301      	adds	r3, #1
 8001c90:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2b03      	cmp	r3, #3
 8001c96:	d10c      	bne.n	8001cb2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c98:	4a1a      	ldr	r2, [pc, #104]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca0:	4a16      	ldr	r2, [pc, #88]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ca2:	68d2      	ldr	r2, [r2, #12]
 8001ca4:	0a12      	lsrs	r2, r2, #8
 8001ca6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001caa:	fb02 f303 	mul.w	r3, r2, r3
 8001cae:	617b      	str	r3, [r7, #20]
      break;
 8001cb0:	e00c      	b.n	8001ccc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cb2:	4a13      	ldr	r2, [pc, #76]	@ (8001d00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cba:	4a10      	ldr	r2, [pc, #64]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cbc:	68d2      	ldr	r2, [r2, #12]
 8001cbe:	0a12      	lsrs	r2, r2, #8
 8001cc0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001cc4:	fb02 f303 	mul.w	r3, r2, r3
 8001cc8:	617b      	str	r3, [r7, #20]
      break;
 8001cca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	0e5b      	lsrs	r3, r3, #25
 8001cd2:	f003 0303 	and.w	r3, r3, #3
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	e001      	b.n	8001cec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001cec:	693b      	ldr	r3, [r7, #16]
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	371c      	adds	r7, #28
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	00f42400 	.word	0x00f42400
 8001d04:	016e3600 	.word	0x016e3600

08001d08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d0c:	4b03      	ldr	r3, [pc, #12]	@ (8001d1c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	20000000 	.word	0x20000000

08001d20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d24:	f7ff fff0 	bl	8001d08 <HAL_RCC_GetHCLKFreq>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	4b06      	ldr	r3, [pc, #24]	@ (8001d44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	0a1b      	lsrs	r3, r3, #8
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	4904      	ldr	r1, [pc, #16]	@ (8001d48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d36:	5ccb      	ldrb	r3, [r1, r3]
 8001d38:	f003 031f 	and.w	r3, r3, #31
 8001d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40021000 	.word	0x40021000
 8001d48:	08005e70 	.word	0x08005e70

08001d4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d50:	f7ff ffda 	bl	8001d08 <HAL_RCC_GetHCLKFreq>
 8001d54:	4602      	mov	r2, r0
 8001d56:	4b06      	ldr	r3, [pc, #24]	@ (8001d70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	0adb      	lsrs	r3, r3, #11
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	4904      	ldr	r1, [pc, #16]	@ (8001d74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d62:	5ccb      	ldrb	r3, [r1, r3]
 8001d64:	f003 031f 	and.w	r3, r3, #31
 8001d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40021000 	.word	0x40021000
 8001d74:	08005e70 	.word	0x08005e70

08001d78 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	220f      	movs	r2, #15
 8001d86:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001d88:	4b12      	ldr	r3, [pc, #72]	@ (8001dd4 <HAL_RCC_GetClockConfig+0x5c>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 0203 	and.w	r2, r3, #3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001d94:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd4 <HAL_RCC_GetClockConfig+0x5c>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001da0:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd4 <HAL_RCC_GetClockConfig+0x5c>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001dac:	4b09      	ldr	r3, [pc, #36]	@ (8001dd4 <HAL_RCC_GetClockConfig+0x5c>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	08db      	lsrs	r3, r3, #3
 8001db2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001dba:	4b07      	ldr	r3, [pc, #28]	@ (8001dd8 <HAL_RCC_GetClockConfig+0x60>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 020f 	and.w	r2, r3, #15
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	601a      	str	r2, [r3, #0]
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	40022000 	.word	0x40022000

08001ddc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b087      	sub	sp, #28
 8001de0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001de2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001dec:	4b1b      	ldr	r3, [pc, #108]	@ (8001e5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	091b      	lsrs	r3, r3, #4
 8001df2:	f003 030f 	and.w	r3, r3, #15
 8001df6:	3301      	adds	r3, #1
 8001df8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	2b03      	cmp	r3, #3
 8001dfe:	d10c      	bne.n	8001e1a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e00:	4a17      	ldr	r2, [pc, #92]	@ (8001e60 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e08:	4a14      	ldr	r2, [pc, #80]	@ (8001e5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e0a:	68d2      	ldr	r2, [r2, #12]
 8001e0c:	0a12      	lsrs	r2, r2, #8
 8001e0e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e12:	fb02 f303 	mul.w	r3, r2, r3
 8001e16:	617b      	str	r3, [r7, #20]
    break;
 8001e18:	e00c      	b.n	8001e34 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e1a:	4a12      	ldr	r2, [pc, #72]	@ (8001e64 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e22:	4a0e      	ldr	r2, [pc, #56]	@ (8001e5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e24:	68d2      	ldr	r2, [r2, #12]
 8001e26:	0a12      	lsrs	r2, r2, #8
 8001e28:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e2c:	fb02 f303 	mul.w	r3, r2, r3
 8001e30:	617b      	str	r3, [r7, #20]
    break;
 8001e32:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e34:	4b09      	ldr	r3, [pc, #36]	@ (8001e5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	0e5b      	lsrs	r3, r3, #25
 8001e3a:	f003 0303 	and.w	r3, r3, #3
 8001e3e:	3301      	adds	r3, #1
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001e4e:	687b      	ldr	r3, [r7, #4]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	371c      	adds	r7, #28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	016e3600 	.word	0x016e3600
 8001e64:	00f42400 	.word	0x00f42400

08001e68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e70:	2300      	movs	r3, #0
 8001e72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e74:	2300      	movs	r3, #0
 8001e76:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f000 8098 	beq.w	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e86:	2300      	movs	r3, #0
 8001e88:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e8a:	4b43      	ldr	r3, [pc, #268]	@ (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d10d      	bne.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e96:	4b40      	ldr	r3, [pc, #256]	@ (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e9a:	4a3f      	ldr	r2, [pc, #252]	@ (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ea0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ea2:	4b3d      	ldr	r3, [pc, #244]	@ (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ea4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eaa:	60bb      	str	r3, [r7, #8]
 8001eac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001eb2:	4b3a      	ldr	r3, [pc, #232]	@ (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a39      	ldr	r2, [pc, #228]	@ (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001eb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ebc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ebe:	f7fe ff39 	bl	8000d34 <HAL_GetTick>
 8001ec2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ec4:	e009      	b.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec6:	f7fe ff35 	bl	8000d34 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d902      	bls.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	74fb      	strb	r3, [r7, #19]
        break;
 8001ed8:	e005      	b.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001eda:	4b30      	ldr	r3, [pc, #192]	@ (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d0ef      	beq.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001ee6:	7cfb      	ldrb	r3, [r7, #19]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d159      	bne.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001eec:	4b2a      	ldr	r3, [pc, #168]	@ (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ef2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ef6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d01e      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d019      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f08:	4b23      	ldr	r3, [pc, #140]	@ (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f12:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f14:	4b20      	ldr	r3, [pc, #128]	@ (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f1a:	4a1f      	ldr	r2, [pc, #124]	@ (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f24:	4b1c      	ldr	r3, [pc, #112]	@ (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f2a:	4a1b      	ldr	r2, [pc, #108]	@ (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f34:	4a18      	ldr	r2, [pc, #96]	@ (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d016      	beq.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f46:	f7fe fef5 	bl	8000d34 <HAL_GetTick>
 8001f4a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f4c:	e00b      	b.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4e:	f7fe fef1 	bl	8000d34 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d902      	bls.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	74fb      	strb	r3, [r7, #19]
            break;
 8001f64:	e006      	b.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f66:	4b0c      	ldr	r3, [pc, #48]	@ (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d0ec      	beq.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001f74:	7cfb      	ldrb	r3, [r7, #19]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d10b      	bne.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f7a:	4b07      	ldr	r3, [pc, #28]	@ (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f88:	4903      	ldr	r1, [pc, #12]	@ (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001f90:	e008      	b.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f92:	7cfb      	ldrb	r3, [r7, #19]
 8001f94:	74bb      	strb	r3, [r7, #18]
 8001f96:	e005      	b.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fa0:	7cfb      	ldrb	r3, [r7, #19]
 8001fa2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fa4:	7c7b      	ldrb	r3, [r7, #17]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d105      	bne.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001faa:	4ba6      	ldr	r3, [pc, #664]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fae:	4aa5      	ldr	r2, [pc, #660]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fb0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fb4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00a      	beq.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fc2:	4ba0      	ldr	r3, [pc, #640]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fc8:	f023 0203 	bic.w	r2, r3, #3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	499c      	ldr	r1, [pc, #624]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00a      	beq.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fe4:	4b97      	ldr	r3, [pc, #604]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fea:	f023 020c 	bic.w	r2, r3, #12
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	4994      	ldr	r1, [pc, #592]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0304 	and.w	r3, r3, #4
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00a      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002006:	4b8f      	ldr	r3, [pc, #572]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800200c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	498b      	ldr	r1, [pc, #556]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002016:	4313      	orrs	r3, r2
 8002018:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0308 	and.w	r3, r3, #8
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00a      	beq.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002028:	4b86      	ldr	r3, [pc, #536]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800202a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800202e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	4983      	ldr	r1, [pc, #524]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002038:	4313      	orrs	r3, r2
 800203a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0320 	and.w	r3, r3, #32
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00a      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800204a:	4b7e      	ldr	r3, [pc, #504]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800204c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002050:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	497a      	ldr	r1, [pc, #488]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800205a:	4313      	orrs	r3, r2
 800205c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00a      	beq.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800206c:	4b75      	ldr	r3, [pc, #468]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800206e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002072:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	4972      	ldr	r1, [pc, #456]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800207c:	4313      	orrs	r3, r2
 800207e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00a      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800208e:	4b6d      	ldr	r3, [pc, #436]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002094:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	4969      	ldr	r1, [pc, #420]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d00a      	beq.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020b0:	4b64      	ldr	r3, [pc, #400]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020b6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	4961      	ldr	r1, [pc, #388]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00a      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020d2:	4b5c      	ldr	r3, [pc, #368]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020d8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e0:	4958      	ldr	r1, [pc, #352]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d015      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020f4:	4b53      	ldr	r3, [pc, #332]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002102:	4950      	ldr	r1, [pc, #320]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002104:	4313      	orrs	r3, r2
 8002106:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800210e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002112:	d105      	bne.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002114:	4b4b      	ldr	r3, [pc, #300]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	4a4a      	ldr	r2, [pc, #296]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800211a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800211e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002128:	2b00      	cmp	r3, #0
 800212a:	d015      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800212c:	4b45      	ldr	r3, [pc, #276]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800212e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002132:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800213a:	4942      	ldr	r1, [pc, #264]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800213c:	4313      	orrs	r3, r2
 800213e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002146:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800214a:	d105      	bne.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800214c:	4b3d      	ldr	r3, [pc, #244]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	4a3c      	ldr	r2, [pc, #240]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002152:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002156:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d015      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002164:	4b37      	ldr	r3, [pc, #220]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800216a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002172:	4934      	ldr	r1, [pc, #208]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002174:	4313      	orrs	r3, r2
 8002176:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002182:	d105      	bne.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002184:	4b2f      	ldr	r3, [pc, #188]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	4a2e      	ldr	r2, [pc, #184]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800218a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800218e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d015      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800219c:	4b29      	ldr	r3, [pc, #164]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800219e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021a2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021aa:	4926      	ldr	r1, [pc, #152]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80021ba:	d105      	bne.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021bc:	4b21      	ldr	r3, [pc, #132]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	4a20      	ldr	r2, [pc, #128]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021c6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d015      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021e2:	4918      	ldr	r1, [pc, #96]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80021f2:	d105      	bne.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021f4:	4b13      	ldr	r3, [pc, #76]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	4a12      	ldr	r2, [pc, #72]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021fe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d015      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800220c:	4b0d      	ldr	r3, [pc, #52]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800220e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002212:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800221a:	490a      	ldr	r1, [pc, #40]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800221c:	4313      	orrs	r3, r2
 800221e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002226:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800222a:	d105      	bne.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800222c:	4b05      	ldr	r3, [pc, #20]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	4a04      	ldr	r2, [pc, #16]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002232:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002236:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002238:	7cbb      	ldrb	r3, [r7, #18]
}
 800223a:	4618      	mov	r0, r3
 800223c:	3718      	adds	r7, #24
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40021000 	.word	0x40021000

08002248 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e049      	b.n	80022ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d106      	bne.n	8002274 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 f841 	bl	80022f6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2202      	movs	r2, #2
 8002278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3304      	adds	r3, #4
 8002284:	4619      	mov	r1, r3
 8002286:	4610      	mov	r0, r2
 8002288:	f000 fa22 	bl	80026d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80022fe:	bf00      	nop
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
	...

0800230c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b01      	cmp	r3, #1
 800231e:	d001      	beq.n	8002324 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e04a      	b.n	80023ba <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2202      	movs	r2, #2
 8002328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68da      	ldr	r2, [r3, #12]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f042 0201 	orr.w	r2, r2, #1
 800233a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a21      	ldr	r2, [pc, #132]	@ (80023c8 <HAL_TIM_Base_Start_IT+0xbc>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d018      	beq.n	8002378 <HAL_TIM_Base_Start_IT+0x6c>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800234e:	d013      	beq.n	8002378 <HAL_TIM_Base_Start_IT+0x6c>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a1d      	ldr	r2, [pc, #116]	@ (80023cc <HAL_TIM_Base_Start_IT+0xc0>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d00e      	beq.n	8002378 <HAL_TIM_Base_Start_IT+0x6c>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a1c      	ldr	r2, [pc, #112]	@ (80023d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d009      	beq.n	8002378 <HAL_TIM_Base_Start_IT+0x6c>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a1a      	ldr	r2, [pc, #104]	@ (80023d4 <HAL_TIM_Base_Start_IT+0xc8>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d004      	beq.n	8002378 <HAL_TIM_Base_Start_IT+0x6c>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a19      	ldr	r2, [pc, #100]	@ (80023d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d115      	bne.n	80023a4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	4b17      	ldr	r3, [pc, #92]	@ (80023dc <HAL_TIM_Base_Start_IT+0xd0>)
 8002380:	4013      	ands	r3, r2
 8002382:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2b06      	cmp	r3, #6
 8002388:	d015      	beq.n	80023b6 <HAL_TIM_Base_Start_IT+0xaa>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002390:	d011      	beq.n	80023b6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f042 0201 	orr.w	r2, r2, #1
 80023a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023a2:	e008      	b.n	80023b6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f042 0201 	orr.w	r2, r2, #1
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	e000      	b.n	80023b8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	40012c00 	.word	0x40012c00
 80023cc:	40000400 	.word	0x40000400
 80023d0:	40000800 	.word	0x40000800
 80023d4:	40013400 	.word	0x40013400
 80023d8:	40014000 	.word	0x40014000
 80023dc:	00010007 	.word	0x00010007

080023e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d020      	beq.n	8002444 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d01b      	beq.n	8002444 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f06f 0202 	mvn.w	r2, #2
 8002414:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f931 	bl	8002692 <HAL_TIM_IC_CaptureCallback>
 8002430:	e005      	b.n	800243e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f923 	bl	800267e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 f934 	bl	80026a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	f003 0304 	and.w	r3, r3, #4
 800244a:	2b00      	cmp	r3, #0
 800244c:	d020      	beq.n	8002490 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b00      	cmp	r3, #0
 8002456:	d01b      	beq.n	8002490 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f06f 0204 	mvn.w	r2, #4
 8002460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2202      	movs	r2, #2
 8002466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f90b 	bl	8002692 <HAL_TIM_IC_CaptureCallback>
 800247c:	e005      	b.n	800248a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f8fd 	bl	800267e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 f90e 	bl	80026a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	2b00      	cmp	r3, #0
 8002498:	d020      	beq.n	80024dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f003 0308 	and.w	r3, r3, #8
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d01b      	beq.n	80024dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f06f 0208 	mvn.w	r2, #8
 80024ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2204      	movs	r2, #4
 80024b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f8e5 	bl	8002692 <HAL_TIM_IC_CaptureCallback>
 80024c8:	e005      	b.n	80024d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f8d7 	bl	800267e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 f8e8 	bl	80026a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	f003 0310 	and.w	r3, r3, #16
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d020      	beq.n	8002528 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f003 0310 	and.w	r3, r3, #16
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d01b      	beq.n	8002528 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f06f 0210 	mvn.w	r2, #16
 80024f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2208      	movs	r2, #8
 80024fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 f8bf 	bl	8002692 <HAL_TIM_IC_CaptureCallback>
 8002514:	e005      	b.n	8002522 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f8b1 	bl	800267e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 f8c2 	bl	80026a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00c      	beq.n	800254c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b00      	cmp	r3, #0
 800253a:	d007      	beq.n	800254c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f06f 0201 	mvn.w	r2, #1
 8002544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7fe f972 	bl	8000830 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002552:	2b00      	cmp	r3, #0
 8002554:	d104      	bne.n	8002560 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00c      	beq.n	800257a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002566:	2b00      	cmp	r3, #0
 8002568:	d007      	beq.n	800257a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002572:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 f951 	bl	800281c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00c      	beq.n	800259e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800258a:	2b00      	cmp	r3, #0
 800258c:	d007      	beq.n	800259e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002596:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f000 f949 	bl	8002830 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d00c      	beq.n	80025c2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d007      	beq.n	80025c2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80025ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f000 f87c 	bl	80026ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	f003 0320 	and.w	r3, r3, #32
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00c      	beq.n	80025e6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f003 0320 	and.w	r3, r3, #32
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d007      	beq.n	80025e6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f06f 0220 	mvn.w	r2, #32
 80025de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 f911 	bl	8002808 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00c      	beq.n	800260a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d007      	beq.n	800260a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8002602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 f91d 	bl	8002844 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00c      	beq.n	800262e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d007      	beq.n	800262e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8002626:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 f915 	bl	8002858 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00c      	beq.n	8002652 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d007      	beq.n	8002652 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800264a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 f90d 	bl	800286c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00c      	beq.n	8002676 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d007      	beq.n	8002676 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800266e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 f905 	bl	8002880 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002676:	bf00      	nop
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
	...

080026d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a42      	ldr	r2, [pc, #264]	@ (80027ec <TIM_Base_SetConfig+0x11c>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d00f      	beq.n	8002708 <TIM_Base_SetConfig+0x38>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026ee:	d00b      	beq.n	8002708 <TIM_Base_SetConfig+0x38>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a3f      	ldr	r2, [pc, #252]	@ (80027f0 <TIM_Base_SetConfig+0x120>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d007      	beq.n	8002708 <TIM_Base_SetConfig+0x38>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a3e      	ldr	r2, [pc, #248]	@ (80027f4 <TIM_Base_SetConfig+0x124>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d003      	beq.n	8002708 <TIM_Base_SetConfig+0x38>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a3d      	ldr	r2, [pc, #244]	@ (80027f8 <TIM_Base_SetConfig+0x128>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d108      	bne.n	800271a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800270e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	4313      	orrs	r3, r2
 8002718:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a33      	ldr	r2, [pc, #204]	@ (80027ec <TIM_Base_SetConfig+0x11c>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d01b      	beq.n	800275a <TIM_Base_SetConfig+0x8a>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002728:	d017      	beq.n	800275a <TIM_Base_SetConfig+0x8a>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a30      	ldr	r2, [pc, #192]	@ (80027f0 <TIM_Base_SetConfig+0x120>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d013      	beq.n	800275a <TIM_Base_SetConfig+0x8a>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a2f      	ldr	r2, [pc, #188]	@ (80027f4 <TIM_Base_SetConfig+0x124>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d00f      	beq.n	800275a <TIM_Base_SetConfig+0x8a>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a2e      	ldr	r2, [pc, #184]	@ (80027f8 <TIM_Base_SetConfig+0x128>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d00b      	beq.n	800275a <TIM_Base_SetConfig+0x8a>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a2d      	ldr	r2, [pc, #180]	@ (80027fc <TIM_Base_SetConfig+0x12c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d007      	beq.n	800275a <TIM_Base_SetConfig+0x8a>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a2c      	ldr	r2, [pc, #176]	@ (8002800 <TIM_Base_SetConfig+0x130>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d003      	beq.n	800275a <TIM_Base_SetConfig+0x8a>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a2b      	ldr	r2, [pc, #172]	@ (8002804 <TIM_Base_SetConfig+0x134>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d108      	bne.n	800276c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002760:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	4313      	orrs	r3, r2
 800276a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	4313      	orrs	r3, r2
 8002778:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a16      	ldr	r2, [pc, #88]	@ (80027ec <TIM_Base_SetConfig+0x11c>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d00f      	beq.n	80027b8 <TIM_Base_SetConfig+0xe8>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a17      	ldr	r2, [pc, #92]	@ (80027f8 <TIM_Base_SetConfig+0x128>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d00b      	beq.n	80027b8 <TIM_Base_SetConfig+0xe8>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a16      	ldr	r2, [pc, #88]	@ (80027fc <TIM_Base_SetConfig+0x12c>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d007      	beq.n	80027b8 <TIM_Base_SetConfig+0xe8>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a15      	ldr	r2, [pc, #84]	@ (8002800 <TIM_Base_SetConfig+0x130>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d003      	beq.n	80027b8 <TIM_Base_SetConfig+0xe8>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a14      	ldr	r2, [pc, #80]	@ (8002804 <TIM_Base_SetConfig+0x134>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d103      	bne.n	80027c0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	691a      	ldr	r2, [r3, #16]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d105      	bne.n	80027de <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	f023 0201 	bic.w	r2, r3, #1
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	611a      	str	r2, [r3, #16]
  }
}
 80027de:	bf00      	nop
 80027e0:	3714      	adds	r7, #20
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	40012c00 	.word	0x40012c00
 80027f0:	40000400 	.word	0x40000400
 80027f4:	40000800 	.word	0x40000800
 80027f8:	40013400 	.word	0x40013400
 80027fc:	40014000 	.word	0x40014000
 8002800:	40014400 	.word	0x40014400
 8002804:	40014800 	.word	0x40014800

08002808 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e042      	b.n	800292c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d106      	bne.n	80028be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7fe f98f 	bl	8000bdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2224      	movs	r2, #36	@ 0x24
 80028c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 0201 	bic.w	r2, r2, #1
 80028d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d002      	beq.n	80028e4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 fb82 	bl	8002fe8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 f8b3 	bl	8002a50 <UART_SetConfig>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d101      	bne.n	80028f4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e01b      	b.n	800292c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002902:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002912:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f042 0201 	orr.w	r2, r2, #1
 8002922:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 fc01 	bl	800312c <UART_CheckIdleState>
 800292a:	4603      	mov	r3, r0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b08a      	sub	sp, #40	@ 0x28
 8002938:	af02      	add	r7, sp, #8
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	603b      	str	r3, [r7, #0]
 8002940:	4613      	mov	r3, r2
 8002942:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800294a:	2b20      	cmp	r3, #32
 800294c:	d17b      	bne.n	8002a46 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d002      	beq.n	800295a <HAL_UART_Transmit+0x26>
 8002954:	88fb      	ldrh	r3, [r7, #6]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e074      	b.n	8002a48 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2221      	movs	r2, #33	@ 0x21
 800296a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800296e:	f7fe f9e1 	bl	8000d34 <HAL_GetTick>
 8002972:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	88fa      	ldrh	r2, [r7, #6]
 8002978:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	88fa      	ldrh	r2, [r7, #6]
 8002980:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800298c:	d108      	bne.n	80029a0 <HAL_UART_Transmit+0x6c>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d104      	bne.n	80029a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002996:	2300      	movs	r3, #0
 8002998:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	61bb      	str	r3, [r7, #24]
 800299e:	e003      	b.n	80029a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029a4:	2300      	movs	r3, #0
 80029a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029a8:	e030      	b.n	8002a0c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	2200      	movs	r2, #0
 80029b2:	2180      	movs	r1, #128	@ 0x80
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f000 fc63 	bl	8003280 <UART_WaitOnFlagUntilTimeout>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d005      	beq.n	80029cc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2220      	movs	r2, #32
 80029c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e03d      	b.n	8002a48 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10b      	bne.n	80029ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	881b      	ldrh	r3, [r3, #0]
 80029d6:	461a      	mov	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029e0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	3302      	adds	r3, #2
 80029e6:	61bb      	str	r3, [r7, #24]
 80029e8:	e007      	b.n	80029fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	781a      	ldrb	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	3301      	adds	r3, #1
 80029f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	3b01      	subs	r3, #1
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1c8      	bne.n	80029aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	2140      	movs	r1, #64	@ 0x40
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f000 fc2c 	bl	8003280 <UART_WaitOnFlagUntilTimeout>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d005      	beq.n	8002a3a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2220      	movs	r2, #32
 8002a32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e006      	b.n	8002a48 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002a42:	2300      	movs	r3, #0
 8002a44:	e000      	b.n	8002a48 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002a46:	2302      	movs	r3, #2
  }
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3720      	adds	r7, #32
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a54:	b08c      	sub	sp, #48	@ 0x30
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	69db      	ldr	r3, [r3, #28]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	4bab      	ldr	r3, [pc, #684]	@ (8002d2c <UART_SetConfig+0x2dc>)
 8002a80:	4013      	ands	r3, r2
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	6812      	ldr	r2, [r2, #0]
 8002a86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a88:	430b      	orrs	r3, r1
 8002a8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	68da      	ldr	r2, [r3, #12]
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4aa0      	ldr	r2, [pc, #640]	@ (8002d30 <UART_SetConfig+0x2e0>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d004      	beq.n	8002abc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002ac6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	6812      	ldr	r2, [r2, #0]
 8002ace:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ad0:	430b      	orrs	r3, r1
 8002ad2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ada:	f023 010f 	bic.w	r1, r3, #15
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a91      	ldr	r2, [pc, #580]	@ (8002d34 <UART_SetConfig+0x2e4>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d125      	bne.n	8002b40 <UART_SetConfig+0xf0>
 8002af4:	4b90      	ldr	r3, [pc, #576]	@ (8002d38 <UART_SetConfig+0x2e8>)
 8002af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002afa:	f003 0303 	and.w	r3, r3, #3
 8002afe:	2b03      	cmp	r3, #3
 8002b00:	d81a      	bhi.n	8002b38 <UART_SetConfig+0xe8>
 8002b02:	a201      	add	r2, pc, #4	@ (adr r2, 8002b08 <UART_SetConfig+0xb8>)
 8002b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b08:	08002b19 	.word	0x08002b19
 8002b0c:	08002b29 	.word	0x08002b29
 8002b10:	08002b21 	.word	0x08002b21
 8002b14:	08002b31 	.word	0x08002b31
 8002b18:	2301      	movs	r3, #1
 8002b1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b1e:	e0d6      	b.n	8002cce <UART_SetConfig+0x27e>
 8002b20:	2302      	movs	r3, #2
 8002b22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b26:	e0d2      	b.n	8002cce <UART_SetConfig+0x27e>
 8002b28:	2304      	movs	r3, #4
 8002b2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b2e:	e0ce      	b.n	8002cce <UART_SetConfig+0x27e>
 8002b30:	2308      	movs	r3, #8
 8002b32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b36:	e0ca      	b.n	8002cce <UART_SetConfig+0x27e>
 8002b38:	2310      	movs	r3, #16
 8002b3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b3e:	e0c6      	b.n	8002cce <UART_SetConfig+0x27e>
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a7d      	ldr	r2, [pc, #500]	@ (8002d3c <UART_SetConfig+0x2ec>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d138      	bne.n	8002bbc <UART_SetConfig+0x16c>
 8002b4a:	4b7b      	ldr	r3, [pc, #492]	@ (8002d38 <UART_SetConfig+0x2e8>)
 8002b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b50:	f003 030c 	and.w	r3, r3, #12
 8002b54:	2b0c      	cmp	r3, #12
 8002b56:	d82d      	bhi.n	8002bb4 <UART_SetConfig+0x164>
 8002b58:	a201      	add	r2, pc, #4	@ (adr r2, 8002b60 <UART_SetConfig+0x110>)
 8002b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b5e:	bf00      	nop
 8002b60:	08002b95 	.word	0x08002b95
 8002b64:	08002bb5 	.word	0x08002bb5
 8002b68:	08002bb5 	.word	0x08002bb5
 8002b6c:	08002bb5 	.word	0x08002bb5
 8002b70:	08002ba5 	.word	0x08002ba5
 8002b74:	08002bb5 	.word	0x08002bb5
 8002b78:	08002bb5 	.word	0x08002bb5
 8002b7c:	08002bb5 	.word	0x08002bb5
 8002b80:	08002b9d 	.word	0x08002b9d
 8002b84:	08002bb5 	.word	0x08002bb5
 8002b88:	08002bb5 	.word	0x08002bb5
 8002b8c:	08002bb5 	.word	0x08002bb5
 8002b90:	08002bad 	.word	0x08002bad
 8002b94:	2300      	movs	r3, #0
 8002b96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b9a:	e098      	b.n	8002cce <UART_SetConfig+0x27e>
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ba2:	e094      	b.n	8002cce <UART_SetConfig+0x27e>
 8002ba4:	2304      	movs	r3, #4
 8002ba6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002baa:	e090      	b.n	8002cce <UART_SetConfig+0x27e>
 8002bac:	2308      	movs	r3, #8
 8002bae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bb2:	e08c      	b.n	8002cce <UART_SetConfig+0x27e>
 8002bb4:	2310      	movs	r3, #16
 8002bb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bba:	e088      	b.n	8002cce <UART_SetConfig+0x27e>
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a5f      	ldr	r2, [pc, #380]	@ (8002d40 <UART_SetConfig+0x2f0>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d125      	bne.n	8002c12 <UART_SetConfig+0x1c2>
 8002bc6:	4b5c      	ldr	r3, [pc, #368]	@ (8002d38 <UART_SetConfig+0x2e8>)
 8002bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bcc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002bd0:	2b30      	cmp	r3, #48	@ 0x30
 8002bd2:	d016      	beq.n	8002c02 <UART_SetConfig+0x1b2>
 8002bd4:	2b30      	cmp	r3, #48	@ 0x30
 8002bd6:	d818      	bhi.n	8002c0a <UART_SetConfig+0x1ba>
 8002bd8:	2b20      	cmp	r3, #32
 8002bda:	d00a      	beq.n	8002bf2 <UART_SetConfig+0x1a2>
 8002bdc:	2b20      	cmp	r3, #32
 8002bde:	d814      	bhi.n	8002c0a <UART_SetConfig+0x1ba>
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d002      	beq.n	8002bea <UART_SetConfig+0x19a>
 8002be4:	2b10      	cmp	r3, #16
 8002be6:	d008      	beq.n	8002bfa <UART_SetConfig+0x1aa>
 8002be8:	e00f      	b.n	8002c0a <UART_SetConfig+0x1ba>
 8002bea:	2300      	movs	r3, #0
 8002bec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bf0:	e06d      	b.n	8002cce <UART_SetConfig+0x27e>
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bf8:	e069      	b.n	8002cce <UART_SetConfig+0x27e>
 8002bfa:	2304      	movs	r3, #4
 8002bfc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c00:	e065      	b.n	8002cce <UART_SetConfig+0x27e>
 8002c02:	2308      	movs	r3, #8
 8002c04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c08:	e061      	b.n	8002cce <UART_SetConfig+0x27e>
 8002c0a:	2310      	movs	r3, #16
 8002c0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c10:	e05d      	b.n	8002cce <UART_SetConfig+0x27e>
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a4b      	ldr	r2, [pc, #300]	@ (8002d44 <UART_SetConfig+0x2f4>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d125      	bne.n	8002c68 <UART_SetConfig+0x218>
 8002c1c:	4b46      	ldr	r3, [pc, #280]	@ (8002d38 <UART_SetConfig+0x2e8>)
 8002c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c22:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002c26:	2bc0      	cmp	r3, #192	@ 0xc0
 8002c28:	d016      	beq.n	8002c58 <UART_SetConfig+0x208>
 8002c2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002c2c:	d818      	bhi.n	8002c60 <UART_SetConfig+0x210>
 8002c2e:	2b80      	cmp	r3, #128	@ 0x80
 8002c30:	d00a      	beq.n	8002c48 <UART_SetConfig+0x1f8>
 8002c32:	2b80      	cmp	r3, #128	@ 0x80
 8002c34:	d814      	bhi.n	8002c60 <UART_SetConfig+0x210>
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d002      	beq.n	8002c40 <UART_SetConfig+0x1f0>
 8002c3a:	2b40      	cmp	r3, #64	@ 0x40
 8002c3c:	d008      	beq.n	8002c50 <UART_SetConfig+0x200>
 8002c3e:	e00f      	b.n	8002c60 <UART_SetConfig+0x210>
 8002c40:	2300      	movs	r3, #0
 8002c42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c46:	e042      	b.n	8002cce <UART_SetConfig+0x27e>
 8002c48:	2302      	movs	r3, #2
 8002c4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c4e:	e03e      	b.n	8002cce <UART_SetConfig+0x27e>
 8002c50:	2304      	movs	r3, #4
 8002c52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c56:	e03a      	b.n	8002cce <UART_SetConfig+0x27e>
 8002c58:	2308      	movs	r3, #8
 8002c5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c5e:	e036      	b.n	8002cce <UART_SetConfig+0x27e>
 8002c60:	2310      	movs	r3, #16
 8002c62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c66:	e032      	b.n	8002cce <UART_SetConfig+0x27e>
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a30      	ldr	r2, [pc, #192]	@ (8002d30 <UART_SetConfig+0x2e0>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d12a      	bne.n	8002cc8 <UART_SetConfig+0x278>
 8002c72:	4b31      	ldr	r3, [pc, #196]	@ (8002d38 <UART_SetConfig+0x2e8>)
 8002c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c78:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002c7c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002c80:	d01a      	beq.n	8002cb8 <UART_SetConfig+0x268>
 8002c82:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002c86:	d81b      	bhi.n	8002cc0 <UART_SetConfig+0x270>
 8002c88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c8c:	d00c      	beq.n	8002ca8 <UART_SetConfig+0x258>
 8002c8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c92:	d815      	bhi.n	8002cc0 <UART_SetConfig+0x270>
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d003      	beq.n	8002ca0 <UART_SetConfig+0x250>
 8002c98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c9c:	d008      	beq.n	8002cb0 <UART_SetConfig+0x260>
 8002c9e:	e00f      	b.n	8002cc0 <UART_SetConfig+0x270>
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ca6:	e012      	b.n	8002cce <UART_SetConfig+0x27e>
 8002ca8:	2302      	movs	r3, #2
 8002caa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cae:	e00e      	b.n	8002cce <UART_SetConfig+0x27e>
 8002cb0:	2304      	movs	r3, #4
 8002cb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cb6:	e00a      	b.n	8002cce <UART_SetConfig+0x27e>
 8002cb8:	2308      	movs	r3, #8
 8002cba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cbe:	e006      	b.n	8002cce <UART_SetConfig+0x27e>
 8002cc0:	2310      	movs	r3, #16
 8002cc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cc6:	e002      	b.n	8002cce <UART_SetConfig+0x27e>
 8002cc8:	2310      	movs	r3, #16
 8002cca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a17      	ldr	r2, [pc, #92]	@ (8002d30 <UART_SetConfig+0x2e0>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	f040 80a8 	bne.w	8002e2a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002cda:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002cde:	2b08      	cmp	r3, #8
 8002ce0:	d834      	bhi.n	8002d4c <UART_SetConfig+0x2fc>
 8002ce2:	a201      	add	r2, pc, #4	@ (adr r2, 8002ce8 <UART_SetConfig+0x298>)
 8002ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce8:	08002d0d 	.word	0x08002d0d
 8002cec:	08002d4d 	.word	0x08002d4d
 8002cf0:	08002d15 	.word	0x08002d15
 8002cf4:	08002d4d 	.word	0x08002d4d
 8002cf8:	08002d1b 	.word	0x08002d1b
 8002cfc:	08002d4d 	.word	0x08002d4d
 8002d00:	08002d4d 	.word	0x08002d4d
 8002d04:	08002d4d 	.word	0x08002d4d
 8002d08:	08002d23 	.word	0x08002d23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d0c:	f7ff f808 	bl	8001d20 <HAL_RCC_GetPCLK1Freq>
 8002d10:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002d12:	e021      	b.n	8002d58 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d14:	4b0c      	ldr	r3, [pc, #48]	@ (8002d48 <UART_SetConfig+0x2f8>)
 8002d16:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002d18:	e01e      	b.n	8002d58 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d1a:	f7fe ff93 	bl	8001c44 <HAL_RCC_GetSysClockFreq>
 8002d1e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002d20:	e01a      	b.n	8002d58 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002d28:	e016      	b.n	8002d58 <UART_SetConfig+0x308>
 8002d2a:	bf00      	nop
 8002d2c:	cfff69f3 	.word	0xcfff69f3
 8002d30:	40008000 	.word	0x40008000
 8002d34:	40013800 	.word	0x40013800
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	40004400 	.word	0x40004400
 8002d40:	40004800 	.word	0x40004800
 8002d44:	40004c00 	.word	0x40004c00
 8002d48:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002d56:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f000 812a 	beq.w	8002fb4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d64:	4a9e      	ldr	r2, [pc, #632]	@ (8002fe0 <UART_SetConfig+0x590>)
 8002d66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	685a      	ldr	r2, [r3, #4]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	4413      	add	r3, r2
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d305      	bcc.n	8002d90 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d903      	bls.n	8002d98 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002d96:	e10d      	b.n	8002fb4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	60bb      	str	r3, [r7, #8]
 8002d9e:	60fa      	str	r2, [r7, #12]
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da4:	4a8e      	ldr	r2, [pc, #568]	@ (8002fe0 <UART_SetConfig+0x590>)
 8002da6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	2200      	movs	r2, #0
 8002dae:	603b      	str	r3, [r7, #0]
 8002db0:	607a      	str	r2, [r7, #4]
 8002db2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002db6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002dba:	f7fd fa31 	bl	8000220 <__aeabi_uldivmod>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	4610      	mov	r0, r2
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	f04f 0200 	mov.w	r2, #0
 8002dca:	f04f 0300 	mov.w	r3, #0
 8002dce:	020b      	lsls	r3, r1, #8
 8002dd0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002dd4:	0202      	lsls	r2, r0, #8
 8002dd6:	6979      	ldr	r1, [r7, #20]
 8002dd8:	6849      	ldr	r1, [r1, #4]
 8002dda:	0849      	lsrs	r1, r1, #1
 8002ddc:	2000      	movs	r0, #0
 8002dde:	460c      	mov	r4, r1
 8002de0:	4605      	mov	r5, r0
 8002de2:	eb12 0804 	adds.w	r8, r2, r4
 8002de6:	eb43 0905 	adc.w	r9, r3, r5
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	469a      	mov	sl, r3
 8002df2:	4693      	mov	fp, r2
 8002df4:	4652      	mov	r2, sl
 8002df6:	465b      	mov	r3, fp
 8002df8:	4640      	mov	r0, r8
 8002dfa:	4649      	mov	r1, r9
 8002dfc:	f7fd fa10 	bl	8000220 <__aeabi_uldivmod>
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
 8002e04:	4613      	mov	r3, r2
 8002e06:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002e08:	6a3b      	ldr	r3, [r7, #32]
 8002e0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e0e:	d308      	bcc.n	8002e22 <UART_SetConfig+0x3d2>
 8002e10:	6a3b      	ldr	r3, [r7, #32]
 8002e12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e16:	d204      	bcs.n	8002e22 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6a3a      	ldr	r2, [r7, #32]
 8002e1e:	60da      	str	r2, [r3, #12]
 8002e20:	e0c8      	b.n	8002fb4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002e28:	e0c4      	b.n	8002fb4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e32:	d167      	bne.n	8002f04 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8002e34:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002e38:	2b08      	cmp	r3, #8
 8002e3a:	d828      	bhi.n	8002e8e <UART_SetConfig+0x43e>
 8002e3c:	a201      	add	r2, pc, #4	@ (adr r2, 8002e44 <UART_SetConfig+0x3f4>)
 8002e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e42:	bf00      	nop
 8002e44:	08002e69 	.word	0x08002e69
 8002e48:	08002e71 	.word	0x08002e71
 8002e4c:	08002e79 	.word	0x08002e79
 8002e50:	08002e8f 	.word	0x08002e8f
 8002e54:	08002e7f 	.word	0x08002e7f
 8002e58:	08002e8f 	.word	0x08002e8f
 8002e5c:	08002e8f 	.word	0x08002e8f
 8002e60:	08002e8f 	.word	0x08002e8f
 8002e64:	08002e87 	.word	0x08002e87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e68:	f7fe ff5a 	bl	8001d20 <HAL_RCC_GetPCLK1Freq>
 8002e6c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002e6e:	e014      	b.n	8002e9a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e70:	f7fe ff6c 	bl	8001d4c <HAL_RCC_GetPCLK2Freq>
 8002e74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002e76:	e010      	b.n	8002e9a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e78:	4b5a      	ldr	r3, [pc, #360]	@ (8002fe4 <UART_SetConfig+0x594>)
 8002e7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002e7c:	e00d      	b.n	8002e9a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e7e:	f7fe fee1 	bl	8001c44 <HAL_RCC_GetSysClockFreq>
 8002e82:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002e84:	e009      	b.n	8002e9a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002e8c:	e005      	b.n	8002e9a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002e98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 8089 	beq.w	8002fb4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea6:	4a4e      	ldr	r2, [pc, #312]	@ (8002fe0 <UART_SetConfig+0x590>)
 8002ea8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002eac:	461a      	mov	r2, r3
 8002eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002eb4:	005a      	lsls	r2, r3, #1
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	085b      	lsrs	r3, r3, #1
 8002ebc:	441a      	add	r2, r3
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ec8:	6a3b      	ldr	r3, [r7, #32]
 8002eca:	2b0f      	cmp	r3, #15
 8002ecc:	d916      	bls.n	8002efc <UART_SetConfig+0x4ac>
 8002ece:	6a3b      	ldr	r3, [r7, #32]
 8002ed0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ed4:	d212      	bcs.n	8002efc <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ed6:	6a3b      	ldr	r3, [r7, #32]
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	f023 030f 	bic.w	r3, r3, #15
 8002ede:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ee0:	6a3b      	ldr	r3, [r7, #32]
 8002ee2:	085b      	lsrs	r3, r3, #1
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	8bfb      	ldrh	r3, [r7, #30]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	8bfa      	ldrh	r2, [r7, #30]
 8002ef8:	60da      	str	r2, [r3, #12]
 8002efa:	e05b      	b.n	8002fb4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002f02:	e057      	b.n	8002fb4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f04:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002f08:	2b08      	cmp	r3, #8
 8002f0a:	d828      	bhi.n	8002f5e <UART_SetConfig+0x50e>
 8002f0c:	a201      	add	r2, pc, #4	@ (adr r2, 8002f14 <UART_SetConfig+0x4c4>)
 8002f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f12:	bf00      	nop
 8002f14:	08002f39 	.word	0x08002f39
 8002f18:	08002f41 	.word	0x08002f41
 8002f1c:	08002f49 	.word	0x08002f49
 8002f20:	08002f5f 	.word	0x08002f5f
 8002f24:	08002f4f 	.word	0x08002f4f
 8002f28:	08002f5f 	.word	0x08002f5f
 8002f2c:	08002f5f 	.word	0x08002f5f
 8002f30:	08002f5f 	.word	0x08002f5f
 8002f34:	08002f57 	.word	0x08002f57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f38:	f7fe fef2 	bl	8001d20 <HAL_RCC_GetPCLK1Freq>
 8002f3c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002f3e:	e014      	b.n	8002f6a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f40:	f7fe ff04 	bl	8001d4c <HAL_RCC_GetPCLK2Freq>
 8002f44:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002f46:	e010      	b.n	8002f6a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f48:	4b26      	ldr	r3, [pc, #152]	@ (8002fe4 <UART_SetConfig+0x594>)
 8002f4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002f4c:	e00d      	b.n	8002f6a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f4e:	f7fe fe79 	bl	8001c44 <HAL_RCC_GetSysClockFreq>
 8002f52:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002f54:	e009      	b.n	8002f6a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002f5c:	e005      	b.n	8002f6a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002f68:	bf00      	nop
    }

    if (pclk != 0U)
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d021      	beq.n	8002fb4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f74:	4a1a      	ldr	r2, [pc, #104]	@ (8002fe0 <UART_SetConfig+0x590>)
 8002f76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7e:	fbb3 f2f2 	udiv	r2, r3, r2
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	085b      	lsrs	r3, r3, #1
 8002f88:	441a      	add	r2, r3
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f92:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f94:	6a3b      	ldr	r3, [r7, #32]
 8002f96:	2b0f      	cmp	r3, #15
 8002f98:	d909      	bls.n	8002fae <UART_SetConfig+0x55e>
 8002f9a:	6a3b      	ldr	r3, [r7, #32]
 8002f9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fa0:	d205      	bcs.n	8002fae <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002fa2:	6a3b      	ldr	r3, [r7, #32]
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	60da      	str	r2, [r3, #12]
 8002fac:	e002      	b.n	8002fb4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002fd0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3730      	adds	r7, #48	@ 0x30
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fde:	bf00      	nop
 8002fe0:	08005e78 	.word	0x08005e78
 8002fe4:	00f42400 	.word	0x00f42400

08002fe8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff4:	f003 0308 	and.w	r3, r3, #8
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00a      	beq.n	8003012 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00a      	beq.n	8003034 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	430a      	orrs	r2, r1
 8003032:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00a      	beq.n	8003056 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800305a:	f003 0304 	and.w	r3, r3, #4
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00a      	beq.n	8003078 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	430a      	orrs	r2, r1
 8003076:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800307c:	f003 0310 	and.w	r3, r3, #16
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00a      	beq.n	800309a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800309e:	f003 0320 	and.w	r3, r3, #32
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00a      	beq.n	80030bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d01a      	beq.n	80030fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030e6:	d10a      	bne.n	80030fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003102:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00a      	beq.n	8003120 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	430a      	orrs	r2, r1
 800311e:	605a      	str	r2, [r3, #4]
  }
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b098      	sub	sp, #96	@ 0x60
 8003130:	af02      	add	r7, sp, #8
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800313c:	f7fd fdfa 	bl	8000d34 <HAL_GetTick>
 8003140:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0308 	and.w	r3, r3, #8
 800314c:	2b08      	cmp	r3, #8
 800314e:	d12f      	bne.n	80031b0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003150:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003154:	9300      	str	r3, [sp, #0]
 8003156:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003158:	2200      	movs	r2, #0
 800315a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f88e 	bl	8003280 <UART_WaitOnFlagUntilTimeout>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d022      	beq.n	80031b0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003172:	e853 3f00 	ldrex	r3, [r3]
 8003176:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800317a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800317e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	461a      	mov	r2, r3
 8003186:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003188:	647b      	str	r3, [r7, #68]	@ 0x44
 800318a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800318c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800318e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003190:	e841 2300 	strex	r3, r2, [r1]
 8003194:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003196:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1e6      	bne.n	800316a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2220      	movs	r2, #32
 80031a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e063      	b.n	8003278 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0304 	and.w	r3, r3, #4
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d149      	bne.n	8003252 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031be:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80031c2:	9300      	str	r3, [sp, #0]
 80031c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031c6:	2200      	movs	r2, #0
 80031c8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 f857 	bl	8003280 <UART_WaitOnFlagUntilTimeout>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d03c      	beq.n	8003252 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e0:	e853 3f00 	ldrex	r3, [r3]
 80031e4:	623b      	str	r3, [r7, #32]
   return(result);
 80031e6:	6a3b      	ldr	r3, [r7, #32]
 80031e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	461a      	mov	r2, r3
 80031f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80031f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80031fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031fe:	e841 2300 	strex	r3, r2, [r1]
 8003202:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1e6      	bne.n	80031d8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	3308      	adds	r3, #8
 8003210:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	e853 3f00 	ldrex	r3, [r3]
 8003218:	60fb      	str	r3, [r7, #12]
   return(result);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f023 0301 	bic.w	r3, r3, #1
 8003220:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	3308      	adds	r3, #8
 8003228:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800322a:	61fa      	str	r2, [r7, #28]
 800322c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800322e:	69b9      	ldr	r1, [r7, #24]
 8003230:	69fa      	ldr	r2, [r7, #28]
 8003232:	e841 2300 	strex	r3, r2, [r1]
 8003236:	617b      	str	r3, [r7, #20]
   return(result);
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1e5      	bne.n	800320a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2220      	movs	r2, #32
 8003242:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e012      	b.n	8003278 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2220      	movs	r2, #32
 8003256:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2220      	movs	r2, #32
 800325e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3758      	adds	r7, #88	@ 0x58
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	603b      	str	r3, [r7, #0]
 800328c:	4613      	mov	r3, r2
 800328e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003290:	e04f      	b.n	8003332 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003298:	d04b      	beq.n	8003332 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800329a:	f7fd fd4b 	bl	8000d34 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d302      	bcc.n	80032b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e04e      	b.n	8003352 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0304 	and.w	r3, r3, #4
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d037      	beq.n	8003332 <UART_WaitOnFlagUntilTimeout+0xb2>
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	2b80      	cmp	r3, #128	@ 0x80
 80032c6:	d034      	beq.n	8003332 <UART_WaitOnFlagUntilTimeout+0xb2>
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	2b40      	cmp	r3, #64	@ 0x40
 80032cc:	d031      	beq.n	8003332 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	f003 0308 	and.w	r3, r3, #8
 80032d8:	2b08      	cmp	r3, #8
 80032da:	d110      	bne.n	80032fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2208      	movs	r2, #8
 80032e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 f838 	bl	800335a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2208      	movs	r2, #8
 80032ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e029      	b.n	8003352 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	69db      	ldr	r3, [r3, #28]
 8003304:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003308:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800330c:	d111      	bne.n	8003332 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003316:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 f81e 	bl	800335a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2220      	movs	r2, #32
 8003322:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e00f      	b.n	8003352 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	69da      	ldr	r2, [r3, #28]
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	4013      	ands	r3, r2
 800333c:	68ba      	ldr	r2, [r7, #8]
 800333e:	429a      	cmp	r2, r3
 8003340:	bf0c      	ite	eq
 8003342:	2301      	moveq	r3, #1
 8003344:	2300      	movne	r3, #0
 8003346:	b2db      	uxtb	r3, r3
 8003348:	461a      	mov	r2, r3
 800334a:	79fb      	ldrb	r3, [r7, #7]
 800334c:	429a      	cmp	r2, r3
 800334e:	d0a0      	beq.n	8003292 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800335a:	b480      	push	{r7}
 800335c:	b095      	sub	sp, #84	@ 0x54
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003368:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800336a:	e853 3f00 	ldrex	r3, [r3]
 800336e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003372:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003376:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	461a      	mov	r2, r3
 800337e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003380:	643b      	str	r3, [r7, #64]	@ 0x40
 8003382:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003384:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003386:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003388:	e841 2300 	strex	r3, r2, [r1]
 800338c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800338e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1e6      	bne.n	8003362 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	3308      	adds	r3, #8
 800339a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339c:	6a3b      	ldr	r3, [r7, #32]
 800339e:	e853 3f00 	ldrex	r3, [r3]
 80033a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033aa:	f023 0301 	bic.w	r3, r3, #1
 80033ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	3308      	adds	r3, #8
 80033b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80033b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033c0:	e841 2300 	strex	r3, r2, [r1]
 80033c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80033c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1e3      	bne.n	8003394 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d118      	bne.n	8003406 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	e853 3f00 	ldrex	r3, [r3]
 80033e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	f023 0310 	bic.w	r3, r3, #16
 80033e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	461a      	mov	r2, r3
 80033f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033f2:	61bb      	str	r3, [r7, #24]
 80033f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f6:	6979      	ldr	r1, [r7, #20]
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	e841 2300 	strex	r3, r2, [r1]
 80033fe:	613b      	str	r3, [r7, #16]
   return(result);
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1e6      	bne.n	80033d4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2220      	movs	r2, #32
 800340a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800341a:	bf00      	nop
 800341c:	3754      	adds	r7, #84	@ 0x54
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003426:	b480      	push	{r7}
 8003428:	b085      	sub	sp, #20
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003434:	2b01      	cmp	r3, #1
 8003436:	d101      	bne.n	800343c <HAL_UARTEx_DisableFifoMode+0x16>
 8003438:	2302      	movs	r3, #2
 800343a:	e027      	b.n	800348c <HAL_UARTEx_DisableFifoMode+0x66>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2224      	movs	r2, #36	@ 0x24
 8003448:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0201 	bic.w	r2, r2, #1
 8003462:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800346a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2220      	movs	r2, #32
 800347e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3714      	adds	r7, #20
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d101      	bne.n	80034b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80034ac:	2302      	movs	r3, #2
 80034ae:	e02d      	b.n	800350c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2224      	movs	r2, #36	@ 0x24
 80034bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 0201 	bic.w	r2, r2, #1
 80034d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 f84f 	bl	8003590 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2220      	movs	r2, #32
 80034fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003524:	2b01      	cmp	r3, #1
 8003526:	d101      	bne.n	800352c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003528:	2302      	movs	r3, #2
 800352a:	e02d      	b.n	8003588 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2224      	movs	r2, #36	@ 0x24
 8003538:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f022 0201 	bic.w	r2, r2, #1
 8003552:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 f811 	bl	8003590 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2220      	movs	r2, #32
 800357a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800359c:	2b00      	cmp	r3, #0
 800359e:	d108      	bne.n	80035b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80035b0:	e031      	b.n	8003616 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80035b2:	2308      	movs	r3, #8
 80035b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80035b6:	2308      	movs	r3, #8
 80035b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	0e5b      	lsrs	r3, r3, #25
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	0f5b      	lsrs	r3, r3, #29
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	f003 0307 	and.w	r3, r3, #7
 80035d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80035da:	7bbb      	ldrb	r3, [r7, #14]
 80035dc:	7b3a      	ldrb	r2, [r7, #12]
 80035de:	4911      	ldr	r1, [pc, #68]	@ (8003624 <UARTEx_SetNbDataToProcess+0x94>)
 80035e0:	5c8a      	ldrb	r2, [r1, r2]
 80035e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80035e6:	7b3a      	ldrb	r2, [r7, #12]
 80035e8:	490f      	ldr	r1, [pc, #60]	@ (8003628 <UARTEx_SetNbDataToProcess+0x98>)
 80035ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80035ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
 80035fa:	7b7a      	ldrb	r2, [r7, #13]
 80035fc:	4909      	ldr	r1, [pc, #36]	@ (8003624 <UARTEx_SetNbDataToProcess+0x94>)
 80035fe:	5c8a      	ldrb	r2, [r1, r2]
 8003600:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003604:	7b7a      	ldrb	r2, [r7, #13]
 8003606:	4908      	ldr	r1, [pc, #32]	@ (8003628 <UARTEx_SetNbDataToProcess+0x98>)
 8003608:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800360a:	fb93 f3f2 	sdiv	r3, r3, r2
 800360e:	b29a      	uxth	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003616:	bf00      	nop
 8003618:	3714      	adds	r7, #20
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	08005e90 	.word	0x08005e90
 8003628:	08005e98 	.word	0x08005e98

0800362c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	4603      	mov	r3, r0
 8003634:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003636:	2300      	movs	r3, #0
 8003638:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800363a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800363e:	2b84      	cmp	r3, #132	@ 0x84
 8003640:	d005      	beq.n	800364e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003642:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	4413      	add	r3, r2
 800364a:	3303      	adds	r3, #3
 800364c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800364e:	68fb      	ldr	r3, [r7, #12]
}
 8003650:	4618      	mov	r0, r3
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003660:	f000 fcc4 	bl	8003fec <vTaskStartScheduler>
  
  return osOK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	bd80      	pop	{r7, pc}

0800366a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800366a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800366c:	b087      	sub	sp, #28
 800366e:	af02      	add	r7, sp, #8
 8003670:	6078      	str	r0, [r7, #4]
 8003672:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685c      	ldr	r4, [r3, #4]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003680:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003688:	4618      	mov	r0, r3
 800368a:	f7ff ffcf 	bl	800362c <makeFreeRtosPriority>
 800368e:	4602      	mov	r2, r0
 8003690:	f107 030c 	add.w	r3, r7, #12
 8003694:	9301      	str	r3, [sp, #4]
 8003696:	9200      	str	r2, [sp, #0]
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	4632      	mov	r2, r6
 800369c:	4629      	mov	r1, r5
 800369e:	4620      	mov	r0, r4
 80036a0:	f000 fb22 	bl	8003ce8 <xTaskCreate>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d001      	beq.n	80036ae <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80036aa:	2300      	movs	r3, #0
 80036ac:	e000      	b.n	80036b0 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80036ae:	68fb      	ldr	r3, [r7, #12]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3714      	adds	r7, #20
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036b8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <osDelay+0x16>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	e000      	b.n	80036d0 <osDelay+0x18>
 80036ce:	2301      	movs	r3, #1
 80036d0:	4618      	mov	r0, r3
 80036d2:	f000 fc55 	bl	8003f80 <vTaskDelay>
  
  return osOK;
 80036d6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f103 0208 	add.w	r2, r3, #8
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80036f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f103 0208 	add.w	r2, r3, #8
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f103 0208 	add.w	r2, r3, #8
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800372e:	bf00      	nop
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800373a:	b480      	push	{r7}
 800373c:	b085      	sub	sp, #20
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
 8003742:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	1c5a      	adds	r2, r3, #1
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	601a      	str	r2, [r3, #0]
}
 8003776:	bf00      	nop
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr

08003782 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003782:	b480      	push	{r7}
 8003784:	b085      	sub	sp, #20
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
 800378a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003798:	d103      	bne.n	80037a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	60fb      	str	r3, [r7, #12]
 80037a0:	e00c      	b.n	80037bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	3308      	adds	r3, #8
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	e002      	b.n	80037b0 <vListInsert+0x2e>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d2f6      	bcs.n	80037aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	685a      	ldr	r2, [r3, #4]
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	1c5a      	adds	r2, r3, #1
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	601a      	str	r2, [r3, #0]
}
 80037e8:	bf00      	nop
 80037ea:	3714      	adds	r7, #20
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6892      	ldr	r2, [r2, #8]
 800380a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	6852      	ldr	r2, [r2, #4]
 8003814:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	429a      	cmp	r2, r3
 800381e:	d103      	bne.n	8003828 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689a      	ldr	r2, [r3, #8]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	1e5a      	subs	r2, r3, #1
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
}
 800383c:	4618      	mov	r0, r3
 800383e:	3714      	adds	r7, #20
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10b      	bne.n	8003874 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800385c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003860:	f383 8811 	msr	BASEPRI, r3
 8003864:	f3bf 8f6f 	isb	sy
 8003868:	f3bf 8f4f 	dsb	sy
 800386c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800386e:	bf00      	nop
 8003870:	bf00      	nop
 8003872:	e7fd      	b.n	8003870 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003874:	f001 fa70 	bl	8004d58 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003880:	68f9      	ldr	r1, [r7, #12]
 8003882:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003884:	fb01 f303 	mul.w	r3, r1, r3
 8003888:	441a      	add	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038a4:	3b01      	subs	r3, #1
 80038a6:	68f9      	ldr	r1, [r7, #12]
 80038a8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80038aa:	fb01 f303 	mul.w	r3, r1, r3
 80038ae:	441a      	add	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	22ff      	movs	r2, #255	@ 0xff
 80038b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	22ff      	movs	r2, #255	@ 0xff
 80038c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d114      	bne.n	80038f4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d01a      	beq.n	8003908 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	3310      	adds	r3, #16
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 fdca 	bl	8004470 <xTaskRemoveFromEventList>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d012      	beq.n	8003908 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80038e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003918 <xQueueGenericReset+0xd0>)
 80038e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038e8:	601a      	str	r2, [r3, #0]
 80038ea:	f3bf 8f4f 	dsb	sy
 80038ee:	f3bf 8f6f 	isb	sy
 80038f2:	e009      	b.n	8003908 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	3310      	adds	r3, #16
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7ff fef1 	bl	80036e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	3324      	adds	r3, #36	@ 0x24
 8003902:	4618      	mov	r0, r3
 8003904:	f7ff feec 	bl	80036e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003908:	f001 fa58 	bl	8004dbc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800390c:	2301      	movs	r3, #1
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	e000ed04 	.word	0xe000ed04

0800391c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800391c:	b580      	push	{r7, lr}
 800391e:	b08a      	sub	sp, #40	@ 0x28
 8003920:	af02      	add	r7, sp, #8
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	4613      	mov	r3, r2
 8003928:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10b      	bne.n	8003948 <xQueueGenericCreate+0x2c>
	__asm volatile
 8003930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003934:	f383 8811 	msr	BASEPRI, r3
 8003938:	f3bf 8f6f 	isb	sy
 800393c:	f3bf 8f4f 	dsb	sy
 8003940:	613b      	str	r3, [r7, #16]
}
 8003942:	bf00      	nop
 8003944:	bf00      	nop
 8003946:	e7fd      	b.n	8003944 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	fb02 f303 	mul.w	r3, r2, r3
 8003950:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	3348      	adds	r3, #72	@ 0x48
 8003956:	4618      	mov	r0, r3
 8003958:	f001 fade 	bl	8004f18 <pvPortMalloc>
 800395c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00d      	beq.n	8003980 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	3348      	adds	r3, #72	@ 0x48
 800396c:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800396e:	79fa      	ldrb	r2, [r7, #7]
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	4613      	mov	r3, r2
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	68b9      	ldr	r1, [r7, #8]
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f000 f805 	bl	800398a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003980:	69bb      	ldr	r3, [r7, #24]
	}
 8003982:	4618      	mov	r0, r3
 8003984:	3720      	adds	r7, #32
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b084      	sub	sp, #16
 800398e:	af00      	add	r7, sp, #0
 8003990:	60f8      	str	r0, [r7, #12]
 8003992:	60b9      	str	r1, [r7, #8]
 8003994:	607a      	str	r2, [r7, #4]
 8003996:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d103      	bne.n	80039a6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	e002      	b.n	80039ac <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80039b8:	2101      	movs	r1, #1
 80039ba:	69b8      	ldr	r0, [r7, #24]
 80039bc:	f7ff ff44 	bl	8003848 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80039c0:	bf00      	nop
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b08e      	sub	sp, #56	@ 0x38
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80039d2:	2300      	movs	r3, #0
 80039d4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80039da:	2300      	movs	r3, #0
 80039dc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80039de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10b      	bne.n	80039fc <xQueueSemaphoreTake+0x34>
	__asm volatile
 80039e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039e8:	f383 8811 	msr	BASEPRI, r3
 80039ec:	f3bf 8f6f 	isb	sy
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	623b      	str	r3, [r7, #32]
}
 80039f6:	bf00      	nop
 80039f8:	bf00      	nop
 80039fa:	e7fd      	b.n	80039f8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80039fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00b      	beq.n	8003a1c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8003a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a08:	f383 8811 	msr	BASEPRI, r3
 8003a0c:	f3bf 8f6f 	isb	sy
 8003a10:	f3bf 8f4f 	dsb	sy
 8003a14:	61fb      	str	r3, [r7, #28]
}
 8003a16:	bf00      	nop
 8003a18:	bf00      	nop
 8003a1a:	e7fd      	b.n	8003a18 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a1c:	f000 fece 	bl	80047bc <xTaskGetSchedulerState>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d102      	bne.n	8003a2c <xQueueSemaphoreTake+0x64>
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <xQueueSemaphoreTake+0x68>
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e000      	b.n	8003a32 <xQueueSemaphoreTake+0x6a>
 8003a30:	2300      	movs	r3, #0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10b      	bne.n	8003a4e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8003a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a3a:	f383 8811 	msr	BASEPRI, r3
 8003a3e:	f3bf 8f6f 	isb	sy
 8003a42:	f3bf 8f4f 	dsb	sy
 8003a46:	61bb      	str	r3, [r7, #24]
}
 8003a48:	bf00      	nop
 8003a4a:	bf00      	nop
 8003a4c:	e7fd      	b.n	8003a4a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a4e:	f001 f983 	bl	8004d58 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a56:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d024      	beq.n	8003aa8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a60:	1e5a      	subs	r2, r3, #1
 8003a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a64:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d104      	bne.n	8003a78 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003a6e:	f000 ffc9 	bl	8004a04 <pvTaskIncrementMutexHeldCount>
 8003a72:	4602      	mov	r2, r0
 8003a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a76:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00f      	beq.n	8003aa0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a82:	3310      	adds	r3, #16
 8003a84:	4618      	mov	r0, r3
 8003a86:	f000 fcf3 	bl	8004470 <xTaskRemoveFromEventList>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d007      	beq.n	8003aa0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003a90:	4b54      	ldr	r3, [pc, #336]	@ (8003be4 <xQueueSemaphoreTake+0x21c>)
 8003a92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a96:	601a      	str	r2, [r3, #0]
 8003a98:	f3bf 8f4f 	dsb	sy
 8003a9c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003aa0:	f001 f98c 	bl	8004dbc <vPortExitCritical>
				return pdPASS;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e098      	b.n	8003bda <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d112      	bne.n	8003ad4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00b      	beq.n	8003acc <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ab8:	f383 8811 	msr	BASEPRI, r3
 8003abc:	f3bf 8f6f 	isb	sy
 8003ac0:	f3bf 8f4f 	dsb	sy
 8003ac4:	617b      	str	r3, [r7, #20]
}
 8003ac6:	bf00      	nop
 8003ac8:	bf00      	nop
 8003aca:	e7fd      	b.n	8003ac8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003acc:	f001 f976 	bl	8004dbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	e082      	b.n	8003bda <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d106      	bne.n	8003ae8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ada:	f107 030c 	add.w	r3, r7, #12
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f000 fd2a 	bl	8004538 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ae8:	f001 f968 	bl	8004dbc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003aec:	f000 fad0 	bl	8004090 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003af0:	f001 f932 	bl	8004d58 <vPortEnterCritical>
 8003af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003af6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003afa:	b25b      	sxtb	r3, r3
 8003afc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b00:	d103      	bne.n	8003b0a <xQueueSemaphoreTake+0x142>
 8003b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b0c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b10:	b25b      	sxtb	r3, r3
 8003b12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b16:	d103      	bne.n	8003b20 <xQueueSemaphoreTake+0x158>
 8003b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b20:	f001 f94c 	bl	8004dbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b24:	463a      	mov	r2, r7
 8003b26:	f107 030c 	add.w	r3, r7, #12
 8003b2a:	4611      	mov	r1, r2
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f000 fd19 	bl	8004564 <xTaskCheckForTimeOut>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d132      	bne.n	8003b9e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b38:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003b3a:	f000 f8bf 	bl	8003cbc <prvIsQueueEmpty>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d026      	beq.n	8003b92 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d109      	bne.n	8003b60 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003b4c:	f001 f904 	bl	8004d58 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f000 fe4f 	bl	80047f8 <xTaskPriorityInherit>
 8003b5a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003b5c:	f001 f92e 	bl	8004dbc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b62:	3324      	adds	r3, #36	@ 0x24
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	4611      	mov	r1, r2
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f000 fc5b 	bl	8004424 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003b6e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003b70:	f000 f852 	bl	8003c18 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003b74:	f000 fa9a 	bl	80040ac <xTaskResumeAll>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f47f af67 	bne.w	8003a4e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003b80:	4b18      	ldr	r3, [pc, #96]	@ (8003be4 <xQueueSemaphoreTake+0x21c>)
 8003b82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	f3bf 8f4f 	dsb	sy
 8003b8c:	f3bf 8f6f 	isb	sy
 8003b90:	e75d      	b.n	8003a4e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003b92:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003b94:	f000 f840 	bl	8003c18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b98:	f000 fa88 	bl	80040ac <xTaskResumeAll>
 8003b9c:	e757      	b.n	8003a4e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003b9e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003ba0:	f000 f83a 	bl	8003c18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ba4:	f000 fa82 	bl	80040ac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ba8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003baa:	f000 f887 	bl	8003cbc <prvIsQueueEmpty>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f43f af4c 	beq.w	8003a4e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00d      	beq.n	8003bd8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003bbc:	f001 f8cc 	bl	8004d58 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003bc0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003bc2:	f000 f811 	bl	8003be8 <prvGetDisinheritPriorityAfterTimeout>
 8003bc6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f000 fe88 	bl	80048e4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003bd4:	f001 f8f2 	bl	8004dbc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003bd8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3738      	adds	r7, #56	@ 0x38
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	e000ed04 	.word	0xe000ed04

08003be8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d006      	beq.n	8003c06 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f1c3 0307 	rsb	r3, r3, #7
 8003c02:	60fb      	str	r3, [r7, #12]
 8003c04:	e001      	b.n	8003c0a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003c06:	2300      	movs	r3, #0
 8003c08:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
	}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3714      	adds	r7, #20
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003c20:	f001 f89a 	bl	8004d58 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c2a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c2c:	e011      	b.n	8003c52 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d012      	beq.n	8003c5c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	3324      	adds	r3, #36	@ 0x24
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 fc18 	bl	8004470 <xTaskRemoveFromEventList>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003c46:	f000 fcf1 	bl	800462c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003c4a:	7bfb      	ldrb	r3, [r7, #15]
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	dce9      	bgt.n	8003c2e <prvUnlockQueue+0x16>
 8003c5a:	e000      	b.n	8003c5e <prvUnlockQueue+0x46>
					break;
 8003c5c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	22ff      	movs	r2, #255	@ 0xff
 8003c62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003c66:	f001 f8a9 	bl	8004dbc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003c6a:	f001 f875 	bl	8004d58 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c74:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c76:	e011      	b.n	8003c9c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d012      	beq.n	8003ca6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	3310      	adds	r3, #16
 8003c84:	4618      	mov	r0, r3
 8003c86:	f000 fbf3 	bl	8004470 <xTaskRemoveFromEventList>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d001      	beq.n	8003c94 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003c90:	f000 fccc 	bl	800462c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003c94:	7bbb      	ldrb	r3, [r7, #14]
 8003c96:	3b01      	subs	r3, #1
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	dce9      	bgt.n	8003c78 <prvUnlockQueue+0x60>
 8003ca4:	e000      	b.n	8003ca8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003ca6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	22ff      	movs	r2, #255	@ 0xff
 8003cac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003cb0:	f001 f884 	bl	8004dbc <vPortExitCritical>
}
 8003cb4:	bf00      	nop
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003cc4:	f001 f848 	bl	8004d58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d102      	bne.n	8003cd6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	60fb      	str	r3, [r7, #12]
 8003cd4:	e001      	b.n	8003cda <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003cda:	f001 f86f 	bl	8004dbc <vPortExitCritical>

	return xReturn;
 8003cde:	68fb      	ldr	r3, [r7, #12]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b08c      	sub	sp, #48	@ 0x30
 8003cec:	af04      	add	r7, sp, #16
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	603b      	str	r3, [r7, #0]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003cf8:	88fb      	ldrh	r3, [r7, #6]
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f001 f90b 	bl	8004f18 <pvPortMalloc>
 8003d02:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00e      	beq.n	8003d28 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003d0a:	20a0      	movs	r0, #160	@ 0xa0
 8003d0c:	f001 f904 	bl	8004f18 <pvPortMalloc>
 8003d10:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d003      	beq.n	8003d20 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d1e:	e005      	b.n	8003d2c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003d20:	6978      	ldr	r0, [r7, #20]
 8003d22:	f001 f9c7 	bl	80050b4 <vPortFree>
 8003d26:	e001      	b.n	8003d2c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d013      	beq.n	8003d5a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003d32:	88fa      	ldrh	r2, [r7, #6]
 8003d34:	2300      	movs	r3, #0
 8003d36:	9303      	str	r3, [sp, #12]
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	9302      	str	r3, [sp, #8]
 8003d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d3e:	9301      	str	r3, [sp, #4]
 8003d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d42:	9300      	str	r3, [sp, #0]
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	68b9      	ldr	r1, [r7, #8]
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f000 f80f 	bl	8003d6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d4e:	69f8      	ldr	r0, [r7, #28]
 8003d50:	f000 f8ac 	bl	8003eac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003d54:	2301      	movs	r3, #1
 8003d56:	61bb      	str	r3, [r7, #24]
 8003d58:	e002      	b.n	8003d60 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003d5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003d5e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003d60:	69bb      	ldr	r3, [r7, #24]
	}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3720      	adds	r7, #32
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
	...

08003d6c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b088      	sub	sp, #32
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
 8003d78:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d84:	3b01      	subs	r3, #1
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	4413      	add	r3, r2
 8003d8a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	f023 0307 	bic.w	r3, r3, #7
 8003d92:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	f003 0307 	and.w	r3, r3, #7
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00b      	beq.n	8003db6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003da2:	f383 8811 	msr	BASEPRI, r3
 8003da6:	f3bf 8f6f 	isb	sy
 8003daa:	f3bf 8f4f 	dsb	sy
 8003dae:	617b      	str	r3, [r7, #20]
}
 8003db0:	bf00      	nop
 8003db2:	bf00      	nop
 8003db4:	e7fd      	b.n	8003db2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d01f      	beq.n	8003dfc <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	61fb      	str	r3, [r7, #28]
 8003dc0:	e012      	b.n	8003de8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	7819      	ldrb	r1, [r3, #0]
 8003dca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	4413      	add	r3, r2
 8003dd0:	3334      	adds	r3, #52	@ 0x34
 8003dd2:	460a      	mov	r2, r1
 8003dd4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	4413      	add	r3, r2
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d006      	beq.n	8003df0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	3301      	adds	r3, #1
 8003de6:	61fb      	str	r3, [r7, #28]
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	2b0f      	cmp	r3, #15
 8003dec:	d9e9      	bls.n	8003dc2 <prvInitialiseNewTask+0x56>
 8003dee:	e000      	b.n	8003df2 <prvInitialiseNewTask+0x86>
			{
				break;
 8003df0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003dfa:	e003      	b.n	8003e04 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e06:	2b06      	cmp	r3, #6
 8003e08:	d901      	bls.n	8003e0e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003e0a:	2306      	movs	r3, #6
 8003e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e12:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e18:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e22:	3304      	adds	r3, #4
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7ff fc7b 	bl	8003720 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e2c:	3318      	adds	r3, #24
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7ff fc76 	bl	8003720 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e38:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e3c:	f1c3 0207 	rsb	r2, r3, #7
 8003e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e42:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e48:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e5c:	334c      	adds	r3, #76	@ 0x4c
 8003e5e:	224c      	movs	r2, #76	@ 0x4c
 8003e60:	2100      	movs	r1, #0
 8003e62:	4618      	mov	r0, r3
 8003e64:	f001 fc3e 	bl	80056e4 <memset>
 8003e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e6a:	4a0d      	ldr	r2, [pc, #52]	@ (8003ea0 <prvInitialiseNewTask+0x134>)
 8003e6c:	651a      	str	r2, [r3, #80]	@ 0x50
 8003e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e70:	4a0c      	ldr	r2, [pc, #48]	@ (8003ea4 <prvInitialiseNewTask+0x138>)
 8003e72:	655a      	str	r2, [r3, #84]	@ 0x54
 8003e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e76:	4a0c      	ldr	r2, [pc, #48]	@ (8003ea8 <prvInitialiseNewTask+0x13c>)
 8003e78:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003e7a:	683a      	ldr	r2, [r7, #0]
 8003e7c:	68f9      	ldr	r1, [r7, #12]
 8003e7e:	69b8      	ldr	r0, [r7, #24]
 8003e80:	f000 fe3a 	bl	8004af8 <pxPortInitialiseStack>
 8003e84:	4602      	mov	r2, r0
 8003e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e88:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d002      	beq.n	8003e96 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e96:	bf00      	nop
 8003e98:	3720      	adds	r7, #32
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	200050ec 	.word	0x200050ec
 8003ea4:	20005154 	.word	0x20005154
 8003ea8:	200051bc 	.word	0x200051bc

08003eac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003eb4:	f000 ff50 	bl	8004d58 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003eb8:	4b2a      	ldr	r3, [pc, #168]	@ (8003f64 <prvAddNewTaskToReadyList+0xb8>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	4a29      	ldr	r2, [pc, #164]	@ (8003f64 <prvAddNewTaskToReadyList+0xb8>)
 8003ec0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003ec2:	4b29      	ldr	r3, [pc, #164]	@ (8003f68 <prvAddNewTaskToReadyList+0xbc>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d109      	bne.n	8003ede <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003eca:	4a27      	ldr	r2, [pc, #156]	@ (8003f68 <prvAddNewTaskToReadyList+0xbc>)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ed0:	4b24      	ldr	r3, [pc, #144]	@ (8003f64 <prvAddNewTaskToReadyList+0xb8>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d110      	bne.n	8003efa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ed8:	f000 fbcc 	bl	8004674 <prvInitialiseTaskLists>
 8003edc:	e00d      	b.n	8003efa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003ede:	4b23      	ldr	r3, [pc, #140]	@ (8003f6c <prvAddNewTaskToReadyList+0xc0>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d109      	bne.n	8003efa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003ee6:	4b20      	ldr	r3, [pc, #128]	@ (8003f68 <prvAddNewTaskToReadyList+0xbc>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d802      	bhi.n	8003efa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ef4:	4a1c      	ldr	r2, [pc, #112]	@ (8003f68 <prvAddNewTaskToReadyList+0xbc>)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003efa:	4b1d      	ldr	r3, [pc, #116]	@ (8003f70 <prvAddNewTaskToReadyList+0xc4>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	3301      	adds	r3, #1
 8003f00:	4a1b      	ldr	r2, [pc, #108]	@ (8003f70 <prvAddNewTaskToReadyList+0xc4>)
 8003f02:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f08:	2201      	movs	r2, #1
 8003f0a:	409a      	lsls	r2, r3
 8003f0c:	4b19      	ldr	r3, [pc, #100]	@ (8003f74 <prvAddNewTaskToReadyList+0xc8>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	4a18      	ldr	r2, [pc, #96]	@ (8003f74 <prvAddNewTaskToReadyList+0xc8>)
 8003f14:	6013      	str	r3, [r2, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4413      	add	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4a15      	ldr	r2, [pc, #84]	@ (8003f78 <prvAddNewTaskToReadyList+0xcc>)
 8003f24:	441a      	add	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	3304      	adds	r3, #4
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	4610      	mov	r0, r2
 8003f2e:	f7ff fc04 	bl	800373a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003f32:	f000 ff43 	bl	8004dbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003f36:	4b0d      	ldr	r3, [pc, #52]	@ (8003f6c <prvAddNewTaskToReadyList+0xc0>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00e      	beq.n	8003f5c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8003f68 <prvAddNewTaskToReadyList+0xbc>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d207      	bcs.n	8003f5c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003f7c <prvAddNewTaskToReadyList+0xd0>)
 8003f4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	f3bf 8f4f 	dsb	sy
 8003f58:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f5c:	bf00      	nop
 8003f5e:	3708      	adds	r7, #8
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	20000278 	.word	0x20000278
 8003f68:	20000178 	.word	0x20000178
 8003f6c:	20000284 	.word	0x20000284
 8003f70:	20000294 	.word	0x20000294
 8003f74:	20000280 	.word	0x20000280
 8003f78:	2000017c 	.word	0x2000017c
 8003f7c:	e000ed04 	.word	0xe000ed04

08003f80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d018      	beq.n	8003fc4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003f92:	4b14      	ldr	r3, [pc, #80]	@ (8003fe4 <vTaskDelay+0x64>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00b      	beq.n	8003fb2 <vTaskDelay+0x32>
	__asm volatile
 8003f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f9e:	f383 8811 	msr	BASEPRI, r3
 8003fa2:	f3bf 8f6f 	isb	sy
 8003fa6:	f3bf 8f4f 	dsb	sy
 8003faa:	60bb      	str	r3, [r7, #8]
}
 8003fac:	bf00      	nop
 8003fae:	bf00      	nop
 8003fb0:	e7fd      	b.n	8003fae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003fb2:	f000 f86d 	bl	8004090 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003fb6:	2100      	movs	r1, #0
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 fd37 	bl	8004a2c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003fbe:	f000 f875 	bl	80040ac <xTaskResumeAll>
 8003fc2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d107      	bne.n	8003fda <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003fca:	4b07      	ldr	r3, [pc, #28]	@ (8003fe8 <vTaskDelay+0x68>)
 8003fcc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fd0:	601a      	str	r2, [r3, #0]
 8003fd2:	f3bf 8f4f 	dsb	sy
 8003fd6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003fda:	bf00      	nop
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	200002a0 	.word	0x200002a0
 8003fe8:	e000ed04 	.word	0xe000ed04

08003fec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b086      	sub	sp, #24
 8003ff0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003ff2:	4b1f      	ldr	r3, [pc, #124]	@ (8004070 <vTaskStartScheduler+0x84>)
 8003ff4:	9301      	str	r3, [sp, #4]
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	2280      	movs	r2, #128	@ 0x80
 8003ffe:	491d      	ldr	r1, [pc, #116]	@ (8004074 <vTaskStartScheduler+0x88>)
 8004000:	481d      	ldr	r0, [pc, #116]	@ (8004078 <vTaskStartScheduler+0x8c>)
 8004002:	f7ff fe71 	bl	8003ce8 <xTaskCreate>
 8004006:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d11b      	bne.n	8004046 <vTaskStartScheduler+0x5a>
	__asm volatile
 800400e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004012:	f383 8811 	msr	BASEPRI, r3
 8004016:	f3bf 8f6f 	isb	sy
 800401a:	f3bf 8f4f 	dsb	sy
 800401e:	60bb      	str	r3, [r7, #8]
}
 8004020:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004022:	4b16      	ldr	r3, [pc, #88]	@ (800407c <vTaskStartScheduler+0x90>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	334c      	adds	r3, #76	@ 0x4c
 8004028:	4a15      	ldr	r2, [pc, #84]	@ (8004080 <vTaskStartScheduler+0x94>)
 800402a:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800402c:	4b15      	ldr	r3, [pc, #84]	@ (8004084 <vTaskStartScheduler+0x98>)
 800402e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004032:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004034:	4b14      	ldr	r3, [pc, #80]	@ (8004088 <vTaskStartScheduler+0x9c>)
 8004036:	2201      	movs	r2, #1
 8004038:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800403a:	4b14      	ldr	r3, [pc, #80]	@ (800408c <vTaskStartScheduler+0xa0>)
 800403c:	2200      	movs	r2, #0
 800403e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004040:	f000 fde6 	bl	8004c10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004044:	e00f      	b.n	8004066 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800404c:	d10b      	bne.n	8004066 <vTaskStartScheduler+0x7a>
	__asm volatile
 800404e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004052:	f383 8811 	msr	BASEPRI, r3
 8004056:	f3bf 8f6f 	isb	sy
 800405a:	f3bf 8f4f 	dsb	sy
 800405e:	607b      	str	r3, [r7, #4]
}
 8004060:	bf00      	nop
 8004062:	bf00      	nop
 8004064:	e7fd      	b.n	8004062 <vTaskStartScheduler+0x76>
}
 8004066:	bf00      	nop
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	2000029c 	.word	0x2000029c
 8004074:	08005e58 	.word	0x08005e58
 8004078:	08004645 	.word	0x08004645
 800407c:	20000178 	.word	0x20000178
 8004080:	2000001c 	.word	0x2000001c
 8004084:	20000298 	.word	0x20000298
 8004088:	20000284 	.word	0x20000284
 800408c:	2000027c 	.word	0x2000027c

08004090 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004094:	4b04      	ldr	r3, [pc, #16]	@ (80040a8 <vTaskSuspendAll+0x18>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	3301      	adds	r3, #1
 800409a:	4a03      	ldr	r2, [pc, #12]	@ (80040a8 <vTaskSuspendAll+0x18>)
 800409c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800409e:	bf00      	nop
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr
 80040a8:	200002a0 	.word	0x200002a0

080040ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80040b2:	2300      	movs	r3, #0
 80040b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80040b6:	2300      	movs	r3, #0
 80040b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80040ba:	4b42      	ldr	r3, [pc, #264]	@ (80041c4 <xTaskResumeAll+0x118>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10b      	bne.n	80040da <xTaskResumeAll+0x2e>
	__asm volatile
 80040c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040c6:	f383 8811 	msr	BASEPRI, r3
 80040ca:	f3bf 8f6f 	isb	sy
 80040ce:	f3bf 8f4f 	dsb	sy
 80040d2:	603b      	str	r3, [r7, #0]
}
 80040d4:	bf00      	nop
 80040d6:	bf00      	nop
 80040d8:	e7fd      	b.n	80040d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80040da:	f000 fe3d 	bl	8004d58 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80040de:	4b39      	ldr	r3, [pc, #228]	@ (80041c4 <xTaskResumeAll+0x118>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	3b01      	subs	r3, #1
 80040e4:	4a37      	ldr	r2, [pc, #220]	@ (80041c4 <xTaskResumeAll+0x118>)
 80040e6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040e8:	4b36      	ldr	r3, [pc, #216]	@ (80041c4 <xTaskResumeAll+0x118>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d161      	bne.n	80041b4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80040f0:	4b35      	ldr	r3, [pc, #212]	@ (80041c8 <xTaskResumeAll+0x11c>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d05d      	beq.n	80041b4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040f8:	e02e      	b.n	8004158 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040fa:	4b34      	ldr	r3, [pc, #208]	@ (80041cc <xTaskResumeAll+0x120>)
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	3318      	adds	r3, #24
 8004106:	4618      	mov	r0, r3
 8004108:	f7ff fb74 	bl	80037f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	3304      	adds	r3, #4
 8004110:	4618      	mov	r0, r3
 8004112:	f7ff fb6f 	bl	80037f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411a:	2201      	movs	r2, #1
 800411c:	409a      	lsls	r2, r3
 800411e:	4b2c      	ldr	r3, [pc, #176]	@ (80041d0 <xTaskResumeAll+0x124>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4313      	orrs	r3, r2
 8004124:	4a2a      	ldr	r2, [pc, #168]	@ (80041d0 <xTaskResumeAll+0x124>)
 8004126:	6013      	str	r3, [r2, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800412c:	4613      	mov	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	4413      	add	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4a27      	ldr	r2, [pc, #156]	@ (80041d4 <xTaskResumeAll+0x128>)
 8004136:	441a      	add	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	3304      	adds	r3, #4
 800413c:	4619      	mov	r1, r3
 800413e:	4610      	mov	r0, r2
 8004140:	f7ff fafb 	bl	800373a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004148:	4b23      	ldr	r3, [pc, #140]	@ (80041d8 <xTaskResumeAll+0x12c>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800414e:	429a      	cmp	r2, r3
 8004150:	d302      	bcc.n	8004158 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004152:	4b22      	ldr	r3, [pc, #136]	@ (80041dc <xTaskResumeAll+0x130>)
 8004154:	2201      	movs	r2, #1
 8004156:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004158:	4b1c      	ldr	r3, [pc, #112]	@ (80041cc <xTaskResumeAll+0x120>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1cc      	bne.n	80040fa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d001      	beq.n	800416a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004166:	f000 fb09 	bl	800477c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800416a:	4b1d      	ldr	r3, [pc, #116]	@ (80041e0 <xTaskResumeAll+0x134>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d010      	beq.n	8004198 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004176:	f000 f837 	bl	80041e8 <xTaskIncrementTick>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d002      	beq.n	8004186 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004180:	4b16      	ldr	r3, [pc, #88]	@ (80041dc <xTaskResumeAll+0x130>)
 8004182:	2201      	movs	r2, #1
 8004184:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	3b01      	subs	r3, #1
 800418a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1f1      	bne.n	8004176 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004192:	4b13      	ldr	r3, [pc, #76]	@ (80041e0 <xTaskResumeAll+0x134>)
 8004194:	2200      	movs	r2, #0
 8004196:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004198:	4b10      	ldr	r3, [pc, #64]	@ (80041dc <xTaskResumeAll+0x130>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d009      	beq.n	80041b4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80041a0:	2301      	movs	r3, #1
 80041a2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80041a4:	4b0f      	ldr	r3, [pc, #60]	@ (80041e4 <xTaskResumeAll+0x138>)
 80041a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	f3bf 8f4f 	dsb	sy
 80041b0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80041b4:	f000 fe02 	bl	8004dbc <vPortExitCritical>

	return xAlreadyYielded;
 80041b8:	68bb      	ldr	r3, [r7, #8]
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	200002a0 	.word	0x200002a0
 80041c8:	20000278 	.word	0x20000278
 80041cc:	20000238 	.word	0x20000238
 80041d0:	20000280 	.word	0x20000280
 80041d4:	2000017c 	.word	0x2000017c
 80041d8:	20000178 	.word	0x20000178
 80041dc:	2000028c 	.word	0x2000028c
 80041e0:	20000288 	.word	0x20000288
 80041e4:	e000ed04 	.word	0xe000ed04

080041e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80041ee:	2300      	movs	r3, #0
 80041f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041f2:	4b4f      	ldr	r3, [pc, #316]	@ (8004330 <xTaskIncrementTick+0x148>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f040 808f 	bne.w	800431a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80041fc:	4b4d      	ldr	r3, [pc, #308]	@ (8004334 <xTaskIncrementTick+0x14c>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	3301      	adds	r3, #1
 8004202:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004204:	4a4b      	ldr	r2, [pc, #300]	@ (8004334 <xTaskIncrementTick+0x14c>)
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d121      	bne.n	8004254 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004210:	4b49      	ldr	r3, [pc, #292]	@ (8004338 <xTaskIncrementTick+0x150>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00b      	beq.n	8004232 <xTaskIncrementTick+0x4a>
	__asm volatile
 800421a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800421e:	f383 8811 	msr	BASEPRI, r3
 8004222:	f3bf 8f6f 	isb	sy
 8004226:	f3bf 8f4f 	dsb	sy
 800422a:	603b      	str	r3, [r7, #0]
}
 800422c:	bf00      	nop
 800422e:	bf00      	nop
 8004230:	e7fd      	b.n	800422e <xTaskIncrementTick+0x46>
 8004232:	4b41      	ldr	r3, [pc, #260]	@ (8004338 <xTaskIncrementTick+0x150>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	60fb      	str	r3, [r7, #12]
 8004238:	4b40      	ldr	r3, [pc, #256]	@ (800433c <xTaskIncrementTick+0x154>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a3e      	ldr	r2, [pc, #248]	@ (8004338 <xTaskIncrementTick+0x150>)
 800423e:	6013      	str	r3, [r2, #0]
 8004240:	4a3e      	ldr	r2, [pc, #248]	@ (800433c <xTaskIncrementTick+0x154>)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6013      	str	r3, [r2, #0]
 8004246:	4b3e      	ldr	r3, [pc, #248]	@ (8004340 <xTaskIncrementTick+0x158>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	3301      	adds	r3, #1
 800424c:	4a3c      	ldr	r2, [pc, #240]	@ (8004340 <xTaskIncrementTick+0x158>)
 800424e:	6013      	str	r3, [r2, #0]
 8004250:	f000 fa94 	bl	800477c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004254:	4b3b      	ldr	r3, [pc, #236]	@ (8004344 <xTaskIncrementTick+0x15c>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	429a      	cmp	r2, r3
 800425c:	d348      	bcc.n	80042f0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800425e:	4b36      	ldr	r3, [pc, #216]	@ (8004338 <xTaskIncrementTick+0x150>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d104      	bne.n	8004272 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004268:	4b36      	ldr	r3, [pc, #216]	@ (8004344 <xTaskIncrementTick+0x15c>)
 800426a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800426e:	601a      	str	r2, [r3, #0]
					break;
 8004270:	e03e      	b.n	80042f0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004272:	4b31      	ldr	r3, [pc, #196]	@ (8004338 <xTaskIncrementTick+0x150>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	429a      	cmp	r2, r3
 8004288:	d203      	bcs.n	8004292 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800428a:	4a2e      	ldr	r2, [pc, #184]	@ (8004344 <xTaskIncrementTick+0x15c>)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004290:	e02e      	b.n	80042f0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	3304      	adds	r3, #4
 8004296:	4618      	mov	r0, r3
 8004298:	f7ff faac 	bl	80037f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d004      	beq.n	80042ae <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	3318      	adds	r3, #24
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7ff faa3 	bl	80037f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b2:	2201      	movs	r2, #1
 80042b4:	409a      	lsls	r2, r3
 80042b6:	4b24      	ldr	r3, [pc, #144]	@ (8004348 <xTaskIncrementTick+0x160>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	4a22      	ldr	r2, [pc, #136]	@ (8004348 <xTaskIncrementTick+0x160>)
 80042be:	6013      	str	r3, [r2, #0]
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042c4:	4613      	mov	r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	4413      	add	r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4a1f      	ldr	r2, [pc, #124]	@ (800434c <xTaskIncrementTick+0x164>)
 80042ce:	441a      	add	r2, r3
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	3304      	adds	r3, #4
 80042d4:	4619      	mov	r1, r3
 80042d6:	4610      	mov	r0, r2
 80042d8:	f7ff fa2f 	bl	800373a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004350 <xTaskIncrementTick+0x168>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d3b9      	bcc.n	800425e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80042ea:	2301      	movs	r3, #1
 80042ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042ee:	e7b6      	b.n	800425e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80042f0:	4b17      	ldr	r3, [pc, #92]	@ (8004350 <xTaskIncrementTick+0x168>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042f6:	4915      	ldr	r1, [pc, #84]	@ (800434c <xTaskIncrementTick+0x164>)
 80042f8:	4613      	mov	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	440b      	add	r3, r1
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d901      	bls.n	800430c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004308:	2301      	movs	r3, #1
 800430a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800430c:	4b11      	ldr	r3, [pc, #68]	@ (8004354 <xTaskIncrementTick+0x16c>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d007      	beq.n	8004324 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004314:	2301      	movs	r3, #1
 8004316:	617b      	str	r3, [r7, #20]
 8004318:	e004      	b.n	8004324 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800431a:	4b0f      	ldr	r3, [pc, #60]	@ (8004358 <xTaskIncrementTick+0x170>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	3301      	adds	r3, #1
 8004320:	4a0d      	ldr	r2, [pc, #52]	@ (8004358 <xTaskIncrementTick+0x170>)
 8004322:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004324:	697b      	ldr	r3, [r7, #20]
}
 8004326:	4618      	mov	r0, r3
 8004328:	3718      	adds	r7, #24
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	200002a0 	.word	0x200002a0
 8004334:	2000027c 	.word	0x2000027c
 8004338:	20000230 	.word	0x20000230
 800433c:	20000234 	.word	0x20000234
 8004340:	20000290 	.word	0x20000290
 8004344:	20000298 	.word	0x20000298
 8004348:	20000280 	.word	0x20000280
 800434c:	2000017c 	.word	0x2000017c
 8004350:	20000178 	.word	0x20000178
 8004354:	2000028c 	.word	0x2000028c
 8004358:	20000288 	.word	0x20000288

0800435c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800435c:	b480      	push	{r7}
 800435e:	b087      	sub	sp, #28
 8004360:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004362:	4b2a      	ldr	r3, [pc, #168]	@ (800440c <vTaskSwitchContext+0xb0>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800436a:	4b29      	ldr	r3, [pc, #164]	@ (8004410 <vTaskSwitchContext+0xb4>)
 800436c:	2201      	movs	r2, #1
 800436e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004370:	e045      	b.n	80043fe <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8004372:	4b27      	ldr	r3, [pc, #156]	@ (8004410 <vTaskSwitchContext+0xb4>)
 8004374:	2200      	movs	r2, #0
 8004376:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004378:	4b26      	ldr	r3, [pc, #152]	@ (8004414 <vTaskSwitchContext+0xb8>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	fab3 f383 	clz	r3, r3
 8004384:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004386:	7afb      	ldrb	r3, [r7, #11]
 8004388:	f1c3 031f 	rsb	r3, r3, #31
 800438c:	617b      	str	r3, [r7, #20]
 800438e:	4922      	ldr	r1, [pc, #136]	@ (8004418 <vTaskSwitchContext+0xbc>)
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	4613      	mov	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4413      	add	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	440b      	add	r3, r1
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d10b      	bne.n	80043ba <vTaskSwitchContext+0x5e>
	__asm volatile
 80043a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043a6:	f383 8811 	msr	BASEPRI, r3
 80043aa:	f3bf 8f6f 	isb	sy
 80043ae:	f3bf 8f4f 	dsb	sy
 80043b2:	607b      	str	r3, [r7, #4]
}
 80043b4:	bf00      	nop
 80043b6:	bf00      	nop
 80043b8:	e7fd      	b.n	80043b6 <vTaskSwitchContext+0x5a>
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	4613      	mov	r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	4413      	add	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	4a14      	ldr	r2, [pc, #80]	@ (8004418 <vTaskSwitchContext+0xbc>)
 80043c6:	4413      	add	r3, r2
 80043c8:	613b      	str	r3, [r7, #16]
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	685a      	ldr	r2, [r3, #4]
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	605a      	str	r2, [r3, #4]
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	685a      	ldr	r2, [r3, #4]
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	3308      	adds	r3, #8
 80043dc:	429a      	cmp	r2, r3
 80043de:	d104      	bne.n	80043ea <vTaskSwitchContext+0x8e>
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	605a      	str	r2, [r3, #4]
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	4a0a      	ldr	r2, [pc, #40]	@ (800441c <vTaskSwitchContext+0xc0>)
 80043f2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80043f4:	4b09      	ldr	r3, [pc, #36]	@ (800441c <vTaskSwitchContext+0xc0>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	334c      	adds	r3, #76	@ 0x4c
 80043fa:	4a09      	ldr	r2, [pc, #36]	@ (8004420 <vTaskSwitchContext+0xc4>)
 80043fc:	6013      	str	r3, [r2, #0]
}
 80043fe:	bf00      	nop
 8004400:	371c      	adds	r7, #28
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	200002a0 	.word	0x200002a0
 8004410:	2000028c 	.word	0x2000028c
 8004414:	20000280 	.word	0x20000280
 8004418:	2000017c 	.word	0x2000017c
 800441c:	20000178 	.word	0x20000178
 8004420:	2000001c 	.word	0x2000001c

08004424 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d10b      	bne.n	800444c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004438:	f383 8811 	msr	BASEPRI, r3
 800443c:	f3bf 8f6f 	isb	sy
 8004440:	f3bf 8f4f 	dsb	sy
 8004444:	60fb      	str	r3, [r7, #12]
}
 8004446:	bf00      	nop
 8004448:	bf00      	nop
 800444a:	e7fd      	b.n	8004448 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800444c:	4b07      	ldr	r3, [pc, #28]	@ (800446c <vTaskPlaceOnEventList+0x48>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	3318      	adds	r3, #24
 8004452:	4619      	mov	r1, r3
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f7ff f994 	bl	8003782 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800445a:	2101      	movs	r1, #1
 800445c:	6838      	ldr	r0, [r7, #0]
 800445e:	f000 fae5 	bl	8004a2c <prvAddCurrentTaskToDelayedList>
}
 8004462:	bf00      	nop
 8004464:	3710      	adds	r7, #16
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	20000178 	.word	0x20000178

08004470 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10b      	bne.n	800449e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800448a:	f383 8811 	msr	BASEPRI, r3
 800448e:	f3bf 8f6f 	isb	sy
 8004492:	f3bf 8f4f 	dsb	sy
 8004496:	60fb      	str	r3, [r7, #12]
}
 8004498:	bf00      	nop
 800449a:	bf00      	nop
 800449c:	e7fd      	b.n	800449a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	3318      	adds	r3, #24
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7ff f9a6 	bl	80037f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044a8:	4b1d      	ldr	r3, [pc, #116]	@ (8004520 <xTaskRemoveFromEventList+0xb0>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d11c      	bne.n	80044ea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	3304      	adds	r3, #4
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7ff f99d 	bl	80037f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044be:	2201      	movs	r2, #1
 80044c0:	409a      	lsls	r2, r3
 80044c2:	4b18      	ldr	r3, [pc, #96]	@ (8004524 <xTaskRemoveFromEventList+0xb4>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	4a16      	ldr	r2, [pc, #88]	@ (8004524 <xTaskRemoveFromEventList+0xb4>)
 80044ca:	6013      	str	r3, [r2, #0]
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044d0:	4613      	mov	r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4413      	add	r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4a13      	ldr	r2, [pc, #76]	@ (8004528 <xTaskRemoveFromEventList+0xb8>)
 80044da:	441a      	add	r2, r3
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	3304      	adds	r3, #4
 80044e0:	4619      	mov	r1, r3
 80044e2:	4610      	mov	r0, r2
 80044e4:	f7ff f929 	bl	800373a <vListInsertEnd>
 80044e8:	e005      	b.n	80044f6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	3318      	adds	r3, #24
 80044ee:	4619      	mov	r1, r3
 80044f0:	480e      	ldr	r0, [pc, #56]	@ (800452c <xTaskRemoveFromEventList+0xbc>)
 80044f2:	f7ff f922 	bl	800373a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004530 <xTaskRemoveFromEventList+0xc0>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004500:	429a      	cmp	r2, r3
 8004502:	d905      	bls.n	8004510 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004504:	2301      	movs	r3, #1
 8004506:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004508:	4b0a      	ldr	r3, [pc, #40]	@ (8004534 <xTaskRemoveFromEventList+0xc4>)
 800450a:	2201      	movs	r2, #1
 800450c:	601a      	str	r2, [r3, #0]
 800450e:	e001      	b.n	8004514 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004510:	2300      	movs	r3, #0
 8004512:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004514:	697b      	ldr	r3, [r7, #20]
}
 8004516:	4618      	mov	r0, r3
 8004518:	3718      	adds	r7, #24
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	200002a0 	.word	0x200002a0
 8004524:	20000280 	.word	0x20000280
 8004528:	2000017c 	.word	0x2000017c
 800452c:	20000238 	.word	0x20000238
 8004530:	20000178 	.word	0x20000178
 8004534:	2000028c 	.word	0x2000028c

08004538 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004540:	4b06      	ldr	r3, [pc, #24]	@ (800455c <vTaskInternalSetTimeOutState+0x24>)
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004548:	4b05      	ldr	r3, [pc, #20]	@ (8004560 <vTaskInternalSetTimeOutState+0x28>)
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	605a      	str	r2, [r3, #4]
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr
 800455c:	20000290 	.word	0x20000290
 8004560:	2000027c 	.word	0x2000027c

08004564 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b088      	sub	sp, #32
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10b      	bne.n	800458c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004578:	f383 8811 	msr	BASEPRI, r3
 800457c:	f3bf 8f6f 	isb	sy
 8004580:	f3bf 8f4f 	dsb	sy
 8004584:	613b      	str	r3, [r7, #16]
}
 8004586:	bf00      	nop
 8004588:	bf00      	nop
 800458a:	e7fd      	b.n	8004588 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10b      	bne.n	80045aa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004596:	f383 8811 	msr	BASEPRI, r3
 800459a:	f3bf 8f6f 	isb	sy
 800459e:	f3bf 8f4f 	dsb	sy
 80045a2:	60fb      	str	r3, [r7, #12]
}
 80045a4:	bf00      	nop
 80045a6:	bf00      	nop
 80045a8:	e7fd      	b.n	80045a6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80045aa:	f000 fbd5 	bl	8004d58 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80045ae:	4b1d      	ldr	r3, [pc, #116]	@ (8004624 <xTaskCheckForTimeOut+0xc0>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80045c6:	d102      	bne.n	80045ce <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80045c8:	2300      	movs	r3, #0
 80045ca:	61fb      	str	r3, [r7, #28]
 80045cc:	e023      	b.n	8004616 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	4b15      	ldr	r3, [pc, #84]	@ (8004628 <xTaskCheckForTimeOut+0xc4>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d007      	beq.n	80045ea <xTaskCheckForTimeOut+0x86>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	69ba      	ldr	r2, [r7, #24]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d302      	bcc.n	80045ea <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80045e4:	2301      	movs	r3, #1
 80045e6:	61fb      	str	r3, [r7, #28]
 80045e8:	e015      	b.n	8004616 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d20b      	bcs.n	800460c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	1ad2      	subs	r2, r2, r3
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f7ff ff99 	bl	8004538 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004606:	2300      	movs	r3, #0
 8004608:	61fb      	str	r3, [r7, #28]
 800460a:	e004      	b.n	8004616 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	2200      	movs	r2, #0
 8004610:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004612:	2301      	movs	r3, #1
 8004614:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004616:	f000 fbd1 	bl	8004dbc <vPortExitCritical>

	return xReturn;
 800461a:	69fb      	ldr	r3, [r7, #28]
}
 800461c:	4618      	mov	r0, r3
 800461e:	3720      	adds	r7, #32
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	2000027c 	.word	0x2000027c
 8004628:	20000290 	.word	0x20000290

0800462c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800462c:	b480      	push	{r7}
 800462e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004630:	4b03      	ldr	r3, [pc, #12]	@ (8004640 <vTaskMissedYield+0x14>)
 8004632:	2201      	movs	r2, #1
 8004634:	601a      	str	r2, [r3, #0]
}
 8004636:	bf00      	nop
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr
 8004640:	2000028c 	.word	0x2000028c

08004644 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800464c:	f000 f852 	bl	80046f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004650:	4b06      	ldr	r3, [pc, #24]	@ (800466c <prvIdleTask+0x28>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d9f9      	bls.n	800464c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004658:	4b05      	ldr	r3, [pc, #20]	@ (8004670 <prvIdleTask+0x2c>)
 800465a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800465e:	601a      	str	r2, [r3, #0]
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004668:	e7f0      	b.n	800464c <prvIdleTask+0x8>
 800466a:	bf00      	nop
 800466c:	2000017c 	.word	0x2000017c
 8004670:	e000ed04 	.word	0xe000ed04

08004674 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800467a:	2300      	movs	r3, #0
 800467c:	607b      	str	r3, [r7, #4]
 800467e:	e00c      	b.n	800469a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	4613      	mov	r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	4413      	add	r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	4a12      	ldr	r2, [pc, #72]	@ (80046d4 <prvInitialiseTaskLists+0x60>)
 800468c:	4413      	add	r3, r2
 800468e:	4618      	mov	r0, r3
 8004690:	f7ff f826 	bl	80036e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	3301      	adds	r3, #1
 8004698:	607b      	str	r3, [r7, #4]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b06      	cmp	r3, #6
 800469e:	d9ef      	bls.n	8004680 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80046a0:	480d      	ldr	r0, [pc, #52]	@ (80046d8 <prvInitialiseTaskLists+0x64>)
 80046a2:	f7ff f81d 	bl	80036e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80046a6:	480d      	ldr	r0, [pc, #52]	@ (80046dc <prvInitialiseTaskLists+0x68>)
 80046a8:	f7ff f81a 	bl	80036e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80046ac:	480c      	ldr	r0, [pc, #48]	@ (80046e0 <prvInitialiseTaskLists+0x6c>)
 80046ae:	f7ff f817 	bl	80036e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80046b2:	480c      	ldr	r0, [pc, #48]	@ (80046e4 <prvInitialiseTaskLists+0x70>)
 80046b4:	f7ff f814 	bl	80036e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80046b8:	480b      	ldr	r0, [pc, #44]	@ (80046e8 <prvInitialiseTaskLists+0x74>)
 80046ba:	f7ff f811 	bl	80036e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80046be:	4b0b      	ldr	r3, [pc, #44]	@ (80046ec <prvInitialiseTaskLists+0x78>)
 80046c0:	4a05      	ldr	r2, [pc, #20]	@ (80046d8 <prvInitialiseTaskLists+0x64>)
 80046c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80046c4:	4b0a      	ldr	r3, [pc, #40]	@ (80046f0 <prvInitialiseTaskLists+0x7c>)
 80046c6:	4a05      	ldr	r2, [pc, #20]	@ (80046dc <prvInitialiseTaskLists+0x68>)
 80046c8:	601a      	str	r2, [r3, #0]
}
 80046ca:	bf00      	nop
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	2000017c 	.word	0x2000017c
 80046d8:	20000208 	.word	0x20000208
 80046dc:	2000021c 	.word	0x2000021c
 80046e0:	20000238 	.word	0x20000238
 80046e4:	2000024c 	.word	0x2000024c
 80046e8:	20000264 	.word	0x20000264
 80046ec:	20000230 	.word	0x20000230
 80046f0:	20000234 	.word	0x20000234

080046f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046fa:	e019      	b.n	8004730 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80046fc:	f000 fb2c 	bl	8004d58 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004700:	4b10      	ldr	r3, [pc, #64]	@ (8004744 <prvCheckTasksWaitingTermination+0x50>)
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	3304      	adds	r3, #4
 800470c:	4618      	mov	r0, r3
 800470e:	f7ff f871 	bl	80037f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004712:	4b0d      	ldr	r3, [pc, #52]	@ (8004748 <prvCheckTasksWaitingTermination+0x54>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	3b01      	subs	r3, #1
 8004718:	4a0b      	ldr	r2, [pc, #44]	@ (8004748 <prvCheckTasksWaitingTermination+0x54>)
 800471a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800471c:	4b0b      	ldr	r3, [pc, #44]	@ (800474c <prvCheckTasksWaitingTermination+0x58>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	3b01      	subs	r3, #1
 8004722:	4a0a      	ldr	r2, [pc, #40]	@ (800474c <prvCheckTasksWaitingTermination+0x58>)
 8004724:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004726:	f000 fb49 	bl	8004dbc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f810 	bl	8004750 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004730:	4b06      	ldr	r3, [pc, #24]	@ (800474c <prvCheckTasksWaitingTermination+0x58>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1e1      	bne.n	80046fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004738:	bf00      	nop
 800473a:	bf00      	nop
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	2000024c 	.word	0x2000024c
 8004748:	20000278 	.word	0x20000278
 800474c:	20000260 	.word	0x20000260

08004750 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	334c      	adds	r3, #76	@ 0x4c
 800475c:	4618      	mov	r0, r3
 800475e:	f000 ffd9 	bl	8005714 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004766:	4618      	mov	r0, r3
 8004768:	f000 fca4 	bl	80050b4 <vPortFree>
			vPortFree( pxTCB );
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 fca1 	bl	80050b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004772:	bf00      	nop
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
	...

0800477c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004782:	4b0c      	ldr	r3, [pc, #48]	@ (80047b4 <prvResetNextTaskUnblockTime+0x38>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d104      	bne.n	8004796 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800478c:	4b0a      	ldr	r3, [pc, #40]	@ (80047b8 <prvResetNextTaskUnblockTime+0x3c>)
 800478e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004792:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004794:	e008      	b.n	80047a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004796:	4b07      	ldr	r3, [pc, #28]	@ (80047b4 <prvResetNextTaskUnblockTime+0x38>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	4a04      	ldr	r2, [pc, #16]	@ (80047b8 <prvResetNextTaskUnblockTime+0x3c>)
 80047a6:	6013      	str	r3, [r2, #0]
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr
 80047b4:	20000230 	.word	0x20000230
 80047b8:	20000298 	.word	0x20000298

080047bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80047c2:	4b0b      	ldr	r3, [pc, #44]	@ (80047f0 <xTaskGetSchedulerState+0x34>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d102      	bne.n	80047d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80047ca:	2301      	movs	r3, #1
 80047cc:	607b      	str	r3, [r7, #4]
 80047ce:	e008      	b.n	80047e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047d0:	4b08      	ldr	r3, [pc, #32]	@ (80047f4 <xTaskGetSchedulerState+0x38>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d102      	bne.n	80047de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80047d8:	2302      	movs	r3, #2
 80047da:	607b      	str	r3, [r7, #4]
 80047dc:	e001      	b.n	80047e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80047de:	2300      	movs	r3, #0
 80047e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80047e2:	687b      	ldr	r3, [r7, #4]
	}
 80047e4:	4618      	mov	r0, r3
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr
 80047f0:	20000284 	.word	0x20000284
 80047f4:	200002a0 	.word	0x200002a0

080047f8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004804:	2300      	movs	r3, #0
 8004806:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d05e      	beq.n	80048cc <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004812:	4b31      	ldr	r3, [pc, #196]	@ (80048d8 <xTaskPriorityInherit+0xe0>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004818:	429a      	cmp	r2, r3
 800481a:	d24e      	bcs.n	80048ba <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	2b00      	cmp	r3, #0
 8004822:	db06      	blt.n	8004832 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004824:	4b2c      	ldr	r3, [pc, #176]	@ (80048d8 <xTaskPriorityInherit+0xe0>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800482a:	f1c3 0207 	rsb	r2, r3, #7
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	6959      	ldr	r1, [r3, #20]
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800483a:	4613      	mov	r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4413      	add	r3, r2
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	4a26      	ldr	r2, [pc, #152]	@ (80048dc <xTaskPriorityInherit+0xe4>)
 8004844:	4413      	add	r3, r2
 8004846:	4299      	cmp	r1, r3
 8004848:	d12f      	bne.n	80048aa <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	3304      	adds	r3, #4
 800484e:	4618      	mov	r0, r3
 8004850:	f7fe ffd0 	bl	80037f4 <uxListRemove>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10a      	bne.n	8004870 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800485e:	2201      	movs	r2, #1
 8004860:	fa02 f303 	lsl.w	r3, r2, r3
 8004864:	43da      	mvns	r2, r3
 8004866:	4b1e      	ldr	r3, [pc, #120]	@ (80048e0 <xTaskPriorityInherit+0xe8>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4013      	ands	r3, r2
 800486c:	4a1c      	ldr	r2, [pc, #112]	@ (80048e0 <xTaskPriorityInherit+0xe8>)
 800486e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004870:	4b19      	ldr	r3, [pc, #100]	@ (80048d8 <xTaskPriorityInherit+0xe0>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800487e:	2201      	movs	r2, #1
 8004880:	409a      	lsls	r2, r3
 8004882:	4b17      	ldr	r3, [pc, #92]	@ (80048e0 <xTaskPriorityInherit+0xe8>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4313      	orrs	r3, r2
 8004888:	4a15      	ldr	r2, [pc, #84]	@ (80048e0 <xTaskPriorityInherit+0xe8>)
 800488a:	6013      	str	r3, [r2, #0]
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004890:	4613      	mov	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4413      	add	r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4a10      	ldr	r2, [pc, #64]	@ (80048dc <xTaskPriorityInherit+0xe4>)
 800489a:	441a      	add	r2, r3
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	3304      	adds	r3, #4
 80048a0:	4619      	mov	r1, r3
 80048a2:	4610      	mov	r0, r2
 80048a4:	f7fe ff49 	bl	800373a <vListInsertEnd>
 80048a8:	e004      	b.n	80048b4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80048aa:	4b0b      	ldr	r3, [pc, #44]	@ (80048d8 <xTaskPriorityInherit+0xe0>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80048b4:	2301      	movs	r3, #1
 80048b6:	60fb      	str	r3, [r7, #12]
 80048b8:	e008      	b.n	80048cc <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048be:	4b06      	ldr	r3, [pc, #24]	@ (80048d8 <xTaskPriorityInherit+0xe0>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d201      	bcs.n	80048cc <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80048c8:	2301      	movs	r3, #1
 80048ca:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80048cc:	68fb      	ldr	r3, [r7, #12]
	}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	20000178 	.word	0x20000178
 80048dc:	2000017c 	.word	0x2000017c
 80048e0:	20000280 	.word	0x20000280

080048e4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b088      	sub	sp, #32
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80048f2:	2301      	movs	r3, #1
 80048f4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d079      	beq.n	80049f0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004900:	2b00      	cmp	r3, #0
 8004902:	d10b      	bne.n	800491c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004908:	f383 8811 	msr	BASEPRI, r3
 800490c:	f3bf 8f6f 	isb	sy
 8004910:	f3bf 8f4f 	dsb	sy
 8004914:	60fb      	str	r3, [r7, #12]
}
 8004916:	bf00      	nop
 8004918:	bf00      	nop
 800491a:	e7fd      	b.n	8004918 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004920:	683a      	ldr	r2, [r7, #0]
 8004922:	429a      	cmp	r2, r3
 8004924:	d902      	bls.n	800492c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	61fb      	str	r3, [r7, #28]
 800492a:	e002      	b.n	8004932 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004930:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004936:	69fa      	ldr	r2, [r7, #28]
 8004938:	429a      	cmp	r2, r3
 800493a:	d059      	beq.n	80049f0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	429a      	cmp	r2, r3
 8004944:	d154      	bne.n	80049f0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004946:	4b2c      	ldr	r3, [pc, #176]	@ (80049f8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	429a      	cmp	r2, r3
 800494e:	d10b      	bne.n	8004968 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8004950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004954:	f383 8811 	msr	BASEPRI, r3
 8004958:	f3bf 8f6f 	isb	sy
 800495c:	f3bf 8f4f 	dsb	sy
 8004960:	60bb      	str	r3, [r7, #8]
}
 8004962:	bf00      	nop
 8004964:	bf00      	nop
 8004966:	e7fd      	b.n	8004964 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800496c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	69fa      	ldr	r2, [r7, #28]
 8004972:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	2b00      	cmp	r3, #0
 800497a:	db04      	blt.n	8004986 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	f1c3 0207 	rsb	r2, r3, #7
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	6959      	ldr	r1, [r3, #20]
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	4613      	mov	r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4413      	add	r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	4a19      	ldr	r2, [pc, #100]	@ (80049fc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8004996:	4413      	add	r3, r2
 8004998:	4299      	cmp	r1, r3
 800499a:	d129      	bne.n	80049f0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	3304      	adds	r3, #4
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7fe ff27 	bl	80037f4 <uxListRemove>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10a      	bne.n	80049c2 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b0:	2201      	movs	r2, #1
 80049b2:	fa02 f303 	lsl.w	r3, r2, r3
 80049b6:	43da      	mvns	r2, r3
 80049b8:	4b11      	ldr	r3, [pc, #68]	@ (8004a00 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4013      	ands	r3, r2
 80049be:	4a10      	ldr	r2, [pc, #64]	@ (8004a00 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80049c0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049c6:	2201      	movs	r2, #1
 80049c8:	409a      	lsls	r2, r3
 80049ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004a00 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	4a0b      	ldr	r2, [pc, #44]	@ (8004a00 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80049d2:	6013      	str	r3, [r2, #0]
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049d8:	4613      	mov	r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4413      	add	r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4a06      	ldr	r2, [pc, #24]	@ (80049fc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80049e2:	441a      	add	r2, r3
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	3304      	adds	r3, #4
 80049e8:	4619      	mov	r1, r3
 80049ea:	4610      	mov	r0, r2
 80049ec:	f7fe fea5 	bl	800373a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80049f0:	bf00      	nop
 80049f2:	3720      	adds	r7, #32
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	20000178 	.word	0x20000178
 80049fc:	2000017c 	.word	0x2000017c
 8004a00:	20000280 	.word	0x20000280

08004a04 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004a04:	b480      	push	{r7}
 8004a06:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004a08:	4b07      	ldr	r3, [pc, #28]	@ (8004a28 <pvTaskIncrementMutexHeldCount+0x24>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d004      	beq.n	8004a1a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004a10:	4b05      	ldr	r3, [pc, #20]	@ (8004a28 <pvTaskIncrementMutexHeldCount+0x24>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004a16:	3201      	adds	r2, #1
 8004a18:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8004a1a:	4b03      	ldr	r3, [pc, #12]	@ (8004a28 <pvTaskIncrementMutexHeldCount+0x24>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
	}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr
 8004a28:	20000178 	.word	0x20000178

08004a2c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004a36:	4b29      	ldr	r3, [pc, #164]	@ (8004adc <prvAddCurrentTaskToDelayedList+0xb0>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a3c:	4b28      	ldr	r3, [pc, #160]	@ (8004ae0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	3304      	adds	r3, #4
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7fe fed6 	bl	80037f4 <uxListRemove>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d10b      	bne.n	8004a66 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004a4e:	4b24      	ldr	r3, [pc, #144]	@ (8004ae0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a54:	2201      	movs	r2, #1
 8004a56:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5a:	43da      	mvns	r2, r3
 8004a5c:	4b21      	ldr	r3, [pc, #132]	@ (8004ae4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4013      	ands	r3, r2
 8004a62:	4a20      	ldr	r2, [pc, #128]	@ (8004ae4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a64:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a6c:	d10a      	bne.n	8004a84 <prvAddCurrentTaskToDelayedList+0x58>
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d007      	beq.n	8004a84 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a74:	4b1a      	ldr	r3, [pc, #104]	@ (8004ae0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	3304      	adds	r3, #4
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	481a      	ldr	r0, [pc, #104]	@ (8004ae8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004a7e:	f7fe fe5c 	bl	800373a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004a82:	e026      	b.n	8004ad2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4413      	add	r3, r2
 8004a8a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004a8c:	4b14      	ldr	r3, [pc, #80]	@ (8004ae0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004a94:	68ba      	ldr	r2, [r7, #8]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d209      	bcs.n	8004ab0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a9c:	4b13      	ldr	r3, [pc, #76]	@ (8004aec <prvAddCurrentTaskToDelayedList+0xc0>)
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8004ae0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	3304      	adds	r3, #4
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	4610      	mov	r0, r2
 8004aaa:	f7fe fe6a 	bl	8003782 <vListInsert>
}
 8004aae:	e010      	b.n	8004ad2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8004af0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8004ae0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	3304      	adds	r3, #4
 8004aba:	4619      	mov	r1, r3
 8004abc:	4610      	mov	r0, r2
 8004abe:	f7fe fe60 	bl	8003782 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8004af4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d202      	bcs.n	8004ad2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004acc:	4a09      	ldr	r2, [pc, #36]	@ (8004af4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	6013      	str	r3, [r2, #0]
}
 8004ad2:	bf00      	nop
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	2000027c 	.word	0x2000027c
 8004ae0:	20000178 	.word	0x20000178
 8004ae4:	20000280 	.word	0x20000280
 8004ae8:	20000264 	.word	0x20000264
 8004aec:	20000234 	.word	0x20000234
 8004af0:	20000230 	.word	0x20000230
 8004af4:	20000298 	.word	0x20000298

08004af8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	3b04      	subs	r3, #4
 8004b08:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004b10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	3b04      	subs	r3, #4
 8004b16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	f023 0201 	bic.w	r2, r3, #1
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	3b04      	subs	r3, #4
 8004b26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b28:	4a0c      	ldr	r2, [pc, #48]	@ (8004b5c <pxPortInitialiseStack+0x64>)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	3b14      	subs	r3, #20
 8004b32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	3b04      	subs	r3, #4
 8004b3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f06f 0202 	mvn.w	r2, #2
 8004b46:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	3b20      	subs	r3, #32
 8004b4c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3714      	adds	r7, #20
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr
 8004b5c:	08004b61 	.word	0x08004b61

08004b60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004b66:	2300      	movs	r3, #0
 8004b68:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004b6a:	4b13      	ldr	r3, [pc, #76]	@ (8004bb8 <prvTaskExitError+0x58>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b72:	d00b      	beq.n	8004b8c <prvTaskExitError+0x2c>
	__asm volatile
 8004b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b78:	f383 8811 	msr	BASEPRI, r3
 8004b7c:	f3bf 8f6f 	isb	sy
 8004b80:	f3bf 8f4f 	dsb	sy
 8004b84:	60fb      	str	r3, [r7, #12]
}
 8004b86:	bf00      	nop
 8004b88:	bf00      	nop
 8004b8a:	e7fd      	b.n	8004b88 <prvTaskExitError+0x28>
	__asm volatile
 8004b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b90:	f383 8811 	msr	BASEPRI, r3
 8004b94:	f3bf 8f6f 	isb	sy
 8004b98:	f3bf 8f4f 	dsb	sy
 8004b9c:	60bb      	str	r3, [r7, #8]
}
 8004b9e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004ba0:	bf00      	nop
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d0fc      	beq.n	8004ba2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004ba8:	bf00      	nop
 8004baa:	bf00      	nop
 8004bac:	3714      	adds	r7, #20
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	2000000c 	.word	0x2000000c
 8004bbc:	00000000 	.word	0x00000000

08004bc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004bc0:	4b07      	ldr	r3, [pc, #28]	@ (8004be0 <pxCurrentTCBConst2>)
 8004bc2:	6819      	ldr	r1, [r3, #0]
 8004bc4:	6808      	ldr	r0, [r1, #0]
 8004bc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bca:	f380 8809 	msr	PSP, r0
 8004bce:	f3bf 8f6f 	isb	sy
 8004bd2:	f04f 0000 	mov.w	r0, #0
 8004bd6:	f380 8811 	msr	BASEPRI, r0
 8004bda:	4770      	bx	lr
 8004bdc:	f3af 8000 	nop.w

08004be0 <pxCurrentTCBConst2>:
 8004be0:	20000178 	.word	0x20000178
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004be4:	bf00      	nop
 8004be6:	bf00      	nop

08004be8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004be8:	4808      	ldr	r0, [pc, #32]	@ (8004c0c <prvPortStartFirstTask+0x24>)
 8004bea:	6800      	ldr	r0, [r0, #0]
 8004bec:	6800      	ldr	r0, [r0, #0]
 8004bee:	f380 8808 	msr	MSP, r0
 8004bf2:	f04f 0000 	mov.w	r0, #0
 8004bf6:	f380 8814 	msr	CONTROL, r0
 8004bfa:	b662      	cpsie	i
 8004bfc:	b661      	cpsie	f
 8004bfe:	f3bf 8f4f 	dsb	sy
 8004c02:	f3bf 8f6f 	isb	sy
 8004c06:	df00      	svc	0
 8004c08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c0a:	bf00      	nop
 8004c0c:	e000ed08 	.word	0xe000ed08

08004c10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c16:	4b47      	ldr	r3, [pc, #284]	@ (8004d34 <xPortStartScheduler+0x124>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a47      	ldr	r2, [pc, #284]	@ (8004d38 <xPortStartScheduler+0x128>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d10b      	bne.n	8004c38 <xPortStartScheduler+0x28>
	__asm volatile
 8004c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c24:	f383 8811 	msr	BASEPRI, r3
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	613b      	str	r3, [r7, #16]
}
 8004c32:	bf00      	nop
 8004c34:	bf00      	nop
 8004c36:	e7fd      	b.n	8004c34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c38:	4b3e      	ldr	r3, [pc, #248]	@ (8004d34 <xPortStartScheduler+0x124>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a3f      	ldr	r2, [pc, #252]	@ (8004d3c <xPortStartScheduler+0x12c>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d10b      	bne.n	8004c5a <xPortStartScheduler+0x4a>
	__asm volatile
 8004c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c46:	f383 8811 	msr	BASEPRI, r3
 8004c4a:	f3bf 8f6f 	isb	sy
 8004c4e:	f3bf 8f4f 	dsb	sy
 8004c52:	60fb      	str	r3, [r7, #12]
}
 8004c54:	bf00      	nop
 8004c56:	bf00      	nop
 8004c58:	e7fd      	b.n	8004c56 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c5a:	4b39      	ldr	r3, [pc, #228]	@ (8004d40 <xPortStartScheduler+0x130>)
 8004c5c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	22ff      	movs	r2, #255	@ 0xff
 8004c6a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c74:	78fb      	ldrb	r3, [r7, #3]
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004c7c:	b2da      	uxtb	r2, r3
 8004c7e:	4b31      	ldr	r3, [pc, #196]	@ (8004d44 <xPortStartScheduler+0x134>)
 8004c80:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c82:	4b31      	ldr	r3, [pc, #196]	@ (8004d48 <xPortStartScheduler+0x138>)
 8004c84:	2207      	movs	r2, #7
 8004c86:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c88:	e009      	b.n	8004c9e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004c8a:	4b2f      	ldr	r3, [pc, #188]	@ (8004d48 <xPortStartScheduler+0x138>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	4a2d      	ldr	r2, [pc, #180]	@ (8004d48 <xPortStartScheduler+0x138>)
 8004c92:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c94:	78fb      	ldrb	r3, [r7, #3]
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	005b      	lsls	r3, r3, #1
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c9e:	78fb      	ldrb	r3, [r7, #3]
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ca6:	2b80      	cmp	r3, #128	@ 0x80
 8004ca8:	d0ef      	beq.n	8004c8a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004caa:	4b27      	ldr	r3, [pc, #156]	@ (8004d48 <xPortStartScheduler+0x138>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f1c3 0307 	rsb	r3, r3, #7
 8004cb2:	2b04      	cmp	r3, #4
 8004cb4:	d00b      	beq.n	8004cce <xPortStartScheduler+0xbe>
	__asm volatile
 8004cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cba:	f383 8811 	msr	BASEPRI, r3
 8004cbe:	f3bf 8f6f 	isb	sy
 8004cc2:	f3bf 8f4f 	dsb	sy
 8004cc6:	60bb      	str	r3, [r7, #8]
}
 8004cc8:	bf00      	nop
 8004cca:	bf00      	nop
 8004ccc:	e7fd      	b.n	8004cca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004cce:	4b1e      	ldr	r3, [pc, #120]	@ (8004d48 <xPortStartScheduler+0x138>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	021b      	lsls	r3, r3, #8
 8004cd4:	4a1c      	ldr	r2, [pc, #112]	@ (8004d48 <xPortStartScheduler+0x138>)
 8004cd6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8004d48 <xPortStartScheduler+0x138>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004ce0:	4a19      	ldr	r2, [pc, #100]	@ (8004d48 <xPortStartScheduler+0x138>)
 8004ce2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	b2da      	uxtb	r2, r3
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004cec:	4b17      	ldr	r3, [pc, #92]	@ (8004d4c <xPortStartScheduler+0x13c>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a16      	ldr	r2, [pc, #88]	@ (8004d4c <xPortStartScheduler+0x13c>)
 8004cf2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004cf6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004cf8:	4b14      	ldr	r3, [pc, #80]	@ (8004d4c <xPortStartScheduler+0x13c>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a13      	ldr	r2, [pc, #76]	@ (8004d4c <xPortStartScheduler+0x13c>)
 8004cfe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004d02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004d04:	f000 f8da 	bl	8004ebc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d08:	4b11      	ldr	r3, [pc, #68]	@ (8004d50 <xPortStartScheduler+0x140>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004d0e:	f000 f8f9 	bl	8004f04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d12:	4b10      	ldr	r3, [pc, #64]	@ (8004d54 <xPortStartScheduler+0x144>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a0f      	ldr	r2, [pc, #60]	@ (8004d54 <xPortStartScheduler+0x144>)
 8004d18:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004d1c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004d1e:	f7ff ff63 	bl	8004be8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004d22:	f7ff fb1b 	bl	800435c <vTaskSwitchContext>
	prvTaskExitError();
 8004d26:	f7ff ff1b 	bl	8004b60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3718      	adds	r7, #24
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	e000ed00 	.word	0xe000ed00
 8004d38:	410fc271 	.word	0x410fc271
 8004d3c:	410fc270 	.word	0x410fc270
 8004d40:	e000e400 	.word	0xe000e400
 8004d44:	200002a4 	.word	0x200002a4
 8004d48:	200002a8 	.word	0x200002a8
 8004d4c:	e000ed20 	.word	0xe000ed20
 8004d50:	2000000c 	.word	0x2000000c
 8004d54:	e000ef34 	.word	0xe000ef34

08004d58 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
	__asm volatile
 8004d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d62:	f383 8811 	msr	BASEPRI, r3
 8004d66:	f3bf 8f6f 	isb	sy
 8004d6a:	f3bf 8f4f 	dsb	sy
 8004d6e:	607b      	str	r3, [r7, #4]
}
 8004d70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004d72:	4b10      	ldr	r3, [pc, #64]	@ (8004db4 <vPortEnterCritical+0x5c>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	3301      	adds	r3, #1
 8004d78:	4a0e      	ldr	r2, [pc, #56]	@ (8004db4 <vPortEnterCritical+0x5c>)
 8004d7a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004d7c:	4b0d      	ldr	r3, [pc, #52]	@ (8004db4 <vPortEnterCritical+0x5c>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d110      	bne.n	8004da6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d84:	4b0c      	ldr	r3, [pc, #48]	@ (8004db8 <vPortEnterCritical+0x60>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00b      	beq.n	8004da6 <vPortEnterCritical+0x4e>
	__asm volatile
 8004d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d92:	f383 8811 	msr	BASEPRI, r3
 8004d96:	f3bf 8f6f 	isb	sy
 8004d9a:	f3bf 8f4f 	dsb	sy
 8004d9e:	603b      	str	r3, [r7, #0]
}
 8004da0:	bf00      	nop
 8004da2:	bf00      	nop
 8004da4:	e7fd      	b.n	8004da2 <vPortEnterCritical+0x4a>
	}
}
 8004da6:	bf00      	nop
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	2000000c 	.word	0x2000000c
 8004db8:	e000ed04 	.word	0xe000ed04

08004dbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004dc2:	4b12      	ldr	r3, [pc, #72]	@ (8004e0c <vPortExitCritical+0x50>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10b      	bne.n	8004de2 <vPortExitCritical+0x26>
	__asm volatile
 8004dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dce:	f383 8811 	msr	BASEPRI, r3
 8004dd2:	f3bf 8f6f 	isb	sy
 8004dd6:	f3bf 8f4f 	dsb	sy
 8004dda:	607b      	str	r3, [r7, #4]
}
 8004ddc:	bf00      	nop
 8004dde:	bf00      	nop
 8004de0:	e7fd      	b.n	8004dde <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004de2:	4b0a      	ldr	r3, [pc, #40]	@ (8004e0c <vPortExitCritical+0x50>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	3b01      	subs	r3, #1
 8004de8:	4a08      	ldr	r2, [pc, #32]	@ (8004e0c <vPortExitCritical+0x50>)
 8004dea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004dec:	4b07      	ldr	r3, [pc, #28]	@ (8004e0c <vPortExitCritical+0x50>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d105      	bne.n	8004e00 <vPortExitCritical+0x44>
 8004df4:	2300      	movs	r3, #0
 8004df6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004dfe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr
 8004e0c:	2000000c 	.word	0x2000000c

08004e10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e10:	f3ef 8009 	mrs	r0, PSP
 8004e14:	f3bf 8f6f 	isb	sy
 8004e18:	4b15      	ldr	r3, [pc, #84]	@ (8004e70 <pxCurrentTCBConst>)
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	f01e 0f10 	tst.w	lr, #16
 8004e20:	bf08      	it	eq
 8004e22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e2a:	6010      	str	r0, [r2, #0]
 8004e2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004e30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004e34:	f380 8811 	msr	BASEPRI, r0
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	f3bf 8f6f 	isb	sy
 8004e40:	f7ff fa8c 	bl	800435c <vTaskSwitchContext>
 8004e44:	f04f 0000 	mov.w	r0, #0
 8004e48:	f380 8811 	msr	BASEPRI, r0
 8004e4c:	bc09      	pop	{r0, r3}
 8004e4e:	6819      	ldr	r1, [r3, #0]
 8004e50:	6808      	ldr	r0, [r1, #0]
 8004e52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e56:	f01e 0f10 	tst.w	lr, #16
 8004e5a:	bf08      	it	eq
 8004e5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004e60:	f380 8809 	msr	PSP, r0
 8004e64:	f3bf 8f6f 	isb	sy
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	f3af 8000 	nop.w

08004e70 <pxCurrentTCBConst>:
 8004e70:	20000178 	.word	0x20000178
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004e74:	bf00      	nop
 8004e76:	bf00      	nop

08004e78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e82:	f383 8811 	msr	BASEPRI, r3
 8004e86:	f3bf 8f6f 	isb	sy
 8004e8a:	f3bf 8f4f 	dsb	sy
 8004e8e:	607b      	str	r3, [r7, #4]
}
 8004e90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004e92:	f7ff f9a9 	bl	80041e8 <xTaskIncrementTick>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d003      	beq.n	8004ea4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e9c:	4b06      	ldr	r3, [pc, #24]	@ (8004eb8 <SysTick_Handler+0x40>)
 8004e9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ea2:	601a      	str	r2, [r3, #0]
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	f383 8811 	msr	BASEPRI, r3
}
 8004eae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004eb0:	bf00      	nop
 8004eb2:	3708      	adds	r7, #8
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	e000ed04 	.word	0xe000ed04

08004ebc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ef0 <vPortSetupTimerInterrupt+0x34>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8004ef4 <vPortSetupTimerInterrupt+0x38>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8004ef8 <vPortSetupTimerInterrupt+0x3c>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a0a      	ldr	r2, [pc, #40]	@ (8004efc <vPortSetupTimerInterrupt+0x40>)
 8004ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed6:	099b      	lsrs	r3, r3, #6
 8004ed8:	4a09      	ldr	r2, [pc, #36]	@ (8004f00 <vPortSetupTimerInterrupt+0x44>)
 8004eda:	3b01      	subs	r3, #1
 8004edc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004ede:	4b04      	ldr	r3, [pc, #16]	@ (8004ef0 <vPortSetupTimerInterrupt+0x34>)
 8004ee0:	2207      	movs	r2, #7
 8004ee2:	601a      	str	r2, [r3, #0]
}
 8004ee4:	bf00      	nop
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	e000e010 	.word	0xe000e010
 8004ef4:	e000e018 	.word	0xe000e018
 8004ef8:	20000000 	.word	0x20000000
 8004efc:	10624dd3 	.word	0x10624dd3
 8004f00:	e000e014 	.word	0xe000e014

08004f04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004f04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004f14 <vPortEnableVFP+0x10>
 8004f08:	6801      	ldr	r1, [r0, #0]
 8004f0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004f0e:	6001      	str	r1, [r0, #0]
 8004f10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004f12:	bf00      	nop
 8004f14:	e000ed88 	.word	0xe000ed88

08004f18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b08a      	sub	sp, #40	@ 0x28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004f20:	2300      	movs	r3, #0
 8004f22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004f24:	f7ff f8b4 	bl	8004090 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004f28:	4b5c      	ldr	r3, [pc, #368]	@ (800509c <pvPortMalloc+0x184>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d101      	bne.n	8004f34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f30:	f000 f924 	bl	800517c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f34:	4b5a      	ldr	r3, [pc, #360]	@ (80050a0 <pvPortMalloc+0x188>)
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f040 8095 	bne.w	800506c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d01e      	beq.n	8004f86 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004f48:	2208      	movs	r2, #8
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f003 0307 	and.w	r3, r3, #7
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d015      	beq.n	8004f86 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f023 0307 	bic.w	r3, r3, #7
 8004f60:	3308      	adds	r3, #8
 8004f62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f003 0307 	and.w	r3, r3, #7
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00b      	beq.n	8004f86 <pvPortMalloc+0x6e>
	__asm volatile
 8004f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f72:	f383 8811 	msr	BASEPRI, r3
 8004f76:	f3bf 8f6f 	isb	sy
 8004f7a:	f3bf 8f4f 	dsb	sy
 8004f7e:	617b      	str	r3, [r7, #20]
}
 8004f80:	bf00      	nop
 8004f82:	bf00      	nop
 8004f84:	e7fd      	b.n	8004f82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d06f      	beq.n	800506c <pvPortMalloc+0x154>
 8004f8c:	4b45      	ldr	r3, [pc, #276]	@ (80050a4 <pvPortMalloc+0x18c>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d86a      	bhi.n	800506c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004f96:	4b44      	ldr	r3, [pc, #272]	@ (80050a8 <pvPortMalloc+0x190>)
 8004f98:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004f9a:	4b43      	ldr	r3, [pc, #268]	@ (80050a8 <pvPortMalloc+0x190>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004fa0:	e004      	b.n	8004fac <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d903      	bls.n	8004fbe <pvPortMalloc+0xa6>
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1f1      	bne.n	8004fa2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004fbe:	4b37      	ldr	r3, [pc, #220]	@ (800509c <pvPortMalloc+0x184>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d051      	beq.n	800506c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004fc8:	6a3b      	ldr	r3, [r7, #32]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2208      	movs	r2, #8
 8004fce:	4413      	add	r3, r2
 8004fd0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	6a3b      	ldr	r3, [r7, #32]
 8004fd8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	1ad2      	subs	r2, r2, r3
 8004fe2:	2308      	movs	r3, #8
 8004fe4:	005b      	lsls	r3, r3, #1
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d920      	bls.n	800502c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004fea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4413      	add	r3, r2
 8004ff0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	f003 0307 	and.w	r3, r3, #7
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00b      	beq.n	8005014 <pvPortMalloc+0xfc>
	__asm volatile
 8004ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005000:	f383 8811 	msr	BASEPRI, r3
 8005004:	f3bf 8f6f 	isb	sy
 8005008:	f3bf 8f4f 	dsb	sy
 800500c:	613b      	str	r3, [r7, #16]
}
 800500e:	bf00      	nop
 8005010:	bf00      	nop
 8005012:	e7fd      	b.n	8005010 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	1ad2      	subs	r2, r2, r3
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005026:	69b8      	ldr	r0, [r7, #24]
 8005028:	f000 f90a 	bl	8005240 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800502c:	4b1d      	ldr	r3, [pc, #116]	@ (80050a4 <pvPortMalloc+0x18c>)
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	4a1b      	ldr	r2, [pc, #108]	@ (80050a4 <pvPortMalloc+0x18c>)
 8005038:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800503a:	4b1a      	ldr	r3, [pc, #104]	@ (80050a4 <pvPortMalloc+0x18c>)
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	4b1b      	ldr	r3, [pc, #108]	@ (80050ac <pvPortMalloc+0x194>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	429a      	cmp	r2, r3
 8005044:	d203      	bcs.n	800504e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005046:	4b17      	ldr	r3, [pc, #92]	@ (80050a4 <pvPortMalloc+0x18c>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a18      	ldr	r2, [pc, #96]	@ (80050ac <pvPortMalloc+0x194>)
 800504c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800504e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	4b13      	ldr	r3, [pc, #76]	@ (80050a0 <pvPortMalloc+0x188>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	431a      	orrs	r2, r3
 8005058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800505c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505e:	2200      	movs	r2, #0
 8005060:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005062:	4b13      	ldr	r3, [pc, #76]	@ (80050b0 <pvPortMalloc+0x198>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	3301      	adds	r3, #1
 8005068:	4a11      	ldr	r2, [pc, #68]	@ (80050b0 <pvPortMalloc+0x198>)
 800506a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800506c:	f7ff f81e 	bl	80040ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	f003 0307 	and.w	r3, r3, #7
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00b      	beq.n	8005092 <pvPortMalloc+0x17a>
	__asm volatile
 800507a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800507e:	f383 8811 	msr	BASEPRI, r3
 8005082:	f3bf 8f6f 	isb	sy
 8005086:	f3bf 8f4f 	dsb	sy
 800508a:	60fb      	str	r3, [r7, #12]
}
 800508c:	bf00      	nop
 800508e:	bf00      	nop
 8005090:	e7fd      	b.n	800508e <pvPortMalloc+0x176>
	return pvReturn;
 8005092:	69fb      	ldr	r3, [r7, #28]
}
 8005094:	4618      	mov	r0, r3
 8005096:	3728      	adds	r7, #40	@ 0x28
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	200050d4 	.word	0x200050d4
 80050a0:	200050e8 	.word	0x200050e8
 80050a4:	200050d8 	.word	0x200050d8
 80050a8:	200050cc 	.word	0x200050cc
 80050ac:	200050dc 	.word	0x200050dc
 80050b0:	200050e0 	.word	0x200050e0

080050b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b086      	sub	sp, #24
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d04f      	beq.n	8005166 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80050c6:	2308      	movs	r3, #8
 80050c8:	425b      	negs	r3, r3
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	4413      	add	r3, r2
 80050ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	685a      	ldr	r2, [r3, #4]
 80050d8:	4b25      	ldr	r3, [pc, #148]	@ (8005170 <vPortFree+0xbc>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4013      	ands	r3, r2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10b      	bne.n	80050fa <vPortFree+0x46>
	__asm volatile
 80050e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e6:	f383 8811 	msr	BASEPRI, r3
 80050ea:	f3bf 8f6f 	isb	sy
 80050ee:	f3bf 8f4f 	dsb	sy
 80050f2:	60fb      	str	r3, [r7, #12]
}
 80050f4:	bf00      	nop
 80050f6:	bf00      	nop
 80050f8:	e7fd      	b.n	80050f6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00b      	beq.n	800511a <vPortFree+0x66>
	__asm volatile
 8005102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005106:	f383 8811 	msr	BASEPRI, r3
 800510a:	f3bf 8f6f 	isb	sy
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	60bb      	str	r3, [r7, #8]
}
 8005114:	bf00      	nop
 8005116:	bf00      	nop
 8005118:	e7fd      	b.n	8005116 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	685a      	ldr	r2, [r3, #4]
 800511e:	4b14      	ldr	r3, [pc, #80]	@ (8005170 <vPortFree+0xbc>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4013      	ands	r3, r2
 8005124:	2b00      	cmp	r3, #0
 8005126:	d01e      	beq.n	8005166 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d11a      	bne.n	8005166 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	4b0e      	ldr	r3, [pc, #56]	@ (8005170 <vPortFree+0xbc>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	43db      	mvns	r3, r3
 800513a:	401a      	ands	r2, r3
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005140:	f7fe ffa6 	bl	8004090 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	4b0a      	ldr	r3, [pc, #40]	@ (8005174 <vPortFree+0xc0>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4413      	add	r3, r2
 800514e:	4a09      	ldr	r2, [pc, #36]	@ (8005174 <vPortFree+0xc0>)
 8005150:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005152:	6938      	ldr	r0, [r7, #16]
 8005154:	f000 f874 	bl	8005240 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005158:	4b07      	ldr	r3, [pc, #28]	@ (8005178 <vPortFree+0xc4>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	3301      	adds	r3, #1
 800515e:	4a06      	ldr	r2, [pc, #24]	@ (8005178 <vPortFree+0xc4>)
 8005160:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005162:	f7fe ffa3 	bl	80040ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005166:	bf00      	nop
 8005168:	3718      	adds	r7, #24
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	200050e8 	.word	0x200050e8
 8005174:	200050d8 	.word	0x200050d8
 8005178:	200050e4 	.word	0x200050e4

0800517c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005182:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8005186:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005188:	4b27      	ldr	r3, [pc, #156]	@ (8005228 <prvHeapInit+0xac>)
 800518a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f003 0307 	and.w	r3, r3, #7
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00c      	beq.n	80051b0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	3307      	adds	r3, #7
 800519a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f023 0307 	bic.w	r3, r3, #7
 80051a2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80051a4:	68ba      	ldr	r2, [r7, #8]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	4a1f      	ldr	r2, [pc, #124]	@ (8005228 <prvHeapInit+0xac>)
 80051ac:	4413      	add	r3, r2
 80051ae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80051b4:	4a1d      	ldr	r2, [pc, #116]	@ (800522c <prvHeapInit+0xb0>)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80051ba:	4b1c      	ldr	r3, [pc, #112]	@ (800522c <prvHeapInit+0xb0>)
 80051bc:	2200      	movs	r2, #0
 80051be:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	68ba      	ldr	r2, [r7, #8]
 80051c4:	4413      	add	r3, r2
 80051c6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80051c8:	2208      	movs	r2, #8
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	1a9b      	subs	r3, r3, r2
 80051ce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f023 0307 	bic.w	r3, r3, #7
 80051d6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4a15      	ldr	r2, [pc, #84]	@ (8005230 <prvHeapInit+0xb4>)
 80051dc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80051de:	4b14      	ldr	r3, [pc, #80]	@ (8005230 <prvHeapInit+0xb4>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2200      	movs	r2, #0
 80051e4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80051e6:	4b12      	ldr	r3, [pc, #72]	@ (8005230 <prvHeapInit+0xb4>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2200      	movs	r2, #0
 80051ec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	1ad2      	subs	r2, r2, r3
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80051fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005230 <prvHeapInit+0xb4>)
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	4a0a      	ldr	r2, [pc, #40]	@ (8005234 <prvHeapInit+0xb8>)
 800520a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	4a09      	ldr	r2, [pc, #36]	@ (8005238 <prvHeapInit+0xbc>)
 8005212:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005214:	4b09      	ldr	r3, [pc, #36]	@ (800523c <prvHeapInit+0xc0>)
 8005216:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800521a:	601a      	str	r2, [r3, #0]
}
 800521c:	bf00      	nop
 800521e:	3714      	adds	r7, #20
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr
 8005228:	200002ac 	.word	0x200002ac
 800522c:	200050cc 	.word	0x200050cc
 8005230:	200050d4 	.word	0x200050d4
 8005234:	200050dc 	.word	0x200050dc
 8005238:	200050d8 	.word	0x200050d8
 800523c:	200050e8 	.word	0x200050e8

08005240 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005240:	b480      	push	{r7}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005248:	4b28      	ldr	r3, [pc, #160]	@ (80052ec <prvInsertBlockIntoFreeList+0xac>)
 800524a:	60fb      	str	r3, [r7, #12]
 800524c:	e002      	b.n	8005254 <prvInsertBlockIntoFreeList+0x14>
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	60fb      	str	r3, [r7, #12]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	429a      	cmp	r2, r3
 800525c:	d8f7      	bhi.n	800524e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	4413      	add	r3, r2
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	429a      	cmp	r2, r3
 800526e:	d108      	bne.n	8005282 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	685a      	ldr	r2, [r3, #4]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	441a      	add	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	441a      	add	r2, r3
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	429a      	cmp	r2, r3
 8005294:	d118      	bne.n	80052c8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	4b15      	ldr	r3, [pc, #84]	@ (80052f0 <prvInsertBlockIntoFreeList+0xb0>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d00d      	beq.n	80052be <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	441a      	add	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	601a      	str	r2, [r3, #0]
 80052bc:	e008      	b.n	80052d0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80052be:	4b0c      	ldr	r3, [pc, #48]	@ (80052f0 <prvInsertBlockIntoFreeList+0xb0>)
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	601a      	str	r2, [r3, #0]
 80052c6:	e003      	b.n	80052d0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d002      	beq.n	80052de <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052de:	bf00      	nop
 80052e0:	3714      	adds	r7, #20
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	200050cc 	.word	0x200050cc
 80052f0:	200050d4 	.word	0x200050d4

080052f4 <std>:
 80052f4:	2300      	movs	r3, #0
 80052f6:	b510      	push	{r4, lr}
 80052f8:	4604      	mov	r4, r0
 80052fa:	e9c0 3300 	strd	r3, r3, [r0]
 80052fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005302:	6083      	str	r3, [r0, #8]
 8005304:	8181      	strh	r1, [r0, #12]
 8005306:	6643      	str	r3, [r0, #100]	@ 0x64
 8005308:	81c2      	strh	r2, [r0, #14]
 800530a:	6183      	str	r3, [r0, #24]
 800530c:	4619      	mov	r1, r3
 800530e:	2208      	movs	r2, #8
 8005310:	305c      	adds	r0, #92	@ 0x5c
 8005312:	f000 f9e7 	bl	80056e4 <memset>
 8005316:	4b0d      	ldr	r3, [pc, #52]	@ (800534c <std+0x58>)
 8005318:	6263      	str	r3, [r4, #36]	@ 0x24
 800531a:	4b0d      	ldr	r3, [pc, #52]	@ (8005350 <std+0x5c>)
 800531c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800531e:	4b0d      	ldr	r3, [pc, #52]	@ (8005354 <std+0x60>)
 8005320:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005322:	4b0d      	ldr	r3, [pc, #52]	@ (8005358 <std+0x64>)
 8005324:	6323      	str	r3, [r4, #48]	@ 0x30
 8005326:	4b0d      	ldr	r3, [pc, #52]	@ (800535c <std+0x68>)
 8005328:	6224      	str	r4, [r4, #32]
 800532a:	429c      	cmp	r4, r3
 800532c:	d006      	beq.n	800533c <std+0x48>
 800532e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005332:	4294      	cmp	r4, r2
 8005334:	d002      	beq.n	800533c <std+0x48>
 8005336:	33d0      	adds	r3, #208	@ 0xd0
 8005338:	429c      	cmp	r4, r3
 800533a:	d105      	bne.n	8005348 <std+0x54>
 800533c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005344:	f000 ba9c 	b.w	8005880 <__retarget_lock_init_recursive>
 8005348:	bd10      	pop	{r4, pc}
 800534a:	bf00      	nop
 800534c:	08005535 	.word	0x08005535
 8005350:	08005557 	.word	0x08005557
 8005354:	0800558f 	.word	0x0800558f
 8005358:	080055b3 	.word	0x080055b3
 800535c:	200050ec 	.word	0x200050ec

08005360 <stdio_exit_handler>:
 8005360:	4a02      	ldr	r2, [pc, #8]	@ (800536c <stdio_exit_handler+0xc>)
 8005362:	4903      	ldr	r1, [pc, #12]	@ (8005370 <stdio_exit_handler+0x10>)
 8005364:	4803      	ldr	r0, [pc, #12]	@ (8005374 <stdio_exit_handler+0x14>)
 8005366:	f000 b869 	b.w	800543c <_fwalk_sglue>
 800536a:	bf00      	nop
 800536c:	20000010 	.word	0x20000010
 8005370:	08005b81 	.word	0x08005b81
 8005374:	20000020 	.word	0x20000020

08005378 <cleanup_stdio>:
 8005378:	6841      	ldr	r1, [r0, #4]
 800537a:	4b0c      	ldr	r3, [pc, #48]	@ (80053ac <cleanup_stdio+0x34>)
 800537c:	4299      	cmp	r1, r3
 800537e:	b510      	push	{r4, lr}
 8005380:	4604      	mov	r4, r0
 8005382:	d001      	beq.n	8005388 <cleanup_stdio+0x10>
 8005384:	f000 fbfc 	bl	8005b80 <_fflush_r>
 8005388:	68a1      	ldr	r1, [r4, #8]
 800538a:	4b09      	ldr	r3, [pc, #36]	@ (80053b0 <cleanup_stdio+0x38>)
 800538c:	4299      	cmp	r1, r3
 800538e:	d002      	beq.n	8005396 <cleanup_stdio+0x1e>
 8005390:	4620      	mov	r0, r4
 8005392:	f000 fbf5 	bl	8005b80 <_fflush_r>
 8005396:	68e1      	ldr	r1, [r4, #12]
 8005398:	4b06      	ldr	r3, [pc, #24]	@ (80053b4 <cleanup_stdio+0x3c>)
 800539a:	4299      	cmp	r1, r3
 800539c:	d004      	beq.n	80053a8 <cleanup_stdio+0x30>
 800539e:	4620      	mov	r0, r4
 80053a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053a4:	f000 bbec 	b.w	8005b80 <_fflush_r>
 80053a8:	bd10      	pop	{r4, pc}
 80053aa:	bf00      	nop
 80053ac:	200050ec 	.word	0x200050ec
 80053b0:	20005154 	.word	0x20005154
 80053b4:	200051bc 	.word	0x200051bc

080053b8 <global_stdio_init.part.0>:
 80053b8:	b510      	push	{r4, lr}
 80053ba:	4b0b      	ldr	r3, [pc, #44]	@ (80053e8 <global_stdio_init.part.0+0x30>)
 80053bc:	4c0b      	ldr	r4, [pc, #44]	@ (80053ec <global_stdio_init.part.0+0x34>)
 80053be:	4a0c      	ldr	r2, [pc, #48]	@ (80053f0 <global_stdio_init.part.0+0x38>)
 80053c0:	601a      	str	r2, [r3, #0]
 80053c2:	4620      	mov	r0, r4
 80053c4:	2200      	movs	r2, #0
 80053c6:	2104      	movs	r1, #4
 80053c8:	f7ff ff94 	bl	80052f4 <std>
 80053cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80053d0:	2201      	movs	r2, #1
 80053d2:	2109      	movs	r1, #9
 80053d4:	f7ff ff8e 	bl	80052f4 <std>
 80053d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80053dc:	2202      	movs	r2, #2
 80053de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053e2:	2112      	movs	r1, #18
 80053e4:	f7ff bf86 	b.w	80052f4 <std>
 80053e8:	20005224 	.word	0x20005224
 80053ec:	200050ec 	.word	0x200050ec
 80053f0:	08005361 	.word	0x08005361

080053f4 <__sfp_lock_acquire>:
 80053f4:	4801      	ldr	r0, [pc, #4]	@ (80053fc <__sfp_lock_acquire+0x8>)
 80053f6:	f000 ba44 	b.w	8005882 <__retarget_lock_acquire_recursive>
 80053fa:	bf00      	nop
 80053fc:	2000522d 	.word	0x2000522d

08005400 <__sfp_lock_release>:
 8005400:	4801      	ldr	r0, [pc, #4]	@ (8005408 <__sfp_lock_release+0x8>)
 8005402:	f000 ba3f 	b.w	8005884 <__retarget_lock_release_recursive>
 8005406:	bf00      	nop
 8005408:	2000522d 	.word	0x2000522d

0800540c <__sinit>:
 800540c:	b510      	push	{r4, lr}
 800540e:	4604      	mov	r4, r0
 8005410:	f7ff fff0 	bl	80053f4 <__sfp_lock_acquire>
 8005414:	6a23      	ldr	r3, [r4, #32]
 8005416:	b11b      	cbz	r3, 8005420 <__sinit+0x14>
 8005418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800541c:	f7ff bff0 	b.w	8005400 <__sfp_lock_release>
 8005420:	4b04      	ldr	r3, [pc, #16]	@ (8005434 <__sinit+0x28>)
 8005422:	6223      	str	r3, [r4, #32]
 8005424:	4b04      	ldr	r3, [pc, #16]	@ (8005438 <__sinit+0x2c>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1f5      	bne.n	8005418 <__sinit+0xc>
 800542c:	f7ff ffc4 	bl	80053b8 <global_stdio_init.part.0>
 8005430:	e7f2      	b.n	8005418 <__sinit+0xc>
 8005432:	bf00      	nop
 8005434:	08005379 	.word	0x08005379
 8005438:	20005224 	.word	0x20005224

0800543c <_fwalk_sglue>:
 800543c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005440:	4607      	mov	r7, r0
 8005442:	4688      	mov	r8, r1
 8005444:	4614      	mov	r4, r2
 8005446:	2600      	movs	r6, #0
 8005448:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800544c:	f1b9 0901 	subs.w	r9, r9, #1
 8005450:	d505      	bpl.n	800545e <_fwalk_sglue+0x22>
 8005452:	6824      	ldr	r4, [r4, #0]
 8005454:	2c00      	cmp	r4, #0
 8005456:	d1f7      	bne.n	8005448 <_fwalk_sglue+0xc>
 8005458:	4630      	mov	r0, r6
 800545a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800545e:	89ab      	ldrh	r3, [r5, #12]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d907      	bls.n	8005474 <_fwalk_sglue+0x38>
 8005464:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005468:	3301      	adds	r3, #1
 800546a:	d003      	beq.n	8005474 <_fwalk_sglue+0x38>
 800546c:	4629      	mov	r1, r5
 800546e:	4638      	mov	r0, r7
 8005470:	47c0      	blx	r8
 8005472:	4306      	orrs	r6, r0
 8005474:	3568      	adds	r5, #104	@ 0x68
 8005476:	e7e9      	b.n	800544c <_fwalk_sglue+0x10>

08005478 <_puts_r>:
 8005478:	6a03      	ldr	r3, [r0, #32]
 800547a:	b570      	push	{r4, r5, r6, lr}
 800547c:	6884      	ldr	r4, [r0, #8]
 800547e:	4605      	mov	r5, r0
 8005480:	460e      	mov	r6, r1
 8005482:	b90b      	cbnz	r3, 8005488 <_puts_r+0x10>
 8005484:	f7ff ffc2 	bl	800540c <__sinit>
 8005488:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800548a:	07db      	lsls	r3, r3, #31
 800548c:	d405      	bmi.n	800549a <_puts_r+0x22>
 800548e:	89a3      	ldrh	r3, [r4, #12]
 8005490:	0598      	lsls	r0, r3, #22
 8005492:	d402      	bmi.n	800549a <_puts_r+0x22>
 8005494:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005496:	f000 f9f4 	bl	8005882 <__retarget_lock_acquire_recursive>
 800549a:	89a3      	ldrh	r3, [r4, #12]
 800549c:	0719      	lsls	r1, r3, #28
 800549e:	d502      	bpl.n	80054a6 <_puts_r+0x2e>
 80054a0:	6923      	ldr	r3, [r4, #16]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d135      	bne.n	8005512 <_puts_r+0x9a>
 80054a6:	4621      	mov	r1, r4
 80054a8:	4628      	mov	r0, r5
 80054aa:	f000 f8c5 	bl	8005638 <__swsetup_r>
 80054ae:	b380      	cbz	r0, 8005512 <_puts_r+0x9a>
 80054b0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80054b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80054b6:	07da      	lsls	r2, r3, #31
 80054b8:	d405      	bmi.n	80054c6 <_puts_r+0x4e>
 80054ba:	89a3      	ldrh	r3, [r4, #12]
 80054bc:	059b      	lsls	r3, r3, #22
 80054be:	d402      	bmi.n	80054c6 <_puts_r+0x4e>
 80054c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054c2:	f000 f9df 	bl	8005884 <__retarget_lock_release_recursive>
 80054c6:	4628      	mov	r0, r5
 80054c8:	bd70      	pop	{r4, r5, r6, pc}
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	da04      	bge.n	80054d8 <_puts_r+0x60>
 80054ce:	69a2      	ldr	r2, [r4, #24]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	dc17      	bgt.n	8005504 <_puts_r+0x8c>
 80054d4:	290a      	cmp	r1, #10
 80054d6:	d015      	beq.n	8005504 <_puts_r+0x8c>
 80054d8:	6823      	ldr	r3, [r4, #0]
 80054da:	1c5a      	adds	r2, r3, #1
 80054dc:	6022      	str	r2, [r4, #0]
 80054de:	7019      	strb	r1, [r3, #0]
 80054e0:	68a3      	ldr	r3, [r4, #8]
 80054e2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80054e6:	3b01      	subs	r3, #1
 80054e8:	60a3      	str	r3, [r4, #8]
 80054ea:	2900      	cmp	r1, #0
 80054ec:	d1ed      	bne.n	80054ca <_puts_r+0x52>
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	da11      	bge.n	8005516 <_puts_r+0x9e>
 80054f2:	4622      	mov	r2, r4
 80054f4:	210a      	movs	r1, #10
 80054f6:	4628      	mov	r0, r5
 80054f8:	f000 f85f 	bl	80055ba <__swbuf_r>
 80054fc:	3001      	adds	r0, #1
 80054fe:	d0d7      	beq.n	80054b0 <_puts_r+0x38>
 8005500:	250a      	movs	r5, #10
 8005502:	e7d7      	b.n	80054b4 <_puts_r+0x3c>
 8005504:	4622      	mov	r2, r4
 8005506:	4628      	mov	r0, r5
 8005508:	f000 f857 	bl	80055ba <__swbuf_r>
 800550c:	3001      	adds	r0, #1
 800550e:	d1e7      	bne.n	80054e0 <_puts_r+0x68>
 8005510:	e7ce      	b.n	80054b0 <_puts_r+0x38>
 8005512:	3e01      	subs	r6, #1
 8005514:	e7e4      	b.n	80054e0 <_puts_r+0x68>
 8005516:	6823      	ldr	r3, [r4, #0]
 8005518:	1c5a      	adds	r2, r3, #1
 800551a:	6022      	str	r2, [r4, #0]
 800551c:	220a      	movs	r2, #10
 800551e:	701a      	strb	r2, [r3, #0]
 8005520:	e7ee      	b.n	8005500 <_puts_r+0x88>
	...

08005524 <puts>:
 8005524:	4b02      	ldr	r3, [pc, #8]	@ (8005530 <puts+0xc>)
 8005526:	4601      	mov	r1, r0
 8005528:	6818      	ldr	r0, [r3, #0]
 800552a:	f7ff bfa5 	b.w	8005478 <_puts_r>
 800552e:	bf00      	nop
 8005530:	2000001c 	.word	0x2000001c

08005534 <__sread>:
 8005534:	b510      	push	{r4, lr}
 8005536:	460c      	mov	r4, r1
 8005538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800553c:	f000 f952 	bl	80057e4 <_read_r>
 8005540:	2800      	cmp	r0, #0
 8005542:	bfab      	itete	ge
 8005544:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005546:	89a3      	ldrhlt	r3, [r4, #12]
 8005548:	181b      	addge	r3, r3, r0
 800554a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800554e:	bfac      	ite	ge
 8005550:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005552:	81a3      	strhlt	r3, [r4, #12]
 8005554:	bd10      	pop	{r4, pc}

08005556 <__swrite>:
 8005556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800555a:	461f      	mov	r7, r3
 800555c:	898b      	ldrh	r3, [r1, #12]
 800555e:	05db      	lsls	r3, r3, #23
 8005560:	4605      	mov	r5, r0
 8005562:	460c      	mov	r4, r1
 8005564:	4616      	mov	r6, r2
 8005566:	d505      	bpl.n	8005574 <__swrite+0x1e>
 8005568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800556c:	2302      	movs	r3, #2
 800556e:	2200      	movs	r2, #0
 8005570:	f000 f926 	bl	80057c0 <_lseek_r>
 8005574:	89a3      	ldrh	r3, [r4, #12]
 8005576:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800557a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800557e:	81a3      	strh	r3, [r4, #12]
 8005580:	4632      	mov	r2, r6
 8005582:	463b      	mov	r3, r7
 8005584:	4628      	mov	r0, r5
 8005586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800558a:	f000 b93d 	b.w	8005808 <_write_r>

0800558e <__sseek>:
 800558e:	b510      	push	{r4, lr}
 8005590:	460c      	mov	r4, r1
 8005592:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005596:	f000 f913 	bl	80057c0 <_lseek_r>
 800559a:	1c43      	adds	r3, r0, #1
 800559c:	89a3      	ldrh	r3, [r4, #12]
 800559e:	bf15      	itete	ne
 80055a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80055a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80055a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80055aa:	81a3      	strheq	r3, [r4, #12]
 80055ac:	bf18      	it	ne
 80055ae:	81a3      	strhne	r3, [r4, #12]
 80055b0:	bd10      	pop	{r4, pc}

080055b2 <__sclose>:
 80055b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055b6:	f000 b89d 	b.w	80056f4 <_close_r>

080055ba <__swbuf_r>:
 80055ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055bc:	460e      	mov	r6, r1
 80055be:	4614      	mov	r4, r2
 80055c0:	4605      	mov	r5, r0
 80055c2:	b118      	cbz	r0, 80055cc <__swbuf_r+0x12>
 80055c4:	6a03      	ldr	r3, [r0, #32]
 80055c6:	b90b      	cbnz	r3, 80055cc <__swbuf_r+0x12>
 80055c8:	f7ff ff20 	bl	800540c <__sinit>
 80055cc:	69a3      	ldr	r3, [r4, #24]
 80055ce:	60a3      	str	r3, [r4, #8]
 80055d0:	89a3      	ldrh	r3, [r4, #12]
 80055d2:	071a      	lsls	r2, r3, #28
 80055d4:	d501      	bpl.n	80055da <__swbuf_r+0x20>
 80055d6:	6923      	ldr	r3, [r4, #16]
 80055d8:	b943      	cbnz	r3, 80055ec <__swbuf_r+0x32>
 80055da:	4621      	mov	r1, r4
 80055dc:	4628      	mov	r0, r5
 80055de:	f000 f82b 	bl	8005638 <__swsetup_r>
 80055e2:	b118      	cbz	r0, 80055ec <__swbuf_r+0x32>
 80055e4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80055e8:	4638      	mov	r0, r7
 80055ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055ec:	6823      	ldr	r3, [r4, #0]
 80055ee:	6922      	ldr	r2, [r4, #16]
 80055f0:	1a98      	subs	r0, r3, r2
 80055f2:	6963      	ldr	r3, [r4, #20]
 80055f4:	b2f6      	uxtb	r6, r6
 80055f6:	4283      	cmp	r3, r0
 80055f8:	4637      	mov	r7, r6
 80055fa:	dc05      	bgt.n	8005608 <__swbuf_r+0x4e>
 80055fc:	4621      	mov	r1, r4
 80055fe:	4628      	mov	r0, r5
 8005600:	f000 fabe 	bl	8005b80 <_fflush_r>
 8005604:	2800      	cmp	r0, #0
 8005606:	d1ed      	bne.n	80055e4 <__swbuf_r+0x2a>
 8005608:	68a3      	ldr	r3, [r4, #8]
 800560a:	3b01      	subs	r3, #1
 800560c:	60a3      	str	r3, [r4, #8]
 800560e:	6823      	ldr	r3, [r4, #0]
 8005610:	1c5a      	adds	r2, r3, #1
 8005612:	6022      	str	r2, [r4, #0]
 8005614:	701e      	strb	r6, [r3, #0]
 8005616:	6962      	ldr	r2, [r4, #20]
 8005618:	1c43      	adds	r3, r0, #1
 800561a:	429a      	cmp	r2, r3
 800561c:	d004      	beq.n	8005628 <__swbuf_r+0x6e>
 800561e:	89a3      	ldrh	r3, [r4, #12]
 8005620:	07db      	lsls	r3, r3, #31
 8005622:	d5e1      	bpl.n	80055e8 <__swbuf_r+0x2e>
 8005624:	2e0a      	cmp	r6, #10
 8005626:	d1df      	bne.n	80055e8 <__swbuf_r+0x2e>
 8005628:	4621      	mov	r1, r4
 800562a:	4628      	mov	r0, r5
 800562c:	f000 faa8 	bl	8005b80 <_fflush_r>
 8005630:	2800      	cmp	r0, #0
 8005632:	d0d9      	beq.n	80055e8 <__swbuf_r+0x2e>
 8005634:	e7d6      	b.n	80055e4 <__swbuf_r+0x2a>
	...

08005638 <__swsetup_r>:
 8005638:	b538      	push	{r3, r4, r5, lr}
 800563a:	4b29      	ldr	r3, [pc, #164]	@ (80056e0 <__swsetup_r+0xa8>)
 800563c:	4605      	mov	r5, r0
 800563e:	6818      	ldr	r0, [r3, #0]
 8005640:	460c      	mov	r4, r1
 8005642:	b118      	cbz	r0, 800564c <__swsetup_r+0x14>
 8005644:	6a03      	ldr	r3, [r0, #32]
 8005646:	b90b      	cbnz	r3, 800564c <__swsetup_r+0x14>
 8005648:	f7ff fee0 	bl	800540c <__sinit>
 800564c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005650:	0719      	lsls	r1, r3, #28
 8005652:	d422      	bmi.n	800569a <__swsetup_r+0x62>
 8005654:	06da      	lsls	r2, r3, #27
 8005656:	d407      	bmi.n	8005668 <__swsetup_r+0x30>
 8005658:	2209      	movs	r2, #9
 800565a:	602a      	str	r2, [r5, #0]
 800565c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005660:	81a3      	strh	r3, [r4, #12]
 8005662:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005666:	e033      	b.n	80056d0 <__swsetup_r+0x98>
 8005668:	0758      	lsls	r0, r3, #29
 800566a:	d512      	bpl.n	8005692 <__swsetup_r+0x5a>
 800566c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800566e:	b141      	cbz	r1, 8005682 <__swsetup_r+0x4a>
 8005670:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005674:	4299      	cmp	r1, r3
 8005676:	d002      	beq.n	800567e <__swsetup_r+0x46>
 8005678:	4628      	mov	r0, r5
 800567a:	f000 f905 	bl	8005888 <_free_r>
 800567e:	2300      	movs	r3, #0
 8005680:	6363      	str	r3, [r4, #52]	@ 0x34
 8005682:	89a3      	ldrh	r3, [r4, #12]
 8005684:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005688:	81a3      	strh	r3, [r4, #12]
 800568a:	2300      	movs	r3, #0
 800568c:	6063      	str	r3, [r4, #4]
 800568e:	6923      	ldr	r3, [r4, #16]
 8005690:	6023      	str	r3, [r4, #0]
 8005692:	89a3      	ldrh	r3, [r4, #12]
 8005694:	f043 0308 	orr.w	r3, r3, #8
 8005698:	81a3      	strh	r3, [r4, #12]
 800569a:	6923      	ldr	r3, [r4, #16]
 800569c:	b94b      	cbnz	r3, 80056b2 <__swsetup_r+0x7a>
 800569e:	89a3      	ldrh	r3, [r4, #12]
 80056a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80056a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056a8:	d003      	beq.n	80056b2 <__swsetup_r+0x7a>
 80056aa:	4621      	mov	r1, r4
 80056ac:	4628      	mov	r0, r5
 80056ae:	f000 fab5 	bl	8005c1c <__smakebuf_r>
 80056b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056b6:	f013 0201 	ands.w	r2, r3, #1
 80056ba:	d00a      	beq.n	80056d2 <__swsetup_r+0x9a>
 80056bc:	2200      	movs	r2, #0
 80056be:	60a2      	str	r2, [r4, #8]
 80056c0:	6962      	ldr	r2, [r4, #20]
 80056c2:	4252      	negs	r2, r2
 80056c4:	61a2      	str	r2, [r4, #24]
 80056c6:	6922      	ldr	r2, [r4, #16]
 80056c8:	b942      	cbnz	r2, 80056dc <__swsetup_r+0xa4>
 80056ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80056ce:	d1c5      	bne.n	800565c <__swsetup_r+0x24>
 80056d0:	bd38      	pop	{r3, r4, r5, pc}
 80056d2:	0799      	lsls	r1, r3, #30
 80056d4:	bf58      	it	pl
 80056d6:	6962      	ldrpl	r2, [r4, #20]
 80056d8:	60a2      	str	r2, [r4, #8]
 80056da:	e7f4      	b.n	80056c6 <__swsetup_r+0x8e>
 80056dc:	2000      	movs	r0, #0
 80056de:	e7f7      	b.n	80056d0 <__swsetup_r+0x98>
 80056e0:	2000001c 	.word	0x2000001c

080056e4 <memset>:
 80056e4:	4402      	add	r2, r0
 80056e6:	4603      	mov	r3, r0
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d100      	bne.n	80056ee <memset+0xa>
 80056ec:	4770      	bx	lr
 80056ee:	f803 1b01 	strb.w	r1, [r3], #1
 80056f2:	e7f9      	b.n	80056e8 <memset+0x4>

080056f4 <_close_r>:
 80056f4:	b538      	push	{r3, r4, r5, lr}
 80056f6:	4d06      	ldr	r5, [pc, #24]	@ (8005710 <_close_r+0x1c>)
 80056f8:	2300      	movs	r3, #0
 80056fa:	4604      	mov	r4, r0
 80056fc:	4608      	mov	r0, r1
 80056fe:	602b      	str	r3, [r5, #0]
 8005700:	f7fb f9a3 	bl	8000a4a <_close>
 8005704:	1c43      	adds	r3, r0, #1
 8005706:	d102      	bne.n	800570e <_close_r+0x1a>
 8005708:	682b      	ldr	r3, [r5, #0]
 800570a:	b103      	cbz	r3, 800570e <_close_r+0x1a>
 800570c:	6023      	str	r3, [r4, #0]
 800570e:	bd38      	pop	{r3, r4, r5, pc}
 8005710:	20005228 	.word	0x20005228

08005714 <_reclaim_reent>:
 8005714:	4b29      	ldr	r3, [pc, #164]	@ (80057bc <_reclaim_reent+0xa8>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4283      	cmp	r3, r0
 800571a:	b570      	push	{r4, r5, r6, lr}
 800571c:	4604      	mov	r4, r0
 800571e:	d04b      	beq.n	80057b8 <_reclaim_reent+0xa4>
 8005720:	69c3      	ldr	r3, [r0, #28]
 8005722:	b1ab      	cbz	r3, 8005750 <_reclaim_reent+0x3c>
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	b16b      	cbz	r3, 8005744 <_reclaim_reent+0x30>
 8005728:	2500      	movs	r5, #0
 800572a:	69e3      	ldr	r3, [r4, #28]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	5959      	ldr	r1, [r3, r5]
 8005730:	2900      	cmp	r1, #0
 8005732:	d13b      	bne.n	80057ac <_reclaim_reent+0x98>
 8005734:	3504      	adds	r5, #4
 8005736:	2d80      	cmp	r5, #128	@ 0x80
 8005738:	d1f7      	bne.n	800572a <_reclaim_reent+0x16>
 800573a:	69e3      	ldr	r3, [r4, #28]
 800573c:	4620      	mov	r0, r4
 800573e:	68d9      	ldr	r1, [r3, #12]
 8005740:	f000 f8a2 	bl	8005888 <_free_r>
 8005744:	69e3      	ldr	r3, [r4, #28]
 8005746:	6819      	ldr	r1, [r3, #0]
 8005748:	b111      	cbz	r1, 8005750 <_reclaim_reent+0x3c>
 800574a:	4620      	mov	r0, r4
 800574c:	f000 f89c 	bl	8005888 <_free_r>
 8005750:	6961      	ldr	r1, [r4, #20]
 8005752:	b111      	cbz	r1, 800575a <_reclaim_reent+0x46>
 8005754:	4620      	mov	r0, r4
 8005756:	f000 f897 	bl	8005888 <_free_r>
 800575a:	69e1      	ldr	r1, [r4, #28]
 800575c:	b111      	cbz	r1, 8005764 <_reclaim_reent+0x50>
 800575e:	4620      	mov	r0, r4
 8005760:	f000 f892 	bl	8005888 <_free_r>
 8005764:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005766:	b111      	cbz	r1, 800576e <_reclaim_reent+0x5a>
 8005768:	4620      	mov	r0, r4
 800576a:	f000 f88d 	bl	8005888 <_free_r>
 800576e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005770:	b111      	cbz	r1, 8005778 <_reclaim_reent+0x64>
 8005772:	4620      	mov	r0, r4
 8005774:	f000 f888 	bl	8005888 <_free_r>
 8005778:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800577a:	b111      	cbz	r1, 8005782 <_reclaim_reent+0x6e>
 800577c:	4620      	mov	r0, r4
 800577e:	f000 f883 	bl	8005888 <_free_r>
 8005782:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005784:	b111      	cbz	r1, 800578c <_reclaim_reent+0x78>
 8005786:	4620      	mov	r0, r4
 8005788:	f000 f87e 	bl	8005888 <_free_r>
 800578c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800578e:	b111      	cbz	r1, 8005796 <_reclaim_reent+0x82>
 8005790:	4620      	mov	r0, r4
 8005792:	f000 f879 	bl	8005888 <_free_r>
 8005796:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005798:	b111      	cbz	r1, 80057a0 <_reclaim_reent+0x8c>
 800579a:	4620      	mov	r0, r4
 800579c:	f000 f874 	bl	8005888 <_free_r>
 80057a0:	6a23      	ldr	r3, [r4, #32]
 80057a2:	b14b      	cbz	r3, 80057b8 <_reclaim_reent+0xa4>
 80057a4:	4620      	mov	r0, r4
 80057a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80057aa:	4718      	bx	r3
 80057ac:	680e      	ldr	r6, [r1, #0]
 80057ae:	4620      	mov	r0, r4
 80057b0:	f000 f86a 	bl	8005888 <_free_r>
 80057b4:	4631      	mov	r1, r6
 80057b6:	e7bb      	b.n	8005730 <_reclaim_reent+0x1c>
 80057b8:	bd70      	pop	{r4, r5, r6, pc}
 80057ba:	bf00      	nop
 80057bc:	2000001c 	.word	0x2000001c

080057c0 <_lseek_r>:
 80057c0:	b538      	push	{r3, r4, r5, lr}
 80057c2:	4d07      	ldr	r5, [pc, #28]	@ (80057e0 <_lseek_r+0x20>)
 80057c4:	4604      	mov	r4, r0
 80057c6:	4608      	mov	r0, r1
 80057c8:	4611      	mov	r1, r2
 80057ca:	2200      	movs	r2, #0
 80057cc:	602a      	str	r2, [r5, #0]
 80057ce:	461a      	mov	r2, r3
 80057d0:	f7fb f962 	bl	8000a98 <_lseek>
 80057d4:	1c43      	adds	r3, r0, #1
 80057d6:	d102      	bne.n	80057de <_lseek_r+0x1e>
 80057d8:	682b      	ldr	r3, [r5, #0]
 80057da:	b103      	cbz	r3, 80057de <_lseek_r+0x1e>
 80057dc:	6023      	str	r3, [r4, #0]
 80057de:	bd38      	pop	{r3, r4, r5, pc}
 80057e0:	20005228 	.word	0x20005228

080057e4 <_read_r>:
 80057e4:	b538      	push	{r3, r4, r5, lr}
 80057e6:	4d07      	ldr	r5, [pc, #28]	@ (8005804 <_read_r+0x20>)
 80057e8:	4604      	mov	r4, r0
 80057ea:	4608      	mov	r0, r1
 80057ec:	4611      	mov	r1, r2
 80057ee:	2200      	movs	r2, #0
 80057f0:	602a      	str	r2, [r5, #0]
 80057f2:	461a      	mov	r2, r3
 80057f4:	f7fb f8f0 	bl	80009d8 <_read>
 80057f8:	1c43      	adds	r3, r0, #1
 80057fa:	d102      	bne.n	8005802 <_read_r+0x1e>
 80057fc:	682b      	ldr	r3, [r5, #0]
 80057fe:	b103      	cbz	r3, 8005802 <_read_r+0x1e>
 8005800:	6023      	str	r3, [r4, #0]
 8005802:	bd38      	pop	{r3, r4, r5, pc}
 8005804:	20005228 	.word	0x20005228

08005808 <_write_r>:
 8005808:	b538      	push	{r3, r4, r5, lr}
 800580a:	4d07      	ldr	r5, [pc, #28]	@ (8005828 <_write_r+0x20>)
 800580c:	4604      	mov	r4, r0
 800580e:	4608      	mov	r0, r1
 8005810:	4611      	mov	r1, r2
 8005812:	2200      	movs	r2, #0
 8005814:	602a      	str	r2, [r5, #0]
 8005816:	461a      	mov	r2, r3
 8005818:	f7fb f8fb 	bl	8000a12 <_write>
 800581c:	1c43      	adds	r3, r0, #1
 800581e:	d102      	bne.n	8005826 <_write_r+0x1e>
 8005820:	682b      	ldr	r3, [r5, #0]
 8005822:	b103      	cbz	r3, 8005826 <_write_r+0x1e>
 8005824:	6023      	str	r3, [r4, #0]
 8005826:	bd38      	pop	{r3, r4, r5, pc}
 8005828:	20005228 	.word	0x20005228

0800582c <__errno>:
 800582c:	4b01      	ldr	r3, [pc, #4]	@ (8005834 <__errno+0x8>)
 800582e:	6818      	ldr	r0, [r3, #0]
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	2000001c 	.word	0x2000001c

08005838 <__libc_init_array>:
 8005838:	b570      	push	{r4, r5, r6, lr}
 800583a:	4d0d      	ldr	r5, [pc, #52]	@ (8005870 <__libc_init_array+0x38>)
 800583c:	4c0d      	ldr	r4, [pc, #52]	@ (8005874 <__libc_init_array+0x3c>)
 800583e:	1b64      	subs	r4, r4, r5
 8005840:	10a4      	asrs	r4, r4, #2
 8005842:	2600      	movs	r6, #0
 8005844:	42a6      	cmp	r6, r4
 8005846:	d109      	bne.n	800585c <__libc_init_array+0x24>
 8005848:	4d0b      	ldr	r5, [pc, #44]	@ (8005878 <__libc_init_array+0x40>)
 800584a:	4c0c      	ldr	r4, [pc, #48]	@ (800587c <__libc_init_array+0x44>)
 800584c:	f000 fa54 	bl	8005cf8 <_init>
 8005850:	1b64      	subs	r4, r4, r5
 8005852:	10a4      	asrs	r4, r4, #2
 8005854:	2600      	movs	r6, #0
 8005856:	42a6      	cmp	r6, r4
 8005858:	d105      	bne.n	8005866 <__libc_init_array+0x2e>
 800585a:	bd70      	pop	{r4, r5, r6, pc}
 800585c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005860:	4798      	blx	r3
 8005862:	3601      	adds	r6, #1
 8005864:	e7ee      	b.n	8005844 <__libc_init_array+0xc>
 8005866:	f855 3b04 	ldr.w	r3, [r5], #4
 800586a:	4798      	blx	r3
 800586c:	3601      	adds	r6, #1
 800586e:	e7f2      	b.n	8005856 <__libc_init_array+0x1e>
 8005870:	08005ea8 	.word	0x08005ea8
 8005874:	08005ea8 	.word	0x08005ea8
 8005878:	08005ea8 	.word	0x08005ea8
 800587c:	08005eac 	.word	0x08005eac

08005880 <__retarget_lock_init_recursive>:
 8005880:	4770      	bx	lr

08005882 <__retarget_lock_acquire_recursive>:
 8005882:	4770      	bx	lr

08005884 <__retarget_lock_release_recursive>:
 8005884:	4770      	bx	lr
	...

08005888 <_free_r>:
 8005888:	b538      	push	{r3, r4, r5, lr}
 800588a:	4605      	mov	r5, r0
 800588c:	2900      	cmp	r1, #0
 800588e:	d041      	beq.n	8005914 <_free_r+0x8c>
 8005890:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005894:	1f0c      	subs	r4, r1, #4
 8005896:	2b00      	cmp	r3, #0
 8005898:	bfb8      	it	lt
 800589a:	18e4      	addlt	r4, r4, r3
 800589c:	f000 f8e0 	bl	8005a60 <__malloc_lock>
 80058a0:	4a1d      	ldr	r2, [pc, #116]	@ (8005918 <_free_r+0x90>)
 80058a2:	6813      	ldr	r3, [r2, #0]
 80058a4:	b933      	cbnz	r3, 80058b4 <_free_r+0x2c>
 80058a6:	6063      	str	r3, [r4, #4]
 80058a8:	6014      	str	r4, [r2, #0]
 80058aa:	4628      	mov	r0, r5
 80058ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058b0:	f000 b8dc 	b.w	8005a6c <__malloc_unlock>
 80058b4:	42a3      	cmp	r3, r4
 80058b6:	d908      	bls.n	80058ca <_free_r+0x42>
 80058b8:	6820      	ldr	r0, [r4, #0]
 80058ba:	1821      	adds	r1, r4, r0
 80058bc:	428b      	cmp	r3, r1
 80058be:	bf01      	itttt	eq
 80058c0:	6819      	ldreq	r1, [r3, #0]
 80058c2:	685b      	ldreq	r3, [r3, #4]
 80058c4:	1809      	addeq	r1, r1, r0
 80058c6:	6021      	streq	r1, [r4, #0]
 80058c8:	e7ed      	b.n	80058a6 <_free_r+0x1e>
 80058ca:	461a      	mov	r2, r3
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	b10b      	cbz	r3, 80058d4 <_free_r+0x4c>
 80058d0:	42a3      	cmp	r3, r4
 80058d2:	d9fa      	bls.n	80058ca <_free_r+0x42>
 80058d4:	6811      	ldr	r1, [r2, #0]
 80058d6:	1850      	adds	r0, r2, r1
 80058d8:	42a0      	cmp	r0, r4
 80058da:	d10b      	bne.n	80058f4 <_free_r+0x6c>
 80058dc:	6820      	ldr	r0, [r4, #0]
 80058de:	4401      	add	r1, r0
 80058e0:	1850      	adds	r0, r2, r1
 80058e2:	4283      	cmp	r3, r0
 80058e4:	6011      	str	r1, [r2, #0]
 80058e6:	d1e0      	bne.n	80058aa <_free_r+0x22>
 80058e8:	6818      	ldr	r0, [r3, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	6053      	str	r3, [r2, #4]
 80058ee:	4408      	add	r0, r1
 80058f0:	6010      	str	r0, [r2, #0]
 80058f2:	e7da      	b.n	80058aa <_free_r+0x22>
 80058f4:	d902      	bls.n	80058fc <_free_r+0x74>
 80058f6:	230c      	movs	r3, #12
 80058f8:	602b      	str	r3, [r5, #0]
 80058fa:	e7d6      	b.n	80058aa <_free_r+0x22>
 80058fc:	6820      	ldr	r0, [r4, #0]
 80058fe:	1821      	adds	r1, r4, r0
 8005900:	428b      	cmp	r3, r1
 8005902:	bf04      	itt	eq
 8005904:	6819      	ldreq	r1, [r3, #0]
 8005906:	685b      	ldreq	r3, [r3, #4]
 8005908:	6063      	str	r3, [r4, #4]
 800590a:	bf04      	itt	eq
 800590c:	1809      	addeq	r1, r1, r0
 800590e:	6021      	streq	r1, [r4, #0]
 8005910:	6054      	str	r4, [r2, #4]
 8005912:	e7ca      	b.n	80058aa <_free_r+0x22>
 8005914:	bd38      	pop	{r3, r4, r5, pc}
 8005916:	bf00      	nop
 8005918:	20005234 	.word	0x20005234

0800591c <sbrk_aligned>:
 800591c:	b570      	push	{r4, r5, r6, lr}
 800591e:	4e0f      	ldr	r6, [pc, #60]	@ (800595c <sbrk_aligned+0x40>)
 8005920:	460c      	mov	r4, r1
 8005922:	6831      	ldr	r1, [r6, #0]
 8005924:	4605      	mov	r5, r0
 8005926:	b911      	cbnz	r1, 800592e <sbrk_aligned+0x12>
 8005928:	f000 f9d6 	bl	8005cd8 <_sbrk_r>
 800592c:	6030      	str	r0, [r6, #0]
 800592e:	4621      	mov	r1, r4
 8005930:	4628      	mov	r0, r5
 8005932:	f000 f9d1 	bl	8005cd8 <_sbrk_r>
 8005936:	1c43      	adds	r3, r0, #1
 8005938:	d103      	bne.n	8005942 <sbrk_aligned+0x26>
 800593a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800593e:	4620      	mov	r0, r4
 8005940:	bd70      	pop	{r4, r5, r6, pc}
 8005942:	1cc4      	adds	r4, r0, #3
 8005944:	f024 0403 	bic.w	r4, r4, #3
 8005948:	42a0      	cmp	r0, r4
 800594a:	d0f8      	beq.n	800593e <sbrk_aligned+0x22>
 800594c:	1a21      	subs	r1, r4, r0
 800594e:	4628      	mov	r0, r5
 8005950:	f000 f9c2 	bl	8005cd8 <_sbrk_r>
 8005954:	3001      	adds	r0, #1
 8005956:	d1f2      	bne.n	800593e <sbrk_aligned+0x22>
 8005958:	e7ef      	b.n	800593a <sbrk_aligned+0x1e>
 800595a:	bf00      	nop
 800595c:	20005230 	.word	0x20005230

08005960 <_malloc_r>:
 8005960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005964:	1ccd      	adds	r5, r1, #3
 8005966:	f025 0503 	bic.w	r5, r5, #3
 800596a:	3508      	adds	r5, #8
 800596c:	2d0c      	cmp	r5, #12
 800596e:	bf38      	it	cc
 8005970:	250c      	movcc	r5, #12
 8005972:	2d00      	cmp	r5, #0
 8005974:	4606      	mov	r6, r0
 8005976:	db01      	blt.n	800597c <_malloc_r+0x1c>
 8005978:	42a9      	cmp	r1, r5
 800597a:	d904      	bls.n	8005986 <_malloc_r+0x26>
 800597c:	230c      	movs	r3, #12
 800597e:	6033      	str	r3, [r6, #0]
 8005980:	2000      	movs	r0, #0
 8005982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005986:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005a5c <_malloc_r+0xfc>
 800598a:	f000 f869 	bl	8005a60 <__malloc_lock>
 800598e:	f8d8 3000 	ldr.w	r3, [r8]
 8005992:	461c      	mov	r4, r3
 8005994:	bb44      	cbnz	r4, 80059e8 <_malloc_r+0x88>
 8005996:	4629      	mov	r1, r5
 8005998:	4630      	mov	r0, r6
 800599a:	f7ff ffbf 	bl	800591c <sbrk_aligned>
 800599e:	1c43      	adds	r3, r0, #1
 80059a0:	4604      	mov	r4, r0
 80059a2:	d158      	bne.n	8005a56 <_malloc_r+0xf6>
 80059a4:	f8d8 4000 	ldr.w	r4, [r8]
 80059a8:	4627      	mov	r7, r4
 80059aa:	2f00      	cmp	r7, #0
 80059ac:	d143      	bne.n	8005a36 <_malloc_r+0xd6>
 80059ae:	2c00      	cmp	r4, #0
 80059b0:	d04b      	beq.n	8005a4a <_malloc_r+0xea>
 80059b2:	6823      	ldr	r3, [r4, #0]
 80059b4:	4639      	mov	r1, r7
 80059b6:	4630      	mov	r0, r6
 80059b8:	eb04 0903 	add.w	r9, r4, r3
 80059bc:	f000 f98c 	bl	8005cd8 <_sbrk_r>
 80059c0:	4581      	cmp	r9, r0
 80059c2:	d142      	bne.n	8005a4a <_malloc_r+0xea>
 80059c4:	6821      	ldr	r1, [r4, #0]
 80059c6:	1a6d      	subs	r5, r5, r1
 80059c8:	4629      	mov	r1, r5
 80059ca:	4630      	mov	r0, r6
 80059cc:	f7ff ffa6 	bl	800591c <sbrk_aligned>
 80059d0:	3001      	adds	r0, #1
 80059d2:	d03a      	beq.n	8005a4a <_malloc_r+0xea>
 80059d4:	6823      	ldr	r3, [r4, #0]
 80059d6:	442b      	add	r3, r5
 80059d8:	6023      	str	r3, [r4, #0]
 80059da:	f8d8 3000 	ldr.w	r3, [r8]
 80059de:	685a      	ldr	r2, [r3, #4]
 80059e0:	bb62      	cbnz	r2, 8005a3c <_malloc_r+0xdc>
 80059e2:	f8c8 7000 	str.w	r7, [r8]
 80059e6:	e00f      	b.n	8005a08 <_malloc_r+0xa8>
 80059e8:	6822      	ldr	r2, [r4, #0]
 80059ea:	1b52      	subs	r2, r2, r5
 80059ec:	d420      	bmi.n	8005a30 <_malloc_r+0xd0>
 80059ee:	2a0b      	cmp	r2, #11
 80059f0:	d917      	bls.n	8005a22 <_malloc_r+0xc2>
 80059f2:	1961      	adds	r1, r4, r5
 80059f4:	42a3      	cmp	r3, r4
 80059f6:	6025      	str	r5, [r4, #0]
 80059f8:	bf18      	it	ne
 80059fa:	6059      	strne	r1, [r3, #4]
 80059fc:	6863      	ldr	r3, [r4, #4]
 80059fe:	bf08      	it	eq
 8005a00:	f8c8 1000 	streq.w	r1, [r8]
 8005a04:	5162      	str	r2, [r4, r5]
 8005a06:	604b      	str	r3, [r1, #4]
 8005a08:	4630      	mov	r0, r6
 8005a0a:	f000 f82f 	bl	8005a6c <__malloc_unlock>
 8005a0e:	f104 000b 	add.w	r0, r4, #11
 8005a12:	1d23      	adds	r3, r4, #4
 8005a14:	f020 0007 	bic.w	r0, r0, #7
 8005a18:	1ac2      	subs	r2, r0, r3
 8005a1a:	bf1c      	itt	ne
 8005a1c:	1a1b      	subne	r3, r3, r0
 8005a1e:	50a3      	strne	r3, [r4, r2]
 8005a20:	e7af      	b.n	8005982 <_malloc_r+0x22>
 8005a22:	6862      	ldr	r2, [r4, #4]
 8005a24:	42a3      	cmp	r3, r4
 8005a26:	bf0c      	ite	eq
 8005a28:	f8c8 2000 	streq.w	r2, [r8]
 8005a2c:	605a      	strne	r2, [r3, #4]
 8005a2e:	e7eb      	b.n	8005a08 <_malloc_r+0xa8>
 8005a30:	4623      	mov	r3, r4
 8005a32:	6864      	ldr	r4, [r4, #4]
 8005a34:	e7ae      	b.n	8005994 <_malloc_r+0x34>
 8005a36:	463c      	mov	r4, r7
 8005a38:	687f      	ldr	r7, [r7, #4]
 8005a3a:	e7b6      	b.n	80059aa <_malloc_r+0x4a>
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	42a3      	cmp	r3, r4
 8005a42:	d1fb      	bne.n	8005a3c <_malloc_r+0xdc>
 8005a44:	2300      	movs	r3, #0
 8005a46:	6053      	str	r3, [r2, #4]
 8005a48:	e7de      	b.n	8005a08 <_malloc_r+0xa8>
 8005a4a:	230c      	movs	r3, #12
 8005a4c:	6033      	str	r3, [r6, #0]
 8005a4e:	4630      	mov	r0, r6
 8005a50:	f000 f80c 	bl	8005a6c <__malloc_unlock>
 8005a54:	e794      	b.n	8005980 <_malloc_r+0x20>
 8005a56:	6005      	str	r5, [r0, #0]
 8005a58:	e7d6      	b.n	8005a08 <_malloc_r+0xa8>
 8005a5a:	bf00      	nop
 8005a5c:	20005234 	.word	0x20005234

08005a60 <__malloc_lock>:
 8005a60:	4801      	ldr	r0, [pc, #4]	@ (8005a68 <__malloc_lock+0x8>)
 8005a62:	f7ff bf0e 	b.w	8005882 <__retarget_lock_acquire_recursive>
 8005a66:	bf00      	nop
 8005a68:	2000522c 	.word	0x2000522c

08005a6c <__malloc_unlock>:
 8005a6c:	4801      	ldr	r0, [pc, #4]	@ (8005a74 <__malloc_unlock+0x8>)
 8005a6e:	f7ff bf09 	b.w	8005884 <__retarget_lock_release_recursive>
 8005a72:	bf00      	nop
 8005a74:	2000522c 	.word	0x2000522c

08005a78 <__sflush_r>:
 8005a78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a80:	0716      	lsls	r6, r2, #28
 8005a82:	4605      	mov	r5, r0
 8005a84:	460c      	mov	r4, r1
 8005a86:	d454      	bmi.n	8005b32 <__sflush_r+0xba>
 8005a88:	684b      	ldr	r3, [r1, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	dc02      	bgt.n	8005a94 <__sflush_r+0x1c>
 8005a8e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	dd48      	ble.n	8005b26 <__sflush_r+0xae>
 8005a94:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005a96:	2e00      	cmp	r6, #0
 8005a98:	d045      	beq.n	8005b26 <__sflush_r+0xae>
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005aa0:	682f      	ldr	r7, [r5, #0]
 8005aa2:	6a21      	ldr	r1, [r4, #32]
 8005aa4:	602b      	str	r3, [r5, #0]
 8005aa6:	d030      	beq.n	8005b0a <__sflush_r+0x92>
 8005aa8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005aaa:	89a3      	ldrh	r3, [r4, #12]
 8005aac:	0759      	lsls	r1, r3, #29
 8005aae:	d505      	bpl.n	8005abc <__sflush_r+0x44>
 8005ab0:	6863      	ldr	r3, [r4, #4]
 8005ab2:	1ad2      	subs	r2, r2, r3
 8005ab4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005ab6:	b10b      	cbz	r3, 8005abc <__sflush_r+0x44>
 8005ab8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005aba:	1ad2      	subs	r2, r2, r3
 8005abc:	2300      	movs	r3, #0
 8005abe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005ac0:	6a21      	ldr	r1, [r4, #32]
 8005ac2:	4628      	mov	r0, r5
 8005ac4:	47b0      	blx	r6
 8005ac6:	1c43      	adds	r3, r0, #1
 8005ac8:	89a3      	ldrh	r3, [r4, #12]
 8005aca:	d106      	bne.n	8005ada <__sflush_r+0x62>
 8005acc:	6829      	ldr	r1, [r5, #0]
 8005ace:	291d      	cmp	r1, #29
 8005ad0:	d82b      	bhi.n	8005b2a <__sflush_r+0xb2>
 8005ad2:	4a2a      	ldr	r2, [pc, #168]	@ (8005b7c <__sflush_r+0x104>)
 8005ad4:	410a      	asrs	r2, r1
 8005ad6:	07d6      	lsls	r6, r2, #31
 8005ad8:	d427      	bmi.n	8005b2a <__sflush_r+0xb2>
 8005ada:	2200      	movs	r2, #0
 8005adc:	6062      	str	r2, [r4, #4]
 8005ade:	04d9      	lsls	r1, r3, #19
 8005ae0:	6922      	ldr	r2, [r4, #16]
 8005ae2:	6022      	str	r2, [r4, #0]
 8005ae4:	d504      	bpl.n	8005af0 <__sflush_r+0x78>
 8005ae6:	1c42      	adds	r2, r0, #1
 8005ae8:	d101      	bne.n	8005aee <__sflush_r+0x76>
 8005aea:	682b      	ldr	r3, [r5, #0]
 8005aec:	b903      	cbnz	r3, 8005af0 <__sflush_r+0x78>
 8005aee:	6560      	str	r0, [r4, #84]	@ 0x54
 8005af0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005af2:	602f      	str	r7, [r5, #0]
 8005af4:	b1b9      	cbz	r1, 8005b26 <__sflush_r+0xae>
 8005af6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005afa:	4299      	cmp	r1, r3
 8005afc:	d002      	beq.n	8005b04 <__sflush_r+0x8c>
 8005afe:	4628      	mov	r0, r5
 8005b00:	f7ff fec2 	bl	8005888 <_free_r>
 8005b04:	2300      	movs	r3, #0
 8005b06:	6363      	str	r3, [r4, #52]	@ 0x34
 8005b08:	e00d      	b.n	8005b26 <__sflush_r+0xae>
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	4628      	mov	r0, r5
 8005b0e:	47b0      	blx	r6
 8005b10:	4602      	mov	r2, r0
 8005b12:	1c50      	adds	r0, r2, #1
 8005b14:	d1c9      	bne.n	8005aaa <__sflush_r+0x32>
 8005b16:	682b      	ldr	r3, [r5, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d0c6      	beq.n	8005aaa <__sflush_r+0x32>
 8005b1c:	2b1d      	cmp	r3, #29
 8005b1e:	d001      	beq.n	8005b24 <__sflush_r+0xac>
 8005b20:	2b16      	cmp	r3, #22
 8005b22:	d11e      	bne.n	8005b62 <__sflush_r+0xea>
 8005b24:	602f      	str	r7, [r5, #0]
 8005b26:	2000      	movs	r0, #0
 8005b28:	e022      	b.n	8005b70 <__sflush_r+0xf8>
 8005b2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b2e:	b21b      	sxth	r3, r3
 8005b30:	e01b      	b.n	8005b6a <__sflush_r+0xf2>
 8005b32:	690f      	ldr	r7, [r1, #16]
 8005b34:	2f00      	cmp	r7, #0
 8005b36:	d0f6      	beq.n	8005b26 <__sflush_r+0xae>
 8005b38:	0793      	lsls	r3, r2, #30
 8005b3a:	680e      	ldr	r6, [r1, #0]
 8005b3c:	bf08      	it	eq
 8005b3e:	694b      	ldreq	r3, [r1, #20]
 8005b40:	600f      	str	r7, [r1, #0]
 8005b42:	bf18      	it	ne
 8005b44:	2300      	movne	r3, #0
 8005b46:	eba6 0807 	sub.w	r8, r6, r7
 8005b4a:	608b      	str	r3, [r1, #8]
 8005b4c:	f1b8 0f00 	cmp.w	r8, #0
 8005b50:	dde9      	ble.n	8005b26 <__sflush_r+0xae>
 8005b52:	6a21      	ldr	r1, [r4, #32]
 8005b54:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005b56:	4643      	mov	r3, r8
 8005b58:	463a      	mov	r2, r7
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	47b0      	blx	r6
 8005b5e:	2800      	cmp	r0, #0
 8005b60:	dc08      	bgt.n	8005b74 <__sflush_r+0xfc>
 8005b62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b6a:	81a3      	strh	r3, [r4, #12]
 8005b6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b74:	4407      	add	r7, r0
 8005b76:	eba8 0800 	sub.w	r8, r8, r0
 8005b7a:	e7e7      	b.n	8005b4c <__sflush_r+0xd4>
 8005b7c:	dfbffffe 	.word	0xdfbffffe

08005b80 <_fflush_r>:
 8005b80:	b538      	push	{r3, r4, r5, lr}
 8005b82:	690b      	ldr	r3, [r1, #16]
 8005b84:	4605      	mov	r5, r0
 8005b86:	460c      	mov	r4, r1
 8005b88:	b913      	cbnz	r3, 8005b90 <_fflush_r+0x10>
 8005b8a:	2500      	movs	r5, #0
 8005b8c:	4628      	mov	r0, r5
 8005b8e:	bd38      	pop	{r3, r4, r5, pc}
 8005b90:	b118      	cbz	r0, 8005b9a <_fflush_r+0x1a>
 8005b92:	6a03      	ldr	r3, [r0, #32]
 8005b94:	b90b      	cbnz	r3, 8005b9a <_fflush_r+0x1a>
 8005b96:	f7ff fc39 	bl	800540c <__sinit>
 8005b9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d0f3      	beq.n	8005b8a <_fflush_r+0xa>
 8005ba2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005ba4:	07d0      	lsls	r0, r2, #31
 8005ba6:	d404      	bmi.n	8005bb2 <_fflush_r+0x32>
 8005ba8:	0599      	lsls	r1, r3, #22
 8005baa:	d402      	bmi.n	8005bb2 <_fflush_r+0x32>
 8005bac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005bae:	f7ff fe68 	bl	8005882 <__retarget_lock_acquire_recursive>
 8005bb2:	4628      	mov	r0, r5
 8005bb4:	4621      	mov	r1, r4
 8005bb6:	f7ff ff5f 	bl	8005a78 <__sflush_r>
 8005bba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005bbc:	07da      	lsls	r2, r3, #31
 8005bbe:	4605      	mov	r5, r0
 8005bc0:	d4e4      	bmi.n	8005b8c <_fflush_r+0xc>
 8005bc2:	89a3      	ldrh	r3, [r4, #12]
 8005bc4:	059b      	lsls	r3, r3, #22
 8005bc6:	d4e1      	bmi.n	8005b8c <_fflush_r+0xc>
 8005bc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005bca:	f7ff fe5b 	bl	8005884 <__retarget_lock_release_recursive>
 8005bce:	e7dd      	b.n	8005b8c <_fflush_r+0xc>

08005bd0 <__swhatbuf_r>:
 8005bd0:	b570      	push	{r4, r5, r6, lr}
 8005bd2:	460c      	mov	r4, r1
 8005bd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bd8:	2900      	cmp	r1, #0
 8005bda:	b096      	sub	sp, #88	@ 0x58
 8005bdc:	4615      	mov	r5, r2
 8005bde:	461e      	mov	r6, r3
 8005be0:	da0d      	bge.n	8005bfe <__swhatbuf_r+0x2e>
 8005be2:	89a3      	ldrh	r3, [r4, #12]
 8005be4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005be8:	f04f 0100 	mov.w	r1, #0
 8005bec:	bf14      	ite	ne
 8005bee:	2340      	movne	r3, #64	@ 0x40
 8005bf0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005bf4:	2000      	movs	r0, #0
 8005bf6:	6031      	str	r1, [r6, #0]
 8005bf8:	602b      	str	r3, [r5, #0]
 8005bfa:	b016      	add	sp, #88	@ 0x58
 8005bfc:	bd70      	pop	{r4, r5, r6, pc}
 8005bfe:	466a      	mov	r2, sp
 8005c00:	f000 f848 	bl	8005c94 <_fstat_r>
 8005c04:	2800      	cmp	r0, #0
 8005c06:	dbec      	blt.n	8005be2 <__swhatbuf_r+0x12>
 8005c08:	9901      	ldr	r1, [sp, #4]
 8005c0a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005c0e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005c12:	4259      	negs	r1, r3
 8005c14:	4159      	adcs	r1, r3
 8005c16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c1a:	e7eb      	b.n	8005bf4 <__swhatbuf_r+0x24>

08005c1c <__smakebuf_r>:
 8005c1c:	898b      	ldrh	r3, [r1, #12]
 8005c1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c20:	079d      	lsls	r5, r3, #30
 8005c22:	4606      	mov	r6, r0
 8005c24:	460c      	mov	r4, r1
 8005c26:	d507      	bpl.n	8005c38 <__smakebuf_r+0x1c>
 8005c28:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005c2c:	6023      	str	r3, [r4, #0]
 8005c2e:	6123      	str	r3, [r4, #16]
 8005c30:	2301      	movs	r3, #1
 8005c32:	6163      	str	r3, [r4, #20]
 8005c34:	b003      	add	sp, #12
 8005c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c38:	ab01      	add	r3, sp, #4
 8005c3a:	466a      	mov	r2, sp
 8005c3c:	f7ff ffc8 	bl	8005bd0 <__swhatbuf_r>
 8005c40:	9f00      	ldr	r7, [sp, #0]
 8005c42:	4605      	mov	r5, r0
 8005c44:	4639      	mov	r1, r7
 8005c46:	4630      	mov	r0, r6
 8005c48:	f7ff fe8a 	bl	8005960 <_malloc_r>
 8005c4c:	b948      	cbnz	r0, 8005c62 <__smakebuf_r+0x46>
 8005c4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c52:	059a      	lsls	r2, r3, #22
 8005c54:	d4ee      	bmi.n	8005c34 <__smakebuf_r+0x18>
 8005c56:	f023 0303 	bic.w	r3, r3, #3
 8005c5a:	f043 0302 	orr.w	r3, r3, #2
 8005c5e:	81a3      	strh	r3, [r4, #12]
 8005c60:	e7e2      	b.n	8005c28 <__smakebuf_r+0xc>
 8005c62:	89a3      	ldrh	r3, [r4, #12]
 8005c64:	6020      	str	r0, [r4, #0]
 8005c66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c6a:	81a3      	strh	r3, [r4, #12]
 8005c6c:	9b01      	ldr	r3, [sp, #4]
 8005c6e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005c72:	b15b      	cbz	r3, 8005c8c <__smakebuf_r+0x70>
 8005c74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c78:	4630      	mov	r0, r6
 8005c7a:	f000 f81d 	bl	8005cb8 <_isatty_r>
 8005c7e:	b128      	cbz	r0, 8005c8c <__smakebuf_r+0x70>
 8005c80:	89a3      	ldrh	r3, [r4, #12]
 8005c82:	f023 0303 	bic.w	r3, r3, #3
 8005c86:	f043 0301 	orr.w	r3, r3, #1
 8005c8a:	81a3      	strh	r3, [r4, #12]
 8005c8c:	89a3      	ldrh	r3, [r4, #12]
 8005c8e:	431d      	orrs	r5, r3
 8005c90:	81a5      	strh	r5, [r4, #12]
 8005c92:	e7cf      	b.n	8005c34 <__smakebuf_r+0x18>

08005c94 <_fstat_r>:
 8005c94:	b538      	push	{r3, r4, r5, lr}
 8005c96:	4d07      	ldr	r5, [pc, #28]	@ (8005cb4 <_fstat_r+0x20>)
 8005c98:	2300      	movs	r3, #0
 8005c9a:	4604      	mov	r4, r0
 8005c9c:	4608      	mov	r0, r1
 8005c9e:	4611      	mov	r1, r2
 8005ca0:	602b      	str	r3, [r5, #0]
 8005ca2:	f7fa fede 	bl	8000a62 <_fstat>
 8005ca6:	1c43      	adds	r3, r0, #1
 8005ca8:	d102      	bne.n	8005cb0 <_fstat_r+0x1c>
 8005caa:	682b      	ldr	r3, [r5, #0]
 8005cac:	b103      	cbz	r3, 8005cb0 <_fstat_r+0x1c>
 8005cae:	6023      	str	r3, [r4, #0]
 8005cb0:	bd38      	pop	{r3, r4, r5, pc}
 8005cb2:	bf00      	nop
 8005cb4:	20005228 	.word	0x20005228

08005cb8 <_isatty_r>:
 8005cb8:	b538      	push	{r3, r4, r5, lr}
 8005cba:	4d06      	ldr	r5, [pc, #24]	@ (8005cd4 <_isatty_r+0x1c>)
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	4604      	mov	r4, r0
 8005cc0:	4608      	mov	r0, r1
 8005cc2:	602b      	str	r3, [r5, #0]
 8005cc4:	f7fa fedd 	bl	8000a82 <_isatty>
 8005cc8:	1c43      	adds	r3, r0, #1
 8005cca:	d102      	bne.n	8005cd2 <_isatty_r+0x1a>
 8005ccc:	682b      	ldr	r3, [r5, #0]
 8005cce:	b103      	cbz	r3, 8005cd2 <_isatty_r+0x1a>
 8005cd0:	6023      	str	r3, [r4, #0]
 8005cd2:	bd38      	pop	{r3, r4, r5, pc}
 8005cd4:	20005228 	.word	0x20005228

08005cd8 <_sbrk_r>:
 8005cd8:	b538      	push	{r3, r4, r5, lr}
 8005cda:	4d06      	ldr	r5, [pc, #24]	@ (8005cf4 <_sbrk_r+0x1c>)
 8005cdc:	2300      	movs	r3, #0
 8005cde:	4604      	mov	r4, r0
 8005ce0:	4608      	mov	r0, r1
 8005ce2:	602b      	str	r3, [r5, #0]
 8005ce4:	f7fa fee6 	bl	8000ab4 <_sbrk>
 8005ce8:	1c43      	adds	r3, r0, #1
 8005cea:	d102      	bne.n	8005cf2 <_sbrk_r+0x1a>
 8005cec:	682b      	ldr	r3, [r5, #0]
 8005cee:	b103      	cbz	r3, 8005cf2 <_sbrk_r+0x1a>
 8005cf0:	6023      	str	r3, [r4, #0]
 8005cf2:	bd38      	pop	{r3, r4, r5, pc}
 8005cf4:	20005228 	.word	0x20005228

08005cf8 <_init>:
 8005cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cfa:	bf00      	nop
 8005cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cfe:	bc08      	pop	{r3}
 8005d00:	469e      	mov	lr, r3
 8005d02:	4770      	bx	lr

08005d04 <_fini>:
 8005d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d06:	bf00      	nop
 8005d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d0a:	bc08      	pop	{r3}
 8005d0c:	469e      	mov	lr, r3
 8005d0e:	4770      	bx	lr
