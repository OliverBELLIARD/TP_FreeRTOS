
TP_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9bc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d0  0800aba0  0800aba0  0000bba0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b270  0800b270  0000d1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b270  0800b270  0000c270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b278  0800b278  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b278  0800b278  0000c278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b27c  0800b27c  0000c27c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800b280  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000051cc  200001d8  0800b458  0000d1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200053a4  0800b458  0000d3a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018acc  00000000  00000000  0000d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a9d  00000000  00000000  00025cd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001688  00000000  00000000  00029778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000116b  00000000  00000000  0002ae00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002150c  00000000  00000000  0002bf6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019948  00000000  00000000  0004d477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d069b  00000000  00000000  00066dbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013745a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007364  00000000  00000000  001374a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0013e804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ab84 	.word	0x0800ab84

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	0800ab84 	.word	0x0800ab84

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001034:	b5b0      	push	{r4, r5, r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800103a:	4b09      	ldr	r3, [pc, #36]	@ (8001060 <MX_FREERTOS_Init+0x2c>)
 800103c:	1d3c      	adds	r4, r7, #4
 800103e:	461d      	mov	r5, r3
 8001040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001044:	682b      	ldr	r3, [r5, #0]
 8001046:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f003 f91a 	bl	8004286 <osThreadCreate>
 8001052:	4603      	mov	r3, r0
 8001054:	4a03      	ldr	r2, [pc, #12]	@ (8001064 <MX_FREERTOS_Init+0x30>)
 8001056:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001058:	bf00      	nop
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bdb0      	pop	{r4, r5, r7, pc}
 8001060:	0800abac 	.word	0x0800abac
 8001064:	200001f4 	.word	0x200001f4

08001068 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001070:	2001      	movs	r0, #1
 8001072:	f003 f92f 	bl	80042d4 <osDelay>
 8001076:	e7fb      	b.n	8001070 <StartDefaultTask+0x8>

08001078 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08a      	sub	sp, #40	@ 0x28
 800107c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107e:	f107 0314 	add.w	r3, r7, #20
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
 800108c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800108e:	4b2b      	ldr	r3, [pc, #172]	@ (800113c <MX_GPIO_Init+0xc4>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001092:	4a2a      	ldr	r2, [pc, #168]	@ (800113c <MX_GPIO_Init+0xc4>)
 8001094:	f043 0304 	orr.w	r3, r3, #4
 8001098:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800109a:	4b28      	ldr	r3, [pc, #160]	@ (800113c <MX_GPIO_Init+0xc4>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109e:	f003 0304 	and.w	r3, r3, #4
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010a6:	4b25      	ldr	r3, [pc, #148]	@ (800113c <MX_GPIO_Init+0xc4>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010aa:	4a24      	ldr	r2, [pc, #144]	@ (800113c <MX_GPIO_Init+0xc4>)
 80010ac:	f043 0320 	orr.w	r3, r3, #32
 80010b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b2:	4b22      	ldr	r3, [pc, #136]	@ (800113c <MX_GPIO_Init+0xc4>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b6:	f003 0320 	and.w	r3, r3, #32
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	4b1f      	ldr	r3, [pc, #124]	@ (800113c <MX_GPIO_Init+0xc4>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c2:	4a1e      	ldr	r2, [pc, #120]	@ (800113c <MX_GPIO_Init+0xc4>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ca:	4b1c      	ldr	r3, [pc, #112]	@ (800113c <MX_GPIO_Init+0xc4>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d6:	4b19      	ldr	r3, [pc, #100]	@ (800113c <MX_GPIO_Init+0xc4>)
 80010d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010da:	4a18      	ldr	r2, [pc, #96]	@ (800113c <MX_GPIO_Init+0xc4>)
 80010dc:	f043 0302 	orr.w	r3, r3, #2
 80010e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010e2:	4b16      	ldr	r3, [pc, #88]	@ (800113c <MX_GPIO_Init+0xc4>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2120      	movs	r1, #32
 80010f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010f6:	f000 fe7f 	bl	8001df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001100:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001104:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	4619      	mov	r1, r3
 8001110:	480b      	ldr	r0, [pc, #44]	@ (8001140 <MX_GPIO_Init+0xc8>)
 8001112:	f000 fcef 	bl	8001af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001116:	2320      	movs	r3, #32
 8001118:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111a:	2301      	movs	r3, #1
 800111c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	2300      	movs	r3, #0
 8001124:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	4619      	mov	r1, r3
 800112c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001130:	f000 fce0 	bl	8001af4 <HAL_GPIO_Init>

}
 8001134:	bf00      	nop
 8001136:	3728      	adds	r7, #40	@ 0x28
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40021000 	.word	0x40021000
 8001140:	48000800 	.word	0x48000800

08001144 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800114c:	1d39      	adds	r1, r7, #4
 800114e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001152:	2201      	movs	r2, #1
 8001154:	4803      	ldr	r0, [pc, #12]	@ (8001164 <__io_putchar+0x20>)
 8001156:	f002 f9fb 	bl	8003550 <HAL_UART_Transmit>
	return ch;
 800115a:	687b      	ldr	r3, [r7, #4]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	2000024c 	.word	0x2000024c

08001168 <errHandler_xTaskCreate>:
/**
 * @brief  Gestion d'erreurs de création de tâche.
 * @param	BaseType_t	Retour de xTaskCreate.
 */
void errHandler_xTaskCreate(BaseType_t r)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	/* Vérification si la tâche a été créée avec succès */
	if (pdPASS == r) {
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d103      	bne.n	800117e <errHandler_xTaskCreate+0x16>
		/* Si la tâche est créée avec succès, démarrer le scheduler */
		printf("Tâche crée avec succès\r\n");
 8001176:	480b      	ldr	r0, [pc, #44]	@ (80011a4 <errHandler_xTaskCreate+0x3c>)
 8001178:	f006 f86a 	bl	8007250 <puts>
	} else {
		/* Cas improbable : code d'erreur non prévu pour xTaskCreate */
		printf("Erreur inconnue lors de la création de la tâche\r\n");
		Error_Handler();  // Gestion d'erreur générique
	}
}
 800117c:	e00e      	b.n	800119c <errHandler_xTaskCreate+0x34>
	} else if (errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY == r) {
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001184:	d105      	bne.n	8001192 <errHandler_xTaskCreate+0x2a>
		printf("Erreur: Mémoire insuffisante\r\n");
 8001186:	4808      	ldr	r0, [pc, #32]	@ (80011a8 <errHandler_xTaskCreate+0x40>)
 8001188:	f006 f862 	bl	8007250 <puts>
		Error_Handler();
 800118c:	f000 f934 	bl	80013f8 <Error_Handler>
}
 8001190:	e004      	b.n	800119c <errHandler_xTaskCreate+0x34>
		printf("Erreur inconnue lors de la création de la tâche\r\n");
 8001192:	4806      	ldr	r0, [pc, #24]	@ (80011ac <errHandler_xTaskCreate+0x44>)
 8001194:	f006 f85c 	bl	8007250 <puts>
		Error_Handler();  // Gestion d'erreur générique
 8001198:	f000 f92e 	bl	80013f8 <Error_Handler>
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	0800abc0 	.word	0x0800abc0
 80011a8:	0800abdc 	.word	0x0800abdc
 80011ac:	0800abfc 	.word	0x0800abfc

080011b0 <taskGive>:

/**
 * @note
 * source: https://www.freertos.org/Documentation/02-Kernel/04-API-references/10-Semaphore-and-Mutexes/12-xSemaphoreTake
 */
void taskGive (void * pvParameters) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	int duree = (int) pvParameters;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	60fb      	str	r3, [r7, #12]

	while (1) {
		if(task_sync != NULL)
 80011bc:	4b19      	ldr	r3, [pc, #100]	@ (8001224 <taskGive+0x74>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d0fb      	beq.n	80011bc <taskGive+0xc>
		{
			printf("Avant avoir pris le sémaphore taskGive\r\n");
 80011c4:	4818      	ldr	r0, [pc, #96]	@ (8001228 <taskGive+0x78>)
 80011c6:	f006 f843 	bl	8007250 <puts>
			if(xSemaphoreTake(task_sync, (TickType_t) SEMAPHORE_RETRY_TIME / portTICK_PERIOD_MS) == pdTRUE)
 80011ca:	4b16      	ldr	r3, [pc, #88]	@ (8001224 <taskGive+0x74>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80011d2:	4618      	mov	r0, r3
 80011d4:	f003 fb08 	bl	80047e8 <xQueueSemaphoreTake>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d119      	bne.n	8001212 <taskGive+0x62>
			{
				/* We were able to obtain the semaphore and can now access the shared resource. */
				printf("Après avoir pris le sémaphore taskGive\r\n");
 80011de:	4813      	ldr	r0, [pc, #76]	@ (800122c <taskGive+0x7c>)
 80011e0:	f006 f836 	bl	8007250 <puts>
				HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80011e4:	2120      	movs	r1, #32
 80011e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ea:	f000 fe1d 	bl	8001e28 <HAL_GPIO_TogglePin>
				vTaskDelay((TickType_t) duree / portTICK_PERIOD_MS);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f003 fe57 	bl	8004ea4 <vTaskDelay>

				/* We have finished accessing the shared resource. Release the semaphore. */
				printf("Avant avoir donné le sémaphore taskGive\r\n");
 80011f6:	480e      	ldr	r0, [pc, #56]	@ (8001230 <taskGive+0x80>)
 80011f8:	f006 f82a 	bl	8007250 <puts>
				xSemaphoreGive(task_sync);
 80011fc:	4b09      	ldr	r3, [pc, #36]	@ (8001224 <taskGive+0x74>)
 80011fe:	6818      	ldr	r0, [r3, #0]
 8001200:	2300      	movs	r3, #0
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	f003 f9ed 	bl	80045e4 <xQueueGenericSend>
				printf("Après avoir donné le sémaphore taskGive\r\n");
 800120a:	480a      	ldr	r0, [pc, #40]	@ (8001234 <taskGive+0x84>)
 800120c:	f006 f820 	bl	8007250 <puts>
 8001210:	e7d4      	b.n	80011bc <taskGive+0xc>
			}
			else
			{
				/* We could not obtain the semaphore and can therefore not access
				 * the shared resource safely. */
				printf("taskGive n'a pas pu prendre le semaphore après %.3f ms\r\n", (float)SEMAPHORE_RETRY_TIME);
 8001212:	f04f 0200 	mov.w	r2, #0
 8001216:	4b08      	ldr	r3, [pc, #32]	@ (8001238 <taskGive+0x88>)
 8001218:	4808      	ldr	r0, [pc, #32]	@ (800123c <taskGive+0x8c>)
 800121a:	f005 ffb1 	bl	8007180 <iprintf>
				Error_Handler();
 800121e:	f000 f8eb 	bl	80013f8 <Error_Handler>
		if(task_sync != NULL)
 8001222:	e7cb      	b.n	80011bc <taskGive+0xc>
 8001224:	200001f8 	.word	0x200001f8
 8001228:	0800ac60 	.word	0x0800ac60
 800122c:	0800ac8c 	.word	0x0800ac8c
 8001230:	0800acb8 	.word	0x0800acb8
 8001234:	0800ace4 	.word	0x0800ace4
 8001238:	408f4000 	.word	0x408f4000
 800123c:	0800ad10 	.word	0x0800ad10

08001240 <taskTake>:
			}
		}
	}
}

void taskTake (void * pvParameters) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	int duree = (int) pvParameters;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	60fb      	str	r3, [r7, #12]

	while (1) {
		if(task_sync != NULL)
 800124c:	4b13      	ldr	r3, [pc, #76]	@ (800129c <taskTake+0x5c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d0fb      	beq.n	800124c <taskTake+0xc>
		{
			printf("Avant avoir pris le sémaphore taskTake\r\n");
 8001254:	4812      	ldr	r0, [pc, #72]	@ (80012a0 <taskTake+0x60>)
 8001256:	f005 fffb 	bl	8007250 <puts>
			if(xSemaphoreTake(task_sync, (TickType_t) SEMAPHORE_RETRY_TIME / portTICK_PERIOD_MS) == pdTRUE)
 800125a:	4b10      	ldr	r3, [pc, #64]	@ (800129c <taskTake+0x5c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001262:	4618      	mov	r0, r3
 8001264:	f003 fac0 	bl	80047e8 <xQueueSemaphoreTake>
 8001268:	4603      	mov	r3, r0
 800126a:	2b01      	cmp	r3, #1
 800126c:	d10c      	bne.n	8001288 <taskTake+0x48>
			{
				/* We were able to obtain the semaphore and can now access the shared resource. */
				printf("Après avoir pris le sémaphore taskTake\r\n");
 800126e:	480d      	ldr	r0, [pc, #52]	@ (80012a4 <taskTake+0x64>)
 8001270:	f005 ffee 	bl	8007250 <puts>
				HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001274:	2120      	movs	r1, #32
 8001276:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800127a:	f000 fdd5 	bl	8001e28 <HAL_GPIO_TogglePin>
				vTaskDelay((TickType_t) duree / portTICK_PERIOD_MS);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	4618      	mov	r0, r3
 8001282:	f003 fe0f 	bl	8004ea4 <vTaskDelay>
 8001286:	e7e1      	b.n	800124c <taskTake+0xc>
			}
			else
			{
				/* We could not obtain the semaphore and can therefore not access
				 * the shared resource safely. */
				printf("taskTake n'a pas pu prendre le semaphore après %.3f ms\r\n", (float)SEMAPHORE_RETRY_TIME);
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <taskTake+0x68>)
 800128e:	4807      	ldr	r0, [pc, #28]	@ (80012ac <taskTake+0x6c>)
 8001290:	f005 ff76 	bl	8007180 <iprintf>
				Error_Handler();
 8001294:	f000 f8b0 	bl	80013f8 <Error_Handler>
		if(task_sync != NULL)
 8001298:	e7d8      	b.n	800124c <taskTake+0xc>
 800129a:	bf00      	nop
 800129c:	200001f8 	.word	0x200001f8
 80012a0:	0800ad4c 	.word	0x0800ad4c
 80012a4:	0800ad78 	.word	0x0800ad78
 80012a8:	408f4000 	.word	0x408f4000
 80012ac:	0800ada4 	.word	0x0800ada4

080012b0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af02      	add	r7, sp, #8

	/* USER CODE BEGIN 1 */
	BaseType_t xReturned;
	TaskHandle_t xHandle1 = NULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60bb      	str	r3, [r7, #8]
	TaskHandle_t xHandle2 = NULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80012be:	f000 fb02 	bl	80018c6 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80012c2:	f000 f83b 	bl	800133c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80012c6:	f7ff fed7 	bl	8001078 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80012ca:	f000 fa2f 	bl	800172c <MX_USART2_UART_Init>

	errHandler_xTaskCreate(xReturned);
	 */

	/* 1.2 */
	task_sync = xSemaphoreCreateBinary();
 80012ce:	2203      	movs	r2, #3
 80012d0:	2100      	movs	r1, #0
 80012d2:	2001      	movs	r0, #1
 80012d4:	f003 f930 	bl	8004538 <xQueueGenericCreate>
 80012d8:	4603      	mov	r3, r0
 80012da:	4a13      	ldr	r2, [pc, #76]	@ (8001328 <main+0x78>)
 80012dc:	6013      	str	r3, [r2, #0]

	xReturned = xTaskCreate(
 80012de:	f107 0308 	add.w	r3, r7, #8
 80012e2:	9301      	str	r3, [sp, #4]
 80012e4:	2300      	movs	r3, #0
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	2364      	movs	r3, #100	@ 0x64
 80012ea:	22fa      	movs	r2, #250	@ 0xfa
 80012ec:	490f      	ldr	r1, [pc, #60]	@ (800132c <main+0x7c>)
 80012ee:	4810      	ldr	r0, [pc, #64]	@ (8001330 <main+0x80>)
 80012f0:	f003 fc8c 	bl	8004c0c <xTaskCreate>
 80012f4:	60f8      	str	r0, [r7, #12]
			STACK_SIZE, // Stack size in words, not bytes.
			(void *) DELAY_1, // Parameter passed into the task.
			(UBaseType_t) tskIDLE_PRIORITY,// Priority at which the task is created.
			&xHandle1); // Used to pass out the created task's handle.

	errHandler_xTaskCreate(xReturned);
 80012f6:	68f8      	ldr	r0, [r7, #12]
 80012f8:	f7ff ff36 	bl	8001168 <errHandler_xTaskCreate>

	xReturned = xTaskCreate(
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	9301      	str	r3, [sp, #4]
 8001300:	2301      	movs	r3, #1
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	2364      	movs	r3, #100	@ 0x64
 8001306:	22fa      	movs	r2, #250	@ 0xfa
 8001308:	490a      	ldr	r1, [pc, #40]	@ (8001334 <main+0x84>)
 800130a:	480b      	ldr	r0, [pc, #44]	@ (8001338 <main+0x88>)
 800130c:	f003 fc7e 	bl	8004c0c <xTaskCreate>
 8001310:	60f8      	str	r0, [r7, #12]
			STACK_SIZE, // Stack size in words, not bytes.
			(void *) DELAY_1, // Parameter passed into the task.
			1U,// Priority at which the task is created.
			&xHandle2); // Used to pass out the created task's handle.

	errHandler_xTaskCreate(xReturned);
 8001312:	68f8      	ldr	r0, [r7, #12]
 8001314:	f7ff ff28 	bl	8001168 <errHandler_xTaskCreate>

	vTaskStartScheduler();
 8001318:	f003 fdfa 	bl	8004f10 <vTaskStartScheduler>

	/* USER CODE END 2 */

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();
 800131c:	f7ff fe8a 	bl	8001034 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8001320:	f002 ffaa 	bl	8004278 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8001324:	bf00      	nop
 8001326:	e7fd      	b.n	8001324 <main+0x74>
 8001328:	200001f8 	.word	0x200001f8
 800132c:	0800ade0 	.word	0x0800ade0
 8001330:	080011b1 	.word	0x080011b1
 8001334:	0800adec 	.word	0x0800adec
 8001338:	08001241 	.word	0x08001241

0800133c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b094      	sub	sp, #80	@ 0x50
 8001340:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001342:	f107 0318 	add.w	r3, r7, #24
 8001346:	2238      	movs	r2, #56	@ 0x38
 8001348:	2100      	movs	r1, #0
 800134a:	4618      	mov	r0, r3
 800134c:	f006 f880 	bl	8007450 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
 800135c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800135e:	2000      	movs	r0, #0
 8001360:	f000 fd7c 	bl	8001e5c <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001364:	2302      	movs	r3, #2
 8001366:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001368:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800136c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800136e:	2340      	movs	r3, #64	@ 0x40
 8001370:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001372:	2302      	movs	r3, #2
 8001374:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001376:	2302      	movs	r3, #2
 8001378:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800137a:	2304      	movs	r3, #4
 800137c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 800137e:	2355      	movs	r3, #85	@ 0x55
 8001380:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001382:	2302      	movs	r3, #2
 8001384:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001386:	2302      	movs	r3, #2
 8001388:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800138a:	2302      	movs	r3, #2
 800138c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800138e:	f107 0318 	add.w	r3, r7, #24
 8001392:	4618      	mov	r0, r3
 8001394:	f000 fe16 	bl	8001fc4 <HAL_RCC_OscConfig>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <SystemClock_Config+0x66>
	{
		Error_Handler();
 800139e:	f000 f82b 	bl	80013f8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a2:	230f      	movs	r3, #15
 80013a4:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a6:	2303      	movs	r3, #3
 80013a8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	2104      	movs	r1, #4
 80013ba:	4618      	mov	r0, r3
 80013bc:	f001 f914 	bl	80025e8 <HAL_RCC_ClockConfig>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <SystemClock_Config+0x8e>
	{
		Error_Handler();
 80013c6:	f000 f817 	bl	80013f8 <Error_Handler>
	}
}
 80013ca:	bf00      	nop
 80013cc:	3750      	adds	r7, #80	@ 0x50
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
	...

080013d4 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM16) {
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a04      	ldr	r2, [pc, #16]	@ (80013f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d101      	bne.n	80013ea <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80013e6:	f000 fa87 	bl	80018f8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40014400 	.word	0x40014400

080013f8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013fc:	b672      	cpsid	i
}
 80013fe:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001400:	bf00      	nop
 8001402:	e7fd      	b.n	8001400 <Error_Handler+0x8>

08001404 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140a:	4b12      	ldr	r3, [pc, #72]	@ (8001454 <HAL_MspInit+0x50>)
 800140c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800140e:	4a11      	ldr	r2, [pc, #68]	@ (8001454 <HAL_MspInit+0x50>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	6613      	str	r3, [r2, #96]	@ 0x60
 8001416:	4b0f      	ldr	r3, [pc, #60]	@ (8001454 <HAL_MspInit+0x50>)
 8001418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001422:	4b0c      	ldr	r3, [pc, #48]	@ (8001454 <HAL_MspInit+0x50>)
 8001424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001426:	4a0b      	ldr	r2, [pc, #44]	@ (8001454 <HAL_MspInit+0x50>)
 8001428:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800142c:	6593      	str	r3, [r2, #88]	@ 0x58
 800142e:	4b09      	ldr	r3, [pc, #36]	@ (8001454 <HAL_MspInit+0x50>)
 8001430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001432:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001436:	603b      	str	r3, [r7, #0]
 8001438:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800143a:	2200      	movs	r2, #0
 800143c:	210f      	movs	r1, #15
 800143e:	f06f 0001 	mvn.w	r0, #1
 8001442:	f000 fb2f 	bl	8001aa4 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001446:	f000 fdad 	bl	8001fa4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40021000 	.word	0x40021000

08001458 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08c      	sub	sp, #48	@ 0x30
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8001468:	4b2c      	ldr	r3, [pc, #176]	@ (800151c <HAL_InitTick+0xc4>)
 800146a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800146c:	4a2b      	ldr	r2, [pc, #172]	@ (800151c <HAL_InitTick+0xc4>)
 800146e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001472:	6613      	str	r3, [r2, #96]	@ 0x60
 8001474:	4b29      	ldr	r3, [pc, #164]	@ (800151c <HAL_InitTick+0xc4>)
 8001476:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001478:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001480:	f107 020c 	add.w	r2, r7, #12
 8001484:	f107 0310 	add.w	r3, r7, #16
 8001488:	4611      	mov	r1, r2
 800148a:	4618      	mov	r0, r3
 800148c:	f001 fa82 	bl	8002994 <HAL_RCC_GetClockConfig>
  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001490:	f001 fa6a 	bl	8002968 <HAL_RCC_GetPCLK2Freq>
 8001494:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001498:	4a21      	ldr	r2, [pc, #132]	@ (8001520 <HAL_InitTick+0xc8>)
 800149a:	fba2 2303 	umull	r2, r3, r2, r3
 800149e:	0c9b      	lsrs	r3, r3, #18
 80014a0:	3b01      	subs	r3, #1
 80014a2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 80014a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001524 <HAL_InitTick+0xcc>)
 80014a6:	4a20      	ldr	r2, [pc, #128]	@ (8001528 <HAL_InitTick+0xd0>)
 80014a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 80014aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001524 <HAL_InitTick+0xcc>)
 80014ac:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80014b0:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 80014b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001524 <HAL_InitTick+0xcc>)
 80014b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b6:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 80014b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001524 <HAL_InitTick+0xcc>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014be:	4b19      	ldr	r3, [pc, #100]	@ (8001524 <HAL_InitTick+0xcc>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim16);
 80014c4:	4817      	ldr	r0, [pc, #92]	@ (8001524 <HAL_InitTick+0xcc>)
 80014c6:	f001 fccd 	bl	8002e64 <HAL_TIM_Base_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80014d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d11b      	bne.n	8001510 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 80014d8:	4812      	ldr	r0, [pc, #72]	@ (8001524 <HAL_InitTick+0xcc>)
 80014da:	f001 fd25 	bl	8002f28 <HAL_TIM_Base_Start_IT>
 80014de:	4603      	mov	r3, r0
 80014e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80014e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d111      	bne.n	8001510 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80014ec:	2019      	movs	r0, #25
 80014ee:	f000 faf3 	bl	8001ad8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b0f      	cmp	r3, #15
 80014f6:	d808      	bhi.n	800150a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80014f8:	2200      	movs	r2, #0
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	2019      	movs	r0, #25
 80014fe:	f000 fad1 	bl	8001aa4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001502:	4a0a      	ldr	r2, [pc, #40]	@ (800152c <HAL_InitTick+0xd4>)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6013      	str	r3, [r2, #0]
 8001508:	e002      	b.n	8001510 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001510:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001514:	4618      	mov	r0, r3
 8001516:	3730      	adds	r7, #48	@ 0x30
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40021000 	.word	0x40021000
 8001520:	431bde83 	.word	0x431bde83
 8001524:	200001fc 	.word	0x200001fc
 8001528:	40014400 	.word	0x40014400
 800152c:	20000004 	.word	0x20000004

08001530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001534:	bf00      	nop
 8001536:	e7fd      	b.n	8001534 <NMI_Handler+0x4>

08001538 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800153c:	bf00      	nop
 800153e:	e7fd      	b.n	800153c <HardFault_Handler+0x4>

08001540 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001544:	bf00      	nop
 8001546:	e7fd      	b.n	8001544 <MemManage_Handler+0x4>

08001548 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800154c:	bf00      	nop
 800154e:	e7fd      	b.n	800154c <BusFault_Handler+0x4>

08001550 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001554:	bf00      	nop
 8001556:	e7fd      	b.n	8001554 <UsageFault_Handler+0x4>

08001558 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
	...

08001568 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800156c:	4802      	ldr	r0, [pc, #8]	@ (8001578 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800156e:	f001 fd45 	bl	8002ffc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	200001fc 	.word	0x200001fc

0800157c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return 1;
 8001580:	2301      	movs	r3, #1
}
 8001582:	4618      	mov	r0, r3
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <_kill>:

int _kill(int pid, int sig)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001596:	f006 f803 	bl	80075a0 <__errno>
 800159a:	4603      	mov	r3, r0
 800159c:	2216      	movs	r2, #22
 800159e:	601a      	str	r2, [r3, #0]
  return -1;
 80015a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <_exit>:

void _exit (int status)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f7ff ffe7 	bl	800158c <_kill>
  while (1) {}    /* Make sure we hang here */
 80015be:	bf00      	nop
 80015c0:	e7fd      	b.n	80015be <_exit+0x12>

080015c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b086      	sub	sp, #24
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	60f8      	str	r0, [r7, #12]
 80015ca:	60b9      	str	r1, [r7, #8]
 80015cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ce:	2300      	movs	r3, #0
 80015d0:	617b      	str	r3, [r7, #20]
 80015d2:	e00a      	b.n	80015ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015d4:	f3af 8000 	nop.w
 80015d8:	4601      	mov	r1, r0
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	1c5a      	adds	r2, r3, #1
 80015de:	60ba      	str	r2, [r7, #8]
 80015e0:	b2ca      	uxtb	r2, r1
 80015e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	3301      	adds	r3, #1
 80015e8:	617b      	str	r3, [r7, #20]
 80015ea:	697a      	ldr	r2, [r7, #20]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	dbf0      	blt.n	80015d4 <_read+0x12>
  }

  return len;
 80015f2:	687b      	ldr	r3, [r7, #4]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3718      	adds	r7, #24
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	e009      	b.n	8001622 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	1c5a      	adds	r2, r3, #1
 8001612:	60ba      	str	r2, [r7, #8]
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff fd94 	bl	8001144 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	3301      	adds	r3, #1
 8001620:	617b      	str	r3, [r7, #20]
 8001622:	697a      	ldr	r2, [r7, #20]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	429a      	cmp	r2, r3
 8001628:	dbf1      	blt.n	800160e <_write+0x12>
  }
  return len;
 800162a:	687b      	ldr	r3, [r7, #4]
}
 800162c:	4618      	mov	r0, r3
 800162e:	3718      	adds	r7, #24
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <_close>:

int _close(int file)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800163c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001640:	4618      	mov	r0, r3
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800165c:	605a      	str	r2, [r3, #4]
  return 0;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <_isatty>:

int _isatty(int file)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001674:	2301      	movs	r3, #1
}
 8001676:	4618      	mov	r0, r3
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001682:	b480      	push	{r7}
 8001684:	b085      	sub	sp, #20
 8001686:	af00      	add	r7, sp, #0
 8001688:	60f8      	str	r0, [r7, #12]
 800168a:	60b9      	str	r1, [r7, #8]
 800168c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016a4:	4a14      	ldr	r2, [pc, #80]	@ (80016f8 <_sbrk+0x5c>)
 80016a6:	4b15      	ldr	r3, [pc, #84]	@ (80016fc <_sbrk+0x60>)
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016b0:	4b13      	ldr	r3, [pc, #76]	@ (8001700 <_sbrk+0x64>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d102      	bne.n	80016be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016b8:	4b11      	ldr	r3, [pc, #68]	@ (8001700 <_sbrk+0x64>)
 80016ba:	4a12      	ldr	r2, [pc, #72]	@ (8001704 <_sbrk+0x68>)
 80016bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016be:	4b10      	ldr	r3, [pc, #64]	@ (8001700 <_sbrk+0x64>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4413      	add	r3, r2
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d207      	bcs.n	80016dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016cc:	f005 ff68 	bl	80075a0 <__errno>
 80016d0:	4603      	mov	r3, r0
 80016d2:	220c      	movs	r2, #12
 80016d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016da:	e009      	b.n	80016f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016dc:	4b08      	ldr	r3, [pc, #32]	@ (8001700 <_sbrk+0x64>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016e2:	4b07      	ldr	r3, [pc, #28]	@ (8001700 <_sbrk+0x64>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4413      	add	r3, r2
 80016ea:	4a05      	ldr	r2, [pc, #20]	@ (8001700 <_sbrk+0x64>)
 80016ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ee:	68fb      	ldr	r3, [r7, #12]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20008000 	.word	0x20008000
 80016fc:	00000400 	.word	0x00000400
 8001700:	20000248 	.word	0x20000248
 8001704:	200053a8 	.word	0x200053a8

08001708 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800170c:	4b06      	ldr	r3, [pc, #24]	@ (8001728 <SystemInit+0x20>)
 800170e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001712:	4a05      	ldr	r2, [pc, #20]	@ (8001728 <SystemInit+0x20>)
 8001714:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001718:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001730:	4b22      	ldr	r3, [pc, #136]	@ (80017bc <MX_USART2_UART_Init+0x90>)
 8001732:	4a23      	ldr	r2, [pc, #140]	@ (80017c0 <MX_USART2_UART_Init+0x94>)
 8001734:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001736:	4b21      	ldr	r3, [pc, #132]	@ (80017bc <MX_USART2_UART_Init+0x90>)
 8001738:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800173c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800173e:	4b1f      	ldr	r3, [pc, #124]	@ (80017bc <MX_USART2_UART_Init+0x90>)
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001744:	4b1d      	ldr	r3, [pc, #116]	@ (80017bc <MX_USART2_UART_Init+0x90>)
 8001746:	2200      	movs	r2, #0
 8001748:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800174a:	4b1c      	ldr	r3, [pc, #112]	@ (80017bc <MX_USART2_UART_Init+0x90>)
 800174c:	2200      	movs	r2, #0
 800174e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001750:	4b1a      	ldr	r3, [pc, #104]	@ (80017bc <MX_USART2_UART_Init+0x90>)
 8001752:	220c      	movs	r2, #12
 8001754:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001756:	4b19      	ldr	r3, [pc, #100]	@ (80017bc <MX_USART2_UART_Init+0x90>)
 8001758:	2200      	movs	r2, #0
 800175a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800175c:	4b17      	ldr	r3, [pc, #92]	@ (80017bc <MX_USART2_UART_Init+0x90>)
 800175e:	2200      	movs	r2, #0
 8001760:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001762:	4b16      	ldr	r3, [pc, #88]	@ (80017bc <MX_USART2_UART_Init+0x90>)
 8001764:	2200      	movs	r2, #0
 8001766:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001768:	4b14      	ldr	r3, [pc, #80]	@ (80017bc <MX_USART2_UART_Init+0x90>)
 800176a:	2200      	movs	r2, #0
 800176c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800176e:	4b13      	ldr	r3, [pc, #76]	@ (80017bc <MX_USART2_UART_Init+0x90>)
 8001770:	2200      	movs	r2, #0
 8001772:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001774:	4811      	ldr	r0, [pc, #68]	@ (80017bc <MX_USART2_UART_Init+0x90>)
 8001776:	f001 fe9b 	bl	80034b0 <HAL_UART_Init>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001780:	f7ff fe3a 	bl	80013f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001784:	2100      	movs	r1, #0
 8001786:	480d      	ldr	r0, [pc, #52]	@ (80017bc <MX_USART2_UART_Init+0x90>)
 8001788:	f002 fc94 	bl	80040b4 <HAL_UARTEx_SetTxFifoThreshold>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001792:	f7ff fe31 	bl	80013f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001796:	2100      	movs	r1, #0
 8001798:	4808      	ldr	r0, [pc, #32]	@ (80017bc <MX_USART2_UART_Init+0x90>)
 800179a:	f002 fcc9 	bl	8004130 <HAL_UARTEx_SetRxFifoThreshold>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80017a4:	f7ff fe28 	bl	80013f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80017a8:	4804      	ldr	r0, [pc, #16]	@ (80017bc <MX_USART2_UART_Init+0x90>)
 80017aa:	f002 fc4a 	bl	8004042 <HAL_UARTEx_DisableFifoMode>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80017b4:	f7ff fe20 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	2000024c 	.word	0x2000024c
 80017c0:	40004400 	.word	0x40004400

080017c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b09a      	sub	sp, #104	@ 0x68
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017dc:	f107 0310 	add.w	r3, r7, #16
 80017e0:	2244      	movs	r2, #68	@ 0x44
 80017e2:	2100      	movs	r1, #0
 80017e4:	4618      	mov	r0, r3
 80017e6:	f005 fe33 	bl	8007450 <memset>
  if(uartHandle->Instance==USART2)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a1f      	ldr	r2, [pc, #124]	@ (800186c <HAL_UART_MspInit+0xa8>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d136      	bne.n	8001862 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80017f4:	2302      	movs	r3, #2
 80017f6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017fc:	f107 0310 	add.w	r3, r7, #16
 8001800:	4618      	mov	r0, r3
 8001802:	f001 f93f 	bl	8002a84 <HAL_RCCEx_PeriphCLKConfig>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800180c:	f7ff fdf4 	bl	80013f8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001810:	4b17      	ldr	r3, [pc, #92]	@ (8001870 <HAL_UART_MspInit+0xac>)
 8001812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001814:	4a16      	ldr	r2, [pc, #88]	@ (8001870 <HAL_UART_MspInit+0xac>)
 8001816:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800181a:	6593      	str	r3, [r2, #88]	@ 0x58
 800181c:	4b14      	ldr	r3, [pc, #80]	@ (8001870 <HAL_UART_MspInit+0xac>)
 800181e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001820:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001828:	4b11      	ldr	r3, [pc, #68]	@ (8001870 <HAL_UART_MspInit+0xac>)
 800182a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800182c:	4a10      	ldr	r2, [pc, #64]	@ (8001870 <HAL_UART_MspInit+0xac>)
 800182e:	f043 0301 	orr.w	r3, r3, #1
 8001832:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001834:	4b0e      	ldr	r3, [pc, #56]	@ (8001870 <HAL_UART_MspInit+0xac>)
 8001836:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	60bb      	str	r3, [r7, #8]
 800183e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001840:	230c      	movs	r3, #12
 8001842:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	2302      	movs	r3, #2
 8001846:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184c:	2300      	movs	r3, #0
 800184e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001850:	2307      	movs	r3, #7
 8001852:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001854:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001858:	4619      	mov	r1, r3
 800185a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800185e:	f000 f949 	bl	8001af4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001862:	bf00      	nop
 8001864:	3768      	adds	r7, #104	@ 0x68
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40004400 	.word	0x40004400
 8001870:	40021000 	.word	0x40021000

08001874 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001874:	480d      	ldr	r0, [pc, #52]	@ (80018ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001876:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001878:	f7ff ff46 	bl	8001708 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800187c:	480c      	ldr	r0, [pc, #48]	@ (80018b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800187e:	490d      	ldr	r1, [pc, #52]	@ (80018b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001880:	4a0d      	ldr	r2, [pc, #52]	@ (80018b8 <LoopForever+0xe>)
  movs r3, #0
 8001882:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001884:	e002      	b.n	800188c <LoopCopyDataInit>

08001886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800188a:	3304      	adds	r3, #4

0800188c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800188c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800188e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001890:	d3f9      	bcc.n	8001886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001892:	4a0a      	ldr	r2, [pc, #40]	@ (80018bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001894:	4c0a      	ldr	r4, [pc, #40]	@ (80018c0 <LoopForever+0x16>)
  movs r3, #0
 8001896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001898:	e001      	b.n	800189e <LoopFillZerobss>

0800189a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800189a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800189c:	3204      	adds	r2, #4

0800189e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800189e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a0:	d3fb      	bcc.n	800189a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80018a2:	f005 fe83 	bl	80075ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018a6:	f7ff fd03 	bl	80012b0 <main>

080018aa <LoopForever>:

LoopForever:
    b LoopForever
 80018aa:	e7fe      	b.n	80018aa <LoopForever>
  ldr   r0, =_estack
 80018ac:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80018b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80018b8:	0800b280 	.word	0x0800b280
  ldr r2, =_sbss
 80018bc:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80018c0:	200053a4 	.word	0x200053a4

080018c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018c4:	e7fe      	b.n	80018c4 <ADC1_2_IRQHandler>

080018c6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b082      	sub	sp, #8
 80018ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018cc:	2300      	movs	r3, #0
 80018ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018d0:	2003      	movs	r0, #3
 80018d2:	f000 f8dc 	bl	8001a8e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018d6:	200f      	movs	r0, #15
 80018d8:	f7ff fdbe 	bl	8001458 <HAL_InitTick>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d002      	beq.n	80018e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	71fb      	strb	r3, [r7, #7]
 80018e6:	e001      	b.n	80018ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018e8:	f7ff fd8c 	bl	8001404 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018ec:	79fb      	ldrb	r3, [r7, #7]

}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
	...

080018f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018fc:	4b05      	ldr	r3, [pc, #20]	@ (8001914 <HAL_IncTick+0x1c>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4b05      	ldr	r3, [pc, #20]	@ (8001918 <HAL_IncTick+0x20>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4413      	add	r3, r2
 8001906:	4a03      	ldr	r2, [pc, #12]	@ (8001914 <HAL_IncTick+0x1c>)
 8001908:	6013      	str	r3, [r2, #0]
}
 800190a:	bf00      	nop
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	200002e0 	.word	0x200002e0
 8001918:	20000008 	.word	0x20000008

0800191c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  return uwTick;
 8001920:	4b03      	ldr	r3, [pc, #12]	@ (8001930 <HAL_GetTick+0x14>)
 8001922:	681b      	ldr	r3, [r3, #0]
}
 8001924:	4618      	mov	r0, r3
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	200002e0 	.word	0x200002e0

08001934 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001944:	4b0c      	ldr	r3, [pc, #48]	@ (8001978 <__NVIC_SetPriorityGrouping+0x44>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001950:	4013      	ands	r3, r2
 8001952:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800195c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001960:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001964:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001966:	4a04      	ldr	r2, [pc, #16]	@ (8001978 <__NVIC_SetPriorityGrouping+0x44>)
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	60d3      	str	r3, [r2, #12]
}
 800196c:	bf00      	nop
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001980:	4b04      	ldr	r3, [pc, #16]	@ (8001994 <__NVIC_GetPriorityGrouping+0x18>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	0a1b      	lsrs	r3, r3, #8
 8001986:	f003 0307 	and.w	r3, r3, #7
}
 800198a:	4618      	mov	r0, r3
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	db0b      	blt.n	80019c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	f003 021f 	and.w	r2, r3, #31
 80019b0:	4907      	ldr	r1, [pc, #28]	@ (80019d0 <__NVIC_EnableIRQ+0x38>)
 80019b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b6:	095b      	lsrs	r3, r3, #5
 80019b8:	2001      	movs	r0, #1
 80019ba:	fa00 f202 	lsl.w	r2, r0, r2
 80019be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	e000e100 	.word	0xe000e100

080019d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	6039      	str	r1, [r7, #0]
 80019de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	db0a      	blt.n	80019fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	490c      	ldr	r1, [pc, #48]	@ (8001a20 <__NVIC_SetPriority+0x4c>)
 80019ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f2:	0112      	lsls	r2, r2, #4
 80019f4:	b2d2      	uxtb	r2, r2
 80019f6:	440b      	add	r3, r1
 80019f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019fc:	e00a      	b.n	8001a14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	4908      	ldr	r1, [pc, #32]	@ (8001a24 <__NVIC_SetPriority+0x50>)
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	f003 030f 	and.w	r3, r3, #15
 8001a0a:	3b04      	subs	r3, #4
 8001a0c:	0112      	lsls	r2, r2, #4
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	440b      	add	r3, r1
 8001a12:	761a      	strb	r2, [r3, #24]
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	e000e100 	.word	0xe000e100
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b089      	sub	sp, #36	@ 0x24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f1c3 0307 	rsb	r3, r3, #7
 8001a42:	2b04      	cmp	r3, #4
 8001a44:	bf28      	it	cs
 8001a46:	2304      	movcs	r3, #4
 8001a48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	2b06      	cmp	r3, #6
 8001a50:	d902      	bls.n	8001a58 <NVIC_EncodePriority+0x30>
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	3b03      	subs	r3, #3
 8001a56:	e000      	b.n	8001a5a <NVIC_EncodePriority+0x32>
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	43da      	mvns	r2, r3
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	401a      	ands	r2, r3
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a70:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7a:	43d9      	mvns	r1, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a80:	4313      	orrs	r3, r2
         );
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3724      	adds	r7, #36	@ 0x24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b082      	sub	sp, #8
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff ff4c 	bl	8001934 <__NVIC_SetPriorityGrouping>
}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
 8001ab0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ab2:	f7ff ff63 	bl	800197c <__NVIC_GetPriorityGrouping>
 8001ab6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	68b9      	ldr	r1, [r7, #8]
 8001abc:	6978      	ldr	r0, [r7, #20]
 8001abe:	f7ff ffb3 	bl	8001a28 <NVIC_EncodePriority>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ac8:	4611      	mov	r1, r2
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff ff82 	bl	80019d4 <__NVIC_SetPriority>
}
 8001ad0:	bf00      	nop
 8001ad2:	3718      	adds	r7, #24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff ff56 	bl	8001998 <__NVIC_EnableIRQ>
}
 8001aec:	bf00      	nop
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b087      	sub	sp, #28
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001afe:	2300      	movs	r3, #0
 8001b00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b02:	e15a      	b.n	8001dba <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	2101      	movs	r1, #1
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b10:	4013      	ands	r3, r2
 8001b12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f000 814c 	beq.w	8001db4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 0303 	and.w	r3, r3, #3
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d005      	beq.n	8001b34 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d130      	bne.n	8001b96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	2203      	movs	r2, #3
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	43db      	mvns	r3, r3
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	68da      	ldr	r2, [r3, #12]
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43db      	mvns	r3, r3
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	4013      	ands	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	091b      	lsrs	r3, r3, #4
 8001b80:	f003 0201 	and.w	r2, r3, #1
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	2b03      	cmp	r3, #3
 8001ba0:	d017      	beq.n	8001bd2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	2203      	movs	r2, #3
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	689a      	ldr	r2, [r3, #8]
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d123      	bne.n	8001c26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	08da      	lsrs	r2, r3, #3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	3208      	adds	r2, #8
 8001be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	220f      	movs	r2, #15
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	691a      	ldr	r2, [r3, #16]
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	08da      	lsrs	r2, r3, #3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3208      	adds	r2, #8
 8001c20:	6939      	ldr	r1, [r7, #16]
 8001c22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	2203      	movs	r2, #3
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43db      	mvns	r3, r3
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 0203 	and.w	r2, r3, #3
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 80a6 	beq.w	8001db4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c68:	4b5b      	ldr	r3, [pc, #364]	@ (8001dd8 <HAL_GPIO_Init+0x2e4>)
 8001c6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c6c:	4a5a      	ldr	r2, [pc, #360]	@ (8001dd8 <HAL_GPIO_Init+0x2e4>)
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c74:	4b58      	ldr	r3, [pc, #352]	@ (8001dd8 <HAL_GPIO_Init+0x2e4>)
 8001c76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	60bb      	str	r3, [r7, #8]
 8001c7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c80:	4a56      	ldr	r2, [pc, #344]	@ (8001ddc <HAL_GPIO_Init+0x2e8>)
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	089b      	lsrs	r3, r3, #2
 8001c86:	3302      	adds	r3, #2
 8001c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	220f      	movs	r2, #15
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001caa:	d01f      	beq.n	8001cec <HAL_GPIO_Init+0x1f8>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a4c      	ldr	r2, [pc, #304]	@ (8001de0 <HAL_GPIO_Init+0x2ec>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d019      	beq.n	8001ce8 <HAL_GPIO_Init+0x1f4>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a4b      	ldr	r2, [pc, #300]	@ (8001de4 <HAL_GPIO_Init+0x2f0>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d013      	beq.n	8001ce4 <HAL_GPIO_Init+0x1f0>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a4a      	ldr	r2, [pc, #296]	@ (8001de8 <HAL_GPIO_Init+0x2f4>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d00d      	beq.n	8001ce0 <HAL_GPIO_Init+0x1ec>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a49      	ldr	r2, [pc, #292]	@ (8001dec <HAL_GPIO_Init+0x2f8>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d007      	beq.n	8001cdc <HAL_GPIO_Init+0x1e8>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a48      	ldr	r2, [pc, #288]	@ (8001df0 <HAL_GPIO_Init+0x2fc>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d101      	bne.n	8001cd8 <HAL_GPIO_Init+0x1e4>
 8001cd4:	2305      	movs	r3, #5
 8001cd6:	e00a      	b.n	8001cee <HAL_GPIO_Init+0x1fa>
 8001cd8:	2306      	movs	r3, #6
 8001cda:	e008      	b.n	8001cee <HAL_GPIO_Init+0x1fa>
 8001cdc:	2304      	movs	r3, #4
 8001cde:	e006      	b.n	8001cee <HAL_GPIO_Init+0x1fa>
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e004      	b.n	8001cee <HAL_GPIO_Init+0x1fa>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	e002      	b.n	8001cee <HAL_GPIO_Init+0x1fa>
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e000      	b.n	8001cee <HAL_GPIO_Init+0x1fa>
 8001cec:	2300      	movs	r3, #0
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	f002 0203 	and.w	r2, r2, #3
 8001cf4:	0092      	lsls	r2, r2, #2
 8001cf6:	4093      	lsls	r3, r2
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cfe:	4937      	ldr	r1, [pc, #220]	@ (8001ddc <HAL_GPIO_Init+0x2e8>)
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	089b      	lsrs	r3, r3, #2
 8001d04:	3302      	adds	r3, #2
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d0c:	4b39      	ldr	r3, [pc, #228]	@ (8001df4 <HAL_GPIO_Init+0x300>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	43db      	mvns	r3, r3
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d003      	beq.n	8001d30 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d30:	4a30      	ldr	r2, [pc, #192]	@ (8001df4 <HAL_GPIO_Init+0x300>)
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d36:	4b2f      	ldr	r3, [pc, #188]	@ (8001df4 <HAL_GPIO_Init+0x300>)
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	4013      	ands	r3, r2
 8001d44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d5a:	4a26      	ldr	r2, [pc, #152]	@ (8001df4 <HAL_GPIO_Init+0x300>)
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001d60:	4b24      	ldr	r3, [pc, #144]	@ (8001df4 <HAL_GPIO_Init+0x300>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d003      	beq.n	8001d84 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d84:	4a1b      	ldr	r2, [pc, #108]	@ (8001df4 <HAL_GPIO_Init+0x300>)
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001df4 <HAL_GPIO_Init+0x300>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	43db      	mvns	r3, r3
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	4013      	ands	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001dae:	4a11      	ldr	r2, [pc, #68]	@ (8001df4 <HAL_GPIO_Init+0x300>)
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	3301      	adds	r3, #1
 8001db8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f47f ae9d 	bne.w	8001b04 <HAL_GPIO_Init+0x10>
  }
}
 8001dca:	bf00      	nop
 8001dcc:	bf00      	nop
 8001dce:	371c      	adds	r7, #28
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40010000 	.word	0x40010000
 8001de0:	48000400 	.word	0x48000400
 8001de4:	48000800 	.word	0x48000800
 8001de8:	48000c00 	.word	0x48000c00
 8001dec:	48001000 	.word	0x48001000
 8001df0:	48001400 	.word	0x48001400
 8001df4:	40010400 	.word	0x40010400

08001df8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	460b      	mov	r3, r1
 8001e02:	807b      	strh	r3, [r7, #2]
 8001e04:	4613      	mov	r3, r2
 8001e06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e08:	787b      	ldrb	r3, [r7, #1]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e0e:	887a      	ldrh	r2, [r7, #2]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e14:	e002      	b.n	8001e1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e16:	887a      	ldrh	r2, [r7, #2]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	460b      	mov	r3, r1
 8001e32:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	695b      	ldr	r3, [r3, #20]
 8001e38:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e3a:	887a      	ldrh	r2, [r7, #2]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	041a      	lsls	r2, r3, #16
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	43d9      	mvns	r1, r3
 8001e46:	887b      	ldrh	r3, [r7, #2]
 8001e48:	400b      	ands	r3, r1
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	619a      	str	r2, [r3, #24]
}
 8001e50:	bf00      	nop
 8001e52:	3714      	adds	r7, #20
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d141      	bne.n	8001eee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e6a:	4b4b      	ldr	r3, [pc, #300]	@ (8001f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001e72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e76:	d131      	bne.n	8001edc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e78:	4b47      	ldr	r3, [pc, #284]	@ (8001f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e7e:	4a46      	ldr	r2, [pc, #280]	@ (8001f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e84:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e88:	4b43      	ldr	r3, [pc, #268]	@ (8001f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e90:	4a41      	ldr	r2, [pc, #260]	@ (8001f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e96:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e98:	4b40      	ldr	r3, [pc, #256]	@ (8001f9c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2232      	movs	r2, #50	@ 0x32
 8001e9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ea2:	4a3f      	ldr	r2, [pc, #252]	@ (8001fa0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea8:	0c9b      	lsrs	r3, r3, #18
 8001eaa:	3301      	adds	r3, #1
 8001eac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001eae:	e002      	b.n	8001eb6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001eb6:	4b38      	ldr	r3, [pc, #224]	@ (8001f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ebe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ec2:	d102      	bne.n	8001eca <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f2      	bne.n	8001eb0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001eca:	4b33      	ldr	r3, [pc, #204]	@ (8001f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ed2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ed6:	d158      	bne.n	8001f8a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e057      	b.n	8001f8c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001edc:	4b2e      	ldr	r3, [pc, #184]	@ (8001f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ede:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ee2:	4a2d      	ldr	r2, [pc, #180]	@ (8001f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ee4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ee8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001eec:	e04d      	b.n	8001f8a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ef4:	d141      	bne.n	8001f7a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ef6:	4b28      	ldr	r3, [pc, #160]	@ (8001f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001efe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f02:	d131      	bne.n	8001f68 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f04:	4b24      	ldr	r3, [pc, #144]	@ (8001f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f0a:	4a23      	ldr	r2, [pc, #140]	@ (8001f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f10:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f14:	4b20      	ldr	r3, [pc, #128]	@ (8001f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f1c:	4a1e      	ldr	r2, [pc, #120]	@ (8001f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f22:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f24:	4b1d      	ldr	r3, [pc, #116]	@ (8001f9c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2232      	movs	r2, #50	@ 0x32
 8001f2a:	fb02 f303 	mul.w	r3, r2, r3
 8001f2e:	4a1c      	ldr	r2, [pc, #112]	@ (8001fa0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f30:	fba2 2303 	umull	r2, r3, r2, r3
 8001f34:	0c9b      	lsrs	r3, r3, #18
 8001f36:	3301      	adds	r3, #1
 8001f38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f3a:	e002      	b.n	8001f42 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f42:	4b15      	ldr	r3, [pc, #84]	@ (8001f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f4e:	d102      	bne.n	8001f56 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1f2      	bne.n	8001f3c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f56:	4b10      	ldr	r3, [pc, #64]	@ (8001f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f62:	d112      	bne.n	8001f8a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e011      	b.n	8001f8c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f68:	4b0b      	ldr	r3, [pc, #44]	@ (8001f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f74:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001f78:	e007      	b.n	8001f8a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f7a:	4b07      	ldr	r3, [pc, #28]	@ (8001f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f82:	4a05      	ldr	r2, [pc, #20]	@ (8001f98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f84:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f88:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	40007000 	.word	0x40007000
 8001f9c:	20000000 	.word	0x20000000
 8001fa0:	431bde83 	.word	0x431bde83

08001fa4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001fa8:	4b05      	ldr	r3, [pc, #20]	@ (8001fc0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	4a04      	ldr	r2, [pc, #16]	@ (8001fc0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001fae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fb2:	6093      	str	r3, [r2, #8]
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	40007000 	.word	0x40007000

08001fc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b088      	sub	sp, #32
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e2fe      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d075      	beq.n	80020ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fe2:	4b97      	ldr	r3, [pc, #604]	@ (8002240 <HAL_RCC_OscConfig+0x27c>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 030c 	and.w	r3, r3, #12
 8001fea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fec:	4b94      	ldr	r3, [pc, #592]	@ (8002240 <HAL_RCC_OscConfig+0x27c>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	f003 0303 	and.w	r3, r3, #3
 8001ff4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	2b0c      	cmp	r3, #12
 8001ffa:	d102      	bne.n	8002002 <HAL_RCC_OscConfig+0x3e>
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	2b03      	cmp	r3, #3
 8002000:	d002      	beq.n	8002008 <HAL_RCC_OscConfig+0x44>
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	2b08      	cmp	r3, #8
 8002006:	d10b      	bne.n	8002020 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002008:	4b8d      	ldr	r3, [pc, #564]	@ (8002240 <HAL_RCC_OscConfig+0x27c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d05b      	beq.n	80020cc <HAL_RCC_OscConfig+0x108>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d157      	bne.n	80020cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e2d9      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002028:	d106      	bne.n	8002038 <HAL_RCC_OscConfig+0x74>
 800202a:	4b85      	ldr	r3, [pc, #532]	@ (8002240 <HAL_RCC_OscConfig+0x27c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a84      	ldr	r2, [pc, #528]	@ (8002240 <HAL_RCC_OscConfig+0x27c>)
 8002030:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002034:	6013      	str	r3, [r2, #0]
 8002036:	e01d      	b.n	8002074 <HAL_RCC_OscConfig+0xb0>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002040:	d10c      	bne.n	800205c <HAL_RCC_OscConfig+0x98>
 8002042:	4b7f      	ldr	r3, [pc, #508]	@ (8002240 <HAL_RCC_OscConfig+0x27c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a7e      	ldr	r2, [pc, #504]	@ (8002240 <HAL_RCC_OscConfig+0x27c>)
 8002048:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	4b7c      	ldr	r3, [pc, #496]	@ (8002240 <HAL_RCC_OscConfig+0x27c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a7b      	ldr	r2, [pc, #492]	@ (8002240 <HAL_RCC_OscConfig+0x27c>)
 8002054:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002058:	6013      	str	r3, [r2, #0]
 800205a:	e00b      	b.n	8002074 <HAL_RCC_OscConfig+0xb0>
 800205c:	4b78      	ldr	r3, [pc, #480]	@ (8002240 <HAL_RCC_OscConfig+0x27c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a77      	ldr	r2, [pc, #476]	@ (8002240 <HAL_RCC_OscConfig+0x27c>)
 8002062:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002066:	6013      	str	r3, [r2, #0]
 8002068:	4b75      	ldr	r3, [pc, #468]	@ (8002240 <HAL_RCC_OscConfig+0x27c>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a74      	ldr	r2, [pc, #464]	@ (8002240 <HAL_RCC_OscConfig+0x27c>)
 800206e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002072:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d013      	beq.n	80020a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207c:	f7ff fc4e 	bl	800191c <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002084:	f7ff fc4a 	bl	800191c <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b64      	cmp	r3, #100	@ 0x64
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e29e      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002096:	4b6a      	ldr	r3, [pc, #424]	@ (8002240 <HAL_RCC_OscConfig+0x27c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0f0      	beq.n	8002084 <HAL_RCC_OscConfig+0xc0>
 80020a2:	e014      	b.n	80020ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a4:	f7ff fc3a 	bl	800191c <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020ac:	f7ff fc36 	bl	800191c <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b64      	cmp	r3, #100	@ 0x64
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e28a      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020be:	4b60      	ldr	r3, [pc, #384]	@ (8002240 <HAL_RCC_OscConfig+0x27c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1f0      	bne.n	80020ac <HAL_RCC_OscConfig+0xe8>
 80020ca:	e000      	b.n	80020ce <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d075      	beq.n	80021c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020da:	4b59      	ldr	r3, [pc, #356]	@ (8002240 <HAL_RCC_OscConfig+0x27c>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 030c 	and.w	r3, r3, #12
 80020e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020e4:	4b56      	ldr	r3, [pc, #344]	@ (8002240 <HAL_RCC_OscConfig+0x27c>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	f003 0303 	and.w	r3, r3, #3
 80020ec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	2b0c      	cmp	r3, #12
 80020f2:	d102      	bne.n	80020fa <HAL_RCC_OscConfig+0x136>
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d002      	beq.n	8002100 <HAL_RCC_OscConfig+0x13c>
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	2b04      	cmp	r3, #4
 80020fe:	d11f      	bne.n	8002140 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002100:	4b4f      	ldr	r3, [pc, #316]	@ (8002240 <HAL_RCC_OscConfig+0x27c>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002108:	2b00      	cmp	r3, #0
 800210a:	d005      	beq.n	8002118 <HAL_RCC_OscConfig+0x154>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d101      	bne.n	8002118 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e25d      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002118:	4b49      	ldr	r3, [pc, #292]	@ (8002240 <HAL_RCC_OscConfig+0x27c>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	061b      	lsls	r3, r3, #24
 8002126:	4946      	ldr	r1, [pc, #280]	@ (8002240 <HAL_RCC_OscConfig+0x27c>)
 8002128:	4313      	orrs	r3, r2
 800212a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800212c:	4b45      	ldr	r3, [pc, #276]	@ (8002244 <HAL_RCC_OscConfig+0x280>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff f991 	bl	8001458 <HAL_InitTick>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d043      	beq.n	80021c4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e249      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d023      	beq.n	8002190 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002148:	4b3d      	ldr	r3, [pc, #244]	@ (8002240 <HAL_RCC_OscConfig+0x27c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a3c      	ldr	r2, [pc, #240]	@ (8002240 <HAL_RCC_OscConfig+0x27c>)
 800214e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002152:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002154:	f7ff fbe2 	bl	800191c <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800215c:	f7ff fbde 	bl	800191c <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e232      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800216e:	4b34      	ldr	r3, [pc, #208]	@ (8002240 <HAL_RCC_OscConfig+0x27c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002176:	2b00      	cmp	r3, #0
 8002178:	d0f0      	beq.n	800215c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800217a:	4b31      	ldr	r3, [pc, #196]	@ (8002240 <HAL_RCC_OscConfig+0x27c>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	061b      	lsls	r3, r3, #24
 8002188:	492d      	ldr	r1, [pc, #180]	@ (8002240 <HAL_RCC_OscConfig+0x27c>)
 800218a:	4313      	orrs	r3, r2
 800218c:	604b      	str	r3, [r1, #4]
 800218e:	e01a      	b.n	80021c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002190:	4b2b      	ldr	r3, [pc, #172]	@ (8002240 <HAL_RCC_OscConfig+0x27c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a2a      	ldr	r2, [pc, #168]	@ (8002240 <HAL_RCC_OscConfig+0x27c>)
 8002196:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800219a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219c:	f7ff fbbe 	bl	800191c <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021a4:	f7ff fbba 	bl	800191c <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e20e      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021b6:	4b22      	ldr	r3, [pc, #136]	@ (8002240 <HAL_RCC_OscConfig+0x27c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1f0      	bne.n	80021a4 <HAL_RCC_OscConfig+0x1e0>
 80021c2:	e000      	b.n	80021c6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0308 	and.w	r3, r3, #8
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d041      	beq.n	8002256 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d01c      	beq.n	8002214 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021da:	4b19      	ldr	r3, [pc, #100]	@ (8002240 <HAL_RCC_OscConfig+0x27c>)
 80021dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021e0:	4a17      	ldr	r2, [pc, #92]	@ (8002240 <HAL_RCC_OscConfig+0x27c>)
 80021e2:	f043 0301 	orr.w	r3, r3, #1
 80021e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ea:	f7ff fb97 	bl	800191c <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021f0:	e008      	b.n	8002204 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021f2:	f7ff fb93 	bl	800191c <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e1e7      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002204:	4b0e      	ldr	r3, [pc, #56]	@ (8002240 <HAL_RCC_OscConfig+0x27c>)
 8002206:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d0ef      	beq.n	80021f2 <HAL_RCC_OscConfig+0x22e>
 8002212:	e020      	b.n	8002256 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002214:	4b0a      	ldr	r3, [pc, #40]	@ (8002240 <HAL_RCC_OscConfig+0x27c>)
 8002216:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800221a:	4a09      	ldr	r2, [pc, #36]	@ (8002240 <HAL_RCC_OscConfig+0x27c>)
 800221c:	f023 0301 	bic.w	r3, r3, #1
 8002220:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002224:	f7ff fb7a 	bl	800191c <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800222a:	e00d      	b.n	8002248 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800222c:	f7ff fb76 	bl	800191c <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d906      	bls.n	8002248 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e1ca      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
 800223e:	bf00      	nop
 8002240:	40021000 	.word	0x40021000
 8002244:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002248:	4b8c      	ldr	r3, [pc, #560]	@ (800247c <HAL_RCC_OscConfig+0x4b8>)
 800224a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1ea      	bne.n	800222c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0304 	and.w	r3, r3, #4
 800225e:	2b00      	cmp	r3, #0
 8002260:	f000 80a6 	beq.w	80023b0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002264:	2300      	movs	r3, #0
 8002266:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002268:	4b84      	ldr	r3, [pc, #528]	@ (800247c <HAL_RCC_OscConfig+0x4b8>)
 800226a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800226c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <HAL_RCC_OscConfig+0x2b4>
 8002274:	2301      	movs	r3, #1
 8002276:	e000      	b.n	800227a <HAL_RCC_OscConfig+0x2b6>
 8002278:	2300      	movs	r3, #0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00d      	beq.n	800229a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800227e:	4b7f      	ldr	r3, [pc, #508]	@ (800247c <HAL_RCC_OscConfig+0x4b8>)
 8002280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002282:	4a7e      	ldr	r2, [pc, #504]	@ (800247c <HAL_RCC_OscConfig+0x4b8>)
 8002284:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002288:	6593      	str	r3, [r2, #88]	@ 0x58
 800228a:	4b7c      	ldr	r3, [pc, #496]	@ (800247c <HAL_RCC_OscConfig+0x4b8>)
 800228c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800228e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002296:	2301      	movs	r3, #1
 8002298:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800229a:	4b79      	ldr	r3, [pc, #484]	@ (8002480 <HAL_RCC_OscConfig+0x4bc>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d118      	bne.n	80022d8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022a6:	4b76      	ldr	r3, [pc, #472]	@ (8002480 <HAL_RCC_OscConfig+0x4bc>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a75      	ldr	r2, [pc, #468]	@ (8002480 <HAL_RCC_OscConfig+0x4bc>)
 80022ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022b2:	f7ff fb33 	bl	800191c <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022b8:	e008      	b.n	80022cc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ba:	f7ff fb2f 	bl	800191c <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e183      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022cc:	4b6c      	ldr	r3, [pc, #432]	@ (8002480 <HAL_RCC_OscConfig+0x4bc>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d0f0      	beq.n	80022ba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d108      	bne.n	80022f2 <HAL_RCC_OscConfig+0x32e>
 80022e0:	4b66      	ldr	r3, [pc, #408]	@ (800247c <HAL_RCC_OscConfig+0x4b8>)
 80022e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022e6:	4a65      	ldr	r2, [pc, #404]	@ (800247c <HAL_RCC_OscConfig+0x4b8>)
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80022f0:	e024      	b.n	800233c <HAL_RCC_OscConfig+0x378>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	2b05      	cmp	r3, #5
 80022f8:	d110      	bne.n	800231c <HAL_RCC_OscConfig+0x358>
 80022fa:	4b60      	ldr	r3, [pc, #384]	@ (800247c <HAL_RCC_OscConfig+0x4b8>)
 80022fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002300:	4a5e      	ldr	r2, [pc, #376]	@ (800247c <HAL_RCC_OscConfig+0x4b8>)
 8002302:	f043 0304 	orr.w	r3, r3, #4
 8002306:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800230a:	4b5c      	ldr	r3, [pc, #368]	@ (800247c <HAL_RCC_OscConfig+0x4b8>)
 800230c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002310:	4a5a      	ldr	r2, [pc, #360]	@ (800247c <HAL_RCC_OscConfig+0x4b8>)
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800231a:	e00f      	b.n	800233c <HAL_RCC_OscConfig+0x378>
 800231c:	4b57      	ldr	r3, [pc, #348]	@ (800247c <HAL_RCC_OscConfig+0x4b8>)
 800231e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002322:	4a56      	ldr	r2, [pc, #344]	@ (800247c <HAL_RCC_OscConfig+0x4b8>)
 8002324:	f023 0301 	bic.w	r3, r3, #1
 8002328:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800232c:	4b53      	ldr	r3, [pc, #332]	@ (800247c <HAL_RCC_OscConfig+0x4b8>)
 800232e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002332:	4a52      	ldr	r2, [pc, #328]	@ (800247c <HAL_RCC_OscConfig+0x4b8>)
 8002334:	f023 0304 	bic.w	r3, r3, #4
 8002338:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d016      	beq.n	8002372 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002344:	f7ff faea 	bl	800191c <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800234a:	e00a      	b.n	8002362 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800234c:	f7ff fae6 	bl	800191c <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	f241 3288 	movw	r2, #5000	@ 0x1388
 800235a:	4293      	cmp	r3, r2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e138      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002362:	4b46      	ldr	r3, [pc, #280]	@ (800247c <HAL_RCC_OscConfig+0x4b8>)
 8002364:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0ed      	beq.n	800234c <HAL_RCC_OscConfig+0x388>
 8002370:	e015      	b.n	800239e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002372:	f7ff fad3 	bl	800191c <HAL_GetTick>
 8002376:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002378:	e00a      	b.n	8002390 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800237a:	f7ff facf 	bl	800191c <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002388:	4293      	cmp	r3, r2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e121      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002390:	4b3a      	ldr	r3, [pc, #232]	@ (800247c <HAL_RCC_OscConfig+0x4b8>)
 8002392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1ed      	bne.n	800237a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800239e:	7ffb      	ldrb	r3, [r7, #31]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d105      	bne.n	80023b0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023a4:	4b35      	ldr	r3, [pc, #212]	@ (800247c <HAL_RCC_OscConfig+0x4b8>)
 80023a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a8:	4a34      	ldr	r2, [pc, #208]	@ (800247c <HAL_RCC_OscConfig+0x4b8>)
 80023aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023ae:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0320 	and.w	r3, r3, #32
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d03c      	beq.n	8002436 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d01c      	beq.n	80023fe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80023c4:	4b2d      	ldr	r3, [pc, #180]	@ (800247c <HAL_RCC_OscConfig+0x4b8>)
 80023c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023ca:	4a2c      	ldr	r2, [pc, #176]	@ (800247c <HAL_RCC_OscConfig+0x4b8>)
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d4:	f7ff faa2 	bl	800191c <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023dc:	f7ff fa9e 	bl	800191c <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e0f2      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023ee:	4b23      	ldr	r3, [pc, #140]	@ (800247c <HAL_RCC_OscConfig+0x4b8>)
 80023f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d0ef      	beq.n	80023dc <HAL_RCC_OscConfig+0x418>
 80023fc:	e01b      	b.n	8002436 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023fe:	4b1f      	ldr	r3, [pc, #124]	@ (800247c <HAL_RCC_OscConfig+0x4b8>)
 8002400:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002404:	4a1d      	ldr	r2, [pc, #116]	@ (800247c <HAL_RCC_OscConfig+0x4b8>)
 8002406:	f023 0301 	bic.w	r3, r3, #1
 800240a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800240e:	f7ff fa85 	bl	800191c <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002416:	f7ff fa81 	bl	800191c <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e0d5      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002428:	4b14      	ldr	r3, [pc, #80]	@ (800247c <HAL_RCC_OscConfig+0x4b8>)
 800242a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1ef      	bne.n	8002416 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 80c9 	beq.w	80025d2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002440:	4b0e      	ldr	r3, [pc, #56]	@ (800247c <HAL_RCC_OscConfig+0x4b8>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f003 030c 	and.w	r3, r3, #12
 8002448:	2b0c      	cmp	r3, #12
 800244a:	f000 8083 	beq.w	8002554 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	2b02      	cmp	r3, #2
 8002454:	d15e      	bne.n	8002514 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002456:	4b09      	ldr	r3, [pc, #36]	@ (800247c <HAL_RCC_OscConfig+0x4b8>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a08      	ldr	r2, [pc, #32]	@ (800247c <HAL_RCC_OscConfig+0x4b8>)
 800245c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002460:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002462:	f7ff fa5b 	bl	800191c <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002468:	e00c      	b.n	8002484 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800246a:	f7ff fa57 	bl	800191c <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d905      	bls.n	8002484 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e0ab      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
 800247c:	40021000 	.word	0x40021000
 8002480:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002484:	4b55      	ldr	r3, [pc, #340]	@ (80025dc <HAL_RCC_OscConfig+0x618>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1ec      	bne.n	800246a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002490:	4b52      	ldr	r3, [pc, #328]	@ (80025dc <HAL_RCC_OscConfig+0x618>)
 8002492:	68da      	ldr	r2, [r3, #12]
 8002494:	4b52      	ldr	r3, [pc, #328]	@ (80025e0 <HAL_RCC_OscConfig+0x61c>)
 8002496:	4013      	ands	r3, r2
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	6a11      	ldr	r1, [r2, #32]
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80024a0:	3a01      	subs	r2, #1
 80024a2:	0112      	lsls	r2, r2, #4
 80024a4:	4311      	orrs	r1, r2
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80024aa:	0212      	lsls	r2, r2, #8
 80024ac:	4311      	orrs	r1, r2
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80024b2:	0852      	lsrs	r2, r2, #1
 80024b4:	3a01      	subs	r2, #1
 80024b6:	0552      	lsls	r2, r2, #21
 80024b8:	4311      	orrs	r1, r2
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80024be:	0852      	lsrs	r2, r2, #1
 80024c0:	3a01      	subs	r2, #1
 80024c2:	0652      	lsls	r2, r2, #25
 80024c4:	4311      	orrs	r1, r2
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80024ca:	06d2      	lsls	r2, r2, #27
 80024cc:	430a      	orrs	r2, r1
 80024ce:	4943      	ldr	r1, [pc, #268]	@ (80025dc <HAL_RCC_OscConfig+0x618>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024d4:	4b41      	ldr	r3, [pc, #260]	@ (80025dc <HAL_RCC_OscConfig+0x618>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a40      	ldr	r2, [pc, #256]	@ (80025dc <HAL_RCC_OscConfig+0x618>)
 80024da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024de:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024e0:	4b3e      	ldr	r3, [pc, #248]	@ (80025dc <HAL_RCC_OscConfig+0x618>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	4a3d      	ldr	r2, [pc, #244]	@ (80025dc <HAL_RCC_OscConfig+0x618>)
 80024e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024ea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ec:	f7ff fa16 	bl	800191c <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f4:	f7ff fa12 	bl	800191c <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e066      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002506:	4b35      	ldr	r3, [pc, #212]	@ (80025dc <HAL_RCC_OscConfig+0x618>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0f0      	beq.n	80024f4 <HAL_RCC_OscConfig+0x530>
 8002512:	e05e      	b.n	80025d2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002514:	4b31      	ldr	r3, [pc, #196]	@ (80025dc <HAL_RCC_OscConfig+0x618>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a30      	ldr	r2, [pc, #192]	@ (80025dc <HAL_RCC_OscConfig+0x618>)
 800251a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800251e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002520:	f7ff f9fc 	bl	800191c <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002528:	f7ff f9f8 	bl	800191c <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e04c      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800253a:	4b28      	ldr	r3, [pc, #160]	@ (80025dc <HAL_RCC_OscConfig+0x618>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f0      	bne.n	8002528 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002546:	4b25      	ldr	r3, [pc, #148]	@ (80025dc <HAL_RCC_OscConfig+0x618>)
 8002548:	68da      	ldr	r2, [r3, #12]
 800254a:	4924      	ldr	r1, [pc, #144]	@ (80025dc <HAL_RCC_OscConfig+0x618>)
 800254c:	4b25      	ldr	r3, [pc, #148]	@ (80025e4 <HAL_RCC_OscConfig+0x620>)
 800254e:	4013      	ands	r3, r2
 8002550:	60cb      	str	r3, [r1, #12]
 8002552:	e03e      	b.n	80025d2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	69db      	ldr	r3, [r3, #28]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d101      	bne.n	8002560 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e039      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002560:	4b1e      	ldr	r3, [pc, #120]	@ (80025dc <HAL_RCC_OscConfig+0x618>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	f003 0203 	and.w	r2, r3, #3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	429a      	cmp	r2, r3
 8002572:	d12c      	bne.n	80025ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257e:	3b01      	subs	r3, #1
 8002580:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002582:	429a      	cmp	r2, r3
 8002584:	d123      	bne.n	80025ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002590:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002592:	429a      	cmp	r2, r3
 8002594:	d11b      	bne.n	80025ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d113      	bne.n	80025ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b0:	085b      	lsrs	r3, r3, #1
 80025b2:	3b01      	subs	r3, #1
 80025b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d109      	bne.n	80025ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025c4:	085b      	lsrs	r3, r3, #1
 80025c6:	3b01      	subs	r3, #1
 80025c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d001      	beq.n	80025d2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e000      	b.n	80025d4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3720      	adds	r7, #32
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40021000 	.word	0x40021000
 80025e0:	019f800c 	.word	0x019f800c
 80025e4:	feeefffc 	.word	0xfeeefffc

080025e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80025f2:	2300      	movs	r3, #0
 80025f4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e11e      	b.n	800283e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002600:	4b91      	ldr	r3, [pc, #580]	@ (8002848 <HAL_RCC_ClockConfig+0x260>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 030f 	and.w	r3, r3, #15
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	d910      	bls.n	8002630 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260e:	4b8e      	ldr	r3, [pc, #568]	@ (8002848 <HAL_RCC_ClockConfig+0x260>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f023 020f 	bic.w	r2, r3, #15
 8002616:	498c      	ldr	r1, [pc, #560]	@ (8002848 <HAL_RCC_ClockConfig+0x260>)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	4313      	orrs	r3, r2
 800261c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800261e:	4b8a      	ldr	r3, [pc, #552]	@ (8002848 <HAL_RCC_ClockConfig+0x260>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	429a      	cmp	r2, r3
 800262a:	d001      	beq.n	8002630 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e106      	b.n	800283e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	2b00      	cmp	r3, #0
 800263a:	d073      	beq.n	8002724 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b03      	cmp	r3, #3
 8002642:	d129      	bne.n	8002698 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002644:	4b81      	ldr	r3, [pc, #516]	@ (800284c <HAL_RCC_ClockConfig+0x264>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e0f4      	b.n	800283e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002654:	f000 f9d0 	bl	80029f8 <RCC_GetSysClockFreqFromPLLSource>
 8002658:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	4a7c      	ldr	r2, [pc, #496]	@ (8002850 <HAL_RCC_ClockConfig+0x268>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d93f      	bls.n	80026e2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002662:	4b7a      	ldr	r3, [pc, #488]	@ (800284c <HAL_RCC_ClockConfig+0x264>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d009      	beq.n	8002682 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002676:	2b00      	cmp	r3, #0
 8002678:	d033      	beq.n	80026e2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800267e:	2b00      	cmp	r3, #0
 8002680:	d12f      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002682:	4b72      	ldr	r3, [pc, #456]	@ (800284c <HAL_RCC_ClockConfig+0x264>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800268a:	4a70      	ldr	r2, [pc, #448]	@ (800284c <HAL_RCC_ClockConfig+0x264>)
 800268c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002690:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002692:	2380      	movs	r3, #128	@ 0x80
 8002694:	617b      	str	r3, [r7, #20]
 8002696:	e024      	b.n	80026e2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b02      	cmp	r3, #2
 800269e:	d107      	bne.n	80026b0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026a0:	4b6a      	ldr	r3, [pc, #424]	@ (800284c <HAL_RCC_ClockConfig+0x264>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d109      	bne.n	80026c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e0c6      	b.n	800283e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026b0:	4b66      	ldr	r3, [pc, #408]	@ (800284c <HAL_RCC_ClockConfig+0x264>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e0be      	b.n	800283e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80026c0:	f000 f8ce 	bl	8002860 <HAL_RCC_GetSysClockFreq>
 80026c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4a61      	ldr	r2, [pc, #388]	@ (8002850 <HAL_RCC_ClockConfig+0x268>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d909      	bls.n	80026e2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80026ce:	4b5f      	ldr	r3, [pc, #380]	@ (800284c <HAL_RCC_ClockConfig+0x264>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80026d6:	4a5d      	ldr	r2, [pc, #372]	@ (800284c <HAL_RCC_ClockConfig+0x264>)
 80026d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026dc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80026de:	2380      	movs	r3, #128	@ 0x80
 80026e0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026e2:	4b5a      	ldr	r3, [pc, #360]	@ (800284c <HAL_RCC_ClockConfig+0x264>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f023 0203 	bic.w	r2, r3, #3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	4957      	ldr	r1, [pc, #348]	@ (800284c <HAL_RCC_ClockConfig+0x264>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026f4:	f7ff f912 	bl	800191c <HAL_GetTick>
 80026f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fa:	e00a      	b.n	8002712 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026fc:	f7ff f90e 	bl	800191c <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	f241 3288 	movw	r2, #5000	@ 0x1388
 800270a:	4293      	cmp	r3, r2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e095      	b.n	800283e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002712:	4b4e      	ldr	r3, [pc, #312]	@ (800284c <HAL_RCC_ClockConfig+0x264>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 020c 	and.w	r2, r3, #12
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	429a      	cmp	r2, r3
 8002722:	d1eb      	bne.n	80026fc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d023      	beq.n	8002778 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	2b00      	cmp	r3, #0
 800273a:	d005      	beq.n	8002748 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800273c:	4b43      	ldr	r3, [pc, #268]	@ (800284c <HAL_RCC_ClockConfig+0x264>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	4a42      	ldr	r2, [pc, #264]	@ (800284c <HAL_RCC_ClockConfig+0x264>)
 8002742:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002746:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0308 	and.w	r3, r3, #8
 8002750:	2b00      	cmp	r3, #0
 8002752:	d007      	beq.n	8002764 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002754:	4b3d      	ldr	r3, [pc, #244]	@ (800284c <HAL_RCC_ClockConfig+0x264>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800275c:	4a3b      	ldr	r2, [pc, #236]	@ (800284c <HAL_RCC_ClockConfig+0x264>)
 800275e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002762:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002764:	4b39      	ldr	r3, [pc, #228]	@ (800284c <HAL_RCC_ClockConfig+0x264>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	4936      	ldr	r1, [pc, #216]	@ (800284c <HAL_RCC_ClockConfig+0x264>)
 8002772:	4313      	orrs	r3, r2
 8002774:	608b      	str	r3, [r1, #8]
 8002776:	e008      	b.n	800278a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	2b80      	cmp	r3, #128	@ 0x80
 800277c:	d105      	bne.n	800278a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800277e:	4b33      	ldr	r3, [pc, #204]	@ (800284c <HAL_RCC_ClockConfig+0x264>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	4a32      	ldr	r2, [pc, #200]	@ (800284c <HAL_RCC_ClockConfig+0x264>)
 8002784:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002788:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800278a:	4b2f      	ldr	r3, [pc, #188]	@ (8002848 <HAL_RCC_ClockConfig+0x260>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	429a      	cmp	r2, r3
 8002796:	d21d      	bcs.n	80027d4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002798:	4b2b      	ldr	r3, [pc, #172]	@ (8002848 <HAL_RCC_ClockConfig+0x260>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f023 020f 	bic.w	r2, r3, #15
 80027a0:	4929      	ldr	r1, [pc, #164]	@ (8002848 <HAL_RCC_ClockConfig+0x260>)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80027a8:	f7ff f8b8 	bl	800191c <HAL_GetTick>
 80027ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ae:	e00a      	b.n	80027c6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b0:	f7ff f8b4 	bl	800191c <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027be:	4293      	cmp	r3, r2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e03b      	b.n	800283e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c6:	4b20      	ldr	r3, [pc, #128]	@ (8002848 <HAL_RCC_ClockConfig+0x260>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 030f 	and.w	r3, r3, #15
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d1ed      	bne.n	80027b0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0304 	and.w	r3, r3, #4
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d008      	beq.n	80027f2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027e0:	4b1a      	ldr	r3, [pc, #104]	@ (800284c <HAL_RCC_ClockConfig+0x264>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	4917      	ldr	r1, [pc, #92]	@ (800284c <HAL_RCC_ClockConfig+0x264>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0308 	and.w	r3, r3, #8
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d009      	beq.n	8002812 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027fe:	4b13      	ldr	r3, [pc, #76]	@ (800284c <HAL_RCC_ClockConfig+0x264>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	490f      	ldr	r1, [pc, #60]	@ (800284c <HAL_RCC_ClockConfig+0x264>)
 800280e:	4313      	orrs	r3, r2
 8002810:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002812:	f000 f825 	bl	8002860 <HAL_RCC_GetSysClockFreq>
 8002816:	4602      	mov	r2, r0
 8002818:	4b0c      	ldr	r3, [pc, #48]	@ (800284c <HAL_RCC_ClockConfig+0x264>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	091b      	lsrs	r3, r3, #4
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	490c      	ldr	r1, [pc, #48]	@ (8002854 <HAL_RCC_ClockConfig+0x26c>)
 8002824:	5ccb      	ldrb	r3, [r1, r3]
 8002826:	f003 031f 	and.w	r3, r3, #31
 800282a:	fa22 f303 	lsr.w	r3, r2, r3
 800282e:	4a0a      	ldr	r2, [pc, #40]	@ (8002858 <HAL_RCC_ClockConfig+0x270>)
 8002830:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002832:	4b0a      	ldr	r3, [pc, #40]	@ (800285c <HAL_RCC_ClockConfig+0x274>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f7fe fe0e 	bl	8001458 <HAL_InitTick>
 800283c:	4603      	mov	r3, r0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3718      	adds	r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40022000 	.word	0x40022000
 800284c:	40021000 	.word	0x40021000
 8002850:	04c4b400 	.word	0x04c4b400
 8002854:	0800ae00 	.word	0x0800ae00
 8002858:	20000000 	.word	0x20000000
 800285c:	20000004 	.word	0x20000004

08002860 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002860:	b480      	push	{r7}
 8002862:	b087      	sub	sp, #28
 8002864:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002866:	4b2c      	ldr	r3, [pc, #176]	@ (8002918 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 030c 	and.w	r3, r3, #12
 800286e:	2b04      	cmp	r3, #4
 8002870:	d102      	bne.n	8002878 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002872:	4b2a      	ldr	r3, [pc, #168]	@ (800291c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002874:	613b      	str	r3, [r7, #16]
 8002876:	e047      	b.n	8002908 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002878:	4b27      	ldr	r3, [pc, #156]	@ (8002918 <HAL_RCC_GetSysClockFreq+0xb8>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f003 030c 	and.w	r3, r3, #12
 8002880:	2b08      	cmp	r3, #8
 8002882:	d102      	bne.n	800288a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002884:	4b26      	ldr	r3, [pc, #152]	@ (8002920 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002886:	613b      	str	r3, [r7, #16]
 8002888:	e03e      	b.n	8002908 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800288a:	4b23      	ldr	r3, [pc, #140]	@ (8002918 <HAL_RCC_GetSysClockFreq+0xb8>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f003 030c 	and.w	r3, r3, #12
 8002892:	2b0c      	cmp	r3, #12
 8002894:	d136      	bne.n	8002904 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002896:	4b20      	ldr	r3, [pc, #128]	@ (8002918 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	f003 0303 	and.w	r3, r3, #3
 800289e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002918 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	091b      	lsrs	r3, r3, #4
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	3301      	adds	r3, #1
 80028ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2b03      	cmp	r3, #3
 80028b2:	d10c      	bne.n	80028ce <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028b4:	4a1a      	ldr	r2, [pc, #104]	@ (8002920 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028bc:	4a16      	ldr	r2, [pc, #88]	@ (8002918 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028be:	68d2      	ldr	r2, [r2, #12]
 80028c0:	0a12      	lsrs	r2, r2, #8
 80028c2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80028c6:	fb02 f303 	mul.w	r3, r2, r3
 80028ca:	617b      	str	r3, [r7, #20]
      break;
 80028cc:	e00c      	b.n	80028e8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028ce:	4a13      	ldr	r2, [pc, #76]	@ (800291c <HAL_RCC_GetSysClockFreq+0xbc>)
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d6:	4a10      	ldr	r2, [pc, #64]	@ (8002918 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028d8:	68d2      	ldr	r2, [r2, #12]
 80028da:	0a12      	lsrs	r2, r2, #8
 80028dc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80028e0:	fb02 f303 	mul.w	r3, r2, r3
 80028e4:	617b      	str	r3, [r7, #20]
      break;
 80028e6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002918 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	0e5b      	lsrs	r3, r3, #25
 80028ee:	f003 0303 	and.w	r3, r3, #3
 80028f2:	3301      	adds	r3, #1
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002900:	613b      	str	r3, [r7, #16]
 8002902:	e001      	b.n	8002908 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002904:	2300      	movs	r3, #0
 8002906:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002908:	693b      	ldr	r3, [r7, #16]
}
 800290a:	4618      	mov	r0, r3
 800290c:	371c      	adds	r7, #28
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	40021000 	.word	0x40021000
 800291c:	00f42400 	.word	0x00f42400
 8002920:	016e3600 	.word	0x016e3600

08002924 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002928:	4b03      	ldr	r3, [pc, #12]	@ (8002938 <HAL_RCC_GetHCLKFreq+0x14>)
 800292a:	681b      	ldr	r3, [r3, #0]
}
 800292c:	4618      	mov	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	20000000 	.word	0x20000000

0800293c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002940:	f7ff fff0 	bl	8002924 <HAL_RCC_GetHCLKFreq>
 8002944:	4602      	mov	r2, r0
 8002946:	4b06      	ldr	r3, [pc, #24]	@ (8002960 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	0a1b      	lsrs	r3, r3, #8
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	4904      	ldr	r1, [pc, #16]	@ (8002964 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002952:	5ccb      	ldrb	r3, [r1, r3]
 8002954:	f003 031f 	and.w	r3, r3, #31
 8002958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800295c:	4618      	mov	r0, r3
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40021000 	.word	0x40021000
 8002964:	0800ae10 	.word	0x0800ae10

08002968 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800296c:	f7ff ffda 	bl	8002924 <HAL_RCC_GetHCLKFreq>
 8002970:	4602      	mov	r2, r0
 8002972:	4b06      	ldr	r3, [pc, #24]	@ (800298c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	0adb      	lsrs	r3, r3, #11
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	4904      	ldr	r1, [pc, #16]	@ (8002990 <HAL_RCC_GetPCLK2Freq+0x28>)
 800297e:	5ccb      	ldrb	r3, [r1, r3]
 8002980:	f003 031f 	and.w	r3, r3, #31
 8002984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002988:	4618      	mov	r0, r3
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40021000 	.word	0x40021000
 8002990:	0800ae10 	.word	0x0800ae10

08002994 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	220f      	movs	r2, #15
 80029a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80029a4:	4b12      	ldr	r3, [pc, #72]	@ (80029f0 <HAL_RCC_GetClockConfig+0x5c>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f003 0203 	and.w	r2, r3, #3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80029b0:	4b0f      	ldr	r3, [pc, #60]	@ (80029f0 <HAL_RCC_GetClockConfig+0x5c>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80029bc:	4b0c      	ldr	r3, [pc, #48]	@ (80029f0 <HAL_RCC_GetClockConfig+0x5c>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80029c8:	4b09      	ldr	r3, [pc, #36]	@ (80029f0 <HAL_RCC_GetClockConfig+0x5c>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	08db      	lsrs	r3, r3, #3
 80029ce:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80029d6:	4b07      	ldr	r3, [pc, #28]	@ (80029f4 <HAL_RCC_GetClockConfig+0x60>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 020f 	and.w	r2, r3, #15
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	601a      	str	r2, [r3, #0]
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40021000 	.word	0x40021000
 80029f4:	40022000 	.word	0x40022000

080029f8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b087      	sub	sp, #28
 80029fc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002a78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a08:	4b1b      	ldr	r3, [pc, #108]	@ (8002a78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	091b      	lsrs	r3, r3, #4
 8002a0e:	f003 030f 	and.w	r3, r3, #15
 8002a12:	3301      	adds	r3, #1
 8002a14:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	2b03      	cmp	r3, #3
 8002a1a:	d10c      	bne.n	8002a36 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a1c:	4a17      	ldr	r2, [pc, #92]	@ (8002a7c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a24:	4a14      	ldr	r2, [pc, #80]	@ (8002a78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a26:	68d2      	ldr	r2, [r2, #12]
 8002a28:	0a12      	lsrs	r2, r2, #8
 8002a2a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a2e:	fb02 f303 	mul.w	r3, r2, r3
 8002a32:	617b      	str	r3, [r7, #20]
    break;
 8002a34:	e00c      	b.n	8002a50 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a36:	4a12      	ldr	r2, [pc, #72]	@ (8002a80 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a3e:	4a0e      	ldr	r2, [pc, #56]	@ (8002a78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a40:	68d2      	ldr	r2, [r2, #12]
 8002a42:	0a12      	lsrs	r2, r2, #8
 8002a44:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a48:	fb02 f303 	mul.w	r3, r2, r3
 8002a4c:	617b      	str	r3, [r7, #20]
    break;
 8002a4e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a50:	4b09      	ldr	r3, [pc, #36]	@ (8002a78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	0e5b      	lsrs	r3, r3, #25
 8002a56:	f003 0303 	and.w	r3, r3, #3
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a68:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002a6a:	687b      	ldr	r3, [r7, #4]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	371c      	adds	r7, #28
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	016e3600 	.word	0x016e3600
 8002a80:	00f42400 	.word	0x00f42400

08002a84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a90:	2300      	movs	r3, #0
 8002a92:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 8098 	beq.w	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aa6:	4b43      	ldr	r3, [pc, #268]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10d      	bne.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ab2:	4b40      	ldr	r3, [pc, #256]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ab6:	4a3f      	ldr	r2, [pc, #252]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ab8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002abc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002abe:	4b3d      	ldr	r3, [pc, #244]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ac2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ac6:	60bb      	str	r3, [r7, #8]
 8002ac8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aca:	2301      	movs	r3, #1
 8002acc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ace:	4b3a      	ldr	r3, [pc, #232]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a39      	ldr	r2, [pc, #228]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ad4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ad8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ada:	f7fe ff1f 	bl	800191c <HAL_GetTick>
 8002ade:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ae0:	e009      	b.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ae2:	f7fe ff1b 	bl	800191c <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d902      	bls.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	74fb      	strb	r3, [r7, #19]
        break;
 8002af4:	e005      	b.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002af6:	4b30      	ldr	r3, [pc, #192]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d0ef      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002b02:	7cfb      	ldrb	r3, [r7, #19]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d159      	bne.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b08:	4b2a      	ldr	r3, [pc, #168]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b12:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d01e      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d019      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b24:	4b23      	ldr	r3, [pc, #140]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b2e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b30:	4b20      	ldr	r3, [pc, #128]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b36:	4a1f      	ldr	r2, [pc, #124]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b40:	4b1c      	ldr	r3, [pc, #112]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b46:	4a1b      	ldr	r2, [pc, #108]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b50:	4a18      	ldr	r2, [pc, #96]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d016      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b62:	f7fe fedb 	bl	800191c <HAL_GetTick>
 8002b66:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b68:	e00b      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b6a:	f7fe fed7 	bl	800191c <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d902      	bls.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	74fb      	strb	r3, [r7, #19]
            break;
 8002b80:	e006      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b82:	4b0c      	ldr	r3, [pc, #48]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0ec      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002b90:	7cfb      	ldrb	r3, [r7, #19]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10b      	bne.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b96:	4b07      	ldr	r3, [pc, #28]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b9c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba4:	4903      	ldr	r1, [pc, #12]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002bac:	e008      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bae:	7cfb      	ldrb	r3, [r7, #19]
 8002bb0:	74bb      	strb	r3, [r7, #18]
 8002bb2:	e005      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bbc:	7cfb      	ldrb	r3, [r7, #19]
 8002bbe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bc0:	7c7b      	ldrb	r3, [r7, #17]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d105      	bne.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bc6:	4ba6      	ldr	r3, [pc, #664]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bca:	4aa5      	ldr	r2, [pc, #660]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bcc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bd0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00a      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bde:	4ba0      	ldr	r3, [pc, #640]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002be4:	f023 0203 	bic.w	r2, r3, #3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	499c      	ldr	r1, [pc, #624]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00a      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c00:	4b97      	ldr	r3, [pc, #604]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c06:	f023 020c 	bic.w	r2, r3, #12
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	4994      	ldr	r1, [pc, #592]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0304 	and.w	r3, r3, #4
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00a      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c22:	4b8f      	ldr	r3, [pc, #572]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c28:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	498b      	ldr	r1, [pc, #556]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0308 	and.w	r3, r3, #8
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00a      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c44:	4b86      	ldr	r3, [pc, #536]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c4a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	4983      	ldr	r1, [pc, #524]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0320 	and.w	r3, r3, #32
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00a      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c66:	4b7e      	ldr	r3, [pc, #504]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c6c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	497a      	ldr	r1, [pc, #488]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00a      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c88:	4b75      	ldr	r3, [pc, #468]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c8e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	4972      	ldr	r1, [pc, #456]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00a      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002caa:	4b6d      	ldr	r3, [pc, #436]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cb0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	69db      	ldr	r3, [r3, #28]
 8002cb8:	4969      	ldr	r1, [pc, #420]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00a      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ccc:	4b64      	ldr	r3, [pc, #400]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cd2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	4961      	ldr	r1, [pc, #388]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00a      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cee:	4b5c      	ldr	r3, [pc, #368]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cf4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfc:	4958      	ldr	r1, [pc, #352]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d015      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d10:	4b53      	ldr	r3, [pc, #332]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d16:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d1e:	4950      	ldr	r1, [pc, #320]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d2e:	d105      	bne.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d30:	4b4b      	ldr	r3, [pc, #300]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	4a4a      	ldr	r2, [pc, #296]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d3a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d015      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d48:	4b45      	ldr	r3, [pc, #276]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d4e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d56:	4942      	ldr	r1, [pc, #264]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d66:	d105      	bne.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d68:	4b3d      	ldr	r3, [pc, #244]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	4a3c      	ldr	r2, [pc, #240]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d72:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d015      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002d80:	4b37      	ldr	r3, [pc, #220]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d86:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d8e:	4934      	ldr	r1, [pc, #208]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d9e:	d105      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002da0:	4b2f      	ldr	r3, [pc, #188]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	4a2e      	ldr	r2, [pc, #184]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002da6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002daa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d015      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002db8:	4b29      	ldr	r3, [pc, #164]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dbe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dc6:	4926      	ldr	r1, [pc, #152]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dd2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002dd6:	d105      	bne.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dd8:	4b21      	ldr	r3, [pc, #132]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	4a20      	ldr	r2, [pc, #128]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002de2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d015      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002df0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002df6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dfe:	4918      	ldr	r1, [pc, #96]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e0e:	d105      	bne.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e10:	4b13      	ldr	r3, [pc, #76]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	4a12      	ldr	r2, [pc, #72]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e1a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d015      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002e28:	4b0d      	ldr	r3, [pc, #52]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e2e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e36:	490a      	ldr	r1, [pc, #40]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e46:	d105      	bne.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002e48:	4b05      	ldr	r3, [pc, #20]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	4a04      	ldr	r2, [pc, #16]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e52:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002e54:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3718      	adds	r7, #24
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	40021000 	.word	0x40021000

08002e64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e049      	b.n	8002f0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d106      	bne.n	8002e90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f841 	bl	8002f12 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2202      	movs	r2, #2
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	3304      	adds	r3, #4
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	4610      	mov	r0, r2
 8002ea4:	f000 fa22 	bl	80032ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
	...

08002f28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d001      	beq.n	8002f40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e04a      	b.n	8002fd6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2202      	movs	r2, #2
 8002f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68da      	ldr	r2, [r3, #12]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0201 	orr.w	r2, r2, #1
 8002f56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a21      	ldr	r2, [pc, #132]	@ (8002fe4 <HAL_TIM_Base_Start_IT+0xbc>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d018      	beq.n	8002f94 <HAL_TIM_Base_Start_IT+0x6c>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f6a:	d013      	beq.n	8002f94 <HAL_TIM_Base_Start_IT+0x6c>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a1d      	ldr	r2, [pc, #116]	@ (8002fe8 <HAL_TIM_Base_Start_IT+0xc0>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d00e      	beq.n	8002f94 <HAL_TIM_Base_Start_IT+0x6c>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a1c      	ldr	r2, [pc, #112]	@ (8002fec <HAL_TIM_Base_Start_IT+0xc4>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d009      	beq.n	8002f94 <HAL_TIM_Base_Start_IT+0x6c>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a1a      	ldr	r2, [pc, #104]	@ (8002ff0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d004      	beq.n	8002f94 <HAL_TIM_Base_Start_IT+0x6c>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a19      	ldr	r2, [pc, #100]	@ (8002ff4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d115      	bne.n	8002fc0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689a      	ldr	r2, [r3, #8]
 8002f9a:	4b17      	ldr	r3, [pc, #92]	@ (8002ff8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2b06      	cmp	r3, #6
 8002fa4:	d015      	beq.n	8002fd2 <HAL_TIM_Base_Start_IT+0xaa>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fac:	d011      	beq.n	8002fd2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f042 0201 	orr.w	r2, r2, #1
 8002fbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fbe:	e008      	b.n	8002fd2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 0201 	orr.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	e000      	b.n	8002fd4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fd2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3714      	adds	r7, #20
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	40012c00 	.word	0x40012c00
 8002fe8:	40000400 	.word	0x40000400
 8002fec:	40000800 	.word	0x40000800
 8002ff0:	40013400 	.word	0x40013400
 8002ff4:	40014000 	.word	0x40014000
 8002ff8:	00010007 	.word	0x00010007

08002ffc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d020      	beq.n	8003060 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d01b      	beq.n	8003060 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f06f 0202 	mvn.w	r2, #2
 8003030:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	f003 0303 	and.w	r3, r3, #3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f931 	bl	80032ae <HAL_TIM_IC_CaptureCallback>
 800304c:	e005      	b.n	800305a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f923 	bl	800329a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 f934 	bl	80032c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	f003 0304 	and.w	r3, r3, #4
 8003066:	2b00      	cmp	r3, #0
 8003068:	d020      	beq.n	80030ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2b00      	cmp	r3, #0
 8003072:	d01b      	beq.n	80030ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f06f 0204 	mvn.w	r2, #4
 800307c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2202      	movs	r2, #2
 8003082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 f90b 	bl	80032ae <HAL_TIM_IC_CaptureCallback>
 8003098:	e005      	b.n	80030a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f8fd 	bl	800329a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 f90e 	bl	80032c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	f003 0308 	and.w	r3, r3, #8
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d020      	beq.n	80030f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f003 0308 	and.w	r3, r3, #8
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d01b      	beq.n	80030f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f06f 0208 	mvn.w	r2, #8
 80030c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2204      	movs	r2, #4
 80030ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	69db      	ldr	r3, [r3, #28]
 80030d6:	f003 0303 	and.w	r3, r3, #3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 f8e5 	bl	80032ae <HAL_TIM_IC_CaptureCallback>
 80030e4:	e005      	b.n	80030f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 f8d7 	bl	800329a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 f8e8 	bl	80032c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	f003 0310 	and.w	r3, r3, #16
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d020      	beq.n	8003144 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f003 0310 	and.w	r3, r3, #16
 8003108:	2b00      	cmp	r3, #0
 800310a:	d01b      	beq.n	8003144 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f06f 0210 	mvn.w	r2, #16
 8003114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2208      	movs	r2, #8
 800311a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003126:	2b00      	cmp	r3, #0
 8003128:	d003      	beq.n	8003132 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f8bf 	bl	80032ae <HAL_TIM_IC_CaptureCallback>
 8003130:	e005      	b.n	800313e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f8b1 	bl	800329a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 f8c2 	bl	80032c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00c      	beq.n	8003168 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b00      	cmp	r3, #0
 8003156:	d007      	beq.n	8003168 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f06f 0201 	mvn.w	r2, #1
 8003160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7fe f936 	bl	80013d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800316e:	2b00      	cmp	r3, #0
 8003170:	d104      	bne.n	800317c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00c      	beq.n	8003196 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003182:	2b00      	cmp	r3, #0
 8003184:	d007      	beq.n	8003196 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800318e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 f951 	bl	8003438 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00c      	beq.n	80031ba <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d007      	beq.n	80031ba <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80031b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 f949 	bl	800344c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00c      	beq.n	80031de <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d007      	beq.n	80031de <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80031d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 f87c 	bl	80032d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	f003 0320 	and.w	r3, r3, #32
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00c      	beq.n	8003202 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f003 0320 	and.w	r3, r3, #32
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d007      	beq.n	8003202 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f06f 0220 	mvn.w	r2, #32
 80031fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f911 	bl	8003424 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00c      	beq.n	8003226 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d007      	beq.n	8003226 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800321e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 f91d 	bl	8003460 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00c      	beq.n	800324a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d007      	beq.n	800324a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003242:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 f915 	bl	8003474 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00c      	beq.n	800326e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d007      	beq.n	800326e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8003266:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 f90d 	bl	8003488 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00c      	beq.n	8003292 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d007      	beq.n	8003292 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800328a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 f905 	bl	800349c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003292:	bf00      	nop
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800329a:	b480      	push	{r7}
 800329c:	b083      	sub	sp, #12
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr

080032ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b083      	sub	sp, #12
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032de:	bf00      	nop
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
	...

080032ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a42      	ldr	r2, [pc, #264]	@ (8003408 <TIM_Base_SetConfig+0x11c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d00f      	beq.n	8003324 <TIM_Base_SetConfig+0x38>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800330a:	d00b      	beq.n	8003324 <TIM_Base_SetConfig+0x38>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a3f      	ldr	r2, [pc, #252]	@ (800340c <TIM_Base_SetConfig+0x120>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d007      	beq.n	8003324 <TIM_Base_SetConfig+0x38>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a3e      	ldr	r2, [pc, #248]	@ (8003410 <TIM_Base_SetConfig+0x124>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d003      	beq.n	8003324 <TIM_Base_SetConfig+0x38>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a3d      	ldr	r2, [pc, #244]	@ (8003414 <TIM_Base_SetConfig+0x128>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d108      	bne.n	8003336 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800332a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	4313      	orrs	r3, r2
 8003334:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a33      	ldr	r2, [pc, #204]	@ (8003408 <TIM_Base_SetConfig+0x11c>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d01b      	beq.n	8003376 <TIM_Base_SetConfig+0x8a>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003344:	d017      	beq.n	8003376 <TIM_Base_SetConfig+0x8a>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a30      	ldr	r2, [pc, #192]	@ (800340c <TIM_Base_SetConfig+0x120>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d013      	beq.n	8003376 <TIM_Base_SetConfig+0x8a>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a2f      	ldr	r2, [pc, #188]	@ (8003410 <TIM_Base_SetConfig+0x124>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d00f      	beq.n	8003376 <TIM_Base_SetConfig+0x8a>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a2e      	ldr	r2, [pc, #184]	@ (8003414 <TIM_Base_SetConfig+0x128>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d00b      	beq.n	8003376 <TIM_Base_SetConfig+0x8a>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a2d      	ldr	r2, [pc, #180]	@ (8003418 <TIM_Base_SetConfig+0x12c>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d007      	beq.n	8003376 <TIM_Base_SetConfig+0x8a>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a2c      	ldr	r2, [pc, #176]	@ (800341c <TIM_Base_SetConfig+0x130>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d003      	beq.n	8003376 <TIM_Base_SetConfig+0x8a>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a2b      	ldr	r2, [pc, #172]	@ (8003420 <TIM_Base_SetConfig+0x134>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d108      	bne.n	8003388 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800337c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	4313      	orrs	r3, r2
 8003386:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	4313      	orrs	r3, r2
 8003394:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a16      	ldr	r2, [pc, #88]	@ (8003408 <TIM_Base_SetConfig+0x11c>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d00f      	beq.n	80033d4 <TIM_Base_SetConfig+0xe8>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a17      	ldr	r2, [pc, #92]	@ (8003414 <TIM_Base_SetConfig+0x128>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d00b      	beq.n	80033d4 <TIM_Base_SetConfig+0xe8>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a16      	ldr	r2, [pc, #88]	@ (8003418 <TIM_Base_SetConfig+0x12c>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d007      	beq.n	80033d4 <TIM_Base_SetConfig+0xe8>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a15      	ldr	r2, [pc, #84]	@ (800341c <TIM_Base_SetConfig+0x130>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d003      	beq.n	80033d4 <TIM_Base_SetConfig+0xe8>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a14      	ldr	r2, [pc, #80]	@ (8003420 <TIM_Base_SetConfig+0x134>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d103      	bne.n	80033dc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	691a      	ldr	r2, [r3, #16]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d105      	bne.n	80033fa <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	f023 0201 	bic.w	r2, r3, #1
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	611a      	str	r2, [r3, #16]
  }
}
 80033fa:	bf00      	nop
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	40012c00 	.word	0x40012c00
 800340c:	40000400 	.word	0x40000400
 8003410:	40000800 	.word	0x40000800
 8003414:	40013400 	.word	0x40013400
 8003418:	40014000 	.word	0x40014000
 800341c:	40014400 	.word	0x40014400
 8003420:	40014800 	.word	0x40014800

08003424 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e042      	b.n	8003548 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d106      	bne.n	80034da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f7fe f975 	bl	80017c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2224      	movs	r2, #36	@ 0x24
 80034de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 0201 	bic.w	r2, r2, #1
 80034f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d002      	beq.n	8003500 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 fb82 	bl	8003c04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 f8b3 	bl	800366c <UART_SetConfig>
 8003506:	4603      	mov	r3, r0
 8003508:	2b01      	cmp	r3, #1
 800350a:	d101      	bne.n	8003510 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e01b      	b.n	8003548 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800351e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689a      	ldr	r2, [r3, #8]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800352e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f042 0201 	orr.w	r2, r2, #1
 800353e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 fc01 	bl	8003d48 <UART_CheckIdleState>
 8003546:	4603      	mov	r3, r0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08a      	sub	sp, #40	@ 0x28
 8003554:	af02      	add	r7, sp, #8
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	603b      	str	r3, [r7, #0]
 800355c:	4613      	mov	r3, r2
 800355e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003566:	2b20      	cmp	r3, #32
 8003568:	d17b      	bne.n	8003662 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d002      	beq.n	8003576 <HAL_UART_Transmit+0x26>
 8003570:	88fb      	ldrh	r3, [r7, #6]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e074      	b.n	8003664 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2221      	movs	r2, #33	@ 0x21
 8003586:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800358a:	f7fe f9c7 	bl	800191c <HAL_GetTick>
 800358e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	88fa      	ldrh	r2, [r7, #6]
 8003594:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	88fa      	ldrh	r2, [r7, #6]
 800359c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035a8:	d108      	bne.n	80035bc <HAL_UART_Transmit+0x6c>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d104      	bne.n	80035bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80035b2:	2300      	movs	r3, #0
 80035b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	61bb      	str	r3, [r7, #24]
 80035ba:	e003      	b.n	80035c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035c0:	2300      	movs	r3, #0
 80035c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035c4:	e030      	b.n	8003628 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	2200      	movs	r2, #0
 80035ce:	2180      	movs	r1, #128	@ 0x80
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f000 fc63 	bl	8003e9c <UART_WaitOnFlagUntilTimeout>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d005      	beq.n	80035e8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2220      	movs	r2, #32
 80035e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e03d      	b.n	8003664 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10b      	bne.n	8003606 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	881b      	ldrh	r3, [r3, #0]
 80035f2:	461a      	mov	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035fc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	3302      	adds	r3, #2
 8003602:	61bb      	str	r3, [r7, #24]
 8003604:	e007      	b.n	8003616 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	781a      	ldrb	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	3301      	adds	r3, #1
 8003614:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800361c:	b29b      	uxth	r3, r3
 800361e:	3b01      	subs	r3, #1
 8003620:	b29a      	uxth	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800362e:	b29b      	uxth	r3, r3
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1c8      	bne.n	80035c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	2200      	movs	r2, #0
 800363c:	2140      	movs	r1, #64	@ 0x40
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f000 fc2c 	bl	8003e9c <UART_WaitOnFlagUntilTimeout>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d005      	beq.n	8003656 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2220      	movs	r2, #32
 800364e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e006      	b.n	8003664 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2220      	movs	r2, #32
 800365a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800365e:	2300      	movs	r3, #0
 8003660:	e000      	b.n	8003664 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003662:	2302      	movs	r3, #2
  }
}
 8003664:	4618      	mov	r0, r3
 8003666:	3720      	adds	r7, #32
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800366c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003670:	b08c      	sub	sp, #48	@ 0x30
 8003672:	af00      	add	r7, sp, #0
 8003674:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003676:	2300      	movs	r3, #0
 8003678:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	431a      	orrs	r2, r3
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	431a      	orrs	r2, r3
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	69db      	ldr	r3, [r3, #28]
 8003690:	4313      	orrs	r3, r2
 8003692:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	4bab      	ldr	r3, [pc, #684]	@ (8003948 <UART_SetConfig+0x2dc>)
 800369c:	4013      	ands	r3, r2
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	6812      	ldr	r2, [r2, #0]
 80036a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80036a4:	430b      	orrs	r3, r1
 80036a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	68da      	ldr	r2, [r3, #12]
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4aa0      	ldr	r2, [pc, #640]	@ (800394c <UART_SetConfig+0x2e0>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d004      	beq.n	80036d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036d4:	4313      	orrs	r3, r2
 80036d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80036e2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	6812      	ldr	r2, [r2, #0]
 80036ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80036ec:	430b      	orrs	r3, r1
 80036ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f6:	f023 010f 	bic.w	r1, r3, #15
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a91      	ldr	r2, [pc, #580]	@ (8003950 <UART_SetConfig+0x2e4>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d125      	bne.n	800375c <UART_SetConfig+0xf0>
 8003710:	4b90      	ldr	r3, [pc, #576]	@ (8003954 <UART_SetConfig+0x2e8>)
 8003712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003716:	f003 0303 	and.w	r3, r3, #3
 800371a:	2b03      	cmp	r3, #3
 800371c:	d81a      	bhi.n	8003754 <UART_SetConfig+0xe8>
 800371e:	a201      	add	r2, pc, #4	@ (adr r2, 8003724 <UART_SetConfig+0xb8>)
 8003720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003724:	08003735 	.word	0x08003735
 8003728:	08003745 	.word	0x08003745
 800372c:	0800373d 	.word	0x0800373d
 8003730:	0800374d 	.word	0x0800374d
 8003734:	2301      	movs	r3, #1
 8003736:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800373a:	e0d6      	b.n	80038ea <UART_SetConfig+0x27e>
 800373c:	2302      	movs	r3, #2
 800373e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003742:	e0d2      	b.n	80038ea <UART_SetConfig+0x27e>
 8003744:	2304      	movs	r3, #4
 8003746:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800374a:	e0ce      	b.n	80038ea <UART_SetConfig+0x27e>
 800374c:	2308      	movs	r3, #8
 800374e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003752:	e0ca      	b.n	80038ea <UART_SetConfig+0x27e>
 8003754:	2310      	movs	r3, #16
 8003756:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800375a:	e0c6      	b.n	80038ea <UART_SetConfig+0x27e>
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a7d      	ldr	r2, [pc, #500]	@ (8003958 <UART_SetConfig+0x2ec>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d138      	bne.n	80037d8 <UART_SetConfig+0x16c>
 8003766:	4b7b      	ldr	r3, [pc, #492]	@ (8003954 <UART_SetConfig+0x2e8>)
 8003768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800376c:	f003 030c 	and.w	r3, r3, #12
 8003770:	2b0c      	cmp	r3, #12
 8003772:	d82d      	bhi.n	80037d0 <UART_SetConfig+0x164>
 8003774:	a201      	add	r2, pc, #4	@ (adr r2, 800377c <UART_SetConfig+0x110>)
 8003776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800377a:	bf00      	nop
 800377c:	080037b1 	.word	0x080037b1
 8003780:	080037d1 	.word	0x080037d1
 8003784:	080037d1 	.word	0x080037d1
 8003788:	080037d1 	.word	0x080037d1
 800378c:	080037c1 	.word	0x080037c1
 8003790:	080037d1 	.word	0x080037d1
 8003794:	080037d1 	.word	0x080037d1
 8003798:	080037d1 	.word	0x080037d1
 800379c:	080037b9 	.word	0x080037b9
 80037a0:	080037d1 	.word	0x080037d1
 80037a4:	080037d1 	.word	0x080037d1
 80037a8:	080037d1 	.word	0x080037d1
 80037ac:	080037c9 	.word	0x080037c9
 80037b0:	2300      	movs	r3, #0
 80037b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037b6:	e098      	b.n	80038ea <UART_SetConfig+0x27e>
 80037b8:	2302      	movs	r3, #2
 80037ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037be:	e094      	b.n	80038ea <UART_SetConfig+0x27e>
 80037c0:	2304      	movs	r3, #4
 80037c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037c6:	e090      	b.n	80038ea <UART_SetConfig+0x27e>
 80037c8:	2308      	movs	r3, #8
 80037ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037ce:	e08c      	b.n	80038ea <UART_SetConfig+0x27e>
 80037d0:	2310      	movs	r3, #16
 80037d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037d6:	e088      	b.n	80038ea <UART_SetConfig+0x27e>
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a5f      	ldr	r2, [pc, #380]	@ (800395c <UART_SetConfig+0x2f0>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d125      	bne.n	800382e <UART_SetConfig+0x1c2>
 80037e2:	4b5c      	ldr	r3, [pc, #368]	@ (8003954 <UART_SetConfig+0x2e8>)
 80037e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037e8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80037ec:	2b30      	cmp	r3, #48	@ 0x30
 80037ee:	d016      	beq.n	800381e <UART_SetConfig+0x1b2>
 80037f0:	2b30      	cmp	r3, #48	@ 0x30
 80037f2:	d818      	bhi.n	8003826 <UART_SetConfig+0x1ba>
 80037f4:	2b20      	cmp	r3, #32
 80037f6:	d00a      	beq.n	800380e <UART_SetConfig+0x1a2>
 80037f8:	2b20      	cmp	r3, #32
 80037fa:	d814      	bhi.n	8003826 <UART_SetConfig+0x1ba>
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d002      	beq.n	8003806 <UART_SetConfig+0x19a>
 8003800:	2b10      	cmp	r3, #16
 8003802:	d008      	beq.n	8003816 <UART_SetConfig+0x1aa>
 8003804:	e00f      	b.n	8003826 <UART_SetConfig+0x1ba>
 8003806:	2300      	movs	r3, #0
 8003808:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800380c:	e06d      	b.n	80038ea <UART_SetConfig+0x27e>
 800380e:	2302      	movs	r3, #2
 8003810:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003814:	e069      	b.n	80038ea <UART_SetConfig+0x27e>
 8003816:	2304      	movs	r3, #4
 8003818:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800381c:	e065      	b.n	80038ea <UART_SetConfig+0x27e>
 800381e:	2308      	movs	r3, #8
 8003820:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003824:	e061      	b.n	80038ea <UART_SetConfig+0x27e>
 8003826:	2310      	movs	r3, #16
 8003828:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800382c:	e05d      	b.n	80038ea <UART_SetConfig+0x27e>
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a4b      	ldr	r2, [pc, #300]	@ (8003960 <UART_SetConfig+0x2f4>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d125      	bne.n	8003884 <UART_SetConfig+0x218>
 8003838:	4b46      	ldr	r3, [pc, #280]	@ (8003954 <UART_SetConfig+0x2e8>)
 800383a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800383e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003842:	2bc0      	cmp	r3, #192	@ 0xc0
 8003844:	d016      	beq.n	8003874 <UART_SetConfig+0x208>
 8003846:	2bc0      	cmp	r3, #192	@ 0xc0
 8003848:	d818      	bhi.n	800387c <UART_SetConfig+0x210>
 800384a:	2b80      	cmp	r3, #128	@ 0x80
 800384c:	d00a      	beq.n	8003864 <UART_SetConfig+0x1f8>
 800384e:	2b80      	cmp	r3, #128	@ 0x80
 8003850:	d814      	bhi.n	800387c <UART_SetConfig+0x210>
 8003852:	2b00      	cmp	r3, #0
 8003854:	d002      	beq.n	800385c <UART_SetConfig+0x1f0>
 8003856:	2b40      	cmp	r3, #64	@ 0x40
 8003858:	d008      	beq.n	800386c <UART_SetConfig+0x200>
 800385a:	e00f      	b.n	800387c <UART_SetConfig+0x210>
 800385c:	2300      	movs	r3, #0
 800385e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003862:	e042      	b.n	80038ea <UART_SetConfig+0x27e>
 8003864:	2302      	movs	r3, #2
 8003866:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800386a:	e03e      	b.n	80038ea <UART_SetConfig+0x27e>
 800386c:	2304      	movs	r3, #4
 800386e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003872:	e03a      	b.n	80038ea <UART_SetConfig+0x27e>
 8003874:	2308      	movs	r3, #8
 8003876:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800387a:	e036      	b.n	80038ea <UART_SetConfig+0x27e>
 800387c:	2310      	movs	r3, #16
 800387e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003882:	e032      	b.n	80038ea <UART_SetConfig+0x27e>
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a30      	ldr	r2, [pc, #192]	@ (800394c <UART_SetConfig+0x2e0>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d12a      	bne.n	80038e4 <UART_SetConfig+0x278>
 800388e:	4b31      	ldr	r3, [pc, #196]	@ (8003954 <UART_SetConfig+0x2e8>)
 8003890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003894:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003898:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800389c:	d01a      	beq.n	80038d4 <UART_SetConfig+0x268>
 800389e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80038a2:	d81b      	bhi.n	80038dc <UART_SetConfig+0x270>
 80038a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038a8:	d00c      	beq.n	80038c4 <UART_SetConfig+0x258>
 80038aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038ae:	d815      	bhi.n	80038dc <UART_SetConfig+0x270>
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d003      	beq.n	80038bc <UART_SetConfig+0x250>
 80038b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038b8:	d008      	beq.n	80038cc <UART_SetConfig+0x260>
 80038ba:	e00f      	b.n	80038dc <UART_SetConfig+0x270>
 80038bc:	2300      	movs	r3, #0
 80038be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038c2:	e012      	b.n	80038ea <UART_SetConfig+0x27e>
 80038c4:	2302      	movs	r3, #2
 80038c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038ca:	e00e      	b.n	80038ea <UART_SetConfig+0x27e>
 80038cc:	2304      	movs	r3, #4
 80038ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038d2:	e00a      	b.n	80038ea <UART_SetConfig+0x27e>
 80038d4:	2308      	movs	r3, #8
 80038d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038da:	e006      	b.n	80038ea <UART_SetConfig+0x27e>
 80038dc:	2310      	movs	r3, #16
 80038de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038e2:	e002      	b.n	80038ea <UART_SetConfig+0x27e>
 80038e4:	2310      	movs	r3, #16
 80038e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a17      	ldr	r2, [pc, #92]	@ (800394c <UART_SetConfig+0x2e0>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	f040 80a8 	bne.w	8003a46 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80038f6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80038fa:	2b08      	cmp	r3, #8
 80038fc:	d834      	bhi.n	8003968 <UART_SetConfig+0x2fc>
 80038fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003904 <UART_SetConfig+0x298>)
 8003900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003904:	08003929 	.word	0x08003929
 8003908:	08003969 	.word	0x08003969
 800390c:	08003931 	.word	0x08003931
 8003910:	08003969 	.word	0x08003969
 8003914:	08003937 	.word	0x08003937
 8003918:	08003969 	.word	0x08003969
 800391c:	08003969 	.word	0x08003969
 8003920:	08003969 	.word	0x08003969
 8003924:	0800393f 	.word	0x0800393f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003928:	f7ff f808 	bl	800293c <HAL_RCC_GetPCLK1Freq>
 800392c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800392e:	e021      	b.n	8003974 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003930:	4b0c      	ldr	r3, [pc, #48]	@ (8003964 <UART_SetConfig+0x2f8>)
 8003932:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003934:	e01e      	b.n	8003974 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003936:	f7fe ff93 	bl	8002860 <HAL_RCC_GetSysClockFreq>
 800393a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800393c:	e01a      	b.n	8003974 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800393e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003942:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003944:	e016      	b.n	8003974 <UART_SetConfig+0x308>
 8003946:	bf00      	nop
 8003948:	cfff69f3 	.word	0xcfff69f3
 800394c:	40008000 	.word	0x40008000
 8003950:	40013800 	.word	0x40013800
 8003954:	40021000 	.word	0x40021000
 8003958:	40004400 	.word	0x40004400
 800395c:	40004800 	.word	0x40004800
 8003960:	40004c00 	.word	0x40004c00
 8003964:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003968:	2300      	movs	r3, #0
 800396a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003972:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 812a 	beq.w	8003bd0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003980:	4a9e      	ldr	r2, [pc, #632]	@ (8003bfc <UART_SetConfig+0x590>)
 8003982:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003986:	461a      	mov	r2, r3
 8003988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398a:	fbb3 f3f2 	udiv	r3, r3, r2
 800398e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	4613      	mov	r3, r2
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	4413      	add	r3, r2
 800399a:	69ba      	ldr	r2, [r7, #24]
 800399c:	429a      	cmp	r2, r3
 800399e:	d305      	bcc.n	80039ac <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d903      	bls.n	80039b4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80039b2:	e10d      	b.n	8003bd0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b6:	2200      	movs	r2, #0
 80039b8:	60bb      	str	r3, [r7, #8]
 80039ba:	60fa      	str	r2, [r7, #12]
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c0:	4a8e      	ldr	r2, [pc, #568]	@ (8003bfc <UART_SetConfig+0x590>)
 80039c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	2200      	movs	r2, #0
 80039ca:	603b      	str	r3, [r7, #0]
 80039cc:	607a      	str	r2, [r7, #4]
 80039ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80039d6:	f7fd f97f 	bl	8000cd8 <__aeabi_uldivmod>
 80039da:	4602      	mov	r2, r0
 80039dc:	460b      	mov	r3, r1
 80039de:	4610      	mov	r0, r2
 80039e0:	4619      	mov	r1, r3
 80039e2:	f04f 0200 	mov.w	r2, #0
 80039e6:	f04f 0300 	mov.w	r3, #0
 80039ea:	020b      	lsls	r3, r1, #8
 80039ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80039f0:	0202      	lsls	r2, r0, #8
 80039f2:	6979      	ldr	r1, [r7, #20]
 80039f4:	6849      	ldr	r1, [r1, #4]
 80039f6:	0849      	lsrs	r1, r1, #1
 80039f8:	2000      	movs	r0, #0
 80039fa:	460c      	mov	r4, r1
 80039fc:	4605      	mov	r5, r0
 80039fe:	eb12 0804 	adds.w	r8, r2, r4
 8003a02:	eb43 0905 	adc.w	r9, r3, r5
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	469a      	mov	sl, r3
 8003a0e:	4693      	mov	fp, r2
 8003a10:	4652      	mov	r2, sl
 8003a12:	465b      	mov	r3, fp
 8003a14:	4640      	mov	r0, r8
 8003a16:	4649      	mov	r1, r9
 8003a18:	f7fd f95e 	bl	8000cd8 <__aeabi_uldivmod>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	460b      	mov	r3, r1
 8003a20:	4613      	mov	r3, r2
 8003a22:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a24:	6a3b      	ldr	r3, [r7, #32]
 8003a26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a2a:	d308      	bcc.n	8003a3e <UART_SetConfig+0x3d2>
 8003a2c:	6a3b      	ldr	r3, [r7, #32]
 8003a2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a32:	d204      	bcs.n	8003a3e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6a3a      	ldr	r2, [r7, #32]
 8003a3a:	60da      	str	r2, [r3, #12]
 8003a3c:	e0c8      	b.n	8003bd0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003a44:	e0c4      	b.n	8003bd0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a4e:	d167      	bne.n	8003b20 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003a50:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003a54:	2b08      	cmp	r3, #8
 8003a56:	d828      	bhi.n	8003aaa <UART_SetConfig+0x43e>
 8003a58:	a201      	add	r2, pc, #4	@ (adr r2, 8003a60 <UART_SetConfig+0x3f4>)
 8003a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5e:	bf00      	nop
 8003a60:	08003a85 	.word	0x08003a85
 8003a64:	08003a8d 	.word	0x08003a8d
 8003a68:	08003a95 	.word	0x08003a95
 8003a6c:	08003aab 	.word	0x08003aab
 8003a70:	08003a9b 	.word	0x08003a9b
 8003a74:	08003aab 	.word	0x08003aab
 8003a78:	08003aab 	.word	0x08003aab
 8003a7c:	08003aab 	.word	0x08003aab
 8003a80:	08003aa3 	.word	0x08003aa3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a84:	f7fe ff5a 	bl	800293c <HAL_RCC_GetPCLK1Freq>
 8003a88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003a8a:	e014      	b.n	8003ab6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a8c:	f7fe ff6c 	bl	8002968 <HAL_RCC_GetPCLK2Freq>
 8003a90:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003a92:	e010      	b.n	8003ab6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a94:	4b5a      	ldr	r3, [pc, #360]	@ (8003c00 <UART_SetConfig+0x594>)
 8003a96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003a98:	e00d      	b.n	8003ab6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a9a:	f7fe fee1 	bl	8002860 <HAL_RCC_GetSysClockFreq>
 8003a9e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003aa0:	e009      	b.n	8003ab6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003aa2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003aa6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003aa8:	e005      	b.n	8003ab6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003ab4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f000 8089 	beq.w	8003bd0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac2:	4a4e      	ldr	r2, [pc, #312]	@ (8003bfc <UART_SetConfig+0x590>)
 8003ac4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ac8:	461a      	mov	r2, r3
 8003aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003acc:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ad0:	005a      	lsls	r2, r3, #1
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	085b      	lsrs	r3, r3, #1
 8003ad8:	441a      	add	r2, r3
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ae4:	6a3b      	ldr	r3, [r7, #32]
 8003ae6:	2b0f      	cmp	r3, #15
 8003ae8:	d916      	bls.n	8003b18 <UART_SetConfig+0x4ac>
 8003aea:	6a3b      	ldr	r3, [r7, #32]
 8003aec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003af0:	d212      	bcs.n	8003b18 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003af2:	6a3b      	ldr	r3, [r7, #32]
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	f023 030f 	bic.w	r3, r3, #15
 8003afa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	085b      	lsrs	r3, r3, #1
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	f003 0307 	and.w	r3, r3, #7
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	8bfb      	ldrh	r3, [r7, #30]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	8bfa      	ldrh	r2, [r7, #30]
 8003b14:	60da      	str	r2, [r3, #12]
 8003b16:	e05b      	b.n	8003bd0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003b1e:	e057      	b.n	8003bd0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b20:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003b24:	2b08      	cmp	r3, #8
 8003b26:	d828      	bhi.n	8003b7a <UART_SetConfig+0x50e>
 8003b28:	a201      	add	r2, pc, #4	@ (adr r2, 8003b30 <UART_SetConfig+0x4c4>)
 8003b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b2e:	bf00      	nop
 8003b30:	08003b55 	.word	0x08003b55
 8003b34:	08003b5d 	.word	0x08003b5d
 8003b38:	08003b65 	.word	0x08003b65
 8003b3c:	08003b7b 	.word	0x08003b7b
 8003b40:	08003b6b 	.word	0x08003b6b
 8003b44:	08003b7b 	.word	0x08003b7b
 8003b48:	08003b7b 	.word	0x08003b7b
 8003b4c:	08003b7b 	.word	0x08003b7b
 8003b50:	08003b73 	.word	0x08003b73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b54:	f7fe fef2 	bl	800293c <HAL_RCC_GetPCLK1Freq>
 8003b58:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003b5a:	e014      	b.n	8003b86 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b5c:	f7fe ff04 	bl	8002968 <HAL_RCC_GetPCLK2Freq>
 8003b60:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003b62:	e010      	b.n	8003b86 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b64:	4b26      	ldr	r3, [pc, #152]	@ (8003c00 <UART_SetConfig+0x594>)
 8003b66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003b68:	e00d      	b.n	8003b86 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b6a:	f7fe fe79 	bl	8002860 <HAL_RCC_GetSysClockFreq>
 8003b6e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003b70:	e009      	b.n	8003b86 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003b78:	e005      	b.n	8003b86 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003b84:	bf00      	nop
    }

    if (pclk != 0U)
 8003b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d021      	beq.n	8003bd0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b90:	4a1a      	ldr	r2, [pc, #104]	@ (8003bfc <UART_SetConfig+0x590>)
 8003b92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b96:	461a      	mov	r2, r3
 8003b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9a:	fbb3 f2f2 	udiv	r2, r3, r2
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	085b      	lsrs	r3, r3, #1
 8003ba4:	441a      	add	r2, r3
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bb0:	6a3b      	ldr	r3, [r7, #32]
 8003bb2:	2b0f      	cmp	r3, #15
 8003bb4:	d909      	bls.n	8003bca <UART_SetConfig+0x55e>
 8003bb6:	6a3b      	ldr	r3, [r7, #32]
 8003bb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bbc:	d205      	bcs.n	8003bca <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003bbe:	6a3b      	ldr	r3, [r7, #32]
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	60da      	str	r2, [r3, #12]
 8003bc8:	e002      	b.n	8003bd0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	2200      	movs	r2, #0
 8003be4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	2200      	movs	r2, #0
 8003bea:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003bec:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3730      	adds	r7, #48	@ 0x30
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bfa:	bf00      	nop
 8003bfc:	0800ae18 	.word	0x0800ae18
 8003c00:	00f42400 	.word	0x00f42400

08003c04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c10:	f003 0308 	and.w	r3, r3, #8
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00a      	beq.n	8003c2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00a      	beq.n	8003c50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00a      	beq.n	8003c72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c76:	f003 0304 	and.w	r3, r3, #4
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00a      	beq.n	8003c94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	430a      	orrs	r2, r1
 8003c92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c98:	f003 0310 	and.w	r3, r3, #16
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00a      	beq.n	8003cb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cba:	f003 0320 	and.w	r3, r3, #32
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00a      	beq.n	8003cd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d01a      	beq.n	8003d1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d02:	d10a      	bne.n	8003d1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00a      	beq.n	8003d3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	605a      	str	r2, [r3, #4]
  }
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b098      	sub	sp, #96	@ 0x60
 8003d4c:	af02      	add	r7, sp, #8
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d58:	f7fd fde0 	bl	800191c <HAL_GetTick>
 8003d5c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0308 	and.w	r3, r3, #8
 8003d68:	2b08      	cmp	r3, #8
 8003d6a:	d12f      	bne.n	8003dcc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d70:	9300      	str	r3, [sp, #0]
 8003d72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d74:	2200      	movs	r2, #0
 8003d76:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 f88e 	bl	8003e9c <UART_WaitOnFlagUntilTimeout>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d022      	beq.n	8003dcc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d8e:	e853 3f00 	ldrex	r3, [r3]
 8003d92:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	461a      	mov	r2, r3
 8003da2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003da4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003da6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003daa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003dac:	e841 2300 	strex	r3, r2, [r1]
 8003db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003db2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1e6      	bne.n	8003d86 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2220      	movs	r2, #32
 8003dbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e063      	b.n	8003e94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0304 	and.w	r3, r3, #4
 8003dd6:	2b04      	cmp	r3, #4
 8003dd8:	d149      	bne.n	8003e6e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dda:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003dde:	9300      	str	r3, [sp, #0]
 8003de0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003de2:	2200      	movs	r2, #0
 8003de4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 f857 	bl	8003e9c <UART_WaitOnFlagUntilTimeout>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d03c      	beq.n	8003e6e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfc:	e853 3f00 	ldrex	r3, [r3]
 8003e00:	623b      	str	r3, [r7, #32]
   return(result);
 8003e02:	6a3b      	ldr	r3, [r7, #32]
 8003e04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e12:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e14:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e1a:	e841 2300 	strex	r3, r2, [r1]
 8003e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1e6      	bne.n	8003df4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	3308      	adds	r3, #8
 8003e2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	e853 3f00 	ldrex	r3, [r3]
 8003e34:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f023 0301 	bic.w	r3, r3, #1
 8003e3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	3308      	adds	r3, #8
 8003e44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e46:	61fa      	str	r2, [r7, #28]
 8003e48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4a:	69b9      	ldr	r1, [r7, #24]
 8003e4c:	69fa      	ldr	r2, [r7, #28]
 8003e4e:	e841 2300 	strex	r3, r2, [r1]
 8003e52:	617b      	str	r3, [r7, #20]
   return(result);
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1e5      	bne.n	8003e26 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e012      	b.n	8003e94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2220      	movs	r2, #32
 8003e72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2220      	movs	r2, #32
 8003e7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3758      	adds	r7, #88	@ 0x58
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	603b      	str	r3, [r7, #0]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eac:	e04f      	b.n	8003f4e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003eb4:	d04b      	beq.n	8003f4e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eb6:	f7fd fd31 	bl	800191c <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d302      	bcc.n	8003ecc <UART_WaitOnFlagUntilTimeout+0x30>
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d101      	bne.n	8003ed0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e04e      	b.n	8003f6e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0304 	and.w	r3, r3, #4
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d037      	beq.n	8003f4e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	2b80      	cmp	r3, #128	@ 0x80
 8003ee2:	d034      	beq.n	8003f4e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	2b40      	cmp	r3, #64	@ 0x40
 8003ee8:	d031      	beq.n	8003f4e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	69db      	ldr	r3, [r3, #28]
 8003ef0:	f003 0308 	and.w	r3, r3, #8
 8003ef4:	2b08      	cmp	r3, #8
 8003ef6:	d110      	bne.n	8003f1a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2208      	movs	r2, #8
 8003efe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 f838 	bl	8003f76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2208      	movs	r2, #8
 8003f0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e029      	b.n	8003f6e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	69db      	ldr	r3, [r3, #28]
 8003f20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f28:	d111      	bne.n	8003f4e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f000 f81e 	bl	8003f76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e00f      	b.n	8003f6e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	69da      	ldr	r2, [r3, #28]
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	4013      	ands	r3, r2
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	bf0c      	ite	eq
 8003f5e:	2301      	moveq	r3, #1
 8003f60:	2300      	movne	r3, #0
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	461a      	mov	r2, r3
 8003f66:	79fb      	ldrb	r3, [r7, #7]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d0a0      	beq.n	8003eae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f76:	b480      	push	{r7}
 8003f78:	b095      	sub	sp, #84	@ 0x54
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f86:	e853 3f00 	ldrex	r3, [r3]
 8003f8a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	461a      	mov	r2, r3
 8003f9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f9e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003fa2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003fa4:	e841 2300 	strex	r3, r2, [r1]
 8003fa8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1e6      	bne.n	8003f7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	3308      	adds	r3, #8
 8003fb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb8:	6a3b      	ldr	r3, [r7, #32]
 8003fba:	e853 3f00 	ldrex	r3, [r3]
 8003fbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fc6:	f023 0301 	bic.w	r3, r3, #1
 8003fca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	3308      	adds	r3, #8
 8003fd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fdc:	e841 2300 	strex	r3, r2, [r1]
 8003fe0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1e3      	bne.n	8003fb0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d118      	bne.n	8004022 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	e853 3f00 	ldrex	r3, [r3]
 8003ffc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	f023 0310 	bic.w	r3, r3, #16
 8004004:	647b      	str	r3, [r7, #68]	@ 0x44
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	461a      	mov	r2, r3
 800400c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800400e:	61bb      	str	r3, [r7, #24]
 8004010:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004012:	6979      	ldr	r1, [r7, #20]
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	e841 2300 	strex	r3, r2, [r1]
 800401a:	613b      	str	r3, [r7, #16]
   return(result);
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1e6      	bne.n	8003ff0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2220      	movs	r2, #32
 8004026:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004036:	bf00      	nop
 8004038:	3754      	adds	r7, #84	@ 0x54
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004042:	b480      	push	{r7}
 8004044:	b085      	sub	sp, #20
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004050:	2b01      	cmp	r3, #1
 8004052:	d101      	bne.n	8004058 <HAL_UARTEx_DisableFifoMode+0x16>
 8004054:	2302      	movs	r3, #2
 8004056:	e027      	b.n	80040a8 <HAL_UARTEx_DisableFifoMode+0x66>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2224      	movs	r2, #36	@ 0x24
 8004064:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0201 	bic.w	r2, r2, #1
 800407e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004086:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2220      	movs	r2, #32
 800409a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d101      	bne.n	80040cc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80040c8:	2302      	movs	r3, #2
 80040ca:	e02d      	b.n	8004128 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2224      	movs	r2, #36	@ 0x24
 80040d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0201 	bic.w	r2, r2, #1
 80040f2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	683a      	ldr	r2, [r7, #0]
 8004104:	430a      	orrs	r2, r1
 8004106:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 f84f 	bl	80041ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2220      	movs	r2, #32
 800411a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004140:	2b01      	cmp	r3, #1
 8004142:	d101      	bne.n	8004148 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004144:	2302      	movs	r3, #2
 8004146:	e02d      	b.n	80041a4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2224      	movs	r2, #36	@ 0x24
 8004154:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 0201 	bic.w	r2, r2, #1
 800416e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	683a      	ldr	r2, [r7, #0]
 8004180:	430a      	orrs	r2, r1
 8004182:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 f811 	bl	80041ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2220      	movs	r2, #32
 8004196:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3710      	adds	r7, #16
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d108      	bne.n	80041ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80041cc:	e031      	b.n	8004232 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80041ce:	2308      	movs	r3, #8
 80041d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80041d2:	2308      	movs	r3, #8
 80041d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	0e5b      	lsrs	r3, r3, #25
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	f003 0307 	and.w	r3, r3, #7
 80041e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	0f5b      	lsrs	r3, r3, #29
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	f003 0307 	and.w	r3, r3, #7
 80041f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80041f6:	7bbb      	ldrb	r3, [r7, #14]
 80041f8:	7b3a      	ldrb	r2, [r7, #12]
 80041fa:	4911      	ldr	r1, [pc, #68]	@ (8004240 <UARTEx_SetNbDataToProcess+0x94>)
 80041fc:	5c8a      	ldrb	r2, [r1, r2]
 80041fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004202:	7b3a      	ldrb	r2, [r7, #12]
 8004204:	490f      	ldr	r1, [pc, #60]	@ (8004244 <UARTEx_SetNbDataToProcess+0x98>)
 8004206:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004208:	fb93 f3f2 	sdiv	r3, r3, r2
 800420c:	b29a      	uxth	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004214:	7bfb      	ldrb	r3, [r7, #15]
 8004216:	7b7a      	ldrb	r2, [r7, #13]
 8004218:	4909      	ldr	r1, [pc, #36]	@ (8004240 <UARTEx_SetNbDataToProcess+0x94>)
 800421a:	5c8a      	ldrb	r2, [r1, r2]
 800421c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004220:	7b7a      	ldrb	r2, [r7, #13]
 8004222:	4908      	ldr	r1, [pc, #32]	@ (8004244 <UARTEx_SetNbDataToProcess+0x98>)
 8004224:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004226:	fb93 f3f2 	sdiv	r3, r3, r2
 800422a:	b29a      	uxth	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004232:	bf00      	nop
 8004234:	3714      	adds	r7, #20
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	0800ae30 	.word	0x0800ae30
 8004244:	0800ae38 	.word	0x0800ae38

08004248 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	4603      	mov	r3, r0
 8004250:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004252:	2300      	movs	r3, #0
 8004254:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004256:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800425a:	2b84      	cmp	r3, #132	@ 0x84
 800425c:	d005      	beq.n	800426a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800425e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	4413      	add	r3, r2
 8004266:	3303      	adds	r3, #3
 8004268:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800426a:	68fb      	ldr	r3, [r7, #12]
}
 800426c:	4618      	mov	r0, r3
 800426e:	3714      	adds	r7, #20
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800427c:	f000 fe48 	bl	8004f10 <vTaskStartScheduler>
  
  return osOK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	bd80      	pop	{r7, pc}

08004286 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004286:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004288:	b087      	sub	sp, #28
 800428a:	af02      	add	r7, sp, #8
 800428c:	6078      	str	r0, [r7, #4]
 800428e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685c      	ldr	r4, [r3, #4]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800429c:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7ff ffcf 	bl	8004248 <makeFreeRtosPriority>
 80042aa:	4602      	mov	r2, r0
 80042ac:	f107 030c 	add.w	r3, r7, #12
 80042b0:	9301      	str	r3, [sp, #4]
 80042b2:	9200      	str	r2, [sp, #0]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	4632      	mov	r2, r6
 80042b8:	4629      	mov	r1, r5
 80042ba:	4620      	mov	r0, r4
 80042bc:	f000 fca6 	bl	8004c0c <xTaskCreate>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d001      	beq.n	80042ca <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80042c6:	2300      	movs	r3, #0
 80042c8:	e000      	b.n	80042cc <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80042ca:	68fb      	ldr	r3, [r7, #12]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3714      	adds	r7, #20
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080042d4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <osDelay+0x16>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	e000      	b.n	80042ec <osDelay+0x18>
 80042ea:	2301      	movs	r3, #1
 80042ec:	4618      	mov	r0, r3
 80042ee:	f000 fdd9 	bl	8004ea4 <vTaskDelay>
  
  return osOK;
 80042f2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f103 0208 	add.w	r2, r3, #8
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004314:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f103 0208 	add.w	r2, r3, #8
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f103 0208 	add.w	r2, r3, #8
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800434a:	bf00      	nop
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr

08004356 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004356:	b480      	push	{r7}
 8004358:	b085      	sub	sp, #20
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
 800435e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	683a      	ldr	r2, [r7, #0]
 800437a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	683a      	ldr	r2, [r7, #0]
 8004380:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	1c5a      	adds	r2, r3, #1
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	601a      	str	r2, [r3, #0]
}
 8004392:	bf00      	nop
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800439e:	b480      	push	{r7}
 80043a0:	b085      	sub	sp, #20
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
 80043a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80043b4:	d103      	bne.n	80043be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	60fb      	str	r3, [r7, #12]
 80043bc:	e00c      	b.n	80043d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	3308      	adds	r3, #8
 80043c2:	60fb      	str	r3, [r7, #12]
 80043c4:	e002      	b.n	80043cc <vListInsert+0x2e>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	60fb      	str	r3, [r7, #12]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d2f6      	bcs.n	80043c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	683a      	ldr	r2, [r7, #0]
 80043f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	1c5a      	adds	r2, r3, #1
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	601a      	str	r2, [r3, #0]
}
 8004404:	bf00      	nop
 8004406:	3714      	adds	r7, #20
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	6892      	ldr	r2, [r2, #8]
 8004426:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	6852      	ldr	r2, [r2, #4]
 8004430:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	429a      	cmp	r2, r3
 800443a:	d103      	bne.n	8004444 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	1e5a      	subs	r2, r3, #1
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
}
 8004458:	4618      	mov	r0, r3
 800445a:	3714      	adds	r7, #20
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d10b      	bne.n	8004490 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800447c:	f383 8811 	msr	BASEPRI, r3
 8004480:	f3bf 8f6f 	isb	sy
 8004484:	f3bf 8f4f 	dsb	sy
 8004488:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800448a:	bf00      	nop
 800448c:	bf00      	nop
 800448e:	e7fd      	b.n	800448c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004490:	f001 fc7a 	bl	8005d88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800449c:	68f9      	ldr	r1, [r7, #12]
 800449e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80044a0:	fb01 f303 	mul.w	r3, r1, r3
 80044a4:	441a      	add	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044c0:	3b01      	subs	r3, #1
 80044c2:	68f9      	ldr	r1, [r7, #12]
 80044c4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80044c6:	fb01 f303 	mul.w	r3, r1, r3
 80044ca:	441a      	add	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	22ff      	movs	r2, #255	@ 0xff
 80044d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	22ff      	movs	r2, #255	@ 0xff
 80044dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d114      	bne.n	8004510 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d01a      	beq.n	8004524 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	3310      	adds	r3, #16
 80044f2:	4618      	mov	r0, r3
 80044f4:	f000 ff4e 	bl	8005394 <xTaskRemoveFromEventList>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d012      	beq.n	8004524 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80044fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004534 <xQueueGenericReset+0xd0>)
 8004500:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004504:	601a      	str	r2, [r3, #0]
 8004506:	f3bf 8f4f 	dsb	sy
 800450a:	f3bf 8f6f 	isb	sy
 800450e:	e009      	b.n	8004524 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	3310      	adds	r3, #16
 8004514:	4618      	mov	r0, r3
 8004516:	f7ff fef1 	bl	80042fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	3324      	adds	r3, #36	@ 0x24
 800451e:	4618      	mov	r0, r3
 8004520:	f7ff feec 	bl	80042fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004524:	f001 fc62 	bl	8005dec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004528:	2301      	movs	r3, #1
}
 800452a:	4618      	mov	r0, r3
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	e000ed04 	.word	0xe000ed04

08004538 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004538:	b580      	push	{r7, lr}
 800453a:	b08a      	sub	sp, #40	@ 0x28
 800453c:	af02      	add	r7, sp, #8
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	4613      	mov	r3, r2
 8004544:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d10b      	bne.n	8004564 <xQueueGenericCreate+0x2c>
	__asm volatile
 800454c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004550:	f383 8811 	msr	BASEPRI, r3
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	f3bf 8f4f 	dsb	sy
 800455c:	613b      	str	r3, [r7, #16]
}
 800455e:	bf00      	nop
 8004560:	bf00      	nop
 8004562:	e7fd      	b.n	8004560 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	68ba      	ldr	r2, [r7, #8]
 8004568:	fb02 f303 	mul.w	r3, r2, r3
 800456c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	3348      	adds	r3, #72	@ 0x48
 8004572:	4618      	mov	r0, r3
 8004574:	f001 fce8 	bl	8005f48 <pvPortMalloc>
 8004578:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00d      	beq.n	800459c <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	3348      	adds	r3, #72	@ 0x48
 8004588:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800458a:	79fa      	ldrb	r2, [r7, #7]
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	9300      	str	r3, [sp, #0]
 8004590:	4613      	mov	r3, r2
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	68b9      	ldr	r1, [r7, #8]
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f000 f805 	bl	80045a6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800459c:	69bb      	ldr	r3, [r7, #24]
	}
 800459e:	4618      	mov	r0, r3
 80045a0:	3720      	adds	r7, #32
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b084      	sub	sp, #16
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	60f8      	str	r0, [r7, #12]
 80045ae:	60b9      	str	r1, [r7, #8]
 80045b0:	607a      	str	r2, [r7, #4]
 80045b2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d103      	bne.n	80045c2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	601a      	str	r2, [r3, #0]
 80045c0:	e002      	b.n	80045c8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	68ba      	ldr	r2, [r7, #8]
 80045d2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80045d4:	2101      	movs	r1, #1
 80045d6:	69b8      	ldr	r0, [r7, #24]
 80045d8:	f7ff ff44 	bl	8004464 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80045dc:	bf00      	nop
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b08e      	sub	sp, #56	@ 0x38
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
 80045f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80045f2:	2300      	movs	r3, #0
 80045f4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80045fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10b      	bne.n	8004618 <xQueueGenericSend+0x34>
	__asm volatile
 8004600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004604:	f383 8811 	msr	BASEPRI, r3
 8004608:	f3bf 8f6f 	isb	sy
 800460c:	f3bf 8f4f 	dsb	sy
 8004610:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004612:	bf00      	nop
 8004614:	bf00      	nop
 8004616:	e7fd      	b.n	8004614 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d103      	bne.n	8004626 <xQueueGenericSend+0x42>
 800461e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <xQueueGenericSend+0x46>
 8004626:	2301      	movs	r3, #1
 8004628:	e000      	b.n	800462c <xQueueGenericSend+0x48>
 800462a:	2300      	movs	r3, #0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10b      	bne.n	8004648 <xQueueGenericSend+0x64>
	__asm volatile
 8004630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004634:	f383 8811 	msr	BASEPRI, r3
 8004638:	f3bf 8f6f 	isb	sy
 800463c:	f3bf 8f4f 	dsb	sy
 8004640:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004642:	bf00      	nop
 8004644:	bf00      	nop
 8004646:	e7fd      	b.n	8004644 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	2b02      	cmp	r3, #2
 800464c:	d103      	bne.n	8004656 <xQueueGenericSend+0x72>
 800464e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004650:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004652:	2b01      	cmp	r3, #1
 8004654:	d101      	bne.n	800465a <xQueueGenericSend+0x76>
 8004656:	2301      	movs	r3, #1
 8004658:	e000      	b.n	800465c <xQueueGenericSend+0x78>
 800465a:	2300      	movs	r3, #0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d10b      	bne.n	8004678 <xQueueGenericSend+0x94>
	__asm volatile
 8004660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004664:	f383 8811 	msr	BASEPRI, r3
 8004668:	f3bf 8f6f 	isb	sy
 800466c:	f3bf 8f4f 	dsb	sy
 8004670:	623b      	str	r3, [r7, #32]
}
 8004672:	bf00      	nop
 8004674:	bf00      	nop
 8004676:	e7fd      	b.n	8004674 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004678:	f001 f832 	bl	80056e0 <xTaskGetSchedulerState>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d102      	bne.n	8004688 <xQueueGenericSend+0xa4>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d101      	bne.n	800468c <xQueueGenericSend+0xa8>
 8004688:	2301      	movs	r3, #1
 800468a:	e000      	b.n	800468e <xQueueGenericSend+0xaa>
 800468c:	2300      	movs	r3, #0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10b      	bne.n	80046aa <xQueueGenericSend+0xc6>
	__asm volatile
 8004692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004696:	f383 8811 	msr	BASEPRI, r3
 800469a:	f3bf 8f6f 	isb	sy
 800469e:	f3bf 8f4f 	dsb	sy
 80046a2:	61fb      	str	r3, [r7, #28]
}
 80046a4:	bf00      	nop
 80046a6:	bf00      	nop
 80046a8:	e7fd      	b.n	80046a6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80046aa:	f001 fb6d 	bl	8005d88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80046ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d302      	bcc.n	80046c0 <xQueueGenericSend+0xdc>
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d129      	bne.n	8004714 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	68b9      	ldr	r1, [r7, #8]
 80046c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80046c6:	f000 f9b7 	bl	8004a38 <prvCopyDataToQueue>
 80046ca:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d010      	beq.n	80046f6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046d6:	3324      	adds	r3, #36	@ 0x24
 80046d8:	4618      	mov	r0, r3
 80046da:	f000 fe5b 	bl	8005394 <xTaskRemoveFromEventList>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d013      	beq.n	800470c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80046e4:	4b3f      	ldr	r3, [pc, #252]	@ (80047e4 <xQueueGenericSend+0x200>)
 80046e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046ea:	601a      	str	r2, [r3, #0]
 80046ec:	f3bf 8f4f 	dsb	sy
 80046f0:	f3bf 8f6f 	isb	sy
 80046f4:	e00a      	b.n	800470c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80046f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d007      	beq.n	800470c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80046fc:	4b39      	ldr	r3, [pc, #228]	@ (80047e4 <xQueueGenericSend+0x200>)
 80046fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800470c:	f001 fb6e 	bl	8005dec <vPortExitCritical>
				return pdPASS;
 8004710:	2301      	movs	r3, #1
 8004712:	e063      	b.n	80047dc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d103      	bne.n	8004722 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800471a:	f001 fb67 	bl	8005dec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800471e:	2300      	movs	r3, #0
 8004720:	e05c      	b.n	80047dc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004724:	2b00      	cmp	r3, #0
 8004726:	d106      	bne.n	8004736 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004728:	f107 0314 	add.w	r3, r7, #20
 800472c:	4618      	mov	r0, r3
 800472e:	f000 fe95 	bl	800545c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004732:	2301      	movs	r3, #1
 8004734:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004736:	f001 fb59 	bl	8005dec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800473a:	f000 fc3b 	bl	8004fb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800473e:	f001 fb23 	bl	8005d88 <vPortEnterCritical>
 8004742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004744:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004748:	b25b      	sxtb	r3, r3
 800474a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800474e:	d103      	bne.n	8004758 <xQueueGenericSend+0x174>
 8004750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004752:	2200      	movs	r2, #0
 8004754:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800475a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800475e:	b25b      	sxtb	r3, r3
 8004760:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004764:	d103      	bne.n	800476e <xQueueGenericSend+0x18a>
 8004766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004768:	2200      	movs	r2, #0
 800476a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800476e:	f001 fb3d 	bl	8005dec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004772:	1d3a      	adds	r2, r7, #4
 8004774:	f107 0314 	add.w	r3, r7, #20
 8004778:	4611      	mov	r1, r2
 800477a:	4618      	mov	r0, r3
 800477c:	f000 fe84 	bl	8005488 <xTaskCheckForTimeOut>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d124      	bne.n	80047d0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004786:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004788:	f000 fa28 	bl	8004bdc <prvIsQueueFull>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d018      	beq.n	80047c4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004794:	3310      	adds	r3, #16
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	4611      	mov	r1, r2
 800479a:	4618      	mov	r0, r3
 800479c:	f000 fdd4 	bl	8005348 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80047a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80047a2:	f000 f9b3 	bl	8004b0c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80047a6:	f000 fc13 	bl	8004fd0 <xTaskResumeAll>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f47f af7c 	bne.w	80046aa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80047b2:	4b0c      	ldr	r3, [pc, #48]	@ (80047e4 <xQueueGenericSend+0x200>)
 80047b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047b8:	601a      	str	r2, [r3, #0]
 80047ba:	f3bf 8f4f 	dsb	sy
 80047be:	f3bf 8f6f 	isb	sy
 80047c2:	e772      	b.n	80046aa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80047c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80047c6:	f000 f9a1 	bl	8004b0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047ca:	f000 fc01 	bl	8004fd0 <xTaskResumeAll>
 80047ce:	e76c      	b.n	80046aa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80047d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80047d2:	f000 f99b 	bl	8004b0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047d6:	f000 fbfb 	bl	8004fd0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80047da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3738      	adds	r7, #56	@ 0x38
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	e000ed04 	.word	0xe000ed04

080047e8 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b08e      	sub	sp, #56	@ 0x38
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80047f2:	2300      	movs	r3, #0
 80047f4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80047fa:	2300      	movs	r3, #0
 80047fc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80047fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10b      	bne.n	800481c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004808:	f383 8811 	msr	BASEPRI, r3
 800480c:	f3bf 8f6f 	isb	sy
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	623b      	str	r3, [r7, #32]
}
 8004816:	bf00      	nop
 8004818:	bf00      	nop
 800481a:	e7fd      	b.n	8004818 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800481c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800481e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00b      	beq.n	800483c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004828:	f383 8811 	msr	BASEPRI, r3
 800482c:	f3bf 8f6f 	isb	sy
 8004830:	f3bf 8f4f 	dsb	sy
 8004834:	61fb      	str	r3, [r7, #28]
}
 8004836:	bf00      	nop
 8004838:	bf00      	nop
 800483a:	e7fd      	b.n	8004838 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800483c:	f000 ff50 	bl	80056e0 <xTaskGetSchedulerState>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d102      	bne.n	800484c <xQueueSemaphoreTake+0x64>
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <xQueueSemaphoreTake+0x68>
 800484c:	2301      	movs	r3, #1
 800484e:	e000      	b.n	8004852 <xQueueSemaphoreTake+0x6a>
 8004850:	2300      	movs	r3, #0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10b      	bne.n	800486e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8004856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800485a:	f383 8811 	msr	BASEPRI, r3
 800485e:	f3bf 8f6f 	isb	sy
 8004862:	f3bf 8f4f 	dsb	sy
 8004866:	61bb      	str	r3, [r7, #24]
}
 8004868:	bf00      	nop
 800486a:	bf00      	nop
 800486c:	e7fd      	b.n	800486a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800486e:	f001 fa8b 	bl	8005d88 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004876:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800487a:	2b00      	cmp	r3, #0
 800487c:	d024      	beq.n	80048c8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800487e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004880:	1e5a      	subs	r2, r3, #1
 8004882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004884:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d104      	bne.n	8004898 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800488e:	f001 f8d3 	bl	8005a38 <pvTaskIncrementMutexHeldCount>
 8004892:	4602      	mov	r2, r0
 8004894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004896:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00f      	beq.n	80048c0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048a2:	3310      	adds	r3, #16
 80048a4:	4618      	mov	r0, r3
 80048a6:	f000 fd75 	bl	8005394 <xTaskRemoveFromEventList>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d007      	beq.n	80048c0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80048b0:	4b54      	ldr	r3, [pc, #336]	@ (8004a04 <xQueueSemaphoreTake+0x21c>)
 80048b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048b6:	601a      	str	r2, [r3, #0]
 80048b8:	f3bf 8f4f 	dsb	sy
 80048bc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80048c0:	f001 fa94 	bl	8005dec <vPortExitCritical>
				return pdPASS;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e098      	b.n	80049fa <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d112      	bne.n	80048f4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80048ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00b      	beq.n	80048ec <xQueueSemaphoreTake+0x104>
	__asm volatile
 80048d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048d8:	f383 8811 	msr	BASEPRI, r3
 80048dc:	f3bf 8f6f 	isb	sy
 80048e0:	f3bf 8f4f 	dsb	sy
 80048e4:	617b      	str	r3, [r7, #20]
}
 80048e6:	bf00      	nop
 80048e8:	bf00      	nop
 80048ea:	e7fd      	b.n	80048e8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80048ec:	f001 fa7e 	bl	8005dec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80048f0:	2300      	movs	r3, #0
 80048f2:	e082      	b.n	80049fa <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80048f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d106      	bne.n	8004908 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80048fa:	f107 030c 	add.w	r3, r7, #12
 80048fe:	4618      	mov	r0, r3
 8004900:	f000 fdac 	bl	800545c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004904:	2301      	movs	r3, #1
 8004906:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004908:	f001 fa70 	bl	8005dec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800490c:	f000 fb52 	bl	8004fb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004910:	f001 fa3a 	bl	8005d88 <vPortEnterCritical>
 8004914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004916:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800491a:	b25b      	sxtb	r3, r3
 800491c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004920:	d103      	bne.n	800492a <xQueueSemaphoreTake+0x142>
 8004922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004924:	2200      	movs	r2, #0
 8004926:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800492a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800492c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004930:	b25b      	sxtb	r3, r3
 8004932:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004936:	d103      	bne.n	8004940 <xQueueSemaphoreTake+0x158>
 8004938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800493a:	2200      	movs	r2, #0
 800493c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004940:	f001 fa54 	bl	8005dec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004944:	463a      	mov	r2, r7
 8004946:	f107 030c 	add.w	r3, r7, #12
 800494a:	4611      	mov	r1, r2
 800494c:	4618      	mov	r0, r3
 800494e:	f000 fd9b 	bl	8005488 <xTaskCheckForTimeOut>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d132      	bne.n	80049be <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004958:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800495a:	f000 f929 	bl	8004bb0 <prvIsQueueEmpty>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d026      	beq.n	80049b2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d109      	bne.n	8004980 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800496c:	f001 fa0c 	bl	8005d88 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	4618      	mov	r0, r3
 8004976:	f000 fed1 	bl	800571c <xTaskPriorityInherit>
 800497a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800497c:	f001 fa36 	bl	8005dec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004982:	3324      	adds	r3, #36	@ 0x24
 8004984:	683a      	ldr	r2, [r7, #0]
 8004986:	4611      	mov	r1, r2
 8004988:	4618      	mov	r0, r3
 800498a:	f000 fcdd 	bl	8005348 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800498e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004990:	f000 f8bc 	bl	8004b0c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004994:	f000 fb1c 	bl	8004fd0 <xTaskResumeAll>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	f47f af67 	bne.w	800486e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80049a0:	4b18      	ldr	r3, [pc, #96]	@ (8004a04 <xQueueSemaphoreTake+0x21c>)
 80049a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	f3bf 8f4f 	dsb	sy
 80049ac:	f3bf 8f6f 	isb	sy
 80049b0:	e75d      	b.n	800486e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80049b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80049b4:	f000 f8aa 	bl	8004b0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049b8:	f000 fb0a 	bl	8004fd0 <xTaskResumeAll>
 80049bc:	e757      	b.n	800486e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80049be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80049c0:	f000 f8a4 	bl	8004b0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049c4:	f000 fb04 	bl	8004fd0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80049ca:	f000 f8f1 	bl	8004bb0 <prvIsQueueEmpty>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f43f af4c 	beq.w	800486e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80049d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00d      	beq.n	80049f8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80049dc:	f001 f9d4 	bl	8005d88 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80049e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80049e2:	f000 f811 	bl	8004a08 <prvGetDisinheritPriorityAfterTimeout>
 80049e6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80049e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80049ee:	4618      	mov	r0, r3
 80049f0:	f000 ff92 	bl	8005918 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80049f4:	f001 f9fa 	bl	8005dec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80049f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3738      	adds	r7, #56	@ 0x38
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	e000ed04 	.word	0xe000ed04

08004a08 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d006      	beq.n	8004a26 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f1c3 0307 	rsb	r3, r3, #7
 8004a22:	60fb      	str	r3, [r7, #12]
 8004a24:	e001      	b.n	8004a2a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004a26:	2300      	movs	r3, #0
 8004a28:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
	}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3714      	adds	r7, #20
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004a44:	2300      	movs	r3, #0
 8004a46:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a4c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10d      	bne.n	8004a72 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d14d      	bne.n	8004afa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 fed0 	bl	8005808 <xTaskPriorityDisinherit>
 8004a68:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	609a      	str	r2, [r3, #8]
 8004a70:	e043      	b.n	8004afa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d119      	bne.n	8004aac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6858      	ldr	r0, [r3, #4]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a80:	461a      	mov	r2, r3
 8004a82:	68b9      	ldr	r1, [r7, #8]
 8004a84:	f002 fdb9 	bl	80075fa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a90:	441a      	add	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	685a      	ldr	r2, [r3, #4]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d32b      	bcc.n	8004afa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	605a      	str	r2, [r3, #4]
 8004aaa:	e026      	b.n	8004afa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	68d8      	ldr	r0, [r3, #12]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	68b9      	ldr	r1, [r7, #8]
 8004ab8:	f002 fd9f 	bl	80075fa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	68da      	ldr	r2, [r3, #12]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac4:	425b      	negs	r3, r3
 8004ac6:	441a      	add	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	68da      	ldr	r2, [r3, #12]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d207      	bcs.n	8004ae8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae0:	425b      	negs	r3, r3
 8004ae2:	441a      	add	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d105      	bne.n	8004afa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d002      	beq.n	8004afa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	3b01      	subs	r3, #1
 8004af8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	1c5a      	adds	r2, r3, #1
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004b02:	697b      	ldr	r3, [r7, #20]
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3718      	adds	r7, #24
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004b14:	f001 f938 	bl	8005d88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b1e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b20:	e011      	b.n	8004b46 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d012      	beq.n	8004b50 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	3324      	adds	r3, #36	@ 0x24
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 fc30 	bl	8005394 <xTaskRemoveFromEventList>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004b3a:	f000 fd09 	bl	8005550 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004b3e:	7bfb      	ldrb	r3, [r7, #15]
 8004b40:	3b01      	subs	r3, #1
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	dce9      	bgt.n	8004b22 <prvUnlockQueue+0x16>
 8004b4e:	e000      	b.n	8004b52 <prvUnlockQueue+0x46>
					break;
 8004b50:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	22ff      	movs	r2, #255	@ 0xff
 8004b56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004b5a:	f001 f947 	bl	8005dec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004b5e:	f001 f913 	bl	8005d88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b68:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b6a:	e011      	b.n	8004b90 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d012      	beq.n	8004b9a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	3310      	adds	r3, #16
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f000 fc0b 	bl	8005394 <xTaskRemoveFromEventList>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d001      	beq.n	8004b88 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004b84:	f000 fce4 	bl	8005550 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004b88:	7bbb      	ldrb	r3, [r7, #14]
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	dce9      	bgt.n	8004b6c <prvUnlockQueue+0x60>
 8004b98:	e000      	b.n	8004b9c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004b9a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	22ff      	movs	r2, #255	@ 0xff
 8004ba0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004ba4:	f001 f922 	bl	8005dec <vPortExitCritical>
}
 8004ba8:	bf00      	nop
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004bb8:	f001 f8e6 	bl	8005d88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d102      	bne.n	8004bca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	60fb      	str	r3, [r7, #12]
 8004bc8:	e001      	b.n	8004bce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004bce:	f001 f90d 	bl	8005dec <vPortExitCritical>

	return xReturn;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3710      	adds	r7, #16
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004be4:	f001 f8d0 	bl	8005d88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d102      	bne.n	8004bfa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	60fb      	str	r3, [r7, #12]
 8004bf8:	e001      	b.n	8004bfe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004bfe:	f001 f8f5 	bl	8005dec <vPortExitCritical>

	return xReturn;
 8004c02:	68fb      	ldr	r3, [r7, #12]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b08c      	sub	sp, #48	@ 0x30
 8004c10:	af04      	add	r7, sp, #16
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	603b      	str	r3, [r7, #0]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004c1c:	88fb      	ldrh	r3, [r7, #6]
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4618      	mov	r0, r3
 8004c22:	f001 f991 	bl	8005f48 <pvPortMalloc>
 8004c26:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00e      	beq.n	8004c4c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004c2e:	20a0      	movs	r0, #160	@ 0xa0
 8004c30:	f001 f98a 	bl	8005f48 <pvPortMalloc>
 8004c34:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d003      	beq.n	8004c44 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c42:	e005      	b.n	8004c50 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004c44:	6978      	ldr	r0, [r7, #20]
 8004c46:	f001 fa4d 	bl	80060e4 <vPortFree>
 8004c4a:	e001      	b.n	8004c50 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d013      	beq.n	8004c7e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004c56:	88fa      	ldrh	r2, [r7, #6]
 8004c58:	2300      	movs	r3, #0
 8004c5a:	9303      	str	r3, [sp, #12]
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	9302      	str	r3, [sp, #8]
 8004c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c62:	9301      	str	r3, [sp, #4]
 8004c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c66:	9300      	str	r3, [sp, #0]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	68b9      	ldr	r1, [r7, #8]
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f000 f80f 	bl	8004c90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c72:	69f8      	ldr	r0, [r7, #28]
 8004c74:	f000 f8ac 	bl	8004dd0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	61bb      	str	r3, [r7, #24]
 8004c7c:	e002      	b.n	8004c84 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004c82:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c84:	69bb      	ldr	r3, [r7, #24]
	}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3720      	adds	r7, #32
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
	...

08004c90 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b088      	sub	sp, #32
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
 8004c9c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ca0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	4413      	add	r3, r2
 8004cae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	f023 0307 	bic.w	r3, r3, #7
 8004cb6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	f003 0307 	and.w	r3, r3, #7
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00b      	beq.n	8004cda <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc6:	f383 8811 	msr	BASEPRI, r3
 8004cca:	f3bf 8f6f 	isb	sy
 8004cce:	f3bf 8f4f 	dsb	sy
 8004cd2:	617b      	str	r3, [r7, #20]
}
 8004cd4:	bf00      	nop
 8004cd6:	bf00      	nop
 8004cd8:	e7fd      	b.n	8004cd6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d01f      	beq.n	8004d20 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	61fb      	str	r3, [r7, #28]
 8004ce4:	e012      	b.n	8004d0c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	4413      	add	r3, r2
 8004cec:	7819      	ldrb	r1, [r3, #0]
 8004cee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	3334      	adds	r3, #52	@ 0x34
 8004cf6:	460a      	mov	r2, r1
 8004cf8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	4413      	add	r3, r2
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d006      	beq.n	8004d14 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	3301      	adds	r3, #1
 8004d0a:	61fb      	str	r3, [r7, #28]
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	2b0f      	cmp	r3, #15
 8004d10:	d9e9      	bls.n	8004ce6 <prvInitialiseNewTask+0x56>
 8004d12:	e000      	b.n	8004d16 <prvInitialiseNewTask+0x86>
			{
				break;
 8004d14:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d1e:	e003      	b.n	8004d28 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d2a:	2b06      	cmp	r3, #6
 8004d2c:	d901      	bls.n	8004d32 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004d2e:	2306      	movs	r3, #6
 8004d30:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d36:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d3c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d40:	2200      	movs	r2, #0
 8004d42:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d46:	3304      	adds	r3, #4
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7ff faf7 	bl	800433c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d50:	3318      	adds	r3, #24
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7ff faf2 	bl	800433c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d5c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d60:	f1c3 0207 	rsb	r2, r3, #7
 8004d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d66:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d6c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d70:	2200      	movs	r2, #0
 8004d72:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d80:	334c      	adds	r3, #76	@ 0x4c
 8004d82:	224c      	movs	r2, #76	@ 0x4c
 8004d84:	2100      	movs	r1, #0
 8004d86:	4618      	mov	r0, r3
 8004d88:	f002 fb62 	bl	8007450 <memset>
 8004d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d8e:	4a0d      	ldr	r2, [pc, #52]	@ (8004dc4 <prvInitialiseNewTask+0x134>)
 8004d90:	651a      	str	r2, [r3, #80]	@ 0x50
 8004d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d94:	4a0c      	ldr	r2, [pc, #48]	@ (8004dc8 <prvInitialiseNewTask+0x138>)
 8004d96:	655a      	str	r2, [r3, #84]	@ 0x54
 8004d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d9a:	4a0c      	ldr	r2, [pc, #48]	@ (8004dcc <prvInitialiseNewTask+0x13c>)
 8004d9c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004d9e:	683a      	ldr	r2, [r7, #0]
 8004da0:	68f9      	ldr	r1, [r7, #12]
 8004da2:	69b8      	ldr	r0, [r7, #24]
 8004da4:	f000 fec2 	bl	8005b2c <pxPortInitialiseStack>
 8004da8:	4602      	mov	r2, r0
 8004daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d002      	beq.n	8004dba <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004db6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004db8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004dba:	bf00      	nop
 8004dbc:	3720      	adds	r7, #32
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	20005258 	.word	0x20005258
 8004dc8:	200052c0 	.word	0x200052c0
 8004dcc:	20005328 	.word	0x20005328

08004dd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004dd8:	f000 ffd6 	bl	8005d88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004ddc:	4b2a      	ldr	r3, [pc, #168]	@ (8004e88 <prvAddNewTaskToReadyList+0xb8>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	3301      	adds	r3, #1
 8004de2:	4a29      	ldr	r2, [pc, #164]	@ (8004e88 <prvAddNewTaskToReadyList+0xb8>)
 8004de4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004de6:	4b29      	ldr	r3, [pc, #164]	@ (8004e8c <prvAddNewTaskToReadyList+0xbc>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d109      	bne.n	8004e02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004dee:	4a27      	ldr	r2, [pc, #156]	@ (8004e8c <prvAddNewTaskToReadyList+0xbc>)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004df4:	4b24      	ldr	r3, [pc, #144]	@ (8004e88 <prvAddNewTaskToReadyList+0xb8>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d110      	bne.n	8004e1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004dfc:	f000 fbcc 	bl	8005598 <prvInitialiseTaskLists>
 8004e00:	e00d      	b.n	8004e1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004e02:	4b23      	ldr	r3, [pc, #140]	@ (8004e90 <prvAddNewTaskToReadyList+0xc0>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d109      	bne.n	8004e1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e0a:	4b20      	ldr	r3, [pc, #128]	@ (8004e8c <prvAddNewTaskToReadyList+0xbc>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d802      	bhi.n	8004e1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004e18:	4a1c      	ldr	r2, [pc, #112]	@ (8004e8c <prvAddNewTaskToReadyList+0xbc>)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004e1e:	4b1d      	ldr	r3, [pc, #116]	@ (8004e94 <prvAddNewTaskToReadyList+0xc4>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	3301      	adds	r3, #1
 8004e24:	4a1b      	ldr	r2, [pc, #108]	@ (8004e94 <prvAddNewTaskToReadyList+0xc4>)
 8004e26:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	409a      	lsls	r2, r3
 8004e30:	4b19      	ldr	r3, [pc, #100]	@ (8004e98 <prvAddNewTaskToReadyList+0xc8>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	4a18      	ldr	r2, [pc, #96]	@ (8004e98 <prvAddNewTaskToReadyList+0xc8>)
 8004e38:	6013      	str	r3, [r2, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e3e:	4613      	mov	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4413      	add	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4a15      	ldr	r2, [pc, #84]	@ (8004e9c <prvAddNewTaskToReadyList+0xcc>)
 8004e48:	441a      	add	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	3304      	adds	r3, #4
 8004e4e:	4619      	mov	r1, r3
 8004e50:	4610      	mov	r0, r2
 8004e52:	f7ff fa80 	bl	8004356 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004e56:	f000 ffc9 	bl	8005dec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e90 <prvAddNewTaskToReadyList+0xc0>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00e      	beq.n	8004e80 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004e62:	4b0a      	ldr	r3, [pc, #40]	@ (8004e8c <prvAddNewTaskToReadyList+0xbc>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d207      	bcs.n	8004e80 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004e70:	4b0b      	ldr	r3, [pc, #44]	@ (8004ea0 <prvAddNewTaskToReadyList+0xd0>)
 8004e72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e76:	601a      	str	r2, [r3, #0]
 8004e78:	f3bf 8f4f 	dsb	sy
 8004e7c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e80:	bf00      	nop
 8004e82:	3708      	adds	r7, #8
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	200003e4 	.word	0x200003e4
 8004e8c:	200002e4 	.word	0x200002e4
 8004e90:	200003f0 	.word	0x200003f0
 8004e94:	20000400 	.word	0x20000400
 8004e98:	200003ec 	.word	0x200003ec
 8004e9c:	200002e8 	.word	0x200002e8
 8004ea0:	e000ed04 	.word	0xe000ed04

08004ea4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004eac:	2300      	movs	r3, #0
 8004eae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d018      	beq.n	8004ee8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004eb6:	4b14      	ldr	r3, [pc, #80]	@ (8004f08 <vTaskDelay+0x64>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00b      	beq.n	8004ed6 <vTaskDelay+0x32>
	__asm volatile
 8004ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec2:	f383 8811 	msr	BASEPRI, r3
 8004ec6:	f3bf 8f6f 	isb	sy
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	60bb      	str	r3, [r7, #8]
}
 8004ed0:	bf00      	nop
 8004ed2:	bf00      	nop
 8004ed4:	e7fd      	b.n	8004ed2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004ed6:	f000 f86d 	bl	8004fb4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004eda:	2100      	movs	r1, #0
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 fdbf 	bl	8005a60 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004ee2:	f000 f875 	bl	8004fd0 <xTaskResumeAll>
 8004ee6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d107      	bne.n	8004efe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004eee:	4b07      	ldr	r3, [pc, #28]	@ (8004f0c <vTaskDelay+0x68>)
 8004ef0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ef4:	601a      	str	r2, [r3, #0]
 8004ef6:	f3bf 8f4f 	dsb	sy
 8004efa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004efe:	bf00      	nop
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	2000040c 	.word	0x2000040c
 8004f0c:	e000ed04 	.word	0xe000ed04

08004f10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8004f16:	4b1f      	ldr	r3, [pc, #124]	@ (8004f94 <vTaskStartScheduler+0x84>)
 8004f18:	9301      	str	r3, [sp, #4]
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	9300      	str	r3, [sp, #0]
 8004f1e:	2300      	movs	r3, #0
 8004f20:	2280      	movs	r2, #128	@ 0x80
 8004f22:	491d      	ldr	r1, [pc, #116]	@ (8004f98 <vTaskStartScheduler+0x88>)
 8004f24:	481d      	ldr	r0, [pc, #116]	@ (8004f9c <vTaskStartScheduler+0x8c>)
 8004f26:	f7ff fe71 	bl	8004c0c <xTaskCreate>
 8004f2a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d11b      	bne.n	8004f6a <vTaskStartScheduler+0x5a>
	__asm volatile
 8004f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f36:	f383 8811 	msr	BASEPRI, r3
 8004f3a:	f3bf 8f6f 	isb	sy
 8004f3e:	f3bf 8f4f 	dsb	sy
 8004f42:	60bb      	str	r3, [r7, #8]
}
 8004f44:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004f46:	4b16      	ldr	r3, [pc, #88]	@ (8004fa0 <vTaskStartScheduler+0x90>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	334c      	adds	r3, #76	@ 0x4c
 8004f4c:	4a15      	ldr	r2, [pc, #84]	@ (8004fa4 <vTaskStartScheduler+0x94>)
 8004f4e:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004f50:	4b15      	ldr	r3, [pc, #84]	@ (8004fa8 <vTaskStartScheduler+0x98>)
 8004f52:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004f56:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004f58:	4b14      	ldr	r3, [pc, #80]	@ (8004fac <vTaskStartScheduler+0x9c>)
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004f5e:	4b14      	ldr	r3, [pc, #80]	@ (8004fb0 <vTaskStartScheduler+0xa0>)
 8004f60:	2200      	movs	r2, #0
 8004f62:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004f64:	f000 fe6c 	bl	8005c40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004f68:	e00f      	b.n	8004f8a <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f70:	d10b      	bne.n	8004f8a <vTaskStartScheduler+0x7a>
	__asm volatile
 8004f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f76:	f383 8811 	msr	BASEPRI, r3
 8004f7a:	f3bf 8f6f 	isb	sy
 8004f7e:	f3bf 8f4f 	dsb	sy
 8004f82:	607b      	str	r3, [r7, #4]
}
 8004f84:	bf00      	nop
 8004f86:	bf00      	nop
 8004f88:	e7fd      	b.n	8004f86 <vTaskStartScheduler+0x76>
}
 8004f8a:	bf00      	nop
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	20000408 	.word	0x20000408
 8004f98:	0800adf8 	.word	0x0800adf8
 8004f9c:	08005569 	.word	0x08005569
 8004fa0:	200002e4 	.word	0x200002e4
 8004fa4:	2000001c 	.word	0x2000001c
 8004fa8:	20000404 	.word	0x20000404
 8004fac:	200003f0 	.word	0x200003f0
 8004fb0:	200003e8 	.word	0x200003e8

08004fb4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004fb8:	4b04      	ldr	r3, [pc, #16]	@ (8004fcc <vTaskSuspendAll+0x18>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	4a03      	ldr	r2, [pc, #12]	@ (8004fcc <vTaskSuspendAll+0x18>)
 8004fc0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004fc2:	bf00      	nop
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr
 8004fcc:	2000040c 	.word	0x2000040c

08004fd0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004fde:	4b42      	ldr	r3, [pc, #264]	@ (80050e8 <xTaskResumeAll+0x118>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10b      	bne.n	8004ffe <xTaskResumeAll+0x2e>
	__asm volatile
 8004fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fea:	f383 8811 	msr	BASEPRI, r3
 8004fee:	f3bf 8f6f 	isb	sy
 8004ff2:	f3bf 8f4f 	dsb	sy
 8004ff6:	603b      	str	r3, [r7, #0]
}
 8004ff8:	bf00      	nop
 8004ffa:	bf00      	nop
 8004ffc:	e7fd      	b.n	8004ffa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004ffe:	f000 fec3 	bl	8005d88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005002:	4b39      	ldr	r3, [pc, #228]	@ (80050e8 <xTaskResumeAll+0x118>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	3b01      	subs	r3, #1
 8005008:	4a37      	ldr	r2, [pc, #220]	@ (80050e8 <xTaskResumeAll+0x118>)
 800500a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800500c:	4b36      	ldr	r3, [pc, #216]	@ (80050e8 <xTaskResumeAll+0x118>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d161      	bne.n	80050d8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005014:	4b35      	ldr	r3, [pc, #212]	@ (80050ec <xTaskResumeAll+0x11c>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d05d      	beq.n	80050d8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800501c:	e02e      	b.n	800507c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800501e:	4b34      	ldr	r3, [pc, #208]	@ (80050f0 <xTaskResumeAll+0x120>)
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	3318      	adds	r3, #24
 800502a:	4618      	mov	r0, r3
 800502c:	f7ff f9f0 	bl	8004410 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	3304      	adds	r3, #4
 8005034:	4618      	mov	r0, r3
 8005036:	f7ff f9eb 	bl	8004410 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800503e:	2201      	movs	r2, #1
 8005040:	409a      	lsls	r2, r3
 8005042:	4b2c      	ldr	r3, [pc, #176]	@ (80050f4 <xTaskResumeAll+0x124>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4313      	orrs	r3, r2
 8005048:	4a2a      	ldr	r2, [pc, #168]	@ (80050f4 <xTaskResumeAll+0x124>)
 800504a:	6013      	str	r3, [r2, #0]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005050:	4613      	mov	r3, r2
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	4413      	add	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4a27      	ldr	r2, [pc, #156]	@ (80050f8 <xTaskResumeAll+0x128>)
 800505a:	441a      	add	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	3304      	adds	r3, #4
 8005060:	4619      	mov	r1, r3
 8005062:	4610      	mov	r0, r2
 8005064:	f7ff f977 	bl	8004356 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800506c:	4b23      	ldr	r3, [pc, #140]	@ (80050fc <xTaskResumeAll+0x12c>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005072:	429a      	cmp	r2, r3
 8005074:	d302      	bcc.n	800507c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005076:	4b22      	ldr	r3, [pc, #136]	@ (8005100 <xTaskResumeAll+0x130>)
 8005078:	2201      	movs	r2, #1
 800507a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800507c:	4b1c      	ldr	r3, [pc, #112]	@ (80050f0 <xTaskResumeAll+0x120>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1cc      	bne.n	800501e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d001      	beq.n	800508e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800508a:	f000 fb09 	bl	80056a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800508e:	4b1d      	ldr	r3, [pc, #116]	@ (8005104 <xTaskResumeAll+0x134>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d010      	beq.n	80050bc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800509a:	f000 f837 	bl	800510c <xTaskIncrementTick>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d002      	beq.n	80050aa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80050a4:	4b16      	ldr	r3, [pc, #88]	@ (8005100 <xTaskResumeAll+0x130>)
 80050a6:	2201      	movs	r2, #1
 80050a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	3b01      	subs	r3, #1
 80050ae:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1f1      	bne.n	800509a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80050b6:	4b13      	ldr	r3, [pc, #76]	@ (8005104 <xTaskResumeAll+0x134>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80050bc:	4b10      	ldr	r3, [pc, #64]	@ (8005100 <xTaskResumeAll+0x130>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d009      	beq.n	80050d8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80050c4:	2301      	movs	r3, #1
 80050c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80050c8:	4b0f      	ldr	r3, [pc, #60]	@ (8005108 <xTaskResumeAll+0x138>)
 80050ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050ce:	601a      	str	r2, [r3, #0]
 80050d0:	f3bf 8f4f 	dsb	sy
 80050d4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80050d8:	f000 fe88 	bl	8005dec <vPortExitCritical>

	return xAlreadyYielded;
 80050dc:	68bb      	ldr	r3, [r7, #8]
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	2000040c 	.word	0x2000040c
 80050ec:	200003e4 	.word	0x200003e4
 80050f0:	200003a4 	.word	0x200003a4
 80050f4:	200003ec 	.word	0x200003ec
 80050f8:	200002e8 	.word	0x200002e8
 80050fc:	200002e4 	.word	0x200002e4
 8005100:	200003f8 	.word	0x200003f8
 8005104:	200003f4 	.word	0x200003f4
 8005108:	e000ed04 	.word	0xe000ed04

0800510c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b086      	sub	sp, #24
 8005110:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005112:	2300      	movs	r3, #0
 8005114:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005116:	4b4f      	ldr	r3, [pc, #316]	@ (8005254 <xTaskIncrementTick+0x148>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	f040 808f 	bne.w	800523e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005120:	4b4d      	ldr	r3, [pc, #308]	@ (8005258 <xTaskIncrementTick+0x14c>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	3301      	adds	r3, #1
 8005126:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005128:	4a4b      	ldr	r2, [pc, #300]	@ (8005258 <xTaskIncrementTick+0x14c>)
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d121      	bne.n	8005178 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005134:	4b49      	ldr	r3, [pc, #292]	@ (800525c <xTaskIncrementTick+0x150>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00b      	beq.n	8005156 <xTaskIncrementTick+0x4a>
	__asm volatile
 800513e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005142:	f383 8811 	msr	BASEPRI, r3
 8005146:	f3bf 8f6f 	isb	sy
 800514a:	f3bf 8f4f 	dsb	sy
 800514e:	603b      	str	r3, [r7, #0]
}
 8005150:	bf00      	nop
 8005152:	bf00      	nop
 8005154:	e7fd      	b.n	8005152 <xTaskIncrementTick+0x46>
 8005156:	4b41      	ldr	r3, [pc, #260]	@ (800525c <xTaskIncrementTick+0x150>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	60fb      	str	r3, [r7, #12]
 800515c:	4b40      	ldr	r3, [pc, #256]	@ (8005260 <xTaskIncrementTick+0x154>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a3e      	ldr	r2, [pc, #248]	@ (800525c <xTaskIncrementTick+0x150>)
 8005162:	6013      	str	r3, [r2, #0]
 8005164:	4a3e      	ldr	r2, [pc, #248]	@ (8005260 <xTaskIncrementTick+0x154>)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6013      	str	r3, [r2, #0]
 800516a:	4b3e      	ldr	r3, [pc, #248]	@ (8005264 <xTaskIncrementTick+0x158>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	3301      	adds	r3, #1
 8005170:	4a3c      	ldr	r2, [pc, #240]	@ (8005264 <xTaskIncrementTick+0x158>)
 8005172:	6013      	str	r3, [r2, #0]
 8005174:	f000 fa94 	bl	80056a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005178:	4b3b      	ldr	r3, [pc, #236]	@ (8005268 <xTaskIncrementTick+0x15c>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	429a      	cmp	r2, r3
 8005180:	d348      	bcc.n	8005214 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005182:	4b36      	ldr	r3, [pc, #216]	@ (800525c <xTaskIncrementTick+0x150>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d104      	bne.n	8005196 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800518c:	4b36      	ldr	r3, [pc, #216]	@ (8005268 <xTaskIncrementTick+0x15c>)
 800518e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005192:	601a      	str	r2, [r3, #0]
					break;
 8005194:	e03e      	b.n	8005214 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005196:	4b31      	ldr	r3, [pc, #196]	@ (800525c <xTaskIncrementTick+0x150>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d203      	bcs.n	80051b6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80051ae:	4a2e      	ldr	r2, [pc, #184]	@ (8005268 <xTaskIncrementTick+0x15c>)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80051b4:	e02e      	b.n	8005214 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	3304      	adds	r3, #4
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7ff f928 	bl	8004410 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d004      	beq.n	80051d2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	3318      	adds	r3, #24
 80051cc:	4618      	mov	r0, r3
 80051ce:	f7ff f91f 	bl	8004410 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d6:	2201      	movs	r2, #1
 80051d8:	409a      	lsls	r2, r3
 80051da:	4b24      	ldr	r3, [pc, #144]	@ (800526c <xTaskIncrementTick+0x160>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4313      	orrs	r3, r2
 80051e0:	4a22      	ldr	r2, [pc, #136]	@ (800526c <xTaskIncrementTick+0x160>)
 80051e2:	6013      	str	r3, [r2, #0]
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051e8:	4613      	mov	r3, r2
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	4413      	add	r3, r2
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4a1f      	ldr	r2, [pc, #124]	@ (8005270 <xTaskIncrementTick+0x164>)
 80051f2:	441a      	add	r2, r3
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	3304      	adds	r3, #4
 80051f8:	4619      	mov	r1, r3
 80051fa:	4610      	mov	r0, r2
 80051fc:	f7ff f8ab 	bl	8004356 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005204:	4b1b      	ldr	r3, [pc, #108]	@ (8005274 <xTaskIncrementTick+0x168>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800520a:	429a      	cmp	r2, r3
 800520c:	d3b9      	bcc.n	8005182 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800520e:	2301      	movs	r3, #1
 8005210:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005212:	e7b6      	b.n	8005182 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005214:	4b17      	ldr	r3, [pc, #92]	@ (8005274 <xTaskIncrementTick+0x168>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800521a:	4915      	ldr	r1, [pc, #84]	@ (8005270 <xTaskIncrementTick+0x164>)
 800521c:	4613      	mov	r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4413      	add	r3, r2
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	440b      	add	r3, r1
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d901      	bls.n	8005230 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800522c:	2301      	movs	r3, #1
 800522e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005230:	4b11      	ldr	r3, [pc, #68]	@ (8005278 <xTaskIncrementTick+0x16c>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d007      	beq.n	8005248 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005238:	2301      	movs	r3, #1
 800523a:	617b      	str	r3, [r7, #20]
 800523c:	e004      	b.n	8005248 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800523e:	4b0f      	ldr	r3, [pc, #60]	@ (800527c <xTaskIncrementTick+0x170>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	3301      	adds	r3, #1
 8005244:	4a0d      	ldr	r2, [pc, #52]	@ (800527c <xTaskIncrementTick+0x170>)
 8005246:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005248:	697b      	ldr	r3, [r7, #20]
}
 800524a:	4618      	mov	r0, r3
 800524c:	3718      	adds	r7, #24
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	2000040c 	.word	0x2000040c
 8005258:	200003e8 	.word	0x200003e8
 800525c:	2000039c 	.word	0x2000039c
 8005260:	200003a0 	.word	0x200003a0
 8005264:	200003fc 	.word	0x200003fc
 8005268:	20000404 	.word	0x20000404
 800526c:	200003ec 	.word	0x200003ec
 8005270:	200002e8 	.word	0x200002e8
 8005274:	200002e4 	.word	0x200002e4
 8005278:	200003f8 	.word	0x200003f8
 800527c:	200003f4 	.word	0x200003f4

08005280 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005280:	b480      	push	{r7}
 8005282:	b087      	sub	sp, #28
 8005284:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005286:	4b2a      	ldr	r3, [pc, #168]	@ (8005330 <vTaskSwitchContext+0xb0>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d003      	beq.n	8005296 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800528e:	4b29      	ldr	r3, [pc, #164]	@ (8005334 <vTaskSwitchContext+0xb4>)
 8005290:	2201      	movs	r2, #1
 8005292:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005294:	e045      	b.n	8005322 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8005296:	4b27      	ldr	r3, [pc, #156]	@ (8005334 <vTaskSwitchContext+0xb4>)
 8005298:	2200      	movs	r2, #0
 800529a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800529c:	4b26      	ldr	r3, [pc, #152]	@ (8005338 <vTaskSwitchContext+0xb8>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	fab3 f383 	clz	r3, r3
 80052a8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80052aa:	7afb      	ldrb	r3, [r7, #11]
 80052ac:	f1c3 031f 	rsb	r3, r3, #31
 80052b0:	617b      	str	r3, [r7, #20]
 80052b2:	4922      	ldr	r1, [pc, #136]	@ (800533c <vTaskSwitchContext+0xbc>)
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	4613      	mov	r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	4413      	add	r3, r2
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	440b      	add	r3, r1
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10b      	bne.n	80052de <vTaskSwitchContext+0x5e>
	__asm volatile
 80052c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ca:	f383 8811 	msr	BASEPRI, r3
 80052ce:	f3bf 8f6f 	isb	sy
 80052d2:	f3bf 8f4f 	dsb	sy
 80052d6:	607b      	str	r3, [r7, #4]
}
 80052d8:	bf00      	nop
 80052da:	bf00      	nop
 80052dc:	e7fd      	b.n	80052da <vTaskSwitchContext+0x5a>
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	4613      	mov	r3, r2
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	4413      	add	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4a14      	ldr	r2, [pc, #80]	@ (800533c <vTaskSwitchContext+0xbc>)
 80052ea:	4413      	add	r3, r2
 80052ec:	613b      	str	r3, [r7, #16]
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	685a      	ldr	r2, [r3, #4]
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	605a      	str	r2, [r3, #4]
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	685a      	ldr	r2, [r3, #4]
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	3308      	adds	r3, #8
 8005300:	429a      	cmp	r2, r3
 8005302:	d104      	bne.n	800530e <vTaskSwitchContext+0x8e>
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	605a      	str	r2, [r3, #4]
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	4a0a      	ldr	r2, [pc, #40]	@ (8005340 <vTaskSwitchContext+0xc0>)
 8005316:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005318:	4b09      	ldr	r3, [pc, #36]	@ (8005340 <vTaskSwitchContext+0xc0>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	334c      	adds	r3, #76	@ 0x4c
 800531e:	4a09      	ldr	r2, [pc, #36]	@ (8005344 <vTaskSwitchContext+0xc4>)
 8005320:	6013      	str	r3, [r2, #0]
}
 8005322:	bf00      	nop
 8005324:	371c      	adds	r7, #28
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	2000040c 	.word	0x2000040c
 8005334:	200003f8 	.word	0x200003f8
 8005338:	200003ec 	.word	0x200003ec
 800533c:	200002e8 	.word	0x200002e8
 8005340:	200002e4 	.word	0x200002e4
 8005344:	2000001c 	.word	0x2000001c

08005348 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10b      	bne.n	8005370 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800535c:	f383 8811 	msr	BASEPRI, r3
 8005360:	f3bf 8f6f 	isb	sy
 8005364:	f3bf 8f4f 	dsb	sy
 8005368:	60fb      	str	r3, [r7, #12]
}
 800536a:	bf00      	nop
 800536c:	bf00      	nop
 800536e:	e7fd      	b.n	800536c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005370:	4b07      	ldr	r3, [pc, #28]	@ (8005390 <vTaskPlaceOnEventList+0x48>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	3318      	adds	r3, #24
 8005376:	4619      	mov	r1, r3
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f7ff f810 	bl	800439e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800537e:	2101      	movs	r1, #1
 8005380:	6838      	ldr	r0, [r7, #0]
 8005382:	f000 fb6d 	bl	8005a60 <prvAddCurrentTaskToDelayedList>
}
 8005386:	bf00      	nop
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	200002e4 	.word	0x200002e4

08005394 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b086      	sub	sp, #24
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10b      	bne.n	80053c2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80053aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ae:	f383 8811 	msr	BASEPRI, r3
 80053b2:	f3bf 8f6f 	isb	sy
 80053b6:	f3bf 8f4f 	dsb	sy
 80053ba:	60fb      	str	r3, [r7, #12]
}
 80053bc:	bf00      	nop
 80053be:	bf00      	nop
 80053c0:	e7fd      	b.n	80053be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	3318      	adds	r3, #24
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7ff f822 	bl	8004410 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053cc:	4b1d      	ldr	r3, [pc, #116]	@ (8005444 <xTaskRemoveFromEventList+0xb0>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d11c      	bne.n	800540e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	3304      	adds	r3, #4
 80053d8:	4618      	mov	r0, r3
 80053da:	f7ff f819 	bl	8004410 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e2:	2201      	movs	r2, #1
 80053e4:	409a      	lsls	r2, r3
 80053e6:	4b18      	ldr	r3, [pc, #96]	@ (8005448 <xTaskRemoveFromEventList+0xb4>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	4a16      	ldr	r2, [pc, #88]	@ (8005448 <xTaskRemoveFromEventList+0xb4>)
 80053ee:	6013      	str	r3, [r2, #0]
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053f4:	4613      	mov	r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	4413      	add	r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	4a13      	ldr	r2, [pc, #76]	@ (800544c <xTaskRemoveFromEventList+0xb8>)
 80053fe:	441a      	add	r2, r3
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	3304      	adds	r3, #4
 8005404:	4619      	mov	r1, r3
 8005406:	4610      	mov	r0, r2
 8005408:	f7fe ffa5 	bl	8004356 <vListInsertEnd>
 800540c:	e005      	b.n	800541a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	3318      	adds	r3, #24
 8005412:	4619      	mov	r1, r3
 8005414:	480e      	ldr	r0, [pc, #56]	@ (8005450 <xTaskRemoveFromEventList+0xbc>)
 8005416:	f7fe ff9e 	bl	8004356 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800541e:	4b0d      	ldr	r3, [pc, #52]	@ (8005454 <xTaskRemoveFromEventList+0xc0>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005424:	429a      	cmp	r2, r3
 8005426:	d905      	bls.n	8005434 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005428:	2301      	movs	r3, #1
 800542a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800542c:	4b0a      	ldr	r3, [pc, #40]	@ (8005458 <xTaskRemoveFromEventList+0xc4>)
 800542e:	2201      	movs	r2, #1
 8005430:	601a      	str	r2, [r3, #0]
 8005432:	e001      	b.n	8005438 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005434:	2300      	movs	r3, #0
 8005436:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005438:	697b      	ldr	r3, [r7, #20]
}
 800543a:	4618      	mov	r0, r3
 800543c:	3718      	adds	r7, #24
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	2000040c 	.word	0x2000040c
 8005448:	200003ec 	.word	0x200003ec
 800544c:	200002e8 	.word	0x200002e8
 8005450:	200003a4 	.word	0x200003a4
 8005454:	200002e4 	.word	0x200002e4
 8005458:	200003f8 	.word	0x200003f8

0800545c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005464:	4b06      	ldr	r3, [pc, #24]	@ (8005480 <vTaskInternalSetTimeOutState+0x24>)
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800546c:	4b05      	ldr	r3, [pc, #20]	@ (8005484 <vTaskInternalSetTimeOutState+0x28>)
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	605a      	str	r2, [r3, #4]
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr
 8005480:	200003fc 	.word	0x200003fc
 8005484:	200003e8 	.word	0x200003e8

08005488 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b088      	sub	sp, #32
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d10b      	bne.n	80054b0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800549c:	f383 8811 	msr	BASEPRI, r3
 80054a0:	f3bf 8f6f 	isb	sy
 80054a4:	f3bf 8f4f 	dsb	sy
 80054a8:	613b      	str	r3, [r7, #16]
}
 80054aa:	bf00      	nop
 80054ac:	bf00      	nop
 80054ae:	e7fd      	b.n	80054ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d10b      	bne.n	80054ce <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80054b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ba:	f383 8811 	msr	BASEPRI, r3
 80054be:	f3bf 8f6f 	isb	sy
 80054c2:	f3bf 8f4f 	dsb	sy
 80054c6:	60fb      	str	r3, [r7, #12]
}
 80054c8:	bf00      	nop
 80054ca:	bf00      	nop
 80054cc:	e7fd      	b.n	80054ca <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80054ce:	f000 fc5b 	bl	8005d88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80054d2:	4b1d      	ldr	r3, [pc, #116]	@ (8005548 <xTaskCheckForTimeOut+0xc0>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	69ba      	ldr	r2, [r7, #24]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80054ea:	d102      	bne.n	80054f2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80054ec:	2300      	movs	r3, #0
 80054ee:	61fb      	str	r3, [r7, #28]
 80054f0:	e023      	b.n	800553a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	4b15      	ldr	r3, [pc, #84]	@ (800554c <xTaskCheckForTimeOut+0xc4>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d007      	beq.n	800550e <xTaskCheckForTimeOut+0x86>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	69ba      	ldr	r2, [r7, #24]
 8005504:	429a      	cmp	r2, r3
 8005506:	d302      	bcc.n	800550e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005508:	2301      	movs	r3, #1
 800550a:	61fb      	str	r3, [r7, #28]
 800550c:	e015      	b.n	800553a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	429a      	cmp	r2, r3
 8005516:	d20b      	bcs.n	8005530 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	1ad2      	subs	r2, r2, r3
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f7ff ff99 	bl	800545c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800552a:	2300      	movs	r3, #0
 800552c:	61fb      	str	r3, [r7, #28]
 800552e:	e004      	b.n	800553a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	2200      	movs	r2, #0
 8005534:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005536:	2301      	movs	r3, #1
 8005538:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800553a:	f000 fc57 	bl	8005dec <vPortExitCritical>

	return xReturn;
 800553e:	69fb      	ldr	r3, [r7, #28]
}
 8005540:	4618      	mov	r0, r3
 8005542:	3720      	adds	r7, #32
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	200003e8 	.word	0x200003e8
 800554c:	200003fc 	.word	0x200003fc

08005550 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005550:	b480      	push	{r7}
 8005552:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005554:	4b03      	ldr	r3, [pc, #12]	@ (8005564 <vTaskMissedYield+0x14>)
 8005556:	2201      	movs	r2, #1
 8005558:	601a      	str	r2, [r3, #0]
}
 800555a:	bf00      	nop
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr
 8005564:	200003f8 	.word	0x200003f8

08005568 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005570:	f000 f852 	bl	8005618 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005574:	4b06      	ldr	r3, [pc, #24]	@ (8005590 <prvIdleTask+0x28>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d9f9      	bls.n	8005570 <prvIdleTask+0x8>
			{
				taskYIELD();
 800557c:	4b05      	ldr	r3, [pc, #20]	@ (8005594 <prvIdleTask+0x2c>)
 800557e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005582:	601a      	str	r2, [r3, #0]
 8005584:	f3bf 8f4f 	dsb	sy
 8005588:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800558c:	e7f0      	b.n	8005570 <prvIdleTask+0x8>
 800558e:	bf00      	nop
 8005590:	200002e8 	.word	0x200002e8
 8005594:	e000ed04 	.word	0xe000ed04

08005598 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800559e:	2300      	movs	r3, #0
 80055a0:	607b      	str	r3, [r7, #4]
 80055a2:	e00c      	b.n	80055be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	4613      	mov	r3, r2
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	4413      	add	r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	4a12      	ldr	r2, [pc, #72]	@ (80055f8 <prvInitialiseTaskLists+0x60>)
 80055b0:	4413      	add	r3, r2
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7fe fea2 	bl	80042fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	3301      	adds	r3, #1
 80055bc:	607b      	str	r3, [r7, #4]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2b06      	cmp	r3, #6
 80055c2:	d9ef      	bls.n	80055a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80055c4:	480d      	ldr	r0, [pc, #52]	@ (80055fc <prvInitialiseTaskLists+0x64>)
 80055c6:	f7fe fe99 	bl	80042fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80055ca:	480d      	ldr	r0, [pc, #52]	@ (8005600 <prvInitialiseTaskLists+0x68>)
 80055cc:	f7fe fe96 	bl	80042fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80055d0:	480c      	ldr	r0, [pc, #48]	@ (8005604 <prvInitialiseTaskLists+0x6c>)
 80055d2:	f7fe fe93 	bl	80042fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80055d6:	480c      	ldr	r0, [pc, #48]	@ (8005608 <prvInitialiseTaskLists+0x70>)
 80055d8:	f7fe fe90 	bl	80042fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80055dc:	480b      	ldr	r0, [pc, #44]	@ (800560c <prvInitialiseTaskLists+0x74>)
 80055de:	f7fe fe8d 	bl	80042fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80055e2:	4b0b      	ldr	r3, [pc, #44]	@ (8005610 <prvInitialiseTaskLists+0x78>)
 80055e4:	4a05      	ldr	r2, [pc, #20]	@ (80055fc <prvInitialiseTaskLists+0x64>)
 80055e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80055e8:	4b0a      	ldr	r3, [pc, #40]	@ (8005614 <prvInitialiseTaskLists+0x7c>)
 80055ea:	4a05      	ldr	r2, [pc, #20]	@ (8005600 <prvInitialiseTaskLists+0x68>)
 80055ec:	601a      	str	r2, [r3, #0]
}
 80055ee:	bf00      	nop
 80055f0:	3708      	adds	r7, #8
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	200002e8 	.word	0x200002e8
 80055fc:	20000374 	.word	0x20000374
 8005600:	20000388 	.word	0x20000388
 8005604:	200003a4 	.word	0x200003a4
 8005608:	200003b8 	.word	0x200003b8
 800560c:	200003d0 	.word	0x200003d0
 8005610:	2000039c 	.word	0x2000039c
 8005614:	200003a0 	.word	0x200003a0

08005618 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800561e:	e019      	b.n	8005654 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005620:	f000 fbb2 	bl	8005d88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005624:	4b10      	ldr	r3, [pc, #64]	@ (8005668 <prvCheckTasksWaitingTermination+0x50>)
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	3304      	adds	r3, #4
 8005630:	4618      	mov	r0, r3
 8005632:	f7fe feed 	bl	8004410 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005636:	4b0d      	ldr	r3, [pc, #52]	@ (800566c <prvCheckTasksWaitingTermination+0x54>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	3b01      	subs	r3, #1
 800563c:	4a0b      	ldr	r2, [pc, #44]	@ (800566c <prvCheckTasksWaitingTermination+0x54>)
 800563e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005640:	4b0b      	ldr	r3, [pc, #44]	@ (8005670 <prvCheckTasksWaitingTermination+0x58>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	3b01      	subs	r3, #1
 8005646:	4a0a      	ldr	r2, [pc, #40]	@ (8005670 <prvCheckTasksWaitingTermination+0x58>)
 8005648:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800564a:	f000 fbcf 	bl	8005dec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 f810 	bl	8005674 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005654:	4b06      	ldr	r3, [pc, #24]	@ (8005670 <prvCheckTasksWaitingTermination+0x58>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1e1      	bne.n	8005620 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800565c:	bf00      	nop
 800565e:	bf00      	nop
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	200003b8 	.word	0x200003b8
 800566c:	200003e4 	.word	0x200003e4
 8005670:	200003cc 	.word	0x200003cc

08005674 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	334c      	adds	r3, #76	@ 0x4c
 8005680:	4618      	mov	r0, r3
 8005682:	f001 ff01 	bl	8007488 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800568a:	4618      	mov	r0, r3
 800568c:	f000 fd2a 	bl	80060e4 <vPortFree>
			vPortFree( pxTCB );
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 fd27 	bl	80060e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005696:	bf00      	nop
 8005698:	3708      	adds	r7, #8
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
	...

080056a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056a6:	4b0c      	ldr	r3, [pc, #48]	@ (80056d8 <prvResetNextTaskUnblockTime+0x38>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d104      	bne.n	80056ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80056b0:	4b0a      	ldr	r3, [pc, #40]	@ (80056dc <prvResetNextTaskUnblockTime+0x3c>)
 80056b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80056b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80056b8:	e008      	b.n	80056cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056ba:	4b07      	ldr	r3, [pc, #28]	@ (80056d8 <prvResetNextTaskUnblockTime+0x38>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	4a04      	ldr	r2, [pc, #16]	@ (80056dc <prvResetNextTaskUnblockTime+0x3c>)
 80056ca:	6013      	str	r3, [r2, #0]
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr
 80056d8:	2000039c 	.word	0x2000039c
 80056dc:	20000404 	.word	0x20000404

080056e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80056e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005714 <xTaskGetSchedulerState+0x34>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d102      	bne.n	80056f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80056ee:	2301      	movs	r3, #1
 80056f0:	607b      	str	r3, [r7, #4]
 80056f2:	e008      	b.n	8005706 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056f4:	4b08      	ldr	r3, [pc, #32]	@ (8005718 <xTaskGetSchedulerState+0x38>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d102      	bne.n	8005702 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80056fc:	2302      	movs	r3, #2
 80056fe:	607b      	str	r3, [r7, #4]
 8005700:	e001      	b.n	8005706 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005702:	2300      	movs	r3, #0
 8005704:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005706:	687b      	ldr	r3, [r7, #4]
	}
 8005708:	4618      	mov	r0, r3
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr
 8005714:	200003f0 	.word	0x200003f0
 8005718:	2000040c 	.word	0x2000040c

0800571c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005728:	2300      	movs	r3, #0
 800572a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d05e      	beq.n	80057f0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005736:	4b31      	ldr	r3, [pc, #196]	@ (80057fc <xTaskPriorityInherit+0xe0>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800573c:	429a      	cmp	r2, r3
 800573e:	d24e      	bcs.n	80057de <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	2b00      	cmp	r3, #0
 8005746:	db06      	blt.n	8005756 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005748:	4b2c      	ldr	r3, [pc, #176]	@ (80057fc <xTaskPriorityInherit+0xe0>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800574e:	f1c3 0207 	rsb	r2, r3, #7
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	6959      	ldr	r1, [r3, #20]
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800575e:	4613      	mov	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	4413      	add	r3, r2
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	4a26      	ldr	r2, [pc, #152]	@ (8005800 <xTaskPriorityInherit+0xe4>)
 8005768:	4413      	add	r3, r2
 800576a:	4299      	cmp	r1, r3
 800576c:	d12f      	bne.n	80057ce <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	3304      	adds	r3, #4
 8005772:	4618      	mov	r0, r3
 8005774:	f7fe fe4c 	bl	8004410 <uxListRemove>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10a      	bne.n	8005794 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005782:	2201      	movs	r2, #1
 8005784:	fa02 f303 	lsl.w	r3, r2, r3
 8005788:	43da      	mvns	r2, r3
 800578a:	4b1e      	ldr	r3, [pc, #120]	@ (8005804 <xTaskPriorityInherit+0xe8>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4013      	ands	r3, r2
 8005790:	4a1c      	ldr	r2, [pc, #112]	@ (8005804 <xTaskPriorityInherit+0xe8>)
 8005792:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005794:	4b19      	ldr	r3, [pc, #100]	@ (80057fc <xTaskPriorityInherit+0xe0>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a2:	2201      	movs	r2, #1
 80057a4:	409a      	lsls	r2, r3
 80057a6:	4b17      	ldr	r3, [pc, #92]	@ (8005804 <xTaskPriorityInherit+0xe8>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	4a15      	ldr	r2, [pc, #84]	@ (8005804 <xTaskPriorityInherit+0xe8>)
 80057ae:	6013      	str	r3, [r2, #0]
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057b4:	4613      	mov	r3, r2
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	4413      	add	r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	4a10      	ldr	r2, [pc, #64]	@ (8005800 <xTaskPriorityInherit+0xe4>)
 80057be:	441a      	add	r2, r3
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	3304      	adds	r3, #4
 80057c4:	4619      	mov	r1, r3
 80057c6:	4610      	mov	r0, r2
 80057c8:	f7fe fdc5 	bl	8004356 <vListInsertEnd>
 80057cc:	e004      	b.n	80057d8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80057ce:	4b0b      	ldr	r3, [pc, #44]	@ (80057fc <xTaskPriorityInherit+0xe0>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80057d8:	2301      	movs	r3, #1
 80057da:	60fb      	str	r3, [r7, #12]
 80057dc:	e008      	b.n	80057f0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057e2:	4b06      	ldr	r3, [pc, #24]	@ (80057fc <xTaskPriorityInherit+0xe0>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d201      	bcs.n	80057f0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80057ec:	2301      	movs	r3, #1
 80057ee:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80057f0:	68fb      	ldr	r3, [r7, #12]
	}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	200002e4 	.word	0x200002e4
 8005800:	200002e8 	.word	0x200002e8
 8005804:	200003ec 	.word	0x200003ec

08005808 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005808:	b580      	push	{r7, lr}
 800580a:	b086      	sub	sp, #24
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005814:	2300      	movs	r3, #0
 8005816:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d070      	beq.n	8005900 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800581e:	4b3b      	ldr	r3, [pc, #236]	@ (800590c <xTaskPriorityDisinherit+0x104>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	693a      	ldr	r2, [r7, #16]
 8005824:	429a      	cmp	r2, r3
 8005826:	d00b      	beq.n	8005840 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800582c:	f383 8811 	msr	BASEPRI, r3
 8005830:	f3bf 8f6f 	isb	sy
 8005834:	f3bf 8f4f 	dsb	sy
 8005838:	60fb      	str	r3, [r7, #12]
}
 800583a:	bf00      	nop
 800583c:	bf00      	nop
 800583e:	e7fd      	b.n	800583c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005844:	2b00      	cmp	r3, #0
 8005846:	d10b      	bne.n	8005860 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800584c:	f383 8811 	msr	BASEPRI, r3
 8005850:	f3bf 8f6f 	isb	sy
 8005854:	f3bf 8f4f 	dsb	sy
 8005858:	60bb      	str	r3, [r7, #8]
}
 800585a:	bf00      	nop
 800585c:	bf00      	nop
 800585e:	e7fd      	b.n	800585c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005864:	1e5a      	subs	r2, r3, #1
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005872:	429a      	cmp	r2, r3
 8005874:	d044      	beq.n	8005900 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800587a:	2b00      	cmp	r3, #0
 800587c:	d140      	bne.n	8005900 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	3304      	adds	r3, #4
 8005882:	4618      	mov	r0, r3
 8005884:	f7fe fdc4 	bl	8004410 <uxListRemove>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d115      	bne.n	80058ba <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005892:	491f      	ldr	r1, [pc, #124]	@ (8005910 <xTaskPriorityDisinherit+0x108>)
 8005894:	4613      	mov	r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4413      	add	r3, r2
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	440b      	add	r3, r1
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d10a      	bne.n	80058ba <xTaskPriorityDisinherit+0xb2>
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a8:	2201      	movs	r2, #1
 80058aa:	fa02 f303 	lsl.w	r3, r2, r3
 80058ae:	43da      	mvns	r2, r3
 80058b0:	4b18      	ldr	r3, [pc, #96]	@ (8005914 <xTaskPriorityDisinherit+0x10c>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4013      	ands	r3, r2
 80058b6:	4a17      	ldr	r2, [pc, #92]	@ (8005914 <xTaskPriorityDisinherit+0x10c>)
 80058b8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058c6:	f1c3 0207 	rsb	r2, r3, #7
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d2:	2201      	movs	r2, #1
 80058d4:	409a      	lsls	r2, r3
 80058d6:	4b0f      	ldr	r3, [pc, #60]	@ (8005914 <xTaskPriorityDisinherit+0x10c>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4313      	orrs	r3, r2
 80058dc:	4a0d      	ldr	r2, [pc, #52]	@ (8005914 <xTaskPriorityDisinherit+0x10c>)
 80058de:	6013      	str	r3, [r2, #0]
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058e4:	4613      	mov	r3, r2
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	4413      	add	r3, r2
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	4a08      	ldr	r2, [pc, #32]	@ (8005910 <xTaskPriorityDisinherit+0x108>)
 80058ee:	441a      	add	r2, r3
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	3304      	adds	r3, #4
 80058f4:	4619      	mov	r1, r3
 80058f6:	4610      	mov	r0, r2
 80058f8:	f7fe fd2d 	bl	8004356 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80058fc:	2301      	movs	r3, #1
 80058fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005900:	697b      	ldr	r3, [r7, #20]
	}
 8005902:	4618      	mov	r0, r3
 8005904:	3718      	adds	r7, #24
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	200002e4 	.word	0x200002e4
 8005910:	200002e8 	.word	0x200002e8
 8005914:	200003ec 	.word	0x200003ec

08005918 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005918:	b580      	push	{r7, lr}
 800591a:	b088      	sub	sp, #32
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005926:	2301      	movs	r3, #1
 8005928:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d079      	beq.n	8005a24 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005934:	2b00      	cmp	r3, #0
 8005936:	d10b      	bne.n	8005950 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800593c:	f383 8811 	msr	BASEPRI, r3
 8005940:	f3bf 8f6f 	isb	sy
 8005944:	f3bf 8f4f 	dsb	sy
 8005948:	60fb      	str	r3, [r7, #12]
}
 800594a:	bf00      	nop
 800594c:	bf00      	nop
 800594e:	e7fd      	b.n	800594c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005954:	683a      	ldr	r2, [r7, #0]
 8005956:	429a      	cmp	r2, r3
 8005958:	d902      	bls.n	8005960 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	61fb      	str	r3, [r7, #28]
 800595e:	e002      	b.n	8005966 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005964:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800596a:	69fa      	ldr	r2, [r7, #28]
 800596c:	429a      	cmp	r2, r3
 800596e:	d059      	beq.n	8005a24 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005974:	697a      	ldr	r2, [r7, #20]
 8005976:	429a      	cmp	r2, r3
 8005978:	d154      	bne.n	8005a24 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800597a:	4b2c      	ldr	r3, [pc, #176]	@ (8005a2c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	69ba      	ldr	r2, [r7, #24]
 8005980:	429a      	cmp	r2, r3
 8005982:	d10b      	bne.n	800599c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005988:	f383 8811 	msr	BASEPRI, r3
 800598c:	f3bf 8f6f 	isb	sy
 8005990:	f3bf 8f4f 	dsb	sy
 8005994:	60bb      	str	r3, [r7, #8]
}
 8005996:	bf00      	nop
 8005998:	bf00      	nop
 800599a:	e7fd      	b.n	8005998 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	69fa      	ldr	r2, [r7, #28]
 80059a6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	db04      	blt.n	80059ba <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	f1c3 0207 	rsb	r2, r3, #7
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	6959      	ldr	r1, [r3, #20]
 80059be:	693a      	ldr	r2, [r7, #16]
 80059c0:	4613      	mov	r3, r2
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	4413      	add	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4a19      	ldr	r2, [pc, #100]	@ (8005a30 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80059ca:	4413      	add	r3, r2
 80059cc:	4299      	cmp	r1, r3
 80059ce:	d129      	bne.n	8005a24 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	3304      	adds	r3, #4
 80059d4:	4618      	mov	r0, r3
 80059d6:	f7fe fd1b 	bl	8004410 <uxListRemove>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d10a      	bne.n	80059f6 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059e4:	2201      	movs	r2, #1
 80059e6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ea:	43da      	mvns	r2, r3
 80059ec:	4b11      	ldr	r3, [pc, #68]	@ (8005a34 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4013      	ands	r3, r2
 80059f2:	4a10      	ldr	r2, [pc, #64]	@ (8005a34 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80059f4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059fa:	2201      	movs	r2, #1
 80059fc:	409a      	lsls	r2, r3
 80059fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005a34 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	4a0b      	ldr	r2, [pc, #44]	@ (8005a34 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005a06:	6013      	str	r3, [r2, #0]
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	4413      	add	r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	4a06      	ldr	r2, [pc, #24]	@ (8005a30 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005a16:	441a      	add	r2, r3
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	3304      	adds	r3, #4
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	4610      	mov	r0, r2
 8005a20:	f7fe fc99 	bl	8004356 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a24:	bf00      	nop
 8005a26:	3720      	adds	r7, #32
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	200002e4 	.word	0x200002e4
 8005a30:	200002e8 	.word	0x200002e8
 8005a34:	200003ec 	.word	0x200003ec

08005a38 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005a38:	b480      	push	{r7}
 8005a3a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005a3c:	4b07      	ldr	r3, [pc, #28]	@ (8005a5c <pvTaskIncrementMutexHeldCount+0x24>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d004      	beq.n	8005a4e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005a44:	4b05      	ldr	r3, [pc, #20]	@ (8005a5c <pvTaskIncrementMutexHeldCount+0x24>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005a4a:	3201      	adds	r2, #1
 8005a4c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8005a4e:	4b03      	ldr	r3, [pc, #12]	@ (8005a5c <pvTaskIncrementMutexHeldCount+0x24>)
 8005a50:	681b      	ldr	r3, [r3, #0]
	}
 8005a52:	4618      	mov	r0, r3
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr
 8005a5c:	200002e4 	.word	0x200002e4

08005a60 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005a6a:	4b29      	ldr	r3, [pc, #164]	@ (8005b10 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a70:	4b28      	ldr	r3, [pc, #160]	@ (8005b14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	3304      	adds	r3, #4
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7fe fcca 	bl	8004410 <uxListRemove>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10b      	bne.n	8005a9a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005a82:	4b24      	ldr	r3, [pc, #144]	@ (8005b14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a88:	2201      	movs	r2, #1
 8005a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8e:	43da      	mvns	r2, r3
 8005a90:	4b21      	ldr	r3, [pc, #132]	@ (8005b18 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4013      	ands	r3, r2
 8005a96:	4a20      	ldr	r2, [pc, #128]	@ (8005b18 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005a98:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005aa0:	d10a      	bne.n	8005ab8 <prvAddCurrentTaskToDelayedList+0x58>
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d007      	beq.n	8005ab8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8005b14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	3304      	adds	r3, #4
 8005aae:	4619      	mov	r1, r3
 8005ab0:	481a      	ldr	r0, [pc, #104]	@ (8005b1c <prvAddCurrentTaskToDelayedList+0xbc>)
 8005ab2:	f7fe fc50 	bl	8004356 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ab6:	e026      	b.n	8005b06 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4413      	add	r3, r2
 8005abe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ac0:	4b14      	ldr	r3, [pc, #80]	@ (8005b14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68ba      	ldr	r2, [r7, #8]
 8005ac6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005ac8:	68ba      	ldr	r2, [r7, #8]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d209      	bcs.n	8005ae4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ad0:	4b13      	ldr	r3, [pc, #76]	@ (8005b20 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8005b14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	3304      	adds	r3, #4
 8005ada:	4619      	mov	r1, r3
 8005adc:	4610      	mov	r0, r2
 8005ade:	f7fe fc5e 	bl	800439e <vListInsert>
}
 8005ae2:	e010      	b.n	8005b06 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ae4:	4b0f      	ldr	r3, [pc, #60]	@ (8005b24 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8005b14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	3304      	adds	r3, #4
 8005aee:	4619      	mov	r1, r3
 8005af0:	4610      	mov	r0, r2
 8005af2:	f7fe fc54 	bl	800439e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005af6:	4b0c      	ldr	r3, [pc, #48]	@ (8005b28 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d202      	bcs.n	8005b06 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005b00:	4a09      	ldr	r2, [pc, #36]	@ (8005b28 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	6013      	str	r3, [r2, #0]
}
 8005b06:	bf00      	nop
 8005b08:	3710      	adds	r7, #16
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	200003e8 	.word	0x200003e8
 8005b14:	200002e4 	.word	0x200002e4
 8005b18:	200003ec 	.word	0x200003ec
 8005b1c:	200003d0 	.word	0x200003d0
 8005b20:	200003a0 	.word	0x200003a0
 8005b24:	2000039c 	.word	0x2000039c
 8005b28:	20000404 	.word	0x20000404

08005b2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	3b04      	subs	r3, #4
 8005b3c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005b44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	3b04      	subs	r3, #4
 8005b4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	f023 0201 	bic.w	r2, r3, #1
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	3b04      	subs	r3, #4
 8005b5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005b5c:	4a0c      	ldr	r2, [pc, #48]	@ (8005b90 <pxPortInitialiseStack+0x64>)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	3b14      	subs	r3, #20
 8005b66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	3b04      	subs	r3, #4
 8005b72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f06f 0202 	mvn.w	r2, #2
 8005b7a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	3b20      	subs	r3, #32
 8005b80:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005b82:	68fb      	ldr	r3, [r7, #12]
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3714      	adds	r7, #20
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr
 8005b90:	08005b95 	.word	0x08005b95

08005b94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005b9e:	4b13      	ldr	r3, [pc, #76]	@ (8005bec <prvTaskExitError+0x58>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ba6:	d00b      	beq.n	8005bc0 <prvTaskExitError+0x2c>
	__asm volatile
 8005ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bac:	f383 8811 	msr	BASEPRI, r3
 8005bb0:	f3bf 8f6f 	isb	sy
 8005bb4:	f3bf 8f4f 	dsb	sy
 8005bb8:	60fb      	str	r3, [r7, #12]
}
 8005bba:	bf00      	nop
 8005bbc:	bf00      	nop
 8005bbe:	e7fd      	b.n	8005bbc <prvTaskExitError+0x28>
	__asm volatile
 8005bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bc4:	f383 8811 	msr	BASEPRI, r3
 8005bc8:	f3bf 8f6f 	isb	sy
 8005bcc:	f3bf 8f4f 	dsb	sy
 8005bd0:	60bb      	str	r3, [r7, #8]
}
 8005bd2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005bd4:	bf00      	nop
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d0fc      	beq.n	8005bd6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005bdc:	bf00      	nop
 8005bde:	bf00      	nop
 8005be0:	3714      	adds	r7, #20
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	2000000c 	.word	0x2000000c

08005bf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005bf0:	4b07      	ldr	r3, [pc, #28]	@ (8005c10 <pxCurrentTCBConst2>)
 8005bf2:	6819      	ldr	r1, [r3, #0]
 8005bf4:	6808      	ldr	r0, [r1, #0]
 8005bf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bfa:	f380 8809 	msr	PSP, r0
 8005bfe:	f3bf 8f6f 	isb	sy
 8005c02:	f04f 0000 	mov.w	r0, #0
 8005c06:	f380 8811 	msr	BASEPRI, r0
 8005c0a:	4770      	bx	lr
 8005c0c:	f3af 8000 	nop.w

08005c10 <pxCurrentTCBConst2>:
 8005c10:	200002e4 	.word	0x200002e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005c14:	bf00      	nop
 8005c16:	bf00      	nop

08005c18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005c18:	4808      	ldr	r0, [pc, #32]	@ (8005c3c <prvPortStartFirstTask+0x24>)
 8005c1a:	6800      	ldr	r0, [r0, #0]
 8005c1c:	6800      	ldr	r0, [r0, #0]
 8005c1e:	f380 8808 	msr	MSP, r0
 8005c22:	f04f 0000 	mov.w	r0, #0
 8005c26:	f380 8814 	msr	CONTROL, r0
 8005c2a:	b662      	cpsie	i
 8005c2c:	b661      	cpsie	f
 8005c2e:	f3bf 8f4f 	dsb	sy
 8005c32:	f3bf 8f6f 	isb	sy
 8005c36:	df00      	svc	0
 8005c38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005c3a:	bf00      	nop
 8005c3c:	e000ed08 	.word	0xe000ed08

08005c40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b086      	sub	sp, #24
 8005c44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005c46:	4b47      	ldr	r3, [pc, #284]	@ (8005d64 <xPortStartScheduler+0x124>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a47      	ldr	r2, [pc, #284]	@ (8005d68 <xPortStartScheduler+0x128>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d10b      	bne.n	8005c68 <xPortStartScheduler+0x28>
	__asm volatile
 8005c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c54:	f383 8811 	msr	BASEPRI, r3
 8005c58:	f3bf 8f6f 	isb	sy
 8005c5c:	f3bf 8f4f 	dsb	sy
 8005c60:	613b      	str	r3, [r7, #16]
}
 8005c62:	bf00      	nop
 8005c64:	bf00      	nop
 8005c66:	e7fd      	b.n	8005c64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005c68:	4b3e      	ldr	r3, [pc, #248]	@ (8005d64 <xPortStartScheduler+0x124>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a3f      	ldr	r2, [pc, #252]	@ (8005d6c <xPortStartScheduler+0x12c>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d10b      	bne.n	8005c8a <xPortStartScheduler+0x4a>
	__asm volatile
 8005c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c76:	f383 8811 	msr	BASEPRI, r3
 8005c7a:	f3bf 8f6f 	isb	sy
 8005c7e:	f3bf 8f4f 	dsb	sy
 8005c82:	60fb      	str	r3, [r7, #12]
}
 8005c84:	bf00      	nop
 8005c86:	bf00      	nop
 8005c88:	e7fd      	b.n	8005c86 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005c8a:	4b39      	ldr	r3, [pc, #228]	@ (8005d70 <xPortStartScheduler+0x130>)
 8005c8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	22ff      	movs	r2, #255	@ 0xff
 8005c9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ca4:	78fb      	ldrb	r3, [r7, #3]
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005cac:	b2da      	uxtb	r2, r3
 8005cae:	4b31      	ldr	r3, [pc, #196]	@ (8005d74 <xPortStartScheduler+0x134>)
 8005cb0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005cb2:	4b31      	ldr	r3, [pc, #196]	@ (8005d78 <xPortStartScheduler+0x138>)
 8005cb4:	2207      	movs	r2, #7
 8005cb6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005cb8:	e009      	b.n	8005cce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005cba:	4b2f      	ldr	r3, [pc, #188]	@ (8005d78 <xPortStartScheduler+0x138>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	4a2d      	ldr	r2, [pc, #180]	@ (8005d78 <xPortStartScheduler+0x138>)
 8005cc2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005cc4:	78fb      	ldrb	r3, [r7, #3]
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	005b      	lsls	r3, r3, #1
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005cce:	78fb      	ldrb	r3, [r7, #3]
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cd6:	2b80      	cmp	r3, #128	@ 0x80
 8005cd8:	d0ef      	beq.n	8005cba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005cda:	4b27      	ldr	r3, [pc, #156]	@ (8005d78 <xPortStartScheduler+0x138>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f1c3 0307 	rsb	r3, r3, #7
 8005ce2:	2b04      	cmp	r3, #4
 8005ce4:	d00b      	beq.n	8005cfe <xPortStartScheduler+0xbe>
	__asm volatile
 8005ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cea:	f383 8811 	msr	BASEPRI, r3
 8005cee:	f3bf 8f6f 	isb	sy
 8005cf2:	f3bf 8f4f 	dsb	sy
 8005cf6:	60bb      	str	r3, [r7, #8]
}
 8005cf8:	bf00      	nop
 8005cfa:	bf00      	nop
 8005cfc:	e7fd      	b.n	8005cfa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8005d78 <xPortStartScheduler+0x138>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	021b      	lsls	r3, r3, #8
 8005d04:	4a1c      	ldr	r2, [pc, #112]	@ (8005d78 <xPortStartScheduler+0x138>)
 8005d06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005d08:	4b1b      	ldr	r3, [pc, #108]	@ (8005d78 <xPortStartScheduler+0x138>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005d10:	4a19      	ldr	r2, [pc, #100]	@ (8005d78 <xPortStartScheduler+0x138>)
 8005d12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	b2da      	uxtb	r2, r3
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005d1c:	4b17      	ldr	r3, [pc, #92]	@ (8005d7c <xPortStartScheduler+0x13c>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a16      	ldr	r2, [pc, #88]	@ (8005d7c <xPortStartScheduler+0x13c>)
 8005d22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005d26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005d28:	4b14      	ldr	r3, [pc, #80]	@ (8005d7c <xPortStartScheduler+0x13c>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a13      	ldr	r2, [pc, #76]	@ (8005d7c <xPortStartScheduler+0x13c>)
 8005d2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005d32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005d34:	f000 f8da 	bl	8005eec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005d38:	4b11      	ldr	r3, [pc, #68]	@ (8005d80 <xPortStartScheduler+0x140>)
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005d3e:	f000 f8f9 	bl	8005f34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005d42:	4b10      	ldr	r3, [pc, #64]	@ (8005d84 <xPortStartScheduler+0x144>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a0f      	ldr	r2, [pc, #60]	@ (8005d84 <xPortStartScheduler+0x144>)
 8005d48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005d4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005d4e:	f7ff ff63 	bl	8005c18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005d52:	f7ff fa95 	bl	8005280 <vTaskSwitchContext>
	prvTaskExitError();
 8005d56:	f7ff ff1d 	bl	8005b94 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3718      	adds	r7, #24
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	e000ed00 	.word	0xe000ed00
 8005d68:	410fc271 	.word	0x410fc271
 8005d6c:	410fc270 	.word	0x410fc270
 8005d70:	e000e400 	.word	0xe000e400
 8005d74:	20000410 	.word	0x20000410
 8005d78:	20000414 	.word	0x20000414
 8005d7c:	e000ed20 	.word	0xe000ed20
 8005d80:	2000000c 	.word	0x2000000c
 8005d84:	e000ef34 	.word	0xe000ef34

08005d88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
	__asm volatile
 8005d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	607b      	str	r3, [r7, #4]
}
 8005da0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005da2:	4b10      	ldr	r3, [pc, #64]	@ (8005de4 <vPortEnterCritical+0x5c>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	3301      	adds	r3, #1
 8005da8:	4a0e      	ldr	r2, [pc, #56]	@ (8005de4 <vPortEnterCritical+0x5c>)
 8005daa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005dac:	4b0d      	ldr	r3, [pc, #52]	@ (8005de4 <vPortEnterCritical+0x5c>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d110      	bne.n	8005dd6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005db4:	4b0c      	ldr	r3, [pc, #48]	@ (8005de8 <vPortEnterCritical+0x60>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00b      	beq.n	8005dd6 <vPortEnterCritical+0x4e>
	__asm volatile
 8005dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc2:	f383 8811 	msr	BASEPRI, r3
 8005dc6:	f3bf 8f6f 	isb	sy
 8005dca:	f3bf 8f4f 	dsb	sy
 8005dce:	603b      	str	r3, [r7, #0]
}
 8005dd0:	bf00      	nop
 8005dd2:	bf00      	nop
 8005dd4:	e7fd      	b.n	8005dd2 <vPortEnterCritical+0x4a>
	}
}
 8005dd6:	bf00      	nop
 8005dd8:	370c      	adds	r7, #12
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	2000000c 	.word	0x2000000c
 8005de8:	e000ed04 	.word	0xe000ed04

08005dec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005df2:	4b12      	ldr	r3, [pc, #72]	@ (8005e3c <vPortExitCritical+0x50>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d10b      	bne.n	8005e12 <vPortExitCritical+0x26>
	__asm volatile
 8005dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dfe:	f383 8811 	msr	BASEPRI, r3
 8005e02:	f3bf 8f6f 	isb	sy
 8005e06:	f3bf 8f4f 	dsb	sy
 8005e0a:	607b      	str	r3, [r7, #4]
}
 8005e0c:	bf00      	nop
 8005e0e:	bf00      	nop
 8005e10:	e7fd      	b.n	8005e0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005e12:	4b0a      	ldr	r3, [pc, #40]	@ (8005e3c <vPortExitCritical+0x50>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	3b01      	subs	r3, #1
 8005e18:	4a08      	ldr	r2, [pc, #32]	@ (8005e3c <vPortExitCritical+0x50>)
 8005e1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005e1c:	4b07      	ldr	r3, [pc, #28]	@ (8005e3c <vPortExitCritical+0x50>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d105      	bne.n	8005e30 <vPortExitCritical+0x44>
 8005e24:	2300      	movs	r3, #0
 8005e26:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005e2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr
 8005e3c:	2000000c 	.word	0x2000000c

08005e40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005e40:	f3ef 8009 	mrs	r0, PSP
 8005e44:	f3bf 8f6f 	isb	sy
 8005e48:	4b15      	ldr	r3, [pc, #84]	@ (8005ea0 <pxCurrentTCBConst>)
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	f01e 0f10 	tst.w	lr, #16
 8005e50:	bf08      	it	eq
 8005e52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005e56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e5a:	6010      	str	r0, [r2, #0]
 8005e5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005e60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005e64:	f380 8811 	msr	BASEPRI, r0
 8005e68:	f3bf 8f4f 	dsb	sy
 8005e6c:	f3bf 8f6f 	isb	sy
 8005e70:	f7ff fa06 	bl	8005280 <vTaskSwitchContext>
 8005e74:	f04f 0000 	mov.w	r0, #0
 8005e78:	f380 8811 	msr	BASEPRI, r0
 8005e7c:	bc09      	pop	{r0, r3}
 8005e7e:	6819      	ldr	r1, [r3, #0]
 8005e80:	6808      	ldr	r0, [r1, #0]
 8005e82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e86:	f01e 0f10 	tst.w	lr, #16
 8005e8a:	bf08      	it	eq
 8005e8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005e90:	f380 8809 	msr	PSP, r0
 8005e94:	f3bf 8f6f 	isb	sy
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	f3af 8000 	nop.w

08005ea0 <pxCurrentTCBConst>:
 8005ea0:	200002e4 	.word	0x200002e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005ea4:	bf00      	nop
 8005ea6:	bf00      	nop

08005ea8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
	__asm volatile
 8005eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eb2:	f383 8811 	msr	BASEPRI, r3
 8005eb6:	f3bf 8f6f 	isb	sy
 8005eba:	f3bf 8f4f 	dsb	sy
 8005ebe:	607b      	str	r3, [r7, #4]
}
 8005ec0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005ec2:	f7ff f923 	bl	800510c <xTaskIncrementTick>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d003      	beq.n	8005ed4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005ecc:	4b06      	ldr	r3, [pc, #24]	@ (8005ee8 <SysTick_Handler+0x40>)
 8005ece:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ed2:	601a      	str	r2, [r3, #0]
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	f383 8811 	msr	BASEPRI, r3
}
 8005ede:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005ee0:	bf00      	nop
 8005ee2:	3708      	adds	r7, #8
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	e000ed04 	.word	0xe000ed04

08005eec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005eec:	b480      	push	{r7}
 8005eee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8005f20 <vPortSetupTimerInterrupt+0x34>)
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8005f24 <vPortSetupTimerInterrupt+0x38>)
 8005ef8:	2200      	movs	r2, #0
 8005efa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005efc:	4b0a      	ldr	r3, [pc, #40]	@ (8005f28 <vPortSetupTimerInterrupt+0x3c>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a0a      	ldr	r2, [pc, #40]	@ (8005f2c <vPortSetupTimerInterrupt+0x40>)
 8005f02:	fba2 2303 	umull	r2, r3, r2, r3
 8005f06:	099b      	lsrs	r3, r3, #6
 8005f08:	4a09      	ldr	r2, [pc, #36]	@ (8005f30 <vPortSetupTimerInterrupt+0x44>)
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005f0e:	4b04      	ldr	r3, [pc, #16]	@ (8005f20 <vPortSetupTimerInterrupt+0x34>)
 8005f10:	2207      	movs	r2, #7
 8005f12:	601a      	str	r2, [r3, #0]
}
 8005f14:	bf00      	nop
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	e000e010 	.word	0xe000e010
 8005f24:	e000e018 	.word	0xe000e018
 8005f28:	20000000 	.word	0x20000000
 8005f2c:	10624dd3 	.word	0x10624dd3
 8005f30:	e000e014 	.word	0xe000e014

08005f34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005f34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005f44 <vPortEnableVFP+0x10>
 8005f38:	6801      	ldr	r1, [r0, #0]
 8005f3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005f3e:	6001      	str	r1, [r0, #0]
 8005f40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005f42:	bf00      	nop
 8005f44:	e000ed88 	.word	0xe000ed88

08005f48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b08a      	sub	sp, #40	@ 0x28
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005f50:	2300      	movs	r3, #0
 8005f52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005f54:	f7ff f82e 	bl	8004fb4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005f58:	4b5c      	ldr	r3, [pc, #368]	@ (80060cc <pvPortMalloc+0x184>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d101      	bne.n	8005f64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005f60:	f000 f924 	bl	80061ac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005f64:	4b5a      	ldr	r3, [pc, #360]	@ (80060d0 <pvPortMalloc+0x188>)
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f040 8095 	bne.w	800609c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d01e      	beq.n	8005fb6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005f78:	2208      	movs	r2, #8
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f003 0307 	and.w	r3, r3, #7
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d015      	beq.n	8005fb6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f023 0307 	bic.w	r3, r3, #7
 8005f90:	3308      	adds	r3, #8
 8005f92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f003 0307 	and.w	r3, r3, #7
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d00b      	beq.n	8005fb6 <pvPortMalloc+0x6e>
	__asm volatile
 8005f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fa2:	f383 8811 	msr	BASEPRI, r3
 8005fa6:	f3bf 8f6f 	isb	sy
 8005faa:	f3bf 8f4f 	dsb	sy
 8005fae:	617b      	str	r3, [r7, #20]
}
 8005fb0:	bf00      	nop
 8005fb2:	bf00      	nop
 8005fb4:	e7fd      	b.n	8005fb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d06f      	beq.n	800609c <pvPortMalloc+0x154>
 8005fbc:	4b45      	ldr	r3, [pc, #276]	@ (80060d4 <pvPortMalloc+0x18c>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d86a      	bhi.n	800609c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005fc6:	4b44      	ldr	r3, [pc, #272]	@ (80060d8 <pvPortMalloc+0x190>)
 8005fc8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005fca:	4b43      	ldr	r3, [pc, #268]	@ (80060d8 <pvPortMalloc+0x190>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005fd0:	e004      	b.n	8005fdc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d903      	bls.n	8005fee <pvPortMalloc+0xa6>
 8005fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1f1      	bne.n	8005fd2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005fee:	4b37      	ldr	r3, [pc, #220]	@ (80060cc <pvPortMalloc+0x184>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d051      	beq.n	800609c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005ff8:	6a3b      	ldr	r3, [r7, #32]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2208      	movs	r2, #8
 8005ffe:	4413      	add	r3, r2
 8006000:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	6a3b      	ldr	r3, [r7, #32]
 8006008:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800600a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600c:	685a      	ldr	r2, [r3, #4]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	1ad2      	subs	r2, r2, r3
 8006012:	2308      	movs	r3, #8
 8006014:	005b      	lsls	r3, r3, #1
 8006016:	429a      	cmp	r2, r3
 8006018:	d920      	bls.n	800605c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800601a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4413      	add	r3, r2
 8006020:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	f003 0307 	and.w	r3, r3, #7
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00b      	beq.n	8006044 <pvPortMalloc+0xfc>
	__asm volatile
 800602c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006030:	f383 8811 	msr	BASEPRI, r3
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	f3bf 8f4f 	dsb	sy
 800603c:	613b      	str	r3, [r7, #16]
}
 800603e:	bf00      	nop
 8006040:	bf00      	nop
 8006042:	e7fd      	b.n	8006040 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006046:	685a      	ldr	r2, [r3, #4]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	1ad2      	subs	r2, r2, r3
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006056:	69b8      	ldr	r0, [r7, #24]
 8006058:	f000 f90a 	bl	8006270 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800605c:	4b1d      	ldr	r3, [pc, #116]	@ (80060d4 <pvPortMalloc+0x18c>)
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	4a1b      	ldr	r2, [pc, #108]	@ (80060d4 <pvPortMalloc+0x18c>)
 8006068:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800606a:	4b1a      	ldr	r3, [pc, #104]	@ (80060d4 <pvPortMalloc+0x18c>)
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	4b1b      	ldr	r3, [pc, #108]	@ (80060dc <pvPortMalloc+0x194>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	429a      	cmp	r2, r3
 8006074:	d203      	bcs.n	800607e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006076:	4b17      	ldr	r3, [pc, #92]	@ (80060d4 <pvPortMalloc+0x18c>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a18      	ldr	r2, [pc, #96]	@ (80060dc <pvPortMalloc+0x194>)
 800607c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800607e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006080:	685a      	ldr	r2, [r3, #4]
 8006082:	4b13      	ldr	r3, [pc, #76]	@ (80060d0 <pvPortMalloc+0x188>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	431a      	orrs	r2, r3
 8006088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800608a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800608c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800608e:	2200      	movs	r2, #0
 8006090:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006092:	4b13      	ldr	r3, [pc, #76]	@ (80060e0 <pvPortMalloc+0x198>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	3301      	adds	r3, #1
 8006098:	4a11      	ldr	r2, [pc, #68]	@ (80060e0 <pvPortMalloc+0x198>)
 800609a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800609c:	f7fe ff98 	bl	8004fd0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	f003 0307 	and.w	r3, r3, #7
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00b      	beq.n	80060c2 <pvPortMalloc+0x17a>
	__asm volatile
 80060aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ae:	f383 8811 	msr	BASEPRI, r3
 80060b2:	f3bf 8f6f 	isb	sy
 80060b6:	f3bf 8f4f 	dsb	sy
 80060ba:	60fb      	str	r3, [r7, #12]
}
 80060bc:	bf00      	nop
 80060be:	bf00      	nop
 80060c0:	e7fd      	b.n	80060be <pvPortMalloc+0x176>
	return pvReturn;
 80060c2:	69fb      	ldr	r3, [r7, #28]
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3728      	adds	r7, #40	@ 0x28
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	20005240 	.word	0x20005240
 80060d0:	20005254 	.word	0x20005254
 80060d4:	20005244 	.word	0x20005244
 80060d8:	20005238 	.word	0x20005238
 80060dc:	20005248 	.word	0x20005248
 80060e0:	2000524c 	.word	0x2000524c

080060e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b086      	sub	sp, #24
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d04f      	beq.n	8006196 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80060f6:	2308      	movs	r3, #8
 80060f8:	425b      	negs	r3, r3
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	4413      	add	r3, r2
 80060fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	685a      	ldr	r2, [r3, #4]
 8006108:	4b25      	ldr	r3, [pc, #148]	@ (80061a0 <vPortFree+0xbc>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4013      	ands	r3, r2
 800610e:	2b00      	cmp	r3, #0
 8006110:	d10b      	bne.n	800612a <vPortFree+0x46>
	__asm volatile
 8006112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006116:	f383 8811 	msr	BASEPRI, r3
 800611a:	f3bf 8f6f 	isb	sy
 800611e:	f3bf 8f4f 	dsb	sy
 8006122:	60fb      	str	r3, [r7, #12]
}
 8006124:	bf00      	nop
 8006126:	bf00      	nop
 8006128:	e7fd      	b.n	8006126 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00b      	beq.n	800614a <vPortFree+0x66>
	__asm volatile
 8006132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006136:	f383 8811 	msr	BASEPRI, r3
 800613a:	f3bf 8f6f 	isb	sy
 800613e:	f3bf 8f4f 	dsb	sy
 8006142:	60bb      	str	r3, [r7, #8]
}
 8006144:	bf00      	nop
 8006146:	bf00      	nop
 8006148:	e7fd      	b.n	8006146 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	685a      	ldr	r2, [r3, #4]
 800614e:	4b14      	ldr	r3, [pc, #80]	@ (80061a0 <vPortFree+0xbc>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4013      	ands	r3, r2
 8006154:	2b00      	cmp	r3, #0
 8006156:	d01e      	beq.n	8006196 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d11a      	bne.n	8006196 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	685a      	ldr	r2, [r3, #4]
 8006164:	4b0e      	ldr	r3, [pc, #56]	@ (80061a0 <vPortFree+0xbc>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	43db      	mvns	r3, r3
 800616a:	401a      	ands	r2, r3
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006170:	f7fe ff20 	bl	8004fb4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	685a      	ldr	r2, [r3, #4]
 8006178:	4b0a      	ldr	r3, [pc, #40]	@ (80061a4 <vPortFree+0xc0>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4413      	add	r3, r2
 800617e:	4a09      	ldr	r2, [pc, #36]	@ (80061a4 <vPortFree+0xc0>)
 8006180:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006182:	6938      	ldr	r0, [r7, #16]
 8006184:	f000 f874 	bl	8006270 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006188:	4b07      	ldr	r3, [pc, #28]	@ (80061a8 <vPortFree+0xc4>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	3301      	adds	r3, #1
 800618e:	4a06      	ldr	r2, [pc, #24]	@ (80061a8 <vPortFree+0xc4>)
 8006190:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006192:	f7fe ff1d 	bl	8004fd0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006196:	bf00      	nop
 8006198:	3718      	adds	r7, #24
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	20005254 	.word	0x20005254
 80061a4:	20005244 	.word	0x20005244
 80061a8:	20005250 	.word	0x20005250

080061ac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80061ac:	b480      	push	{r7}
 80061ae:	b085      	sub	sp, #20
 80061b0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80061b2:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80061b6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80061b8:	4b27      	ldr	r3, [pc, #156]	@ (8006258 <prvHeapInit+0xac>)
 80061ba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f003 0307 	and.w	r3, r3, #7
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00c      	beq.n	80061e0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	3307      	adds	r3, #7
 80061ca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f023 0307 	bic.w	r3, r3, #7
 80061d2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80061d4:	68ba      	ldr	r2, [r7, #8]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	4a1f      	ldr	r2, [pc, #124]	@ (8006258 <prvHeapInit+0xac>)
 80061dc:	4413      	add	r3, r2
 80061de:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80061e4:	4a1d      	ldr	r2, [pc, #116]	@ (800625c <prvHeapInit+0xb0>)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80061ea:	4b1c      	ldr	r3, [pc, #112]	@ (800625c <prvHeapInit+0xb0>)
 80061ec:	2200      	movs	r2, #0
 80061ee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	68ba      	ldr	r2, [r7, #8]
 80061f4:	4413      	add	r3, r2
 80061f6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80061f8:	2208      	movs	r2, #8
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	1a9b      	subs	r3, r3, r2
 80061fe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f023 0307 	bic.w	r3, r3, #7
 8006206:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	4a15      	ldr	r2, [pc, #84]	@ (8006260 <prvHeapInit+0xb4>)
 800620c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800620e:	4b14      	ldr	r3, [pc, #80]	@ (8006260 <prvHeapInit+0xb4>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2200      	movs	r2, #0
 8006214:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006216:	4b12      	ldr	r3, [pc, #72]	@ (8006260 <prvHeapInit+0xb4>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2200      	movs	r2, #0
 800621c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	1ad2      	subs	r2, r2, r3
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800622c:	4b0c      	ldr	r3, [pc, #48]	@ (8006260 <prvHeapInit+0xb4>)
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	4a0a      	ldr	r2, [pc, #40]	@ (8006264 <prvHeapInit+0xb8>)
 800623a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	4a09      	ldr	r2, [pc, #36]	@ (8006268 <prvHeapInit+0xbc>)
 8006242:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006244:	4b09      	ldr	r3, [pc, #36]	@ (800626c <prvHeapInit+0xc0>)
 8006246:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800624a:	601a      	str	r2, [r3, #0]
}
 800624c:	bf00      	nop
 800624e:	3714      	adds	r7, #20
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr
 8006258:	20000418 	.word	0x20000418
 800625c:	20005238 	.word	0x20005238
 8006260:	20005240 	.word	0x20005240
 8006264:	20005248 	.word	0x20005248
 8006268:	20005244 	.word	0x20005244
 800626c:	20005254 	.word	0x20005254

08006270 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006270:	b480      	push	{r7}
 8006272:	b085      	sub	sp, #20
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006278:	4b28      	ldr	r3, [pc, #160]	@ (800631c <prvInsertBlockIntoFreeList+0xac>)
 800627a:	60fb      	str	r3, [r7, #12]
 800627c:	e002      	b.n	8006284 <prvInsertBlockIntoFreeList+0x14>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	60fb      	str	r3, [r7, #12]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	429a      	cmp	r2, r3
 800628c:	d8f7      	bhi.n	800627e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	4413      	add	r3, r2
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	429a      	cmp	r2, r3
 800629e:	d108      	bne.n	80062b2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	685a      	ldr	r2, [r3, #4]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	441a      	add	r2, r3
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	68ba      	ldr	r2, [r7, #8]
 80062bc:	441a      	add	r2, r3
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d118      	bne.n	80062f8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	4b15      	ldr	r3, [pc, #84]	@ (8006320 <prvInsertBlockIntoFreeList+0xb0>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d00d      	beq.n	80062ee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	685a      	ldr	r2, [r3, #4]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	441a      	add	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	601a      	str	r2, [r3, #0]
 80062ec:	e008      	b.n	8006300 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80062ee:	4b0c      	ldr	r3, [pc, #48]	@ (8006320 <prvInsertBlockIntoFreeList+0xb0>)
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	601a      	str	r2, [r3, #0]
 80062f6:	e003      	b.n	8006300 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	429a      	cmp	r2, r3
 8006306:	d002      	beq.n	800630e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800630e:	bf00      	nop
 8006310:	3714      	adds	r7, #20
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	20005238 	.word	0x20005238
 8006320:	20005240 	.word	0x20005240

08006324 <__cvt>:
 8006324:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006328:	ec57 6b10 	vmov	r6, r7, d0
 800632c:	2f00      	cmp	r7, #0
 800632e:	460c      	mov	r4, r1
 8006330:	4619      	mov	r1, r3
 8006332:	463b      	mov	r3, r7
 8006334:	bfbb      	ittet	lt
 8006336:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800633a:	461f      	movlt	r7, r3
 800633c:	2300      	movge	r3, #0
 800633e:	232d      	movlt	r3, #45	@ 0x2d
 8006340:	700b      	strb	r3, [r1, #0]
 8006342:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006344:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006348:	4691      	mov	r9, r2
 800634a:	f023 0820 	bic.w	r8, r3, #32
 800634e:	bfbc      	itt	lt
 8006350:	4632      	movlt	r2, r6
 8006352:	4616      	movlt	r6, r2
 8006354:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006358:	d005      	beq.n	8006366 <__cvt+0x42>
 800635a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800635e:	d100      	bne.n	8006362 <__cvt+0x3e>
 8006360:	3401      	adds	r4, #1
 8006362:	2102      	movs	r1, #2
 8006364:	e000      	b.n	8006368 <__cvt+0x44>
 8006366:	2103      	movs	r1, #3
 8006368:	ab03      	add	r3, sp, #12
 800636a:	9301      	str	r3, [sp, #4]
 800636c:	ab02      	add	r3, sp, #8
 800636e:	9300      	str	r3, [sp, #0]
 8006370:	ec47 6b10 	vmov	d0, r6, r7
 8006374:	4653      	mov	r3, sl
 8006376:	4622      	mov	r2, r4
 8006378:	f001 f9de 	bl	8007738 <_dtoa_r>
 800637c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006380:	4605      	mov	r5, r0
 8006382:	d119      	bne.n	80063b8 <__cvt+0x94>
 8006384:	f019 0f01 	tst.w	r9, #1
 8006388:	d00e      	beq.n	80063a8 <__cvt+0x84>
 800638a:	eb00 0904 	add.w	r9, r0, r4
 800638e:	2200      	movs	r2, #0
 8006390:	2300      	movs	r3, #0
 8006392:	4630      	mov	r0, r6
 8006394:	4639      	mov	r1, r7
 8006396:	f7fa fbbf 	bl	8000b18 <__aeabi_dcmpeq>
 800639a:	b108      	cbz	r0, 80063a0 <__cvt+0x7c>
 800639c:	f8cd 900c 	str.w	r9, [sp, #12]
 80063a0:	2230      	movs	r2, #48	@ 0x30
 80063a2:	9b03      	ldr	r3, [sp, #12]
 80063a4:	454b      	cmp	r3, r9
 80063a6:	d31e      	bcc.n	80063e6 <__cvt+0xc2>
 80063a8:	9b03      	ldr	r3, [sp, #12]
 80063aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80063ac:	1b5b      	subs	r3, r3, r5
 80063ae:	4628      	mov	r0, r5
 80063b0:	6013      	str	r3, [r2, #0]
 80063b2:	b004      	add	sp, #16
 80063b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80063bc:	eb00 0904 	add.w	r9, r0, r4
 80063c0:	d1e5      	bne.n	800638e <__cvt+0x6a>
 80063c2:	7803      	ldrb	r3, [r0, #0]
 80063c4:	2b30      	cmp	r3, #48	@ 0x30
 80063c6:	d10a      	bne.n	80063de <__cvt+0xba>
 80063c8:	2200      	movs	r2, #0
 80063ca:	2300      	movs	r3, #0
 80063cc:	4630      	mov	r0, r6
 80063ce:	4639      	mov	r1, r7
 80063d0:	f7fa fba2 	bl	8000b18 <__aeabi_dcmpeq>
 80063d4:	b918      	cbnz	r0, 80063de <__cvt+0xba>
 80063d6:	f1c4 0401 	rsb	r4, r4, #1
 80063da:	f8ca 4000 	str.w	r4, [sl]
 80063de:	f8da 3000 	ldr.w	r3, [sl]
 80063e2:	4499      	add	r9, r3
 80063e4:	e7d3      	b.n	800638e <__cvt+0x6a>
 80063e6:	1c59      	adds	r1, r3, #1
 80063e8:	9103      	str	r1, [sp, #12]
 80063ea:	701a      	strb	r2, [r3, #0]
 80063ec:	e7d9      	b.n	80063a2 <__cvt+0x7e>

080063ee <__exponent>:
 80063ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063f0:	2900      	cmp	r1, #0
 80063f2:	bfba      	itte	lt
 80063f4:	4249      	neglt	r1, r1
 80063f6:	232d      	movlt	r3, #45	@ 0x2d
 80063f8:	232b      	movge	r3, #43	@ 0x2b
 80063fa:	2909      	cmp	r1, #9
 80063fc:	7002      	strb	r2, [r0, #0]
 80063fe:	7043      	strb	r3, [r0, #1]
 8006400:	dd29      	ble.n	8006456 <__exponent+0x68>
 8006402:	f10d 0307 	add.w	r3, sp, #7
 8006406:	461d      	mov	r5, r3
 8006408:	270a      	movs	r7, #10
 800640a:	461a      	mov	r2, r3
 800640c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006410:	fb07 1416 	mls	r4, r7, r6, r1
 8006414:	3430      	adds	r4, #48	@ 0x30
 8006416:	f802 4c01 	strb.w	r4, [r2, #-1]
 800641a:	460c      	mov	r4, r1
 800641c:	2c63      	cmp	r4, #99	@ 0x63
 800641e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8006422:	4631      	mov	r1, r6
 8006424:	dcf1      	bgt.n	800640a <__exponent+0x1c>
 8006426:	3130      	adds	r1, #48	@ 0x30
 8006428:	1e94      	subs	r4, r2, #2
 800642a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800642e:	1c41      	adds	r1, r0, #1
 8006430:	4623      	mov	r3, r4
 8006432:	42ab      	cmp	r3, r5
 8006434:	d30a      	bcc.n	800644c <__exponent+0x5e>
 8006436:	f10d 0309 	add.w	r3, sp, #9
 800643a:	1a9b      	subs	r3, r3, r2
 800643c:	42ac      	cmp	r4, r5
 800643e:	bf88      	it	hi
 8006440:	2300      	movhi	r3, #0
 8006442:	3302      	adds	r3, #2
 8006444:	4403      	add	r3, r0
 8006446:	1a18      	subs	r0, r3, r0
 8006448:	b003      	add	sp, #12
 800644a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800644c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006450:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006454:	e7ed      	b.n	8006432 <__exponent+0x44>
 8006456:	2330      	movs	r3, #48	@ 0x30
 8006458:	3130      	adds	r1, #48	@ 0x30
 800645a:	7083      	strb	r3, [r0, #2]
 800645c:	70c1      	strb	r1, [r0, #3]
 800645e:	1d03      	adds	r3, r0, #4
 8006460:	e7f1      	b.n	8006446 <__exponent+0x58>
	...

08006464 <_printf_float>:
 8006464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006468:	b08d      	sub	sp, #52	@ 0x34
 800646a:	460c      	mov	r4, r1
 800646c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006470:	4616      	mov	r6, r2
 8006472:	461f      	mov	r7, r3
 8006474:	4605      	mov	r5, r0
 8006476:	f000 fff3 	bl	8007460 <_localeconv_r>
 800647a:	6803      	ldr	r3, [r0, #0]
 800647c:	9304      	str	r3, [sp, #16]
 800647e:	4618      	mov	r0, r3
 8006480:	f7f9 ff1e 	bl	80002c0 <strlen>
 8006484:	2300      	movs	r3, #0
 8006486:	930a      	str	r3, [sp, #40]	@ 0x28
 8006488:	f8d8 3000 	ldr.w	r3, [r8]
 800648c:	9005      	str	r0, [sp, #20]
 800648e:	3307      	adds	r3, #7
 8006490:	f023 0307 	bic.w	r3, r3, #7
 8006494:	f103 0208 	add.w	r2, r3, #8
 8006498:	f894 a018 	ldrb.w	sl, [r4, #24]
 800649c:	f8d4 b000 	ldr.w	fp, [r4]
 80064a0:	f8c8 2000 	str.w	r2, [r8]
 80064a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80064a8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80064ac:	9307      	str	r3, [sp, #28]
 80064ae:	f8cd 8018 	str.w	r8, [sp, #24]
 80064b2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80064b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80064ba:	4b9c      	ldr	r3, [pc, #624]	@ (800672c <_printf_float+0x2c8>)
 80064bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80064c0:	f7fa fb5c 	bl	8000b7c <__aeabi_dcmpun>
 80064c4:	bb70      	cbnz	r0, 8006524 <_printf_float+0xc0>
 80064c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80064ca:	4b98      	ldr	r3, [pc, #608]	@ (800672c <_printf_float+0x2c8>)
 80064cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80064d0:	f7fa fb36 	bl	8000b40 <__aeabi_dcmple>
 80064d4:	bb30      	cbnz	r0, 8006524 <_printf_float+0xc0>
 80064d6:	2200      	movs	r2, #0
 80064d8:	2300      	movs	r3, #0
 80064da:	4640      	mov	r0, r8
 80064dc:	4649      	mov	r1, r9
 80064de:	f7fa fb25 	bl	8000b2c <__aeabi_dcmplt>
 80064e2:	b110      	cbz	r0, 80064ea <_printf_float+0x86>
 80064e4:	232d      	movs	r3, #45	@ 0x2d
 80064e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064ea:	4a91      	ldr	r2, [pc, #580]	@ (8006730 <_printf_float+0x2cc>)
 80064ec:	4b91      	ldr	r3, [pc, #580]	@ (8006734 <_printf_float+0x2d0>)
 80064ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80064f2:	bf94      	ite	ls
 80064f4:	4690      	movls	r8, r2
 80064f6:	4698      	movhi	r8, r3
 80064f8:	2303      	movs	r3, #3
 80064fa:	6123      	str	r3, [r4, #16]
 80064fc:	f02b 0304 	bic.w	r3, fp, #4
 8006500:	6023      	str	r3, [r4, #0]
 8006502:	f04f 0900 	mov.w	r9, #0
 8006506:	9700      	str	r7, [sp, #0]
 8006508:	4633      	mov	r3, r6
 800650a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800650c:	4621      	mov	r1, r4
 800650e:	4628      	mov	r0, r5
 8006510:	f000 f9d2 	bl	80068b8 <_printf_common>
 8006514:	3001      	adds	r0, #1
 8006516:	f040 808d 	bne.w	8006634 <_printf_float+0x1d0>
 800651a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800651e:	b00d      	add	sp, #52	@ 0x34
 8006520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006524:	4642      	mov	r2, r8
 8006526:	464b      	mov	r3, r9
 8006528:	4640      	mov	r0, r8
 800652a:	4649      	mov	r1, r9
 800652c:	f7fa fb26 	bl	8000b7c <__aeabi_dcmpun>
 8006530:	b140      	cbz	r0, 8006544 <_printf_float+0xe0>
 8006532:	464b      	mov	r3, r9
 8006534:	2b00      	cmp	r3, #0
 8006536:	bfbc      	itt	lt
 8006538:	232d      	movlt	r3, #45	@ 0x2d
 800653a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800653e:	4a7e      	ldr	r2, [pc, #504]	@ (8006738 <_printf_float+0x2d4>)
 8006540:	4b7e      	ldr	r3, [pc, #504]	@ (800673c <_printf_float+0x2d8>)
 8006542:	e7d4      	b.n	80064ee <_printf_float+0x8a>
 8006544:	6863      	ldr	r3, [r4, #4]
 8006546:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800654a:	9206      	str	r2, [sp, #24]
 800654c:	1c5a      	adds	r2, r3, #1
 800654e:	d13b      	bne.n	80065c8 <_printf_float+0x164>
 8006550:	2306      	movs	r3, #6
 8006552:	6063      	str	r3, [r4, #4]
 8006554:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006558:	2300      	movs	r3, #0
 800655a:	6022      	str	r2, [r4, #0]
 800655c:	9303      	str	r3, [sp, #12]
 800655e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006560:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006564:	ab09      	add	r3, sp, #36	@ 0x24
 8006566:	9300      	str	r3, [sp, #0]
 8006568:	6861      	ldr	r1, [r4, #4]
 800656a:	ec49 8b10 	vmov	d0, r8, r9
 800656e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006572:	4628      	mov	r0, r5
 8006574:	f7ff fed6 	bl	8006324 <__cvt>
 8006578:	9b06      	ldr	r3, [sp, #24]
 800657a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800657c:	2b47      	cmp	r3, #71	@ 0x47
 800657e:	4680      	mov	r8, r0
 8006580:	d129      	bne.n	80065d6 <_printf_float+0x172>
 8006582:	1cc8      	adds	r0, r1, #3
 8006584:	db02      	blt.n	800658c <_printf_float+0x128>
 8006586:	6863      	ldr	r3, [r4, #4]
 8006588:	4299      	cmp	r1, r3
 800658a:	dd41      	ble.n	8006610 <_printf_float+0x1ac>
 800658c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006590:	fa5f fa8a 	uxtb.w	sl, sl
 8006594:	3901      	subs	r1, #1
 8006596:	4652      	mov	r2, sl
 8006598:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800659c:	9109      	str	r1, [sp, #36]	@ 0x24
 800659e:	f7ff ff26 	bl	80063ee <__exponent>
 80065a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80065a4:	1813      	adds	r3, r2, r0
 80065a6:	2a01      	cmp	r2, #1
 80065a8:	4681      	mov	r9, r0
 80065aa:	6123      	str	r3, [r4, #16]
 80065ac:	dc02      	bgt.n	80065b4 <_printf_float+0x150>
 80065ae:	6822      	ldr	r2, [r4, #0]
 80065b0:	07d2      	lsls	r2, r2, #31
 80065b2:	d501      	bpl.n	80065b8 <_printf_float+0x154>
 80065b4:	3301      	adds	r3, #1
 80065b6:	6123      	str	r3, [r4, #16]
 80065b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d0a2      	beq.n	8006506 <_printf_float+0xa2>
 80065c0:	232d      	movs	r3, #45	@ 0x2d
 80065c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065c6:	e79e      	b.n	8006506 <_printf_float+0xa2>
 80065c8:	9a06      	ldr	r2, [sp, #24]
 80065ca:	2a47      	cmp	r2, #71	@ 0x47
 80065cc:	d1c2      	bne.n	8006554 <_printf_float+0xf0>
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1c0      	bne.n	8006554 <_printf_float+0xf0>
 80065d2:	2301      	movs	r3, #1
 80065d4:	e7bd      	b.n	8006552 <_printf_float+0xee>
 80065d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80065da:	d9db      	bls.n	8006594 <_printf_float+0x130>
 80065dc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80065e0:	d118      	bne.n	8006614 <_printf_float+0x1b0>
 80065e2:	2900      	cmp	r1, #0
 80065e4:	6863      	ldr	r3, [r4, #4]
 80065e6:	dd0b      	ble.n	8006600 <_printf_float+0x19c>
 80065e8:	6121      	str	r1, [r4, #16]
 80065ea:	b913      	cbnz	r3, 80065f2 <_printf_float+0x18e>
 80065ec:	6822      	ldr	r2, [r4, #0]
 80065ee:	07d0      	lsls	r0, r2, #31
 80065f0:	d502      	bpl.n	80065f8 <_printf_float+0x194>
 80065f2:	3301      	adds	r3, #1
 80065f4:	440b      	add	r3, r1
 80065f6:	6123      	str	r3, [r4, #16]
 80065f8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80065fa:	f04f 0900 	mov.w	r9, #0
 80065fe:	e7db      	b.n	80065b8 <_printf_float+0x154>
 8006600:	b913      	cbnz	r3, 8006608 <_printf_float+0x1a4>
 8006602:	6822      	ldr	r2, [r4, #0]
 8006604:	07d2      	lsls	r2, r2, #31
 8006606:	d501      	bpl.n	800660c <_printf_float+0x1a8>
 8006608:	3302      	adds	r3, #2
 800660a:	e7f4      	b.n	80065f6 <_printf_float+0x192>
 800660c:	2301      	movs	r3, #1
 800660e:	e7f2      	b.n	80065f6 <_printf_float+0x192>
 8006610:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006614:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006616:	4299      	cmp	r1, r3
 8006618:	db05      	blt.n	8006626 <_printf_float+0x1c2>
 800661a:	6823      	ldr	r3, [r4, #0]
 800661c:	6121      	str	r1, [r4, #16]
 800661e:	07d8      	lsls	r0, r3, #31
 8006620:	d5ea      	bpl.n	80065f8 <_printf_float+0x194>
 8006622:	1c4b      	adds	r3, r1, #1
 8006624:	e7e7      	b.n	80065f6 <_printf_float+0x192>
 8006626:	2900      	cmp	r1, #0
 8006628:	bfd4      	ite	le
 800662a:	f1c1 0202 	rsble	r2, r1, #2
 800662e:	2201      	movgt	r2, #1
 8006630:	4413      	add	r3, r2
 8006632:	e7e0      	b.n	80065f6 <_printf_float+0x192>
 8006634:	6823      	ldr	r3, [r4, #0]
 8006636:	055a      	lsls	r2, r3, #21
 8006638:	d407      	bmi.n	800664a <_printf_float+0x1e6>
 800663a:	6923      	ldr	r3, [r4, #16]
 800663c:	4642      	mov	r2, r8
 800663e:	4631      	mov	r1, r6
 8006640:	4628      	mov	r0, r5
 8006642:	47b8      	blx	r7
 8006644:	3001      	adds	r0, #1
 8006646:	d12b      	bne.n	80066a0 <_printf_float+0x23c>
 8006648:	e767      	b.n	800651a <_printf_float+0xb6>
 800664a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800664e:	f240 80dd 	bls.w	800680c <_printf_float+0x3a8>
 8006652:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006656:	2200      	movs	r2, #0
 8006658:	2300      	movs	r3, #0
 800665a:	f7fa fa5d 	bl	8000b18 <__aeabi_dcmpeq>
 800665e:	2800      	cmp	r0, #0
 8006660:	d033      	beq.n	80066ca <_printf_float+0x266>
 8006662:	4a37      	ldr	r2, [pc, #220]	@ (8006740 <_printf_float+0x2dc>)
 8006664:	2301      	movs	r3, #1
 8006666:	4631      	mov	r1, r6
 8006668:	4628      	mov	r0, r5
 800666a:	47b8      	blx	r7
 800666c:	3001      	adds	r0, #1
 800666e:	f43f af54 	beq.w	800651a <_printf_float+0xb6>
 8006672:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006676:	4543      	cmp	r3, r8
 8006678:	db02      	blt.n	8006680 <_printf_float+0x21c>
 800667a:	6823      	ldr	r3, [r4, #0]
 800667c:	07d8      	lsls	r0, r3, #31
 800667e:	d50f      	bpl.n	80066a0 <_printf_float+0x23c>
 8006680:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006684:	4631      	mov	r1, r6
 8006686:	4628      	mov	r0, r5
 8006688:	47b8      	blx	r7
 800668a:	3001      	adds	r0, #1
 800668c:	f43f af45 	beq.w	800651a <_printf_float+0xb6>
 8006690:	f04f 0900 	mov.w	r9, #0
 8006694:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006698:	f104 0a1a 	add.w	sl, r4, #26
 800669c:	45c8      	cmp	r8, r9
 800669e:	dc09      	bgt.n	80066b4 <_printf_float+0x250>
 80066a0:	6823      	ldr	r3, [r4, #0]
 80066a2:	079b      	lsls	r3, r3, #30
 80066a4:	f100 8103 	bmi.w	80068ae <_printf_float+0x44a>
 80066a8:	68e0      	ldr	r0, [r4, #12]
 80066aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066ac:	4298      	cmp	r0, r3
 80066ae:	bfb8      	it	lt
 80066b0:	4618      	movlt	r0, r3
 80066b2:	e734      	b.n	800651e <_printf_float+0xba>
 80066b4:	2301      	movs	r3, #1
 80066b6:	4652      	mov	r2, sl
 80066b8:	4631      	mov	r1, r6
 80066ba:	4628      	mov	r0, r5
 80066bc:	47b8      	blx	r7
 80066be:	3001      	adds	r0, #1
 80066c0:	f43f af2b 	beq.w	800651a <_printf_float+0xb6>
 80066c4:	f109 0901 	add.w	r9, r9, #1
 80066c8:	e7e8      	b.n	800669c <_printf_float+0x238>
 80066ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	dc39      	bgt.n	8006744 <_printf_float+0x2e0>
 80066d0:	4a1b      	ldr	r2, [pc, #108]	@ (8006740 <_printf_float+0x2dc>)
 80066d2:	2301      	movs	r3, #1
 80066d4:	4631      	mov	r1, r6
 80066d6:	4628      	mov	r0, r5
 80066d8:	47b8      	blx	r7
 80066da:	3001      	adds	r0, #1
 80066dc:	f43f af1d 	beq.w	800651a <_printf_float+0xb6>
 80066e0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80066e4:	ea59 0303 	orrs.w	r3, r9, r3
 80066e8:	d102      	bne.n	80066f0 <_printf_float+0x28c>
 80066ea:	6823      	ldr	r3, [r4, #0]
 80066ec:	07d9      	lsls	r1, r3, #31
 80066ee:	d5d7      	bpl.n	80066a0 <_printf_float+0x23c>
 80066f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066f4:	4631      	mov	r1, r6
 80066f6:	4628      	mov	r0, r5
 80066f8:	47b8      	blx	r7
 80066fa:	3001      	adds	r0, #1
 80066fc:	f43f af0d 	beq.w	800651a <_printf_float+0xb6>
 8006700:	f04f 0a00 	mov.w	sl, #0
 8006704:	f104 0b1a 	add.w	fp, r4, #26
 8006708:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800670a:	425b      	negs	r3, r3
 800670c:	4553      	cmp	r3, sl
 800670e:	dc01      	bgt.n	8006714 <_printf_float+0x2b0>
 8006710:	464b      	mov	r3, r9
 8006712:	e793      	b.n	800663c <_printf_float+0x1d8>
 8006714:	2301      	movs	r3, #1
 8006716:	465a      	mov	r2, fp
 8006718:	4631      	mov	r1, r6
 800671a:	4628      	mov	r0, r5
 800671c:	47b8      	blx	r7
 800671e:	3001      	adds	r0, #1
 8006720:	f43f aefb 	beq.w	800651a <_printf_float+0xb6>
 8006724:	f10a 0a01 	add.w	sl, sl, #1
 8006728:	e7ee      	b.n	8006708 <_printf_float+0x2a4>
 800672a:	bf00      	nop
 800672c:	7fefffff 	.word	0x7fefffff
 8006730:	0800ae40 	.word	0x0800ae40
 8006734:	0800ae44 	.word	0x0800ae44
 8006738:	0800ae48 	.word	0x0800ae48
 800673c:	0800ae4c 	.word	0x0800ae4c
 8006740:	0800ae50 	.word	0x0800ae50
 8006744:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006746:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800674a:	4553      	cmp	r3, sl
 800674c:	bfa8      	it	ge
 800674e:	4653      	movge	r3, sl
 8006750:	2b00      	cmp	r3, #0
 8006752:	4699      	mov	r9, r3
 8006754:	dc36      	bgt.n	80067c4 <_printf_float+0x360>
 8006756:	f04f 0b00 	mov.w	fp, #0
 800675a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800675e:	f104 021a 	add.w	r2, r4, #26
 8006762:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006764:	9306      	str	r3, [sp, #24]
 8006766:	eba3 0309 	sub.w	r3, r3, r9
 800676a:	455b      	cmp	r3, fp
 800676c:	dc31      	bgt.n	80067d2 <_printf_float+0x36e>
 800676e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006770:	459a      	cmp	sl, r3
 8006772:	dc3a      	bgt.n	80067ea <_printf_float+0x386>
 8006774:	6823      	ldr	r3, [r4, #0]
 8006776:	07da      	lsls	r2, r3, #31
 8006778:	d437      	bmi.n	80067ea <_printf_float+0x386>
 800677a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800677c:	ebaa 0903 	sub.w	r9, sl, r3
 8006780:	9b06      	ldr	r3, [sp, #24]
 8006782:	ebaa 0303 	sub.w	r3, sl, r3
 8006786:	4599      	cmp	r9, r3
 8006788:	bfa8      	it	ge
 800678a:	4699      	movge	r9, r3
 800678c:	f1b9 0f00 	cmp.w	r9, #0
 8006790:	dc33      	bgt.n	80067fa <_printf_float+0x396>
 8006792:	f04f 0800 	mov.w	r8, #0
 8006796:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800679a:	f104 0b1a 	add.w	fp, r4, #26
 800679e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067a0:	ebaa 0303 	sub.w	r3, sl, r3
 80067a4:	eba3 0309 	sub.w	r3, r3, r9
 80067a8:	4543      	cmp	r3, r8
 80067aa:	f77f af79 	ble.w	80066a0 <_printf_float+0x23c>
 80067ae:	2301      	movs	r3, #1
 80067b0:	465a      	mov	r2, fp
 80067b2:	4631      	mov	r1, r6
 80067b4:	4628      	mov	r0, r5
 80067b6:	47b8      	blx	r7
 80067b8:	3001      	adds	r0, #1
 80067ba:	f43f aeae 	beq.w	800651a <_printf_float+0xb6>
 80067be:	f108 0801 	add.w	r8, r8, #1
 80067c2:	e7ec      	b.n	800679e <_printf_float+0x33a>
 80067c4:	4642      	mov	r2, r8
 80067c6:	4631      	mov	r1, r6
 80067c8:	4628      	mov	r0, r5
 80067ca:	47b8      	blx	r7
 80067cc:	3001      	adds	r0, #1
 80067ce:	d1c2      	bne.n	8006756 <_printf_float+0x2f2>
 80067d0:	e6a3      	b.n	800651a <_printf_float+0xb6>
 80067d2:	2301      	movs	r3, #1
 80067d4:	4631      	mov	r1, r6
 80067d6:	4628      	mov	r0, r5
 80067d8:	9206      	str	r2, [sp, #24]
 80067da:	47b8      	blx	r7
 80067dc:	3001      	adds	r0, #1
 80067de:	f43f ae9c 	beq.w	800651a <_printf_float+0xb6>
 80067e2:	9a06      	ldr	r2, [sp, #24]
 80067e4:	f10b 0b01 	add.w	fp, fp, #1
 80067e8:	e7bb      	b.n	8006762 <_printf_float+0x2fe>
 80067ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067ee:	4631      	mov	r1, r6
 80067f0:	4628      	mov	r0, r5
 80067f2:	47b8      	blx	r7
 80067f4:	3001      	adds	r0, #1
 80067f6:	d1c0      	bne.n	800677a <_printf_float+0x316>
 80067f8:	e68f      	b.n	800651a <_printf_float+0xb6>
 80067fa:	9a06      	ldr	r2, [sp, #24]
 80067fc:	464b      	mov	r3, r9
 80067fe:	4442      	add	r2, r8
 8006800:	4631      	mov	r1, r6
 8006802:	4628      	mov	r0, r5
 8006804:	47b8      	blx	r7
 8006806:	3001      	adds	r0, #1
 8006808:	d1c3      	bne.n	8006792 <_printf_float+0x32e>
 800680a:	e686      	b.n	800651a <_printf_float+0xb6>
 800680c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006810:	f1ba 0f01 	cmp.w	sl, #1
 8006814:	dc01      	bgt.n	800681a <_printf_float+0x3b6>
 8006816:	07db      	lsls	r3, r3, #31
 8006818:	d536      	bpl.n	8006888 <_printf_float+0x424>
 800681a:	2301      	movs	r3, #1
 800681c:	4642      	mov	r2, r8
 800681e:	4631      	mov	r1, r6
 8006820:	4628      	mov	r0, r5
 8006822:	47b8      	blx	r7
 8006824:	3001      	adds	r0, #1
 8006826:	f43f ae78 	beq.w	800651a <_printf_float+0xb6>
 800682a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800682e:	4631      	mov	r1, r6
 8006830:	4628      	mov	r0, r5
 8006832:	47b8      	blx	r7
 8006834:	3001      	adds	r0, #1
 8006836:	f43f ae70 	beq.w	800651a <_printf_float+0xb6>
 800683a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800683e:	2200      	movs	r2, #0
 8006840:	2300      	movs	r3, #0
 8006842:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006846:	f7fa f967 	bl	8000b18 <__aeabi_dcmpeq>
 800684a:	b9c0      	cbnz	r0, 800687e <_printf_float+0x41a>
 800684c:	4653      	mov	r3, sl
 800684e:	f108 0201 	add.w	r2, r8, #1
 8006852:	4631      	mov	r1, r6
 8006854:	4628      	mov	r0, r5
 8006856:	47b8      	blx	r7
 8006858:	3001      	adds	r0, #1
 800685a:	d10c      	bne.n	8006876 <_printf_float+0x412>
 800685c:	e65d      	b.n	800651a <_printf_float+0xb6>
 800685e:	2301      	movs	r3, #1
 8006860:	465a      	mov	r2, fp
 8006862:	4631      	mov	r1, r6
 8006864:	4628      	mov	r0, r5
 8006866:	47b8      	blx	r7
 8006868:	3001      	adds	r0, #1
 800686a:	f43f ae56 	beq.w	800651a <_printf_float+0xb6>
 800686e:	f108 0801 	add.w	r8, r8, #1
 8006872:	45d0      	cmp	r8, sl
 8006874:	dbf3      	blt.n	800685e <_printf_float+0x3fa>
 8006876:	464b      	mov	r3, r9
 8006878:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800687c:	e6df      	b.n	800663e <_printf_float+0x1da>
 800687e:	f04f 0800 	mov.w	r8, #0
 8006882:	f104 0b1a 	add.w	fp, r4, #26
 8006886:	e7f4      	b.n	8006872 <_printf_float+0x40e>
 8006888:	2301      	movs	r3, #1
 800688a:	4642      	mov	r2, r8
 800688c:	e7e1      	b.n	8006852 <_printf_float+0x3ee>
 800688e:	2301      	movs	r3, #1
 8006890:	464a      	mov	r2, r9
 8006892:	4631      	mov	r1, r6
 8006894:	4628      	mov	r0, r5
 8006896:	47b8      	blx	r7
 8006898:	3001      	adds	r0, #1
 800689a:	f43f ae3e 	beq.w	800651a <_printf_float+0xb6>
 800689e:	f108 0801 	add.w	r8, r8, #1
 80068a2:	68e3      	ldr	r3, [r4, #12]
 80068a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80068a6:	1a5b      	subs	r3, r3, r1
 80068a8:	4543      	cmp	r3, r8
 80068aa:	dcf0      	bgt.n	800688e <_printf_float+0x42a>
 80068ac:	e6fc      	b.n	80066a8 <_printf_float+0x244>
 80068ae:	f04f 0800 	mov.w	r8, #0
 80068b2:	f104 0919 	add.w	r9, r4, #25
 80068b6:	e7f4      	b.n	80068a2 <_printf_float+0x43e>

080068b8 <_printf_common>:
 80068b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068bc:	4616      	mov	r6, r2
 80068be:	4698      	mov	r8, r3
 80068c0:	688a      	ldr	r2, [r1, #8]
 80068c2:	690b      	ldr	r3, [r1, #16]
 80068c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80068c8:	4293      	cmp	r3, r2
 80068ca:	bfb8      	it	lt
 80068cc:	4613      	movlt	r3, r2
 80068ce:	6033      	str	r3, [r6, #0]
 80068d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80068d4:	4607      	mov	r7, r0
 80068d6:	460c      	mov	r4, r1
 80068d8:	b10a      	cbz	r2, 80068de <_printf_common+0x26>
 80068da:	3301      	adds	r3, #1
 80068dc:	6033      	str	r3, [r6, #0]
 80068de:	6823      	ldr	r3, [r4, #0]
 80068e0:	0699      	lsls	r1, r3, #26
 80068e2:	bf42      	ittt	mi
 80068e4:	6833      	ldrmi	r3, [r6, #0]
 80068e6:	3302      	addmi	r3, #2
 80068e8:	6033      	strmi	r3, [r6, #0]
 80068ea:	6825      	ldr	r5, [r4, #0]
 80068ec:	f015 0506 	ands.w	r5, r5, #6
 80068f0:	d106      	bne.n	8006900 <_printf_common+0x48>
 80068f2:	f104 0a19 	add.w	sl, r4, #25
 80068f6:	68e3      	ldr	r3, [r4, #12]
 80068f8:	6832      	ldr	r2, [r6, #0]
 80068fa:	1a9b      	subs	r3, r3, r2
 80068fc:	42ab      	cmp	r3, r5
 80068fe:	dc26      	bgt.n	800694e <_printf_common+0x96>
 8006900:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006904:	6822      	ldr	r2, [r4, #0]
 8006906:	3b00      	subs	r3, #0
 8006908:	bf18      	it	ne
 800690a:	2301      	movne	r3, #1
 800690c:	0692      	lsls	r2, r2, #26
 800690e:	d42b      	bmi.n	8006968 <_printf_common+0xb0>
 8006910:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006914:	4641      	mov	r1, r8
 8006916:	4638      	mov	r0, r7
 8006918:	47c8      	blx	r9
 800691a:	3001      	adds	r0, #1
 800691c:	d01e      	beq.n	800695c <_printf_common+0xa4>
 800691e:	6823      	ldr	r3, [r4, #0]
 8006920:	6922      	ldr	r2, [r4, #16]
 8006922:	f003 0306 	and.w	r3, r3, #6
 8006926:	2b04      	cmp	r3, #4
 8006928:	bf02      	ittt	eq
 800692a:	68e5      	ldreq	r5, [r4, #12]
 800692c:	6833      	ldreq	r3, [r6, #0]
 800692e:	1aed      	subeq	r5, r5, r3
 8006930:	68a3      	ldr	r3, [r4, #8]
 8006932:	bf0c      	ite	eq
 8006934:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006938:	2500      	movne	r5, #0
 800693a:	4293      	cmp	r3, r2
 800693c:	bfc4      	itt	gt
 800693e:	1a9b      	subgt	r3, r3, r2
 8006940:	18ed      	addgt	r5, r5, r3
 8006942:	2600      	movs	r6, #0
 8006944:	341a      	adds	r4, #26
 8006946:	42b5      	cmp	r5, r6
 8006948:	d11a      	bne.n	8006980 <_printf_common+0xc8>
 800694a:	2000      	movs	r0, #0
 800694c:	e008      	b.n	8006960 <_printf_common+0xa8>
 800694e:	2301      	movs	r3, #1
 8006950:	4652      	mov	r2, sl
 8006952:	4641      	mov	r1, r8
 8006954:	4638      	mov	r0, r7
 8006956:	47c8      	blx	r9
 8006958:	3001      	adds	r0, #1
 800695a:	d103      	bne.n	8006964 <_printf_common+0xac>
 800695c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006964:	3501      	adds	r5, #1
 8006966:	e7c6      	b.n	80068f6 <_printf_common+0x3e>
 8006968:	18e1      	adds	r1, r4, r3
 800696a:	1c5a      	adds	r2, r3, #1
 800696c:	2030      	movs	r0, #48	@ 0x30
 800696e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006972:	4422      	add	r2, r4
 8006974:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006978:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800697c:	3302      	adds	r3, #2
 800697e:	e7c7      	b.n	8006910 <_printf_common+0x58>
 8006980:	2301      	movs	r3, #1
 8006982:	4622      	mov	r2, r4
 8006984:	4641      	mov	r1, r8
 8006986:	4638      	mov	r0, r7
 8006988:	47c8      	blx	r9
 800698a:	3001      	adds	r0, #1
 800698c:	d0e6      	beq.n	800695c <_printf_common+0xa4>
 800698e:	3601      	adds	r6, #1
 8006990:	e7d9      	b.n	8006946 <_printf_common+0x8e>
	...

08006994 <_printf_i>:
 8006994:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006998:	7e0f      	ldrb	r7, [r1, #24]
 800699a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800699c:	2f78      	cmp	r7, #120	@ 0x78
 800699e:	4691      	mov	r9, r2
 80069a0:	4680      	mov	r8, r0
 80069a2:	460c      	mov	r4, r1
 80069a4:	469a      	mov	sl, r3
 80069a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80069aa:	d807      	bhi.n	80069bc <_printf_i+0x28>
 80069ac:	2f62      	cmp	r7, #98	@ 0x62
 80069ae:	d80a      	bhi.n	80069c6 <_printf_i+0x32>
 80069b0:	2f00      	cmp	r7, #0
 80069b2:	f000 80d2 	beq.w	8006b5a <_printf_i+0x1c6>
 80069b6:	2f58      	cmp	r7, #88	@ 0x58
 80069b8:	f000 80b9 	beq.w	8006b2e <_printf_i+0x19a>
 80069bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80069c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80069c4:	e03a      	b.n	8006a3c <_printf_i+0xa8>
 80069c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80069ca:	2b15      	cmp	r3, #21
 80069cc:	d8f6      	bhi.n	80069bc <_printf_i+0x28>
 80069ce:	a101      	add	r1, pc, #4	@ (adr r1, 80069d4 <_printf_i+0x40>)
 80069d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069d4:	08006a2d 	.word	0x08006a2d
 80069d8:	08006a41 	.word	0x08006a41
 80069dc:	080069bd 	.word	0x080069bd
 80069e0:	080069bd 	.word	0x080069bd
 80069e4:	080069bd 	.word	0x080069bd
 80069e8:	080069bd 	.word	0x080069bd
 80069ec:	08006a41 	.word	0x08006a41
 80069f0:	080069bd 	.word	0x080069bd
 80069f4:	080069bd 	.word	0x080069bd
 80069f8:	080069bd 	.word	0x080069bd
 80069fc:	080069bd 	.word	0x080069bd
 8006a00:	08006b41 	.word	0x08006b41
 8006a04:	08006a6b 	.word	0x08006a6b
 8006a08:	08006afb 	.word	0x08006afb
 8006a0c:	080069bd 	.word	0x080069bd
 8006a10:	080069bd 	.word	0x080069bd
 8006a14:	08006b63 	.word	0x08006b63
 8006a18:	080069bd 	.word	0x080069bd
 8006a1c:	08006a6b 	.word	0x08006a6b
 8006a20:	080069bd 	.word	0x080069bd
 8006a24:	080069bd 	.word	0x080069bd
 8006a28:	08006b03 	.word	0x08006b03
 8006a2c:	6833      	ldr	r3, [r6, #0]
 8006a2e:	1d1a      	adds	r2, r3, #4
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	6032      	str	r2, [r6, #0]
 8006a34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e09d      	b.n	8006b7c <_printf_i+0x1e8>
 8006a40:	6833      	ldr	r3, [r6, #0]
 8006a42:	6820      	ldr	r0, [r4, #0]
 8006a44:	1d19      	adds	r1, r3, #4
 8006a46:	6031      	str	r1, [r6, #0]
 8006a48:	0606      	lsls	r6, r0, #24
 8006a4a:	d501      	bpl.n	8006a50 <_printf_i+0xbc>
 8006a4c:	681d      	ldr	r5, [r3, #0]
 8006a4e:	e003      	b.n	8006a58 <_printf_i+0xc4>
 8006a50:	0645      	lsls	r5, r0, #25
 8006a52:	d5fb      	bpl.n	8006a4c <_printf_i+0xb8>
 8006a54:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006a58:	2d00      	cmp	r5, #0
 8006a5a:	da03      	bge.n	8006a64 <_printf_i+0xd0>
 8006a5c:	232d      	movs	r3, #45	@ 0x2d
 8006a5e:	426d      	negs	r5, r5
 8006a60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a64:	4859      	ldr	r0, [pc, #356]	@ (8006bcc <_printf_i+0x238>)
 8006a66:	230a      	movs	r3, #10
 8006a68:	e011      	b.n	8006a8e <_printf_i+0xfa>
 8006a6a:	6821      	ldr	r1, [r4, #0]
 8006a6c:	6833      	ldr	r3, [r6, #0]
 8006a6e:	0608      	lsls	r0, r1, #24
 8006a70:	f853 5b04 	ldr.w	r5, [r3], #4
 8006a74:	d402      	bmi.n	8006a7c <_printf_i+0xe8>
 8006a76:	0649      	lsls	r1, r1, #25
 8006a78:	bf48      	it	mi
 8006a7a:	b2ad      	uxthmi	r5, r5
 8006a7c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006a7e:	4853      	ldr	r0, [pc, #332]	@ (8006bcc <_printf_i+0x238>)
 8006a80:	6033      	str	r3, [r6, #0]
 8006a82:	bf14      	ite	ne
 8006a84:	230a      	movne	r3, #10
 8006a86:	2308      	moveq	r3, #8
 8006a88:	2100      	movs	r1, #0
 8006a8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006a8e:	6866      	ldr	r6, [r4, #4]
 8006a90:	60a6      	str	r6, [r4, #8]
 8006a92:	2e00      	cmp	r6, #0
 8006a94:	bfa2      	ittt	ge
 8006a96:	6821      	ldrge	r1, [r4, #0]
 8006a98:	f021 0104 	bicge.w	r1, r1, #4
 8006a9c:	6021      	strge	r1, [r4, #0]
 8006a9e:	b90d      	cbnz	r5, 8006aa4 <_printf_i+0x110>
 8006aa0:	2e00      	cmp	r6, #0
 8006aa2:	d04b      	beq.n	8006b3c <_printf_i+0x1a8>
 8006aa4:	4616      	mov	r6, r2
 8006aa6:	fbb5 f1f3 	udiv	r1, r5, r3
 8006aaa:	fb03 5711 	mls	r7, r3, r1, r5
 8006aae:	5dc7      	ldrb	r7, [r0, r7]
 8006ab0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ab4:	462f      	mov	r7, r5
 8006ab6:	42bb      	cmp	r3, r7
 8006ab8:	460d      	mov	r5, r1
 8006aba:	d9f4      	bls.n	8006aa6 <_printf_i+0x112>
 8006abc:	2b08      	cmp	r3, #8
 8006abe:	d10b      	bne.n	8006ad8 <_printf_i+0x144>
 8006ac0:	6823      	ldr	r3, [r4, #0]
 8006ac2:	07df      	lsls	r7, r3, #31
 8006ac4:	d508      	bpl.n	8006ad8 <_printf_i+0x144>
 8006ac6:	6923      	ldr	r3, [r4, #16]
 8006ac8:	6861      	ldr	r1, [r4, #4]
 8006aca:	4299      	cmp	r1, r3
 8006acc:	bfde      	ittt	le
 8006ace:	2330      	movle	r3, #48	@ 0x30
 8006ad0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006ad4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006ad8:	1b92      	subs	r2, r2, r6
 8006ada:	6122      	str	r2, [r4, #16]
 8006adc:	f8cd a000 	str.w	sl, [sp]
 8006ae0:	464b      	mov	r3, r9
 8006ae2:	aa03      	add	r2, sp, #12
 8006ae4:	4621      	mov	r1, r4
 8006ae6:	4640      	mov	r0, r8
 8006ae8:	f7ff fee6 	bl	80068b8 <_printf_common>
 8006aec:	3001      	adds	r0, #1
 8006aee:	d14a      	bne.n	8006b86 <_printf_i+0x1f2>
 8006af0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006af4:	b004      	add	sp, #16
 8006af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006afa:	6823      	ldr	r3, [r4, #0]
 8006afc:	f043 0320 	orr.w	r3, r3, #32
 8006b00:	6023      	str	r3, [r4, #0]
 8006b02:	4833      	ldr	r0, [pc, #204]	@ (8006bd0 <_printf_i+0x23c>)
 8006b04:	2778      	movs	r7, #120	@ 0x78
 8006b06:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006b0a:	6823      	ldr	r3, [r4, #0]
 8006b0c:	6831      	ldr	r1, [r6, #0]
 8006b0e:	061f      	lsls	r7, r3, #24
 8006b10:	f851 5b04 	ldr.w	r5, [r1], #4
 8006b14:	d402      	bmi.n	8006b1c <_printf_i+0x188>
 8006b16:	065f      	lsls	r7, r3, #25
 8006b18:	bf48      	it	mi
 8006b1a:	b2ad      	uxthmi	r5, r5
 8006b1c:	6031      	str	r1, [r6, #0]
 8006b1e:	07d9      	lsls	r1, r3, #31
 8006b20:	bf44      	itt	mi
 8006b22:	f043 0320 	orrmi.w	r3, r3, #32
 8006b26:	6023      	strmi	r3, [r4, #0]
 8006b28:	b11d      	cbz	r5, 8006b32 <_printf_i+0x19e>
 8006b2a:	2310      	movs	r3, #16
 8006b2c:	e7ac      	b.n	8006a88 <_printf_i+0xf4>
 8006b2e:	4827      	ldr	r0, [pc, #156]	@ (8006bcc <_printf_i+0x238>)
 8006b30:	e7e9      	b.n	8006b06 <_printf_i+0x172>
 8006b32:	6823      	ldr	r3, [r4, #0]
 8006b34:	f023 0320 	bic.w	r3, r3, #32
 8006b38:	6023      	str	r3, [r4, #0]
 8006b3a:	e7f6      	b.n	8006b2a <_printf_i+0x196>
 8006b3c:	4616      	mov	r6, r2
 8006b3e:	e7bd      	b.n	8006abc <_printf_i+0x128>
 8006b40:	6833      	ldr	r3, [r6, #0]
 8006b42:	6825      	ldr	r5, [r4, #0]
 8006b44:	6961      	ldr	r1, [r4, #20]
 8006b46:	1d18      	adds	r0, r3, #4
 8006b48:	6030      	str	r0, [r6, #0]
 8006b4a:	062e      	lsls	r6, r5, #24
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	d501      	bpl.n	8006b54 <_printf_i+0x1c0>
 8006b50:	6019      	str	r1, [r3, #0]
 8006b52:	e002      	b.n	8006b5a <_printf_i+0x1c6>
 8006b54:	0668      	lsls	r0, r5, #25
 8006b56:	d5fb      	bpl.n	8006b50 <_printf_i+0x1bc>
 8006b58:	8019      	strh	r1, [r3, #0]
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	6123      	str	r3, [r4, #16]
 8006b5e:	4616      	mov	r6, r2
 8006b60:	e7bc      	b.n	8006adc <_printf_i+0x148>
 8006b62:	6833      	ldr	r3, [r6, #0]
 8006b64:	1d1a      	adds	r2, r3, #4
 8006b66:	6032      	str	r2, [r6, #0]
 8006b68:	681e      	ldr	r6, [r3, #0]
 8006b6a:	6862      	ldr	r2, [r4, #4]
 8006b6c:	2100      	movs	r1, #0
 8006b6e:	4630      	mov	r0, r6
 8006b70:	f7f9 fb56 	bl	8000220 <memchr>
 8006b74:	b108      	cbz	r0, 8006b7a <_printf_i+0x1e6>
 8006b76:	1b80      	subs	r0, r0, r6
 8006b78:	6060      	str	r0, [r4, #4]
 8006b7a:	6863      	ldr	r3, [r4, #4]
 8006b7c:	6123      	str	r3, [r4, #16]
 8006b7e:	2300      	movs	r3, #0
 8006b80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b84:	e7aa      	b.n	8006adc <_printf_i+0x148>
 8006b86:	6923      	ldr	r3, [r4, #16]
 8006b88:	4632      	mov	r2, r6
 8006b8a:	4649      	mov	r1, r9
 8006b8c:	4640      	mov	r0, r8
 8006b8e:	47d0      	blx	sl
 8006b90:	3001      	adds	r0, #1
 8006b92:	d0ad      	beq.n	8006af0 <_printf_i+0x15c>
 8006b94:	6823      	ldr	r3, [r4, #0]
 8006b96:	079b      	lsls	r3, r3, #30
 8006b98:	d413      	bmi.n	8006bc2 <_printf_i+0x22e>
 8006b9a:	68e0      	ldr	r0, [r4, #12]
 8006b9c:	9b03      	ldr	r3, [sp, #12]
 8006b9e:	4298      	cmp	r0, r3
 8006ba0:	bfb8      	it	lt
 8006ba2:	4618      	movlt	r0, r3
 8006ba4:	e7a6      	b.n	8006af4 <_printf_i+0x160>
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	4632      	mov	r2, r6
 8006baa:	4649      	mov	r1, r9
 8006bac:	4640      	mov	r0, r8
 8006bae:	47d0      	blx	sl
 8006bb0:	3001      	adds	r0, #1
 8006bb2:	d09d      	beq.n	8006af0 <_printf_i+0x15c>
 8006bb4:	3501      	adds	r5, #1
 8006bb6:	68e3      	ldr	r3, [r4, #12]
 8006bb8:	9903      	ldr	r1, [sp, #12]
 8006bba:	1a5b      	subs	r3, r3, r1
 8006bbc:	42ab      	cmp	r3, r5
 8006bbe:	dcf2      	bgt.n	8006ba6 <_printf_i+0x212>
 8006bc0:	e7eb      	b.n	8006b9a <_printf_i+0x206>
 8006bc2:	2500      	movs	r5, #0
 8006bc4:	f104 0619 	add.w	r6, r4, #25
 8006bc8:	e7f5      	b.n	8006bb6 <_printf_i+0x222>
 8006bca:	bf00      	nop
 8006bcc:	0800ae52 	.word	0x0800ae52
 8006bd0:	0800ae63 	.word	0x0800ae63

08006bd4 <_scanf_float>:
 8006bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bd8:	b087      	sub	sp, #28
 8006bda:	4617      	mov	r7, r2
 8006bdc:	9303      	str	r3, [sp, #12]
 8006bde:	688b      	ldr	r3, [r1, #8]
 8006be0:	1e5a      	subs	r2, r3, #1
 8006be2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006be6:	bf81      	itttt	hi
 8006be8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006bec:	eb03 0b05 	addhi.w	fp, r3, r5
 8006bf0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006bf4:	608b      	strhi	r3, [r1, #8]
 8006bf6:	680b      	ldr	r3, [r1, #0]
 8006bf8:	460a      	mov	r2, r1
 8006bfa:	f04f 0500 	mov.w	r5, #0
 8006bfe:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006c02:	f842 3b1c 	str.w	r3, [r2], #28
 8006c06:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006c0a:	4680      	mov	r8, r0
 8006c0c:	460c      	mov	r4, r1
 8006c0e:	bf98      	it	ls
 8006c10:	f04f 0b00 	movls.w	fp, #0
 8006c14:	9201      	str	r2, [sp, #4]
 8006c16:	4616      	mov	r6, r2
 8006c18:	46aa      	mov	sl, r5
 8006c1a:	46a9      	mov	r9, r5
 8006c1c:	9502      	str	r5, [sp, #8]
 8006c1e:	68a2      	ldr	r2, [r4, #8]
 8006c20:	b152      	cbz	r2, 8006c38 <_scanf_float+0x64>
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	2b4e      	cmp	r3, #78	@ 0x4e
 8006c28:	d864      	bhi.n	8006cf4 <_scanf_float+0x120>
 8006c2a:	2b40      	cmp	r3, #64	@ 0x40
 8006c2c:	d83c      	bhi.n	8006ca8 <_scanf_float+0xd4>
 8006c2e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006c32:	b2c8      	uxtb	r0, r1
 8006c34:	280e      	cmp	r0, #14
 8006c36:	d93a      	bls.n	8006cae <_scanf_float+0xda>
 8006c38:	f1b9 0f00 	cmp.w	r9, #0
 8006c3c:	d003      	beq.n	8006c46 <_scanf_float+0x72>
 8006c3e:	6823      	ldr	r3, [r4, #0]
 8006c40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c44:	6023      	str	r3, [r4, #0]
 8006c46:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006c4a:	f1ba 0f01 	cmp.w	sl, #1
 8006c4e:	f200 8117 	bhi.w	8006e80 <_scanf_float+0x2ac>
 8006c52:	9b01      	ldr	r3, [sp, #4]
 8006c54:	429e      	cmp	r6, r3
 8006c56:	f200 8108 	bhi.w	8006e6a <_scanf_float+0x296>
 8006c5a:	2001      	movs	r0, #1
 8006c5c:	b007      	add	sp, #28
 8006c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c62:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006c66:	2a0d      	cmp	r2, #13
 8006c68:	d8e6      	bhi.n	8006c38 <_scanf_float+0x64>
 8006c6a:	a101      	add	r1, pc, #4	@ (adr r1, 8006c70 <_scanf_float+0x9c>)
 8006c6c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006c70:	08006db7 	.word	0x08006db7
 8006c74:	08006c39 	.word	0x08006c39
 8006c78:	08006c39 	.word	0x08006c39
 8006c7c:	08006c39 	.word	0x08006c39
 8006c80:	08006e17 	.word	0x08006e17
 8006c84:	08006def 	.word	0x08006def
 8006c88:	08006c39 	.word	0x08006c39
 8006c8c:	08006c39 	.word	0x08006c39
 8006c90:	08006dc5 	.word	0x08006dc5
 8006c94:	08006c39 	.word	0x08006c39
 8006c98:	08006c39 	.word	0x08006c39
 8006c9c:	08006c39 	.word	0x08006c39
 8006ca0:	08006c39 	.word	0x08006c39
 8006ca4:	08006d7d 	.word	0x08006d7d
 8006ca8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006cac:	e7db      	b.n	8006c66 <_scanf_float+0x92>
 8006cae:	290e      	cmp	r1, #14
 8006cb0:	d8c2      	bhi.n	8006c38 <_scanf_float+0x64>
 8006cb2:	a001      	add	r0, pc, #4	@ (adr r0, 8006cb8 <_scanf_float+0xe4>)
 8006cb4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006cb8:	08006d6d 	.word	0x08006d6d
 8006cbc:	08006c39 	.word	0x08006c39
 8006cc0:	08006d6d 	.word	0x08006d6d
 8006cc4:	08006e03 	.word	0x08006e03
 8006cc8:	08006c39 	.word	0x08006c39
 8006ccc:	08006d15 	.word	0x08006d15
 8006cd0:	08006d53 	.word	0x08006d53
 8006cd4:	08006d53 	.word	0x08006d53
 8006cd8:	08006d53 	.word	0x08006d53
 8006cdc:	08006d53 	.word	0x08006d53
 8006ce0:	08006d53 	.word	0x08006d53
 8006ce4:	08006d53 	.word	0x08006d53
 8006ce8:	08006d53 	.word	0x08006d53
 8006cec:	08006d53 	.word	0x08006d53
 8006cf0:	08006d53 	.word	0x08006d53
 8006cf4:	2b6e      	cmp	r3, #110	@ 0x6e
 8006cf6:	d809      	bhi.n	8006d0c <_scanf_float+0x138>
 8006cf8:	2b60      	cmp	r3, #96	@ 0x60
 8006cfa:	d8b2      	bhi.n	8006c62 <_scanf_float+0x8e>
 8006cfc:	2b54      	cmp	r3, #84	@ 0x54
 8006cfe:	d07b      	beq.n	8006df8 <_scanf_float+0x224>
 8006d00:	2b59      	cmp	r3, #89	@ 0x59
 8006d02:	d199      	bne.n	8006c38 <_scanf_float+0x64>
 8006d04:	2d07      	cmp	r5, #7
 8006d06:	d197      	bne.n	8006c38 <_scanf_float+0x64>
 8006d08:	2508      	movs	r5, #8
 8006d0a:	e02c      	b.n	8006d66 <_scanf_float+0x192>
 8006d0c:	2b74      	cmp	r3, #116	@ 0x74
 8006d0e:	d073      	beq.n	8006df8 <_scanf_float+0x224>
 8006d10:	2b79      	cmp	r3, #121	@ 0x79
 8006d12:	e7f6      	b.n	8006d02 <_scanf_float+0x12e>
 8006d14:	6821      	ldr	r1, [r4, #0]
 8006d16:	05c8      	lsls	r0, r1, #23
 8006d18:	d51b      	bpl.n	8006d52 <_scanf_float+0x17e>
 8006d1a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006d1e:	6021      	str	r1, [r4, #0]
 8006d20:	f109 0901 	add.w	r9, r9, #1
 8006d24:	f1bb 0f00 	cmp.w	fp, #0
 8006d28:	d003      	beq.n	8006d32 <_scanf_float+0x15e>
 8006d2a:	3201      	adds	r2, #1
 8006d2c:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8006d30:	60a2      	str	r2, [r4, #8]
 8006d32:	68a3      	ldr	r3, [r4, #8]
 8006d34:	3b01      	subs	r3, #1
 8006d36:	60a3      	str	r3, [r4, #8]
 8006d38:	6923      	ldr	r3, [r4, #16]
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	6123      	str	r3, [r4, #16]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	3b01      	subs	r3, #1
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	607b      	str	r3, [r7, #4]
 8006d46:	f340 8087 	ble.w	8006e58 <_scanf_float+0x284>
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	603b      	str	r3, [r7, #0]
 8006d50:	e765      	b.n	8006c1e <_scanf_float+0x4a>
 8006d52:	eb1a 0105 	adds.w	r1, sl, r5
 8006d56:	f47f af6f 	bne.w	8006c38 <_scanf_float+0x64>
 8006d5a:	6822      	ldr	r2, [r4, #0]
 8006d5c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006d60:	6022      	str	r2, [r4, #0]
 8006d62:	460d      	mov	r5, r1
 8006d64:	468a      	mov	sl, r1
 8006d66:	f806 3b01 	strb.w	r3, [r6], #1
 8006d6a:	e7e2      	b.n	8006d32 <_scanf_float+0x15e>
 8006d6c:	6822      	ldr	r2, [r4, #0]
 8006d6e:	0610      	lsls	r0, r2, #24
 8006d70:	f57f af62 	bpl.w	8006c38 <_scanf_float+0x64>
 8006d74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006d78:	6022      	str	r2, [r4, #0]
 8006d7a:	e7f4      	b.n	8006d66 <_scanf_float+0x192>
 8006d7c:	f1ba 0f00 	cmp.w	sl, #0
 8006d80:	d10e      	bne.n	8006da0 <_scanf_float+0x1cc>
 8006d82:	f1b9 0f00 	cmp.w	r9, #0
 8006d86:	d10e      	bne.n	8006da6 <_scanf_float+0x1d2>
 8006d88:	6822      	ldr	r2, [r4, #0]
 8006d8a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006d8e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006d92:	d108      	bne.n	8006da6 <_scanf_float+0x1d2>
 8006d94:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006d98:	6022      	str	r2, [r4, #0]
 8006d9a:	f04f 0a01 	mov.w	sl, #1
 8006d9e:	e7e2      	b.n	8006d66 <_scanf_float+0x192>
 8006da0:	f1ba 0f02 	cmp.w	sl, #2
 8006da4:	d055      	beq.n	8006e52 <_scanf_float+0x27e>
 8006da6:	2d01      	cmp	r5, #1
 8006da8:	d002      	beq.n	8006db0 <_scanf_float+0x1dc>
 8006daa:	2d04      	cmp	r5, #4
 8006dac:	f47f af44 	bne.w	8006c38 <_scanf_float+0x64>
 8006db0:	3501      	adds	r5, #1
 8006db2:	b2ed      	uxtb	r5, r5
 8006db4:	e7d7      	b.n	8006d66 <_scanf_float+0x192>
 8006db6:	f1ba 0f01 	cmp.w	sl, #1
 8006dba:	f47f af3d 	bne.w	8006c38 <_scanf_float+0x64>
 8006dbe:	f04f 0a02 	mov.w	sl, #2
 8006dc2:	e7d0      	b.n	8006d66 <_scanf_float+0x192>
 8006dc4:	b97d      	cbnz	r5, 8006de6 <_scanf_float+0x212>
 8006dc6:	f1b9 0f00 	cmp.w	r9, #0
 8006dca:	f47f af38 	bne.w	8006c3e <_scanf_float+0x6a>
 8006dce:	6822      	ldr	r2, [r4, #0]
 8006dd0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006dd4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006dd8:	f040 8108 	bne.w	8006fec <_scanf_float+0x418>
 8006ddc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006de0:	6022      	str	r2, [r4, #0]
 8006de2:	2501      	movs	r5, #1
 8006de4:	e7bf      	b.n	8006d66 <_scanf_float+0x192>
 8006de6:	2d03      	cmp	r5, #3
 8006de8:	d0e2      	beq.n	8006db0 <_scanf_float+0x1dc>
 8006dea:	2d05      	cmp	r5, #5
 8006dec:	e7de      	b.n	8006dac <_scanf_float+0x1d8>
 8006dee:	2d02      	cmp	r5, #2
 8006df0:	f47f af22 	bne.w	8006c38 <_scanf_float+0x64>
 8006df4:	2503      	movs	r5, #3
 8006df6:	e7b6      	b.n	8006d66 <_scanf_float+0x192>
 8006df8:	2d06      	cmp	r5, #6
 8006dfa:	f47f af1d 	bne.w	8006c38 <_scanf_float+0x64>
 8006dfe:	2507      	movs	r5, #7
 8006e00:	e7b1      	b.n	8006d66 <_scanf_float+0x192>
 8006e02:	6822      	ldr	r2, [r4, #0]
 8006e04:	0591      	lsls	r1, r2, #22
 8006e06:	f57f af17 	bpl.w	8006c38 <_scanf_float+0x64>
 8006e0a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006e0e:	6022      	str	r2, [r4, #0]
 8006e10:	f8cd 9008 	str.w	r9, [sp, #8]
 8006e14:	e7a7      	b.n	8006d66 <_scanf_float+0x192>
 8006e16:	6822      	ldr	r2, [r4, #0]
 8006e18:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006e1c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006e20:	d006      	beq.n	8006e30 <_scanf_float+0x25c>
 8006e22:	0550      	lsls	r0, r2, #21
 8006e24:	f57f af08 	bpl.w	8006c38 <_scanf_float+0x64>
 8006e28:	f1b9 0f00 	cmp.w	r9, #0
 8006e2c:	f000 80de 	beq.w	8006fec <_scanf_float+0x418>
 8006e30:	0591      	lsls	r1, r2, #22
 8006e32:	bf58      	it	pl
 8006e34:	9902      	ldrpl	r1, [sp, #8]
 8006e36:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006e3a:	bf58      	it	pl
 8006e3c:	eba9 0101 	subpl.w	r1, r9, r1
 8006e40:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006e44:	bf58      	it	pl
 8006e46:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006e4a:	6022      	str	r2, [r4, #0]
 8006e4c:	f04f 0900 	mov.w	r9, #0
 8006e50:	e789      	b.n	8006d66 <_scanf_float+0x192>
 8006e52:	f04f 0a03 	mov.w	sl, #3
 8006e56:	e786      	b.n	8006d66 <_scanf_float+0x192>
 8006e58:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006e5c:	4639      	mov	r1, r7
 8006e5e:	4640      	mov	r0, r8
 8006e60:	4798      	blx	r3
 8006e62:	2800      	cmp	r0, #0
 8006e64:	f43f aedb 	beq.w	8006c1e <_scanf_float+0x4a>
 8006e68:	e6e6      	b.n	8006c38 <_scanf_float+0x64>
 8006e6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006e6e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006e72:	463a      	mov	r2, r7
 8006e74:	4640      	mov	r0, r8
 8006e76:	4798      	blx	r3
 8006e78:	6923      	ldr	r3, [r4, #16]
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	6123      	str	r3, [r4, #16]
 8006e7e:	e6e8      	b.n	8006c52 <_scanf_float+0x7e>
 8006e80:	1e6b      	subs	r3, r5, #1
 8006e82:	2b06      	cmp	r3, #6
 8006e84:	d824      	bhi.n	8006ed0 <_scanf_float+0x2fc>
 8006e86:	2d02      	cmp	r5, #2
 8006e88:	d836      	bhi.n	8006ef8 <_scanf_float+0x324>
 8006e8a:	9b01      	ldr	r3, [sp, #4]
 8006e8c:	429e      	cmp	r6, r3
 8006e8e:	f67f aee4 	bls.w	8006c5a <_scanf_float+0x86>
 8006e92:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006e96:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006e9a:	463a      	mov	r2, r7
 8006e9c:	4640      	mov	r0, r8
 8006e9e:	4798      	blx	r3
 8006ea0:	6923      	ldr	r3, [r4, #16]
 8006ea2:	3b01      	subs	r3, #1
 8006ea4:	6123      	str	r3, [r4, #16]
 8006ea6:	e7f0      	b.n	8006e8a <_scanf_float+0x2b6>
 8006ea8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006eac:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006eb0:	463a      	mov	r2, r7
 8006eb2:	4640      	mov	r0, r8
 8006eb4:	4798      	blx	r3
 8006eb6:	6923      	ldr	r3, [r4, #16]
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	6123      	str	r3, [r4, #16]
 8006ebc:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006ec0:	fa5f fa8a 	uxtb.w	sl, sl
 8006ec4:	f1ba 0f02 	cmp.w	sl, #2
 8006ec8:	d1ee      	bne.n	8006ea8 <_scanf_float+0x2d4>
 8006eca:	3d03      	subs	r5, #3
 8006ecc:	b2ed      	uxtb	r5, r5
 8006ece:	1b76      	subs	r6, r6, r5
 8006ed0:	6823      	ldr	r3, [r4, #0]
 8006ed2:	05da      	lsls	r2, r3, #23
 8006ed4:	d530      	bpl.n	8006f38 <_scanf_float+0x364>
 8006ed6:	055b      	lsls	r3, r3, #21
 8006ed8:	d511      	bpl.n	8006efe <_scanf_float+0x32a>
 8006eda:	9b01      	ldr	r3, [sp, #4]
 8006edc:	429e      	cmp	r6, r3
 8006ede:	f67f aebc 	bls.w	8006c5a <_scanf_float+0x86>
 8006ee2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006ee6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006eea:	463a      	mov	r2, r7
 8006eec:	4640      	mov	r0, r8
 8006eee:	4798      	blx	r3
 8006ef0:	6923      	ldr	r3, [r4, #16]
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	6123      	str	r3, [r4, #16]
 8006ef6:	e7f0      	b.n	8006eda <_scanf_float+0x306>
 8006ef8:	46aa      	mov	sl, r5
 8006efa:	46b3      	mov	fp, r6
 8006efc:	e7de      	b.n	8006ebc <_scanf_float+0x2e8>
 8006efe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006f02:	6923      	ldr	r3, [r4, #16]
 8006f04:	2965      	cmp	r1, #101	@ 0x65
 8006f06:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8006f0a:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8006f0e:	6123      	str	r3, [r4, #16]
 8006f10:	d00c      	beq.n	8006f2c <_scanf_float+0x358>
 8006f12:	2945      	cmp	r1, #69	@ 0x45
 8006f14:	d00a      	beq.n	8006f2c <_scanf_float+0x358>
 8006f16:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f1a:	463a      	mov	r2, r7
 8006f1c:	4640      	mov	r0, r8
 8006f1e:	4798      	blx	r3
 8006f20:	6923      	ldr	r3, [r4, #16]
 8006f22:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006f26:	3b01      	subs	r3, #1
 8006f28:	1eb5      	subs	r5, r6, #2
 8006f2a:	6123      	str	r3, [r4, #16]
 8006f2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f30:	463a      	mov	r2, r7
 8006f32:	4640      	mov	r0, r8
 8006f34:	4798      	blx	r3
 8006f36:	462e      	mov	r6, r5
 8006f38:	6822      	ldr	r2, [r4, #0]
 8006f3a:	f012 0210 	ands.w	r2, r2, #16
 8006f3e:	d001      	beq.n	8006f44 <_scanf_float+0x370>
 8006f40:	2000      	movs	r0, #0
 8006f42:	e68b      	b.n	8006c5c <_scanf_float+0x88>
 8006f44:	7032      	strb	r2, [r6, #0]
 8006f46:	6823      	ldr	r3, [r4, #0]
 8006f48:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006f4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f50:	d11c      	bne.n	8006f8c <_scanf_float+0x3b8>
 8006f52:	9b02      	ldr	r3, [sp, #8]
 8006f54:	454b      	cmp	r3, r9
 8006f56:	eba3 0209 	sub.w	r2, r3, r9
 8006f5a:	d123      	bne.n	8006fa4 <_scanf_float+0x3d0>
 8006f5c:	9901      	ldr	r1, [sp, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	4640      	mov	r0, r8
 8006f62:	f002 fd61 	bl	8009a28 <_strtod_r>
 8006f66:	9b03      	ldr	r3, [sp, #12]
 8006f68:	6821      	ldr	r1, [r4, #0]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f011 0f02 	tst.w	r1, #2
 8006f70:	ec57 6b10 	vmov	r6, r7, d0
 8006f74:	f103 0204 	add.w	r2, r3, #4
 8006f78:	d01f      	beq.n	8006fba <_scanf_float+0x3e6>
 8006f7a:	9903      	ldr	r1, [sp, #12]
 8006f7c:	600a      	str	r2, [r1, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	e9c3 6700 	strd	r6, r7, [r3]
 8006f84:	68e3      	ldr	r3, [r4, #12]
 8006f86:	3301      	adds	r3, #1
 8006f88:	60e3      	str	r3, [r4, #12]
 8006f8a:	e7d9      	b.n	8006f40 <_scanf_float+0x36c>
 8006f8c:	9b04      	ldr	r3, [sp, #16]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d0e4      	beq.n	8006f5c <_scanf_float+0x388>
 8006f92:	9905      	ldr	r1, [sp, #20]
 8006f94:	230a      	movs	r3, #10
 8006f96:	3101      	adds	r1, #1
 8006f98:	4640      	mov	r0, r8
 8006f9a:	f002 fdc5 	bl	8009b28 <_strtol_r>
 8006f9e:	9b04      	ldr	r3, [sp, #16]
 8006fa0:	9e05      	ldr	r6, [sp, #20]
 8006fa2:	1ac2      	subs	r2, r0, r3
 8006fa4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006fa8:	429e      	cmp	r6, r3
 8006faa:	bf28      	it	cs
 8006fac:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006fb0:	4910      	ldr	r1, [pc, #64]	@ (8006ff4 <_scanf_float+0x420>)
 8006fb2:	4630      	mov	r0, r6
 8006fb4:	f000 f954 	bl	8007260 <siprintf>
 8006fb8:	e7d0      	b.n	8006f5c <_scanf_float+0x388>
 8006fba:	f011 0f04 	tst.w	r1, #4
 8006fbe:	9903      	ldr	r1, [sp, #12]
 8006fc0:	600a      	str	r2, [r1, #0]
 8006fc2:	d1dc      	bne.n	8006f7e <_scanf_float+0x3aa>
 8006fc4:	681d      	ldr	r5, [r3, #0]
 8006fc6:	4632      	mov	r2, r6
 8006fc8:	463b      	mov	r3, r7
 8006fca:	4630      	mov	r0, r6
 8006fcc:	4639      	mov	r1, r7
 8006fce:	f7f9 fdd5 	bl	8000b7c <__aeabi_dcmpun>
 8006fd2:	b128      	cbz	r0, 8006fe0 <_scanf_float+0x40c>
 8006fd4:	4808      	ldr	r0, [pc, #32]	@ (8006ff8 <_scanf_float+0x424>)
 8006fd6:	f000 fb1f 	bl	8007618 <nanf>
 8006fda:	ed85 0a00 	vstr	s0, [r5]
 8006fde:	e7d1      	b.n	8006f84 <_scanf_float+0x3b0>
 8006fe0:	4630      	mov	r0, r6
 8006fe2:	4639      	mov	r1, r7
 8006fe4:	f7f9 fe28 	bl	8000c38 <__aeabi_d2f>
 8006fe8:	6028      	str	r0, [r5, #0]
 8006fea:	e7cb      	b.n	8006f84 <_scanf_float+0x3b0>
 8006fec:	f04f 0900 	mov.w	r9, #0
 8006ff0:	e629      	b.n	8006c46 <_scanf_float+0x72>
 8006ff2:	bf00      	nop
 8006ff4:	0800ae74 	.word	0x0800ae74
 8006ff8:	0800b20d 	.word	0x0800b20d

08006ffc <std>:
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	b510      	push	{r4, lr}
 8007000:	4604      	mov	r4, r0
 8007002:	e9c0 3300 	strd	r3, r3, [r0]
 8007006:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800700a:	6083      	str	r3, [r0, #8]
 800700c:	8181      	strh	r1, [r0, #12]
 800700e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007010:	81c2      	strh	r2, [r0, #14]
 8007012:	6183      	str	r3, [r0, #24]
 8007014:	4619      	mov	r1, r3
 8007016:	2208      	movs	r2, #8
 8007018:	305c      	adds	r0, #92	@ 0x5c
 800701a:	f000 fa19 	bl	8007450 <memset>
 800701e:	4b0d      	ldr	r3, [pc, #52]	@ (8007054 <std+0x58>)
 8007020:	6263      	str	r3, [r4, #36]	@ 0x24
 8007022:	4b0d      	ldr	r3, [pc, #52]	@ (8007058 <std+0x5c>)
 8007024:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007026:	4b0d      	ldr	r3, [pc, #52]	@ (800705c <std+0x60>)
 8007028:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800702a:	4b0d      	ldr	r3, [pc, #52]	@ (8007060 <std+0x64>)
 800702c:	6323      	str	r3, [r4, #48]	@ 0x30
 800702e:	4b0d      	ldr	r3, [pc, #52]	@ (8007064 <std+0x68>)
 8007030:	6224      	str	r4, [r4, #32]
 8007032:	429c      	cmp	r4, r3
 8007034:	d006      	beq.n	8007044 <std+0x48>
 8007036:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800703a:	4294      	cmp	r4, r2
 800703c:	d002      	beq.n	8007044 <std+0x48>
 800703e:	33d0      	adds	r3, #208	@ 0xd0
 8007040:	429c      	cmp	r4, r3
 8007042:	d105      	bne.n	8007050 <std+0x54>
 8007044:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800704c:	f000 bad2 	b.w	80075f4 <__retarget_lock_init_recursive>
 8007050:	bd10      	pop	{r4, pc}
 8007052:	bf00      	nop
 8007054:	080072a1 	.word	0x080072a1
 8007058:	080072c3 	.word	0x080072c3
 800705c:	080072fb 	.word	0x080072fb
 8007060:	0800731f 	.word	0x0800731f
 8007064:	20005258 	.word	0x20005258

08007068 <stdio_exit_handler>:
 8007068:	4a02      	ldr	r2, [pc, #8]	@ (8007074 <stdio_exit_handler+0xc>)
 800706a:	4903      	ldr	r1, [pc, #12]	@ (8007078 <stdio_exit_handler+0x10>)
 800706c:	4803      	ldr	r0, [pc, #12]	@ (800707c <stdio_exit_handler+0x14>)
 800706e:	f000 b869 	b.w	8007144 <_fwalk_sglue>
 8007072:	bf00      	nop
 8007074:	20000010 	.word	0x20000010
 8007078:	0800a169 	.word	0x0800a169
 800707c:	20000020 	.word	0x20000020

08007080 <cleanup_stdio>:
 8007080:	6841      	ldr	r1, [r0, #4]
 8007082:	4b0c      	ldr	r3, [pc, #48]	@ (80070b4 <cleanup_stdio+0x34>)
 8007084:	4299      	cmp	r1, r3
 8007086:	b510      	push	{r4, lr}
 8007088:	4604      	mov	r4, r0
 800708a:	d001      	beq.n	8007090 <cleanup_stdio+0x10>
 800708c:	f003 f86c 	bl	800a168 <_fflush_r>
 8007090:	68a1      	ldr	r1, [r4, #8]
 8007092:	4b09      	ldr	r3, [pc, #36]	@ (80070b8 <cleanup_stdio+0x38>)
 8007094:	4299      	cmp	r1, r3
 8007096:	d002      	beq.n	800709e <cleanup_stdio+0x1e>
 8007098:	4620      	mov	r0, r4
 800709a:	f003 f865 	bl	800a168 <_fflush_r>
 800709e:	68e1      	ldr	r1, [r4, #12]
 80070a0:	4b06      	ldr	r3, [pc, #24]	@ (80070bc <cleanup_stdio+0x3c>)
 80070a2:	4299      	cmp	r1, r3
 80070a4:	d004      	beq.n	80070b0 <cleanup_stdio+0x30>
 80070a6:	4620      	mov	r0, r4
 80070a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070ac:	f003 b85c 	b.w	800a168 <_fflush_r>
 80070b0:	bd10      	pop	{r4, pc}
 80070b2:	bf00      	nop
 80070b4:	20005258 	.word	0x20005258
 80070b8:	200052c0 	.word	0x200052c0
 80070bc:	20005328 	.word	0x20005328

080070c0 <global_stdio_init.part.0>:
 80070c0:	b510      	push	{r4, lr}
 80070c2:	4b0b      	ldr	r3, [pc, #44]	@ (80070f0 <global_stdio_init.part.0+0x30>)
 80070c4:	4c0b      	ldr	r4, [pc, #44]	@ (80070f4 <global_stdio_init.part.0+0x34>)
 80070c6:	4a0c      	ldr	r2, [pc, #48]	@ (80070f8 <global_stdio_init.part.0+0x38>)
 80070c8:	601a      	str	r2, [r3, #0]
 80070ca:	4620      	mov	r0, r4
 80070cc:	2200      	movs	r2, #0
 80070ce:	2104      	movs	r1, #4
 80070d0:	f7ff ff94 	bl	8006ffc <std>
 80070d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80070d8:	2201      	movs	r2, #1
 80070da:	2109      	movs	r1, #9
 80070dc:	f7ff ff8e 	bl	8006ffc <std>
 80070e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80070e4:	2202      	movs	r2, #2
 80070e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070ea:	2112      	movs	r1, #18
 80070ec:	f7ff bf86 	b.w	8006ffc <std>
 80070f0:	20005390 	.word	0x20005390
 80070f4:	20005258 	.word	0x20005258
 80070f8:	08007069 	.word	0x08007069

080070fc <__sfp_lock_acquire>:
 80070fc:	4801      	ldr	r0, [pc, #4]	@ (8007104 <__sfp_lock_acquire+0x8>)
 80070fe:	f000 ba7a 	b.w	80075f6 <__retarget_lock_acquire_recursive>
 8007102:	bf00      	nop
 8007104:	20005399 	.word	0x20005399

08007108 <__sfp_lock_release>:
 8007108:	4801      	ldr	r0, [pc, #4]	@ (8007110 <__sfp_lock_release+0x8>)
 800710a:	f000 ba75 	b.w	80075f8 <__retarget_lock_release_recursive>
 800710e:	bf00      	nop
 8007110:	20005399 	.word	0x20005399

08007114 <__sinit>:
 8007114:	b510      	push	{r4, lr}
 8007116:	4604      	mov	r4, r0
 8007118:	f7ff fff0 	bl	80070fc <__sfp_lock_acquire>
 800711c:	6a23      	ldr	r3, [r4, #32]
 800711e:	b11b      	cbz	r3, 8007128 <__sinit+0x14>
 8007120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007124:	f7ff bff0 	b.w	8007108 <__sfp_lock_release>
 8007128:	4b04      	ldr	r3, [pc, #16]	@ (800713c <__sinit+0x28>)
 800712a:	6223      	str	r3, [r4, #32]
 800712c:	4b04      	ldr	r3, [pc, #16]	@ (8007140 <__sinit+0x2c>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d1f5      	bne.n	8007120 <__sinit+0xc>
 8007134:	f7ff ffc4 	bl	80070c0 <global_stdio_init.part.0>
 8007138:	e7f2      	b.n	8007120 <__sinit+0xc>
 800713a:	bf00      	nop
 800713c:	08007081 	.word	0x08007081
 8007140:	20005390 	.word	0x20005390

08007144 <_fwalk_sglue>:
 8007144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007148:	4607      	mov	r7, r0
 800714a:	4688      	mov	r8, r1
 800714c:	4614      	mov	r4, r2
 800714e:	2600      	movs	r6, #0
 8007150:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007154:	f1b9 0901 	subs.w	r9, r9, #1
 8007158:	d505      	bpl.n	8007166 <_fwalk_sglue+0x22>
 800715a:	6824      	ldr	r4, [r4, #0]
 800715c:	2c00      	cmp	r4, #0
 800715e:	d1f7      	bne.n	8007150 <_fwalk_sglue+0xc>
 8007160:	4630      	mov	r0, r6
 8007162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007166:	89ab      	ldrh	r3, [r5, #12]
 8007168:	2b01      	cmp	r3, #1
 800716a:	d907      	bls.n	800717c <_fwalk_sglue+0x38>
 800716c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007170:	3301      	adds	r3, #1
 8007172:	d003      	beq.n	800717c <_fwalk_sglue+0x38>
 8007174:	4629      	mov	r1, r5
 8007176:	4638      	mov	r0, r7
 8007178:	47c0      	blx	r8
 800717a:	4306      	orrs	r6, r0
 800717c:	3568      	adds	r5, #104	@ 0x68
 800717e:	e7e9      	b.n	8007154 <_fwalk_sglue+0x10>

08007180 <iprintf>:
 8007180:	b40f      	push	{r0, r1, r2, r3}
 8007182:	b507      	push	{r0, r1, r2, lr}
 8007184:	4906      	ldr	r1, [pc, #24]	@ (80071a0 <iprintf+0x20>)
 8007186:	ab04      	add	r3, sp, #16
 8007188:	6808      	ldr	r0, [r1, #0]
 800718a:	f853 2b04 	ldr.w	r2, [r3], #4
 800718e:	6881      	ldr	r1, [r0, #8]
 8007190:	9301      	str	r3, [sp, #4]
 8007192:	f002 fe4d 	bl	8009e30 <_vfiprintf_r>
 8007196:	b003      	add	sp, #12
 8007198:	f85d eb04 	ldr.w	lr, [sp], #4
 800719c:	b004      	add	sp, #16
 800719e:	4770      	bx	lr
 80071a0:	2000001c 	.word	0x2000001c

080071a4 <_puts_r>:
 80071a4:	6a03      	ldr	r3, [r0, #32]
 80071a6:	b570      	push	{r4, r5, r6, lr}
 80071a8:	6884      	ldr	r4, [r0, #8]
 80071aa:	4605      	mov	r5, r0
 80071ac:	460e      	mov	r6, r1
 80071ae:	b90b      	cbnz	r3, 80071b4 <_puts_r+0x10>
 80071b0:	f7ff ffb0 	bl	8007114 <__sinit>
 80071b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80071b6:	07db      	lsls	r3, r3, #31
 80071b8:	d405      	bmi.n	80071c6 <_puts_r+0x22>
 80071ba:	89a3      	ldrh	r3, [r4, #12]
 80071bc:	0598      	lsls	r0, r3, #22
 80071be:	d402      	bmi.n	80071c6 <_puts_r+0x22>
 80071c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80071c2:	f000 fa18 	bl	80075f6 <__retarget_lock_acquire_recursive>
 80071c6:	89a3      	ldrh	r3, [r4, #12]
 80071c8:	0719      	lsls	r1, r3, #28
 80071ca:	d502      	bpl.n	80071d2 <_puts_r+0x2e>
 80071cc:	6923      	ldr	r3, [r4, #16]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d135      	bne.n	800723e <_puts_r+0x9a>
 80071d2:	4621      	mov	r1, r4
 80071d4:	4628      	mov	r0, r5
 80071d6:	f000 f8e5 	bl	80073a4 <__swsetup_r>
 80071da:	b380      	cbz	r0, 800723e <_puts_r+0x9a>
 80071dc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80071e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80071e2:	07da      	lsls	r2, r3, #31
 80071e4:	d405      	bmi.n	80071f2 <_puts_r+0x4e>
 80071e6:	89a3      	ldrh	r3, [r4, #12]
 80071e8:	059b      	lsls	r3, r3, #22
 80071ea:	d402      	bmi.n	80071f2 <_puts_r+0x4e>
 80071ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80071ee:	f000 fa03 	bl	80075f8 <__retarget_lock_release_recursive>
 80071f2:	4628      	mov	r0, r5
 80071f4:	bd70      	pop	{r4, r5, r6, pc}
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	da04      	bge.n	8007204 <_puts_r+0x60>
 80071fa:	69a2      	ldr	r2, [r4, #24]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	dc17      	bgt.n	8007230 <_puts_r+0x8c>
 8007200:	290a      	cmp	r1, #10
 8007202:	d015      	beq.n	8007230 <_puts_r+0x8c>
 8007204:	6823      	ldr	r3, [r4, #0]
 8007206:	1c5a      	adds	r2, r3, #1
 8007208:	6022      	str	r2, [r4, #0]
 800720a:	7019      	strb	r1, [r3, #0]
 800720c:	68a3      	ldr	r3, [r4, #8]
 800720e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007212:	3b01      	subs	r3, #1
 8007214:	60a3      	str	r3, [r4, #8]
 8007216:	2900      	cmp	r1, #0
 8007218:	d1ed      	bne.n	80071f6 <_puts_r+0x52>
 800721a:	2b00      	cmp	r3, #0
 800721c:	da11      	bge.n	8007242 <_puts_r+0x9e>
 800721e:	4622      	mov	r2, r4
 8007220:	210a      	movs	r1, #10
 8007222:	4628      	mov	r0, r5
 8007224:	f000 f87f 	bl	8007326 <__swbuf_r>
 8007228:	3001      	adds	r0, #1
 800722a:	d0d7      	beq.n	80071dc <_puts_r+0x38>
 800722c:	250a      	movs	r5, #10
 800722e:	e7d7      	b.n	80071e0 <_puts_r+0x3c>
 8007230:	4622      	mov	r2, r4
 8007232:	4628      	mov	r0, r5
 8007234:	f000 f877 	bl	8007326 <__swbuf_r>
 8007238:	3001      	adds	r0, #1
 800723a:	d1e7      	bne.n	800720c <_puts_r+0x68>
 800723c:	e7ce      	b.n	80071dc <_puts_r+0x38>
 800723e:	3e01      	subs	r6, #1
 8007240:	e7e4      	b.n	800720c <_puts_r+0x68>
 8007242:	6823      	ldr	r3, [r4, #0]
 8007244:	1c5a      	adds	r2, r3, #1
 8007246:	6022      	str	r2, [r4, #0]
 8007248:	220a      	movs	r2, #10
 800724a:	701a      	strb	r2, [r3, #0]
 800724c:	e7ee      	b.n	800722c <_puts_r+0x88>
	...

08007250 <puts>:
 8007250:	4b02      	ldr	r3, [pc, #8]	@ (800725c <puts+0xc>)
 8007252:	4601      	mov	r1, r0
 8007254:	6818      	ldr	r0, [r3, #0]
 8007256:	f7ff bfa5 	b.w	80071a4 <_puts_r>
 800725a:	bf00      	nop
 800725c:	2000001c 	.word	0x2000001c

08007260 <siprintf>:
 8007260:	b40e      	push	{r1, r2, r3}
 8007262:	b500      	push	{lr}
 8007264:	b09c      	sub	sp, #112	@ 0x70
 8007266:	ab1d      	add	r3, sp, #116	@ 0x74
 8007268:	9002      	str	r0, [sp, #8]
 800726a:	9006      	str	r0, [sp, #24]
 800726c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007270:	4809      	ldr	r0, [pc, #36]	@ (8007298 <siprintf+0x38>)
 8007272:	9107      	str	r1, [sp, #28]
 8007274:	9104      	str	r1, [sp, #16]
 8007276:	4909      	ldr	r1, [pc, #36]	@ (800729c <siprintf+0x3c>)
 8007278:	f853 2b04 	ldr.w	r2, [r3], #4
 800727c:	9105      	str	r1, [sp, #20]
 800727e:	6800      	ldr	r0, [r0, #0]
 8007280:	9301      	str	r3, [sp, #4]
 8007282:	a902      	add	r1, sp, #8
 8007284:	f002 fcae 	bl	8009be4 <_svfiprintf_r>
 8007288:	9b02      	ldr	r3, [sp, #8]
 800728a:	2200      	movs	r2, #0
 800728c:	701a      	strb	r2, [r3, #0]
 800728e:	b01c      	add	sp, #112	@ 0x70
 8007290:	f85d eb04 	ldr.w	lr, [sp], #4
 8007294:	b003      	add	sp, #12
 8007296:	4770      	bx	lr
 8007298:	2000001c 	.word	0x2000001c
 800729c:	ffff0208 	.word	0xffff0208

080072a0 <__sread>:
 80072a0:	b510      	push	{r4, lr}
 80072a2:	460c      	mov	r4, r1
 80072a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072a8:	f000 f956 	bl	8007558 <_read_r>
 80072ac:	2800      	cmp	r0, #0
 80072ae:	bfab      	itete	ge
 80072b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80072b2:	89a3      	ldrhlt	r3, [r4, #12]
 80072b4:	181b      	addge	r3, r3, r0
 80072b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80072ba:	bfac      	ite	ge
 80072bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80072be:	81a3      	strhlt	r3, [r4, #12]
 80072c0:	bd10      	pop	{r4, pc}

080072c2 <__swrite>:
 80072c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072c6:	461f      	mov	r7, r3
 80072c8:	898b      	ldrh	r3, [r1, #12]
 80072ca:	05db      	lsls	r3, r3, #23
 80072cc:	4605      	mov	r5, r0
 80072ce:	460c      	mov	r4, r1
 80072d0:	4616      	mov	r6, r2
 80072d2:	d505      	bpl.n	80072e0 <__swrite+0x1e>
 80072d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072d8:	2302      	movs	r3, #2
 80072da:	2200      	movs	r2, #0
 80072dc:	f000 f92a 	bl	8007534 <_lseek_r>
 80072e0:	89a3      	ldrh	r3, [r4, #12]
 80072e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80072ea:	81a3      	strh	r3, [r4, #12]
 80072ec:	4632      	mov	r2, r6
 80072ee:	463b      	mov	r3, r7
 80072f0:	4628      	mov	r0, r5
 80072f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072f6:	f000 b941 	b.w	800757c <_write_r>

080072fa <__sseek>:
 80072fa:	b510      	push	{r4, lr}
 80072fc:	460c      	mov	r4, r1
 80072fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007302:	f000 f917 	bl	8007534 <_lseek_r>
 8007306:	1c43      	adds	r3, r0, #1
 8007308:	89a3      	ldrh	r3, [r4, #12]
 800730a:	bf15      	itete	ne
 800730c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800730e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007312:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007316:	81a3      	strheq	r3, [r4, #12]
 8007318:	bf18      	it	ne
 800731a:	81a3      	strhne	r3, [r4, #12]
 800731c:	bd10      	pop	{r4, pc}

0800731e <__sclose>:
 800731e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007322:	f000 b8a1 	b.w	8007468 <_close_r>

08007326 <__swbuf_r>:
 8007326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007328:	460e      	mov	r6, r1
 800732a:	4614      	mov	r4, r2
 800732c:	4605      	mov	r5, r0
 800732e:	b118      	cbz	r0, 8007338 <__swbuf_r+0x12>
 8007330:	6a03      	ldr	r3, [r0, #32]
 8007332:	b90b      	cbnz	r3, 8007338 <__swbuf_r+0x12>
 8007334:	f7ff feee 	bl	8007114 <__sinit>
 8007338:	69a3      	ldr	r3, [r4, #24]
 800733a:	60a3      	str	r3, [r4, #8]
 800733c:	89a3      	ldrh	r3, [r4, #12]
 800733e:	071a      	lsls	r2, r3, #28
 8007340:	d501      	bpl.n	8007346 <__swbuf_r+0x20>
 8007342:	6923      	ldr	r3, [r4, #16]
 8007344:	b943      	cbnz	r3, 8007358 <__swbuf_r+0x32>
 8007346:	4621      	mov	r1, r4
 8007348:	4628      	mov	r0, r5
 800734a:	f000 f82b 	bl	80073a4 <__swsetup_r>
 800734e:	b118      	cbz	r0, 8007358 <__swbuf_r+0x32>
 8007350:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007354:	4638      	mov	r0, r7
 8007356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007358:	6823      	ldr	r3, [r4, #0]
 800735a:	6922      	ldr	r2, [r4, #16]
 800735c:	1a98      	subs	r0, r3, r2
 800735e:	6963      	ldr	r3, [r4, #20]
 8007360:	b2f6      	uxtb	r6, r6
 8007362:	4283      	cmp	r3, r0
 8007364:	4637      	mov	r7, r6
 8007366:	dc05      	bgt.n	8007374 <__swbuf_r+0x4e>
 8007368:	4621      	mov	r1, r4
 800736a:	4628      	mov	r0, r5
 800736c:	f002 fefc 	bl	800a168 <_fflush_r>
 8007370:	2800      	cmp	r0, #0
 8007372:	d1ed      	bne.n	8007350 <__swbuf_r+0x2a>
 8007374:	68a3      	ldr	r3, [r4, #8]
 8007376:	3b01      	subs	r3, #1
 8007378:	60a3      	str	r3, [r4, #8]
 800737a:	6823      	ldr	r3, [r4, #0]
 800737c:	1c5a      	adds	r2, r3, #1
 800737e:	6022      	str	r2, [r4, #0]
 8007380:	701e      	strb	r6, [r3, #0]
 8007382:	6962      	ldr	r2, [r4, #20]
 8007384:	1c43      	adds	r3, r0, #1
 8007386:	429a      	cmp	r2, r3
 8007388:	d004      	beq.n	8007394 <__swbuf_r+0x6e>
 800738a:	89a3      	ldrh	r3, [r4, #12]
 800738c:	07db      	lsls	r3, r3, #31
 800738e:	d5e1      	bpl.n	8007354 <__swbuf_r+0x2e>
 8007390:	2e0a      	cmp	r6, #10
 8007392:	d1df      	bne.n	8007354 <__swbuf_r+0x2e>
 8007394:	4621      	mov	r1, r4
 8007396:	4628      	mov	r0, r5
 8007398:	f002 fee6 	bl	800a168 <_fflush_r>
 800739c:	2800      	cmp	r0, #0
 800739e:	d0d9      	beq.n	8007354 <__swbuf_r+0x2e>
 80073a0:	e7d6      	b.n	8007350 <__swbuf_r+0x2a>
	...

080073a4 <__swsetup_r>:
 80073a4:	b538      	push	{r3, r4, r5, lr}
 80073a6:	4b29      	ldr	r3, [pc, #164]	@ (800744c <__swsetup_r+0xa8>)
 80073a8:	4605      	mov	r5, r0
 80073aa:	6818      	ldr	r0, [r3, #0]
 80073ac:	460c      	mov	r4, r1
 80073ae:	b118      	cbz	r0, 80073b8 <__swsetup_r+0x14>
 80073b0:	6a03      	ldr	r3, [r0, #32]
 80073b2:	b90b      	cbnz	r3, 80073b8 <__swsetup_r+0x14>
 80073b4:	f7ff feae 	bl	8007114 <__sinit>
 80073b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073bc:	0719      	lsls	r1, r3, #28
 80073be:	d422      	bmi.n	8007406 <__swsetup_r+0x62>
 80073c0:	06da      	lsls	r2, r3, #27
 80073c2:	d407      	bmi.n	80073d4 <__swsetup_r+0x30>
 80073c4:	2209      	movs	r2, #9
 80073c6:	602a      	str	r2, [r5, #0]
 80073c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073cc:	81a3      	strh	r3, [r4, #12]
 80073ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80073d2:	e033      	b.n	800743c <__swsetup_r+0x98>
 80073d4:	0758      	lsls	r0, r3, #29
 80073d6:	d512      	bpl.n	80073fe <__swsetup_r+0x5a>
 80073d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80073da:	b141      	cbz	r1, 80073ee <__swsetup_r+0x4a>
 80073dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80073e0:	4299      	cmp	r1, r3
 80073e2:	d002      	beq.n	80073ea <__swsetup_r+0x46>
 80073e4:	4628      	mov	r0, r5
 80073e6:	f000 ff6b 	bl	80082c0 <_free_r>
 80073ea:	2300      	movs	r3, #0
 80073ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80073ee:	89a3      	ldrh	r3, [r4, #12]
 80073f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80073f4:	81a3      	strh	r3, [r4, #12]
 80073f6:	2300      	movs	r3, #0
 80073f8:	6063      	str	r3, [r4, #4]
 80073fa:	6923      	ldr	r3, [r4, #16]
 80073fc:	6023      	str	r3, [r4, #0]
 80073fe:	89a3      	ldrh	r3, [r4, #12]
 8007400:	f043 0308 	orr.w	r3, r3, #8
 8007404:	81a3      	strh	r3, [r4, #12]
 8007406:	6923      	ldr	r3, [r4, #16]
 8007408:	b94b      	cbnz	r3, 800741e <__swsetup_r+0x7a>
 800740a:	89a3      	ldrh	r3, [r4, #12]
 800740c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007410:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007414:	d003      	beq.n	800741e <__swsetup_r+0x7a>
 8007416:	4621      	mov	r1, r4
 8007418:	4628      	mov	r0, r5
 800741a:	f002 fef3 	bl	800a204 <__smakebuf_r>
 800741e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007422:	f013 0201 	ands.w	r2, r3, #1
 8007426:	d00a      	beq.n	800743e <__swsetup_r+0x9a>
 8007428:	2200      	movs	r2, #0
 800742a:	60a2      	str	r2, [r4, #8]
 800742c:	6962      	ldr	r2, [r4, #20]
 800742e:	4252      	negs	r2, r2
 8007430:	61a2      	str	r2, [r4, #24]
 8007432:	6922      	ldr	r2, [r4, #16]
 8007434:	b942      	cbnz	r2, 8007448 <__swsetup_r+0xa4>
 8007436:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800743a:	d1c5      	bne.n	80073c8 <__swsetup_r+0x24>
 800743c:	bd38      	pop	{r3, r4, r5, pc}
 800743e:	0799      	lsls	r1, r3, #30
 8007440:	bf58      	it	pl
 8007442:	6962      	ldrpl	r2, [r4, #20]
 8007444:	60a2      	str	r2, [r4, #8]
 8007446:	e7f4      	b.n	8007432 <__swsetup_r+0x8e>
 8007448:	2000      	movs	r0, #0
 800744a:	e7f7      	b.n	800743c <__swsetup_r+0x98>
 800744c:	2000001c 	.word	0x2000001c

08007450 <memset>:
 8007450:	4402      	add	r2, r0
 8007452:	4603      	mov	r3, r0
 8007454:	4293      	cmp	r3, r2
 8007456:	d100      	bne.n	800745a <memset+0xa>
 8007458:	4770      	bx	lr
 800745a:	f803 1b01 	strb.w	r1, [r3], #1
 800745e:	e7f9      	b.n	8007454 <memset+0x4>

08007460 <_localeconv_r>:
 8007460:	4800      	ldr	r0, [pc, #0]	@ (8007464 <_localeconv_r+0x4>)
 8007462:	4770      	bx	lr
 8007464:	2000015c 	.word	0x2000015c

08007468 <_close_r>:
 8007468:	b538      	push	{r3, r4, r5, lr}
 800746a:	4d06      	ldr	r5, [pc, #24]	@ (8007484 <_close_r+0x1c>)
 800746c:	2300      	movs	r3, #0
 800746e:	4604      	mov	r4, r0
 8007470:	4608      	mov	r0, r1
 8007472:	602b      	str	r3, [r5, #0]
 8007474:	f7fa f8de 	bl	8001634 <_close>
 8007478:	1c43      	adds	r3, r0, #1
 800747a:	d102      	bne.n	8007482 <_close_r+0x1a>
 800747c:	682b      	ldr	r3, [r5, #0]
 800747e:	b103      	cbz	r3, 8007482 <_close_r+0x1a>
 8007480:	6023      	str	r3, [r4, #0]
 8007482:	bd38      	pop	{r3, r4, r5, pc}
 8007484:	20005394 	.word	0x20005394

08007488 <_reclaim_reent>:
 8007488:	4b29      	ldr	r3, [pc, #164]	@ (8007530 <_reclaim_reent+0xa8>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4283      	cmp	r3, r0
 800748e:	b570      	push	{r4, r5, r6, lr}
 8007490:	4604      	mov	r4, r0
 8007492:	d04b      	beq.n	800752c <_reclaim_reent+0xa4>
 8007494:	69c3      	ldr	r3, [r0, #28]
 8007496:	b1ab      	cbz	r3, 80074c4 <_reclaim_reent+0x3c>
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	b16b      	cbz	r3, 80074b8 <_reclaim_reent+0x30>
 800749c:	2500      	movs	r5, #0
 800749e:	69e3      	ldr	r3, [r4, #28]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	5959      	ldr	r1, [r3, r5]
 80074a4:	2900      	cmp	r1, #0
 80074a6:	d13b      	bne.n	8007520 <_reclaim_reent+0x98>
 80074a8:	3504      	adds	r5, #4
 80074aa:	2d80      	cmp	r5, #128	@ 0x80
 80074ac:	d1f7      	bne.n	800749e <_reclaim_reent+0x16>
 80074ae:	69e3      	ldr	r3, [r4, #28]
 80074b0:	4620      	mov	r0, r4
 80074b2:	68d9      	ldr	r1, [r3, #12]
 80074b4:	f000 ff04 	bl	80082c0 <_free_r>
 80074b8:	69e3      	ldr	r3, [r4, #28]
 80074ba:	6819      	ldr	r1, [r3, #0]
 80074bc:	b111      	cbz	r1, 80074c4 <_reclaim_reent+0x3c>
 80074be:	4620      	mov	r0, r4
 80074c0:	f000 fefe 	bl	80082c0 <_free_r>
 80074c4:	6961      	ldr	r1, [r4, #20]
 80074c6:	b111      	cbz	r1, 80074ce <_reclaim_reent+0x46>
 80074c8:	4620      	mov	r0, r4
 80074ca:	f000 fef9 	bl	80082c0 <_free_r>
 80074ce:	69e1      	ldr	r1, [r4, #28]
 80074d0:	b111      	cbz	r1, 80074d8 <_reclaim_reent+0x50>
 80074d2:	4620      	mov	r0, r4
 80074d4:	f000 fef4 	bl	80082c0 <_free_r>
 80074d8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80074da:	b111      	cbz	r1, 80074e2 <_reclaim_reent+0x5a>
 80074dc:	4620      	mov	r0, r4
 80074de:	f000 feef 	bl	80082c0 <_free_r>
 80074e2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80074e4:	b111      	cbz	r1, 80074ec <_reclaim_reent+0x64>
 80074e6:	4620      	mov	r0, r4
 80074e8:	f000 feea 	bl	80082c0 <_free_r>
 80074ec:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80074ee:	b111      	cbz	r1, 80074f6 <_reclaim_reent+0x6e>
 80074f0:	4620      	mov	r0, r4
 80074f2:	f000 fee5 	bl	80082c0 <_free_r>
 80074f6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80074f8:	b111      	cbz	r1, 8007500 <_reclaim_reent+0x78>
 80074fa:	4620      	mov	r0, r4
 80074fc:	f000 fee0 	bl	80082c0 <_free_r>
 8007500:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007502:	b111      	cbz	r1, 800750a <_reclaim_reent+0x82>
 8007504:	4620      	mov	r0, r4
 8007506:	f000 fedb 	bl	80082c0 <_free_r>
 800750a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800750c:	b111      	cbz	r1, 8007514 <_reclaim_reent+0x8c>
 800750e:	4620      	mov	r0, r4
 8007510:	f000 fed6 	bl	80082c0 <_free_r>
 8007514:	6a23      	ldr	r3, [r4, #32]
 8007516:	b14b      	cbz	r3, 800752c <_reclaim_reent+0xa4>
 8007518:	4620      	mov	r0, r4
 800751a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800751e:	4718      	bx	r3
 8007520:	680e      	ldr	r6, [r1, #0]
 8007522:	4620      	mov	r0, r4
 8007524:	f000 fecc 	bl	80082c0 <_free_r>
 8007528:	4631      	mov	r1, r6
 800752a:	e7bb      	b.n	80074a4 <_reclaim_reent+0x1c>
 800752c:	bd70      	pop	{r4, r5, r6, pc}
 800752e:	bf00      	nop
 8007530:	2000001c 	.word	0x2000001c

08007534 <_lseek_r>:
 8007534:	b538      	push	{r3, r4, r5, lr}
 8007536:	4d07      	ldr	r5, [pc, #28]	@ (8007554 <_lseek_r+0x20>)
 8007538:	4604      	mov	r4, r0
 800753a:	4608      	mov	r0, r1
 800753c:	4611      	mov	r1, r2
 800753e:	2200      	movs	r2, #0
 8007540:	602a      	str	r2, [r5, #0]
 8007542:	461a      	mov	r2, r3
 8007544:	f7fa f89d 	bl	8001682 <_lseek>
 8007548:	1c43      	adds	r3, r0, #1
 800754a:	d102      	bne.n	8007552 <_lseek_r+0x1e>
 800754c:	682b      	ldr	r3, [r5, #0]
 800754e:	b103      	cbz	r3, 8007552 <_lseek_r+0x1e>
 8007550:	6023      	str	r3, [r4, #0]
 8007552:	bd38      	pop	{r3, r4, r5, pc}
 8007554:	20005394 	.word	0x20005394

08007558 <_read_r>:
 8007558:	b538      	push	{r3, r4, r5, lr}
 800755a:	4d07      	ldr	r5, [pc, #28]	@ (8007578 <_read_r+0x20>)
 800755c:	4604      	mov	r4, r0
 800755e:	4608      	mov	r0, r1
 8007560:	4611      	mov	r1, r2
 8007562:	2200      	movs	r2, #0
 8007564:	602a      	str	r2, [r5, #0]
 8007566:	461a      	mov	r2, r3
 8007568:	f7fa f82b 	bl	80015c2 <_read>
 800756c:	1c43      	adds	r3, r0, #1
 800756e:	d102      	bne.n	8007576 <_read_r+0x1e>
 8007570:	682b      	ldr	r3, [r5, #0]
 8007572:	b103      	cbz	r3, 8007576 <_read_r+0x1e>
 8007574:	6023      	str	r3, [r4, #0]
 8007576:	bd38      	pop	{r3, r4, r5, pc}
 8007578:	20005394 	.word	0x20005394

0800757c <_write_r>:
 800757c:	b538      	push	{r3, r4, r5, lr}
 800757e:	4d07      	ldr	r5, [pc, #28]	@ (800759c <_write_r+0x20>)
 8007580:	4604      	mov	r4, r0
 8007582:	4608      	mov	r0, r1
 8007584:	4611      	mov	r1, r2
 8007586:	2200      	movs	r2, #0
 8007588:	602a      	str	r2, [r5, #0]
 800758a:	461a      	mov	r2, r3
 800758c:	f7fa f836 	bl	80015fc <_write>
 8007590:	1c43      	adds	r3, r0, #1
 8007592:	d102      	bne.n	800759a <_write_r+0x1e>
 8007594:	682b      	ldr	r3, [r5, #0]
 8007596:	b103      	cbz	r3, 800759a <_write_r+0x1e>
 8007598:	6023      	str	r3, [r4, #0]
 800759a:	bd38      	pop	{r3, r4, r5, pc}
 800759c:	20005394 	.word	0x20005394

080075a0 <__errno>:
 80075a0:	4b01      	ldr	r3, [pc, #4]	@ (80075a8 <__errno+0x8>)
 80075a2:	6818      	ldr	r0, [r3, #0]
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	2000001c 	.word	0x2000001c

080075ac <__libc_init_array>:
 80075ac:	b570      	push	{r4, r5, r6, lr}
 80075ae:	4d0d      	ldr	r5, [pc, #52]	@ (80075e4 <__libc_init_array+0x38>)
 80075b0:	4c0d      	ldr	r4, [pc, #52]	@ (80075e8 <__libc_init_array+0x3c>)
 80075b2:	1b64      	subs	r4, r4, r5
 80075b4:	10a4      	asrs	r4, r4, #2
 80075b6:	2600      	movs	r6, #0
 80075b8:	42a6      	cmp	r6, r4
 80075ba:	d109      	bne.n	80075d0 <__libc_init_array+0x24>
 80075bc:	4d0b      	ldr	r5, [pc, #44]	@ (80075ec <__libc_init_array+0x40>)
 80075be:	4c0c      	ldr	r4, [pc, #48]	@ (80075f0 <__libc_init_array+0x44>)
 80075c0:	f003 fae0 	bl	800ab84 <_init>
 80075c4:	1b64      	subs	r4, r4, r5
 80075c6:	10a4      	asrs	r4, r4, #2
 80075c8:	2600      	movs	r6, #0
 80075ca:	42a6      	cmp	r6, r4
 80075cc:	d105      	bne.n	80075da <__libc_init_array+0x2e>
 80075ce:	bd70      	pop	{r4, r5, r6, pc}
 80075d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80075d4:	4798      	blx	r3
 80075d6:	3601      	adds	r6, #1
 80075d8:	e7ee      	b.n	80075b8 <__libc_init_array+0xc>
 80075da:	f855 3b04 	ldr.w	r3, [r5], #4
 80075de:	4798      	blx	r3
 80075e0:	3601      	adds	r6, #1
 80075e2:	e7f2      	b.n	80075ca <__libc_init_array+0x1e>
 80075e4:	0800b278 	.word	0x0800b278
 80075e8:	0800b278 	.word	0x0800b278
 80075ec:	0800b278 	.word	0x0800b278
 80075f0:	0800b27c 	.word	0x0800b27c

080075f4 <__retarget_lock_init_recursive>:
 80075f4:	4770      	bx	lr

080075f6 <__retarget_lock_acquire_recursive>:
 80075f6:	4770      	bx	lr

080075f8 <__retarget_lock_release_recursive>:
 80075f8:	4770      	bx	lr

080075fa <memcpy>:
 80075fa:	440a      	add	r2, r1
 80075fc:	4291      	cmp	r1, r2
 80075fe:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007602:	d100      	bne.n	8007606 <memcpy+0xc>
 8007604:	4770      	bx	lr
 8007606:	b510      	push	{r4, lr}
 8007608:	f811 4b01 	ldrb.w	r4, [r1], #1
 800760c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007610:	4291      	cmp	r1, r2
 8007612:	d1f9      	bne.n	8007608 <memcpy+0xe>
 8007614:	bd10      	pop	{r4, pc}
	...

08007618 <nanf>:
 8007618:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007620 <nanf+0x8>
 800761c:	4770      	bx	lr
 800761e:	bf00      	nop
 8007620:	7fc00000 	.word	0x7fc00000

08007624 <quorem>:
 8007624:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007628:	6903      	ldr	r3, [r0, #16]
 800762a:	690c      	ldr	r4, [r1, #16]
 800762c:	42a3      	cmp	r3, r4
 800762e:	4607      	mov	r7, r0
 8007630:	db7e      	blt.n	8007730 <quorem+0x10c>
 8007632:	3c01      	subs	r4, #1
 8007634:	f101 0814 	add.w	r8, r1, #20
 8007638:	00a3      	lsls	r3, r4, #2
 800763a:	f100 0514 	add.w	r5, r0, #20
 800763e:	9300      	str	r3, [sp, #0]
 8007640:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007644:	9301      	str	r3, [sp, #4]
 8007646:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800764a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800764e:	3301      	adds	r3, #1
 8007650:	429a      	cmp	r2, r3
 8007652:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007656:	fbb2 f6f3 	udiv	r6, r2, r3
 800765a:	d32e      	bcc.n	80076ba <quorem+0x96>
 800765c:	f04f 0a00 	mov.w	sl, #0
 8007660:	46c4      	mov	ip, r8
 8007662:	46ae      	mov	lr, r5
 8007664:	46d3      	mov	fp, sl
 8007666:	f85c 3b04 	ldr.w	r3, [ip], #4
 800766a:	b298      	uxth	r0, r3
 800766c:	fb06 a000 	mla	r0, r6, r0, sl
 8007670:	0c02      	lsrs	r2, r0, #16
 8007672:	0c1b      	lsrs	r3, r3, #16
 8007674:	fb06 2303 	mla	r3, r6, r3, r2
 8007678:	f8de 2000 	ldr.w	r2, [lr]
 800767c:	b280      	uxth	r0, r0
 800767e:	b292      	uxth	r2, r2
 8007680:	1a12      	subs	r2, r2, r0
 8007682:	445a      	add	r2, fp
 8007684:	f8de 0000 	ldr.w	r0, [lr]
 8007688:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800768c:	b29b      	uxth	r3, r3
 800768e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007692:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007696:	b292      	uxth	r2, r2
 8007698:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800769c:	45e1      	cmp	r9, ip
 800769e:	f84e 2b04 	str.w	r2, [lr], #4
 80076a2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80076a6:	d2de      	bcs.n	8007666 <quorem+0x42>
 80076a8:	9b00      	ldr	r3, [sp, #0]
 80076aa:	58eb      	ldr	r3, [r5, r3]
 80076ac:	b92b      	cbnz	r3, 80076ba <quorem+0x96>
 80076ae:	9b01      	ldr	r3, [sp, #4]
 80076b0:	3b04      	subs	r3, #4
 80076b2:	429d      	cmp	r5, r3
 80076b4:	461a      	mov	r2, r3
 80076b6:	d32f      	bcc.n	8007718 <quorem+0xf4>
 80076b8:	613c      	str	r4, [r7, #16]
 80076ba:	4638      	mov	r0, r7
 80076bc:	f001 f9c4 	bl	8008a48 <__mcmp>
 80076c0:	2800      	cmp	r0, #0
 80076c2:	db25      	blt.n	8007710 <quorem+0xec>
 80076c4:	4629      	mov	r1, r5
 80076c6:	2000      	movs	r0, #0
 80076c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80076cc:	f8d1 c000 	ldr.w	ip, [r1]
 80076d0:	fa1f fe82 	uxth.w	lr, r2
 80076d4:	fa1f f38c 	uxth.w	r3, ip
 80076d8:	eba3 030e 	sub.w	r3, r3, lr
 80076dc:	4403      	add	r3, r0
 80076de:	0c12      	lsrs	r2, r2, #16
 80076e0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80076e4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076ee:	45c1      	cmp	r9, r8
 80076f0:	f841 3b04 	str.w	r3, [r1], #4
 80076f4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80076f8:	d2e6      	bcs.n	80076c8 <quorem+0xa4>
 80076fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80076fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007702:	b922      	cbnz	r2, 800770e <quorem+0xea>
 8007704:	3b04      	subs	r3, #4
 8007706:	429d      	cmp	r5, r3
 8007708:	461a      	mov	r2, r3
 800770a:	d30b      	bcc.n	8007724 <quorem+0x100>
 800770c:	613c      	str	r4, [r7, #16]
 800770e:	3601      	adds	r6, #1
 8007710:	4630      	mov	r0, r6
 8007712:	b003      	add	sp, #12
 8007714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007718:	6812      	ldr	r2, [r2, #0]
 800771a:	3b04      	subs	r3, #4
 800771c:	2a00      	cmp	r2, #0
 800771e:	d1cb      	bne.n	80076b8 <quorem+0x94>
 8007720:	3c01      	subs	r4, #1
 8007722:	e7c6      	b.n	80076b2 <quorem+0x8e>
 8007724:	6812      	ldr	r2, [r2, #0]
 8007726:	3b04      	subs	r3, #4
 8007728:	2a00      	cmp	r2, #0
 800772a:	d1ef      	bne.n	800770c <quorem+0xe8>
 800772c:	3c01      	subs	r4, #1
 800772e:	e7ea      	b.n	8007706 <quorem+0xe2>
 8007730:	2000      	movs	r0, #0
 8007732:	e7ee      	b.n	8007712 <quorem+0xee>
 8007734:	0000      	movs	r0, r0
	...

08007738 <_dtoa_r>:
 8007738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800773c:	69c7      	ldr	r7, [r0, #28]
 800773e:	b099      	sub	sp, #100	@ 0x64
 8007740:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007744:	ec55 4b10 	vmov	r4, r5, d0
 8007748:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800774a:	9109      	str	r1, [sp, #36]	@ 0x24
 800774c:	4683      	mov	fp, r0
 800774e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007750:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007752:	b97f      	cbnz	r7, 8007774 <_dtoa_r+0x3c>
 8007754:	2010      	movs	r0, #16
 8007756:	f000 fdfd 	bl	8008354 <malloc>
 800775a:	4602      	mov	r2, r0
 800775c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007760:	b920      	cbnz	r0, 800776c <_dtoa_r+0x34>
 8007762:	4ba7      	ldr	r3, [pc, #668]	@ (8007a00 <_dtoa_r+0x2c8>)
 8007764:	21ef      	movs	r1, #239	@ 0xef
 8007766:	48a7      	ldr	r0, [pc, #668]	@ (8007a04 <_dtoa_r+0x2cc>)
 8007768:	f002 fdee 	bl	800a348 <__assert_func>
 800776c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007770:	6007      	str	r7, [r0, #0]
 8007772:	60c7      	str	r7, [r0, #12]
 8007774:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007778:	6819      	ldr	r1, [r3, #0]
 800777a:	b159      	cbz	r1, 8007794 <_dtoa_r+0x5c>
 800777c:	685a      	ldr	r2, [r3, #4]
 800777e:	604a      	str	r2, [r1, #4]
 8007780:	2301      	movs	r3, #1
 8007782:	4093      	lsls	r3, r2
 8007784:	608b      	str	r3, [r1, #8]
 8007786:	4658      	mov	r0, fp
 8007788:	f000 feda 	bl	8008540 <_Bfree>
 800778c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007790:	2200      	movs	r2, #0
 8007792:	601a      	str	r2, [r3, #0]
 8007794:	1e2b      	subs	r3, r5, #0
 8007796:	bfb9      	ittee	lt
 8007798:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800779c:	9303      	strlt	r3, [sp, #12]
 800779e:	2300      	movge	r3, #0
 80077a0:	6033      	strge	r3, [r6, #0]
 80077a2:	9f03      	ldr	r7, [sp, #12]
 80077a4:	4b98      	ldr	r3, [pc, #608]	@ (8007a08 <_dtoa_r+0x2d0>)
 80077a6:	bfbc      	itt	lt
 80077a8:	2201      	movlt	r2, #1
 80077aa:	6032      	strlt	r2, [r6, #0]
 80077ac:	43bb      	bics	r3, r7
 80077ae:	d112      	bne.n	80077d6 <_dtoa_r+0x9e>
 80077b0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80077b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80077b6:	6013      	str	r3, [r2, #0]
 80077b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80077bc:	4323      	orrs	r3, r4
 80077be:	f000 854d 	beq.w	800825c <_dtoa_r+0xb24>
 80077c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80077c4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007a1c <_dtoa_r+0x2e4>
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	f000 854f 	beq.w	800826c <_dtoa_r+0xb34>
 80077ce:	f10a 0303 	add.w	r3, sl, #3
 80077d2:	f000 bd49 	b.w	8008268 <_dtoa_r+0xb30>
 80077d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80077da:	2200      	movs	r2, #0
 80077dc:	ec51 0b17 	vmov	r0, r1, d7
 80077e0:	2300      	movs	r3, #0
 80077e2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80077e6:	f7f9 f997 	bl	8000b18 <__aeabi_dcmpeq>
 80077ea:	4680      	mov	r8, r0
 80077ec:	b158      	cbz	r0, 8007806 <_dtoa_r+0xce>
 80077ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80077f0:	2301      	movs	r3, #1
 80077f2:	6013      	str	r3, [r2, #0]
 80077f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80077f6:	b113      	cbz	r3, 80077fe <_dtoa_r+0xc6>
 80077f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80077fa:	4b84      	ldr	r3, [pc, #528]	@ (8007a0c <_dtoa_r+0x2d4>)
 80077fc:	6013      	str	r3, [r2, #0]
 80077fe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007a20 <_dtoa_r+0x2e8>
 8007802:	f000 bd33 	b.w	800826c <_dtoa_r+0xb34>
 8007806:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800780a:	aa16      	add	r2, sp, #88	@ 0x58
 800780c:	a917      	add	r1, sp, #92	@ 0x5c
 800780e:	4658      	mov	r0, fp
 8007810:	f001 fa3a 	bl	8008c88 <__d2b>
 8007814:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007818:	4681      	mov	r9, r0
 800781a:	2e00      	cmp	r6, #0
 800781c:	d077      	beq.n	800790e <_dtoa_r+0x1d6>
 800781e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007820:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007824:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007828:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800782c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007830:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007834:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007838:	4619      	mov	r1, r3
 800783a:	2200      	movs	r2, #0
 800783c:	4b74      	ldr	r3, [pc, #464]	@ (8007a10 <_dtoa_r+0x2d8>)
 800783e:	f7f8 fd4b 	bl	80002d8 <__aeabi_dsub>
 8007842:	a369      	add	r3, pc, #420	@ (adr r3, 80079e8 <_dtoa_r+0x2b0>)
 8007844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007848:	f7f8 fefe 	bl	8000648 <__aeabi_dmul>
 800784c:	a368      	add	r3, pc, #416	@ (adr r3, 80079f0 <_dtoa_r+0x2b8>)
 800784e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007852:	f7f8 fd43 	bl	80002dc <__adddf3>
 8007856:	4604      	mov	r4, r0
 8007858:	4630      	mov	r0, r6
 800785a:	460d      	mov	r5, r1
 800785c:	f7f8 fe8a 	bl	8000574 <__aeabi_i2d>
 8007860:	a365      	add	r3, pc, #404	@ (adr r3, 80079f8 <_dtoa_r+0x2c0>)
 8007862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007866:	f7f8 feef 	bl	8000648 <__aeabi_dmul>
 800786a:	4602      	mov	r2, r0
 800786c:	460b      	mov	r3, r1
 800786e:	4620      	mov	r0, r4
 8007870:	4629      	mov	r1, r5
 8007872:	f7f8 fd33 	bl	80002dc <__adddf3>
 8007876:	4604      	mov	r4, r0
 8007878:	460d      	mov	r5, r1
 800787a:	f7f9 f995 	bl	8000ba8 <__aeabi_d2iz>
 800787e:	2200      	movs	r2, #0
 8007880:	4607      	mov	r7, r0
 8007882:	2300      	movs	r3, #0
 8007884:	4620      	mov	r0, r4
 8007886:	4629      	mov	r1, r5
 8007888:	f7f9 f950 	bl	8000b2c <__aeabi_dcmplt>
 800788c:	b140      	cbz	r0, 80078a0 <_dtoa_r+0x168>
 800788e:	4638      	mov	r0, r7
 8007890:	f7f8 fe70 	bl	8000574 <__aeabi_i2d>
 8007894:	4622      	mov	r2, r4
 8007896:	462b      	mov	r3, r5
 8007898:	f7f9 f93e 	bl	8000b18 <__aeabi_dcmpeq>
 800789c:	b900      	cbnz	r0, 80078a0 <_dtoa_r+0x168>
 800789e:	3f01      	subs	r7, #1
 80078a0:	2f16      	cmp	r7, #22
 80078a2:	d851      	bhi.n	8007948 <_dtoa_r+0x210>
 80078a4:	4b5b      	ldr	r3, [pc, #364]	@ (8007a14 <_dtoa_r+0x2dc>)
 80078a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80078aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80078b2:	f7f9 f93b 	bl	8000b2c <__aeabi_dcmplt>
 80078b6:	2800      	cmp	r0, #0
 80078b8:	d048      	beq.n	800794c <_dtoa_r+0x214>
 80078ba:	3f01      	subs	r7, #1
 80078bc:	2300      	movs	r3, #0
 80078be:	9312      	str	r3, [sp, #72]	@ 0x48
 80078c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80078c2:	1b9b      	subs	r3, r3, r6
 80078c4:	1e5a      	subs	r2, r3, #1
 80078c6:	bf44      	itt	mi
 80078c8:	f1c3 0801 	rsbmi	r8, r3, #1
 80078cc:	2300      	movmi	r3, #0
 80078ce:	9208      	str	r2, [sp, #32]
 80078d0:	bf54      	ite	pl
 80078d2:	f04f 0800 	movpl.w	r8, #0
 80078d6:	9308      	strmi	r3, [sp, #32]
 80078d8:	2f00      	cmp	r7, #0
 80078da:	db39      	blt.n	8007950 <_dtoa_r+0x218>
 80078dc:	9b08      	ldr	r3, [sp, #32]
 80078de:	970f      	str	r7, [sp, #60]	@ 0x3c
 80078e0:	443b      	add	r3, r7
 80078e2:	9308      	str	r3, [sp, #32]
 80078e4:	2300      	movs	r3, #0
 80078e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80078e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078ea:	2b09      	cmp	r3, #9
 80078ec:	d864      	bhi.n	80079b8 <_dtoa_r+0x280>
 80078ee:	2b05      	cmp	r3, #5
 80078f0:	bfc4      	itt	gt
 80078f2:	3b04      	subgt	r3, #4
 80078f4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80078f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078f8:	f1a3 0302 	sub.w	r3, r3, #2
 80078fc:	bfcc      	ite	gt
 80078fe:	2400      	movgt	r4, #0
 8007900:	2401      	movle	r4, #1
 8007902:	2b03      	cmp	r3, #3
 8007904:	d863      	bhi.n	80079ce <_dtoa_r+0x296>
 8007906:	e8df f003 	tbb	[pc, r3]
 800790a:	372a      	.short	0x372a
 800790c:	5535      	.short	0x5535
 800790e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007912:	441e      	add	r6, r3
 8007914:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007918:	2b20      	cmp	r3, #32
 800791a:	bfc1      	itttt	gt
 800791c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007920:	409f      	lslgt	r7, r3
 8007922:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007926:	fa24 f303 	lsrgt.w	r3, r4, r3
 800792a:	bfd6      	itet	le
 800792c:	f1c3 0320 	rsble	r3, r3, #32
 8007930:	ea47 0003 	orrgt.w	r0, r7, r3
 8007934:	fa04 f003 	lslle.w	r0, r4, r3
 8007938:	f7f8 fe0c 	bl	8000554 <__aeabi_ui2d>
 800793c:	2201      	movs	r2, #1
 800793e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007942:	3e01      	subs	r6, #1
 8007944:	9214      	str	r2, [sp, #80]	@ 0x50
 8007946:	e777      	b.n	8007838 <_dtoa_r+0x100>
 8007948:	2301      	movs	r3, #1
 800794a:	e7b8      	b.n	80078be <_dtoa_r+0x186>
 800794c:	9012      	str	r0, [sp, #72]	@ 0x48
 800794e:	e7b7      	b.n	80078c0 <_dtoa_r+0x188>
 8007950:	427b      	negs	r3, r7
 8007952:	930a      	str	r3, [sp, #40]	@ 0x28
 8007954:	2300      	movs	r3, #0
 8007956:	eba8 0807 	sub.w	r8, r8, r7
 800795a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800795c:	e7c4      	b.n	80078e8 <_dtoa_r+0x1b0>
 800795e:	2300      	movs	r3, #0
 8007960:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007962:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007964:	2b00      	cmp	r3, #0
 8007966:	dc35      	bgt.n	80079d4 <_dtoa_r+0x29c>
 8007968:	2301      	movs	r3, #1
 800796a:	9300      	str	r3, [sp, #0]
 800796c:	9307      	str	r3, [sp, #28]
 800796e:	461a      	mov	r2, r3
 8007970:	920e      	str	r2, [sp, #56]	@ 0x38
 8007972:	e00b      	b.n	800798c <_dtoa_r+0x254>
 8007974:	2301      	movs	r3, #1
 8007976:	e7f3      	b.n	8007960 <_dtoa_r+0x228>
 8007978:	2300      	movs	r3, #0
 800797a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800797c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800797e:	18fb      	adds	r3, r7, r3
 8007980:	9300      	str	r3, [sp, #0]
 8007982:	3301      	adds	r3, #1
 8007984:	2b01      	cmp	r3, #1
 8007986:	9307      	str	r3, [sp, #28]
 8007988:	bfb8      	it	lt
 800798a:	2301      	movlt	r3, #1
 800798c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007990:	2100      	movs	r1, #0
 8007992:	2204      	movs	r2, #4
 8007994:	f102 0514 	add.w	r5, r2, #20
 8007998:	429d      	cmp	r5, r3
 800799a:	d91f      	bls.n	80079dc <_dtoa_r+0x2a4>
 800799c:	6041      	str	r1, [r0, #4]
 800799e:	4658      	mov	r0, fp
 80079a0:	f000 fd8e 	bl	80084c0 <_Balloc>
 80079a4:	4682      	mov	sl, r0
 80079a6:	2800      	cmp	r0, #0
 80079a8:	d13c      	bne.n	8007a24 <_dtoa_r+0x2ec>
 80079aa:	4b1b      	ldr	r3, [pc, #108]	@ (8007a18 <_dtoa_r+0x2e0>)
 80079ac:	4602      	mov	r2, r0
 80079ae:	f240 11af 	movw	r1, #431	@ 0x1af
 80079b2:	e6d8      	b.n	8007766 <_dtoa_r+0x2e>
 80079b4:	2301      	movs	r3, #1
 80079b6:	e7e0      	b.n	800797a <_dtoa_r+0x242>
 80079b8:	2401      	movs	r4, #1
 80079ba:	2300      	movs	r3, #0
 80079bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80079be:	940b      	str	r4, [sp, #44]	@ 0x2c
 80079c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80079c4:	9300      	str	r3, [sp, #0]
 80079c6:	9307      	str	r3, [sp, #28]
 80079c8:	2200      	movs	r2, #0
 80079ca:	2312      	movs	r3, #18
 80079cc:	e7d0      	b.n	8007970 <_dtoa_r+0x238>
 80079ce:	2301      	movs	r3, #1
 80079d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80079d2:	e7f5      	b.n	80079c0 <_dtoa_r+0x288>
 80079d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079d6:	9300      	str	r3, [sp, #0]
 80079d8:	9307      	str	r3, [sp, #28]
 80079da:	e7d7      	b.n	800798c <_dtoa_r+0x254>
 80079dc:	3101      	adds	r1, #1
 80079de:	0052      	lsls	r2, r2, #1
 80079e0:	e7d8      	b.n	8007994 <_dtoa_r+0x25c>
 80079e2:	bf00      	nop
 80079e4:	f3af 8000 	nop.w
 80079e8:	636f4361 	.word	0x636f4361
 80079ec:	3fd287a7 	.word	0x3fd287a7
 80079f0:	8b60c8b3 	.word	0x8b60c8b3
 80079f4:	3fc68a28 	.word	0x3fc68a28
 80079f8:	509f79fb 	.word	0x509f79fb
 80079fc:	3fd34413 	.word	0x3fd34413
 8007a00:	0800ae86 	.word	0x0800ae86
 8007a04:	0800ae9d 	.word	0x0800ae9d
 8007a08:	7ff00000 	.word	0x7ff00000
 8007a0c:	0800ae51 	.word	0x0800ae51
 8007a10:	3ff80000 	.word	0x3ff80000
 8007a14:	0800af98 	.word	0x0800af98
 8007a18:	0800aef5 	.word	0x0800aef5
 8007a1c:	0800ae82 	.word	0x0800ae82
 8007a20:	0800ae50 	.word	0x0800ae50
 8007a24:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007a28:	6018      	str	r0, [r3, #0]
 8007a2a:	9b07      	ldr	r3, [sp, #28]
 8007a2c:	2b0e      	cmp	r3, #14
 8007a2e:	f200 80a4 	bhi.w	8007b7a <_dtoa_r+0x442>
 8007a32:	2c00      	cmp	r4, #0
 8007a34:	f000 80a1 	beq.w	8007b7a <_dtoa_r+0x442>
 8007a38:	2f00      	cmp	r7, #0
 8007a3a:	dd33      	ble.n	8007aa4 <_dtoa_r+0x36c>
 8007a3c:	4bad      	ldr	r3, [pc, #692]	@ (8007cf4 <_dtoa_r+0x5bc>)
 8007a3e:	f007 020f 	and.w	r2, r7, #15
 8007a42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a46:	ed93 7b00 	vldr	d7, [r3]
 8007a4a:	05f8      	lsls	r0, r7, #23
 8007a4c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007a50:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007a54:	d516      	bpl.n	8007a84 <_dtoa_r+0x34c>
 8007a56:	4ba8      	ldr	r3, [pc, #672]	@ (8007cf8 <_dtoa_r+0x5c0>)
 8007a58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a60:	f7f8 ff1c 	bl	800089c <__aeabi_ddiv>
 8007a64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a68:	f004 040f 	and.w	r4, r4, #15
 8007a6c:	2603      	movs	r6, #3
 8007a6e:	4da2      	ldr	r5, [pc, #648]	@ (8007cf8 <_dtoa_r+0x5c0>)
 8007a70:	b954      	cbnz	r4, 8007a88 <_dtoa_r+0x350>
 8007a72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a7a:	f7f8 ff0f 	bl	800089c <__aeabi_ddiv>
 8007a7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a82:	e028      	b.n	8007ad6 <_dtoa_r+0x39e>
 8007a84:	2602      	movs	r6, #2
 8007a86:	e7f2      	b.n	8007a6e <_dtoa_r+0x336>
 8007a88:	07e1      	lsls	r1, r4, #31
 8007a8a:	d508      	bpl.n	8007a9e <_dtoa_r+0x366>
 8007a8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a90:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007a94:	f7f8 fdd8 	bl	8000648 <__aeabi_dmul>
 8007a98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a9c:	3601      	adds	r6, #1
 8007a9e:	1064      	asrs	r4, r4, #1
 8007aa0:	3508      	adds	r5, #8
 8007aa2:	e7e5      	b.n	8007a70 <_dtoa_r+0x338>
 8007aa4:	f000 80d2 	beq.w	8007c4c <_dtoa_r+0x514>
 8007aa8:	427c      	negs	r4, r7
 8007aaa:	4b92      	ldr	r3, [pc, #584]	@ (8007cf4 <_dtoa_r+0x5bc>)
 8007aac:	4d92      	ldr	r5, [pc, #584]	@ (8007cf8 <_dtoa_r+0x5c0>)
 8007aae:	f004 020f 	and.w	r2, r4, #15
 8007ab2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007abe:	f7f8 fdc3 	bl	8000648 <__aeabi_dmul>
 8007ac2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ac6:	1124      	asrs	r4, r4, #4
 8007ac8:	2300      	movs	r3, #0
 8007aca:	2602      	movs	r6, #2
 8007acc:	2c00      	cmp	r4, #0
 8007ace:	f040 80b2 	bne.w	8007c36 <_dtoa_r+0x4fe>
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d1d3      	bne.n	8007a7e <_dtoa_r+0x346>
 8007ad6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007ad8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	f000 80b7 	beq.w	8007c50 <_dtoa_r+0x518>
 8007ae2:	4b86      	ldr	r3, [pc, #536]	@ (8007cfc <_dtoa_r+0x5c4>)
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	4620      	mov	r0, r4
 8007ae8:	4629      	mov	r1, r5
 8007aea:	f7f9 f81f 	bl	8000b2c <__aeabi_dcmplt>
 8007aee:	2800      	cmp	r0, #0
 8007af0:	f000 80ae 	beq.w	8007c50 <_dtoa_r+0x518>
 8007af4:	9b07      	ldr	r3, [sp, #28]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	f000 80aa 	beq.w	8007c50 <_dtoa_r+0x518>
 8007afc:	9b00      	ldr	r3, [sp, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	dd37      	ble.n	8007b72 <_dtoa_r+0x43a>
 8007b02:	1e7b      	subs	r3, r7, #1
 8007b04:	9304      	str	r3, [sp, #16]
 8007b06:	4620      	mov	r0, r4
 8007b08:	4b7d      	ldr	r3, [pc, #500]	@ (8007d00 <_dtoa_r+0x5c8>)
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	4629      	mov	r1, r5
 8007b0e:	f7f8 fd9b 	bl	8000648 <__aeabi_dmul>
 8007b12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b16:	9c00      	ldr	r4, [sp, #0]
 8007b18:	3601      	adds	r6, #1
 8007b1a:	4630      	mov	r0, r6
 8007b1c:	f7f8 fd2a 	bl	8000574 <__aeabi_i2d>
 8007b20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b24:	f7f8 fd90 	bl	8000648 <__aeabi_dmul>
 8007b28:	4b76      	ldr	r3, [pc, #472]	@ (8007d04 <_dtoa_r+0x5cc>)
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f7f8 fbd6 	bl	80002dc <__adddf3>
 8007b30:	4605      	mov	r5, r0
 8007b32:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007b36:	2c00      	cmp	r4, #0
 8007b38:	f040 808d 	bne.w	8007c56 <_dtoa_r+0x51e>
 8007b3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b40:	4b71      	ldr	r3, [pc, #452]	@ (8007d08 <_dtoa_r+0x5d0>)
 8007b42:	2200      	movs	r2, #0
 8007b44:	f7f8 fbc8 	bl	80002d8 <__aeabi_dsub>
 8007b48:	4602      	mov	r2, r0
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b50:	462a      	mov	r2, r5
 8007b52:	4633      	mov	r3, r6
 8007b54:	f7f9 f808 	bl	8000b68 <__aeabi_dcmpgt>
 8007b58:	2800      	cmp	r0, #0
 8007b5a:	f040 828b 	bne.w	8008074 <_dtoa_r+0x93c>
 8007b5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b62:	462a      	mov	r2, r5
 8007b64:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007b68:	f7f8 ffe0 	bl	8000b2c <__aeabi_dcmplt>
 8007b6c:	2800      	cmp	r0, #0
 8007b6e:	f040 8128 	bne.w	8007dc2 <_dtoa_r+0x68a>
 8007b72:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007b76:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007b7a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f2c0 815a 	blt.w	8007e36 <_dtoa_r+0x6fe>
 8007b82:	2f0e      	cmp	r7, #14
 8007b84:	f300 8157 	bgt.w	8007e36 <_dtoa_r+0x6fe>
 8007b88:	4b5a      	ldr	r3, [pc, #360]	@ (8007cf4 <_dtoa_r+0x5bc>)
 8007b8a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007b8e:	ed93 7b00 	vldr	d7, [r3]
 8007b92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	ed8d 7b00 	vstr	d7, [sp]
 8007b9a:	da03      	bge.n	8007ba4 <_dtoa_r+0x46c>
 8007b9c:	9b07      	ldr	r3, [sp, #28]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	f340 8101 	ble.w	8007da6 <_dtoa_r+0x66e>
 8007ba4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007ba8:	4656      	mov	r6, sl
 8007baa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007bae:	4620      	mov	r0, r4
 8007bb0:	4629      	mov	r1, r5
 8007bb2:	f7f8 fe73 	bl	800089c <__aeabi_ddiv>
 8007bb6:	f7f8 fff7 	bl	8000ba8 <__aeabi_d2iz>
 8007bba:	4680      	mov	r8, r0
 8007bbc:	f7f8 fcda 	bl	8000574 <__aeabi_i2d>
 8007bc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007bc4:	f7f8 fd40 	bl	8000648 <__aeabi_dmul>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	460b      	mov	r3, r1
 8007bcc:	4620      	mov	r0, r4
 8007bce:	4629      	mov	r1, r5
 8007bd0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007bd4:	f7f8 fb80 	bl	80002d8 <__aeabi_dsub>
 8007bd8:	f806 4b01 	strb.w	r4, [r6], #1
 8007bdc:	9d07      	ldr	r5, [sp, #28]
 8007bde:	eba6 040a 	sub.w	r4, r6, sl
 8007be2:	42a5      	cmp	r5, r4
 8007be4:	4602      	mov	r2, r0
 8007be6:	460b      	mov	r3, r1
 8007be8:	f040 8117 	bne.w	8007e1a <_dtoa_r+0x6e2>
 8007bec:	f7f8 fb76 	bl	80002dc <__adddf3>
 8007bf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007bf4:	4604      	mov	r4, r0
 8007bf6:	460d      	mov	r5, r1
 8007bf8:	f7f8 ffb6 	bl	8000b68 <__aeabi_dcmpgt>
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	f040 80f9 	bne.w	8007df4 <_dtoa_r+0x6bc>
 8007c02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c06:	4620      	mov	r0, r4
 8007c08:	4629      	mov	r1, r5
 8007c0a:	f7f8 ff85 	bl	8000b18 <__aeabi_dcmpeq>
 8007c0e:	b118      	cbz	r0, 8007c18 <_dtoa_r+0x4e0>
 8007c10:	f018 0f01 	tst.w	r8, #1
 8007c14:	f040 80ee 	bne.w	8007df4 <_dtoa_r+0x6bc>
 8007c18:	4649      	mov	r1, r9
 8007c1a:	4658      	mov	r0, fp
 8007c1c:	f000 fc90 	bl	8008540 <_Bfree>
 8007c20:	2300      	movs	r3, #0
 8007c22:	7033      	strb	r3, [r6, #0]
 8007c24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007c26:	3701      	adds	r7, #1
 8007c28:	601f      	str	r7, [r3, #0]
 8007c2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	f000 831d 	beq.w	800826c <_dtoa_r+0xb34>
 8007c32:	601e      	str	r6, [r3, #0]
 8007c34:	e31a      	b.n	800826c <_dtoa_r+0xb34>
 8007c36:	07e2      	lsls	r2, r4, #31
 8007c38:	d505      	bpl.n	8007c46 <_dtoa_r+0x50e>
 8007c3a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007c3e:	f7f8 fd03 	bl	8000648 <__aeabi_dmul>
 8007c42:	3601      	adds	r6, #1
 8007c44:	2301      	movs	r3, #1
 8007c46:	1064      	asrs	r4, r4, #1
 8007c48:	3508      	adds	r5, #8
 8007c4a:	e73f      	b.n	8007acc <_dtoa_r+0x394>
 8007c4c:	2602      	movs	r6, #2
 8007c4e:	e742      	b.n	8007ad6 <_dtoa_r+0x39e>
 8007c50:	9c07      	ldr	r4, [sp, #28]
 8007c52:	9704      	str	r7, [sp, #16]
 8007c54:	e761      	b.n	8007b1a <_dtoa_r+0x3e2>
 8007c56:	4b27      	ldr	r3, [pc, #156]	@ (8007cf4 <_dtoa_r+0x5bc>)
 8007c58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007c5a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007c5e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c62:	4454      	add	r4, sl
 8007c64:	2900      	cmp	r1, #0
 8007c66:	d053      	beq.n	8007d10 <_dtoa_r+0x5d8>
 8007c68:	4928      	ldr	r1, [pc, #160]	@ (8007d0c <_dtoa_r+0x5d4>)
 8007c6a:	2000      	movs	r0, #0
 8007c6c:	f7f8 fe16 	bl	800089c <__aeabi_ddiv>
 8007c70:	4633      	mov	r3, r6
 8007c72:	462a      	mov	r2, r5
 8007c74:	f7f8 fb30 	bl	80002d8 <__aeabi_dsub>
 8007c78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007c7c:	4656      	mov	r6, sl
 8007c7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c82:	f7f8 ff91 	bl	8000ba8 <__aeabi_d2iz>
 8007c86:	4605      	mov	r5, r0
 8007c88:	f7f8 fc74 	bl	8000574 <__aeabi_i2d>
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	460b      	mov	r3, r1
 8007c90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c94:	f7f8 fb20 	bl	80002d8 <__aeabi_dsub>
 8007c98:	3530      	adds	r5, #48	@ 0x30
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007ca2:	f806 5b01 	strb.w	r5, [r6], #1
 8007ca6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007caa:	f7f8 ff3f 	bl	8000b2c <__aeabi_dcmplt>
 8007cae:	2800      	cmp	r0, #0
 8007cb0:	d171      	bne.n	8007d96 <_dtoa_r+0x65e>
 8007cb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007cb6:	4911      	ldr	r1, [pc, #68]	@ (8007cfc <_dtoa_r+0x5c4>)
 8007cb8:	2000      	movs	r0, #0
 8007cba:	f7f8 fb0d 	bl	80002d8 <__aeabi_dsub>
 8007cbe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007cc2:	f7f8 ff33 	bl	8000b2c <__aeabi_dcmplt>
 8007cc6:	2800      	cmp	r0, #0
 8007cc8:	f040 8095 	bne.w	8007df6 <_dtoa_r+0x6be>
 8007ccc:	42a6      	cmp	r6, r4
 8007cce:	f43f af50 	beq.w	8007b72 <_dtoa_r+0x43a>
 8007cd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8007d00 <_dtoa_r+0x5c8>)
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f7f8 fcb5 	bl	8000648 <__aeabi_dmul>
 8007cde:	4b08      	ldr	r3, [pc, #32]	@ (8007d00 <_dtoa_r+0x5c8>)
 8007ce0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cea:	f7f8 fcad 	bl	8000648 <__aeabi_dmul>
 8007cee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007cf2:	e7c4      	b.n	8007c7e <_dtoa_r+0x546>
 8007cf4:	0800af98 	.word	0x0800af98
 8007cf8:	0800af70 	.word	0x0800af70
 8007cfc:	3ff00000 	.word	0x3ff00000
 8007d00:	40240000 	.word	0x40240000
 8007d04:	401c0000 	.word	0x401c0000
 8007d08:	40140000 	.word	0x40140000
 8007d0c:	3fe00000 	.word	0x3fe00000
 8007d10:	4631      	mov	r1, r6
 8007d12:	4628      	mov	r0, r5
 8007d14:	f7f8 fc98 	bl	8000648 <__aeabi_dmul>
 8007d18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007d1c:	9415      	str	r4, [sp, #84]	@ 0x54
 8007d1e:	4656      	mov	r6, sl
 8007d20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d24:	f7f8 ff40 	bl	8000ba8 <__aeabi_d2iz>
 8007d28:	4605      	mov	r5, r0
 8007d2a:	f7f8 fc23 	bl	8000574 <__aeabi_i2d>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	460b      	mov	r3, r1
 8007d32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d36:	f7f8 facf 	bl	80002d8 <__aeabi_dsub>
 8007d3a:	3530      	adds	r5, #48	@ 0x30
 8007d3c:	f806 5b01 	strb.w	r5, [r6], #1
 8007d40:	4602      	mov	r2, r0
 8007d42:	460b      	mov	r3, r1
 8007d44:	42a6      	cmp	r6, r4
 8007d46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007d4a:	f04f 0200 	mov.w	r2, #0
 8007d4e:	d124      	bne.n	8007d9a <_dtoa_r+0x662>
 8007d50:	4bac      	ldr	r3, [pc, #688]	@ (8008004 <_dtoa_r+0x8cc>)
 8007d52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007d56:	f7f8 fac1 	bl	80002dc <__adddf3>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d62:	f7f8 ff01 	bl	8000b68 <__aeabi_dcmpgt>
 8007d66:	2800      	cmp	r0, #0
 8007d68:	d145      	bne.n	8007df6 <_dtoa_r+0x6be>
 8007d6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007d6e:	49a5      	ldr	r1, [pc, #660]	@ (8008004 <_dtoa_r+0x8cc>)
 8007d70:	2000      	movs	r0, #0
 8007d72:	f7f8 fab1 	bl	80002d8 <__aeabi_dsub>
 8007d76:	4602      	mov	r2, r0
 8007d78:	460b      	mov	r3, r1
 8007d7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d7e:	f7f8 fed5 	bl	8000b2c <__aeabi_dcmplt>
 8007d82:	2800      	cmp	r0, #0
 8007d84:	f43f aef5 	beq.w	8007b72 <_dtoa_r+0x43a>
 8007d88:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007d8a:	1e73      	subs	r3, r6, #1
 8007d8c:	9315      	str	r3, [sp, #84]	@ 0x54
 8007d8e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007d92:	2b30      	cmp	r3, #48	@ 0x30
 8007d94:	d0f8      	beq.n	8007d88 <_dtoa_r+0x650>
 8007d96:	9f04      	ldr	r7, [sp, #16]
 8007d98:	e73e      	b.n	8007c18 <_dtoa_r+0x4e0>
 8007d9a:	4b9b      	ldr	r3, [pc, #620]	@ (8008008 <_dtoa_r+0x8d0>)
 8007d9c:	f7f8 fc54 	bl	8000648 <__aeabi_dmul>
 8007da0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007da4:	e7bc      	b.n	8007d20 <_dtoa_r+0x5e8>
 8007da6:	d10c      	bne.n	8007dc2 <_dtoa_r+0x68a>
 8007da8:	4b98      	ldr	r3, [pc, #608]	@ (800800c <_dtoa_r+0x8d4>)
 8007daa:	2200      	movs	r2, #0
 8007dac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007db0:	f7f8 fc4a 	bl	8000648 <__aeabi_dmul>
 8007db4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007db8:	f7f8 fecc 	bl	8000b54 <__aeabi_dcmpge>
 8007dbc:	2800      	cmp	r0, #0
 8007dbe:	f000 8157 	beq.w	8008070 <_dtoa_r+0x938>
 8007dc2:	2400      	movs	r4, #0
 8007dc4:	4625      	mov	r5, r4
 8007dc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007dc8:	43db      	mvns	r3, r3
 8007dca:	9304      	str	r3, [sp, #16]
 8007dcc:	4656      	mov	r6, sl
 8007dce:	2700      	movs	r7, #0
 8007dd0:	4621      	mov	r1, r4
 8007dd2:	4658      	mov	r0, fp
 8007dd4:	f000 fbb4 	bl	8008540 <_Bfree>
 8007dd8:	2d00      	cmp	r5, #0
 8007dda:	d0dc      	beq.n	8007d96 <_dtoa_r+0x65e>
 8007ddc:	b12f      	cbz	r7, 8007dea <_dtoa_r+0x6b2>
 8007dde:	42af      	cmp	r7, r5
 8007de0:	d003      	beq.n	8007dea <_dtoa_r+0x6b2>
 8007de2:	4639      	mov	r1, r7
 8007de4:	4658      	mov	r0, fp
 8007de6:	f000 fbab 	bl	8008540 <_Bfree>
 8007dea:	4629      	mov	r1, r5
 8007dec:	4658      	mov	r0, fp
 8007dee:	f000 fba7 	bl	8008540 <_Bfree>
 8007df2:	e7d0      	b.n	8007d96 <_dtoa_r+0x65e>
 8007df4:	9704      	str	r7, [sp, #16]
 8007df6:	4633      	mov	r3, r6
 8007df8:	461e      	mov	r6, r3
 8007dfa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007dfe:	2a39      	cmp	r2, #57	@ 0x39
 8007e00:	d107      	bne.n	8007e12 <_dtoa_r+0x6da>
 8007e02:	459a      	cmp	sl, r3
 8007e04:	d1f8      	bne.n	8007df8 <_dtoa_r+0x6c0>
 8007e06:	9a04      	ldr	r2, [sp, #16]
 8007e08:	3201      	adds	r2, #1
 8007e0a:	9204      	str	r2, [sp, #16]
 8007e0c:	2230      	movs	r2, #48	@ 0x30
 8007e0e:	f88a 2000 	strb.w	r2, [sl]
 8007e12:	781a      	ldrb	r2, [r3, #0]
 8007e14:	3201      	adds	r2, #1
 8007e16:	701a      	strb	r2, [r3, #0]
 8007e18:	e7bd      	b.n	8007d96 <_dtoa_r+0x65e>
 8007e1a:	4b7b      	ldr	r3, [pc, #492]	@ (8008008 <_dtoa_r+0x8d0>)
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f7f8 fc13 	bl	8000648 <__aeabi_dmul>
 8007e22:	2200      	movs	r2, #0
 8007e24:	2300      	movs	r3, #0
 8007e26:	4604      	mov	r4, r0
 8007e28:	460d      	mov	r5, r1
 8007e2a:	f7f8 fe75 	bl	8000b18 <__aeabi_dcmpeq>
 8007e2e:	2800      	cmp	r0, #0
 8007e30:	f43f aebb 	beq.w	8007baa <_dtoa_r+0x472>
 8007e34:	e6f0      	b.n	8007c18 <_dtoa_r+0x4e0>
 8007e36:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007e38:	2a00      	cmp	r2, #0
 8007e3a:	f000 80db 	beq.w	8007ff4 <_dtoa_r+0x8bc>
 8007e3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e40:	2a01      	cmp	r2, #1
 8007e42:	f300 80bf 	bgt.w	8007fc4 <_dtoa_r+0x88c>
 8007e46:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007e48:	2a00      	cmp	r2, #0
 8007e4a:	f000 80b7 	beq.w	8007fbc <_dtoa_r+0x884>
 8007e4e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007e52:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007e54:	4646      	mov	r6, r8
 8007e56:	9a08      	ldr	r2, [sp, #32]
 8007e58:	2101      	movs	r1, #1
 8007e5a:	441a      	add	r2, r3
 8007e5c:	4658      	mov	r0, fp
 8007e5e:	4498      	add	r8, r3
 8007e60:	9208      	str	r2, [sp, #32]
 8007e62:	f000 fc6b 	bl	800873c <__i2b>
 8007e66:	4605      	mov	r5, r0
 8007e68:	b15e      	cbz	r6, 8007e82 <_dtoa_r+0x74a>
 8007e6a:	9b08      	ldr	r3, [sp, #32]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	dd08      	ble.n	8007e82 <_dtoa_r+0x74a>
 8007e70:	42b3      	cmp	r3, r6
 8007e72:	9a08      	ldr	r2, [sp, #32]
 8007e74:	bfa8      	it	ge
 8007e76:	4633      	movge	r3, r6
 8007e78:	eba8 0803 	sub.w	r8, r8, r3
 8007e7c:	1af6      	subs	r6, r6, r3
 8007e7e:	1ad3      	subs	r3, r2, r3
 8007e80:	9308      	str	r3, [sp, #32]
 8007e82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e84:	b1f3      	cbz	r3, 8007ec4 <_dtoa_r+0x78c>
 8007e86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	f000 80b7 	beq.w	8007ffc <_dtoa_r+0x8c4>
 8007e8e:	b18c      	cbz	r4, 8007eb4 <_dtoa_r+0x77c>
 8007e90:	4629      	mov	r1, r5
 8007e92:	4622      	mov	r2, r4
 8007e94:	4658      	mov	r0, fp
 8007e96:	f000 fd11 	bl	80088bc <__pow5mult>
 8007e9a:	464a      	mov	r2, r9
 8007e9c:	4601      	mov	r1, r0
 8007e9e:	4605      	mov	r5, r0
 8007ea0:	4658      	mov	r0, fp
 8007ea2:	f000 fc61 	bl	8008768 <__multiply>
 8007ea6:	4649      	mov	r1, r9
 8007ea8:	9004      	str	r0, [sp, #16]
 8007eaa:	4658      	mov	r0, fp
 8007eac:	f000 fb48 	bl	8008540 <_Bfree>
 8007eb0:	9b04      	ldr	r3, [sp, #16]
 8007eb2:	4699      	mov	r9, r3
 8007eb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007eb6:	1b1a      	subs	r2, r3, r4
 8007eb8:	d004      	beq.n	8007ec4 <_dtoa_r+0x78c>
 8007eba:	4649      	mov	r1, r9
 8007ebc:	4658      	mov	r0, fp
 8007ebe:	f000 fcfd 	bl	80088bc <__pow5mult>
 8007ec2:	4681      	mov	r9, r0
 8007ec4:	2101      	movs	r1, #1
 8007ec6:	4658      	mov	r0, fp
 8007ec8:	f000 fc38 	bl	800873c <__i2b>
 8007ecc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ece:	4604      	mov	r4, r0
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	f000 81cf 	beq.w	8008274 <_dtoa_r+0xb3c>
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	4601      	mov	r1, r0
 8007eda:	4658      	mov	r0, fp
 8007edc:	f000 fcee 	bl	80088bc <__pow5mult>
 8007ee0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	4604      	mov	r4, r0
 8007ee6:	f300 8095 	bgt.w	8008014 <_dtoa_r+0x8dc>
 8007eea:	9b02      	ldr	r3, [sp, #8]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	f040 8087 	bne.w	8008000 <_dtoa_r+0x8c8>
 8007ef2:	9b03      	ldr	r3, [sp, #12]
 8007ef4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	f040 8089 	bne.w	8008010 <_dtoa_r+0x8d8>
 8007efe:	9b03      	ldr	r3, [sp, #12]
 8007f00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007f04:	0d1b      	lsrs	r3, r3, #20
 8007f06:	051b      	lsls	r3, r3, #20
 8007f08:	b12b      	cbz	r3, 8007f16 <_dtoa_r+0x7de>
 8007f0a:	9b08      	ldr	r3, [sp, #32]
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	9308      	str	r3, [sp, #32]
 8007f10:	f108 0801 	add.w	r8, r8, #1
 8007f14:	2301      	movs	r3, #1
 8007f16:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	f000 81b0 	beq.w	8008280 <_dtoa_r+0xb48>
 8007f20:	6923      	ldr	r3, [r4, #16]
 8007f22:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007f26:	6918      	ldr	r0, [r3, #16]
 8007f28:	f000 fbbc 	bl	80086a4 <__hi0bits>
 8007f2c:	f1c0 0020 	rsb	r0, r0, #32
 8007f30:	9b08      	ldr	r3, [sp, #32]
 8007f32:	4418      	add	r0, r3
 8007f34:	f010 001f 	ands.w	r0, r0, #31
 8007f38:	d077      	beq.n	800802a <_dtoa_r+0x8f2>
 8007f3a:	f1c0 0320 	rsb	r3, r0, #32
 8007f3e:	2b04      	cmp	r3, #4
 8007f40:	dd6b      	ble.n	800801a <_dtoa_r+0x8e2>
 8007f42:	9b08      	ldr	r3, [sp, #32]
 8007f44:	f1c0 001c 	rsb	r0, r0, #28
 8007f48:	4403      	add	r3, r0
 8007f4a:	4480      	add	r8, r0
 8007f4c:	4406      	add	r6, r0
 8007f4e:	9308      	str	r3, [sp, #32]
 8007f50:	f1b8 0f00 	cmp.w	r8, #0
 8007f54:	dd05      	ble.n	8007f62 <_dtoa_r+0x82a>
 8007f56:	4649      	mov	r1, r9
 8007f58:	4642      	mov	r2, r8
 8007f5a:	4658      	mov	r0, fp
 8007f5c:	f000 fd08 	bl	8008970 <__lshift>
 8007f60:	4681      	mov	r9, r0
 8007f62:	9b08      	ldr	r3, [sp, #32]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	dd05      	ble.n	8007f74 <_dtoa_r+0x83c>
 8007f68:	4621      	mov	r1, r4
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	4658      	mov	r0, fp
 8007f6e:	f000 fcff 	bl	8008970 <__lshift>
 8007f72:	4604      	mov	r4, r0
 8007f74:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d059      	beq.n	800802e <_dtoa_r+0x8f6>
 8007f7a:	4621      	mov	r1, r4
 8007f7c:	4648      	mov	r0, r9
 8007f7e:	f000 fd63 	bl	8008a48 <__mcmp>
 8007f82:	2800      	cmp	r0, #0
 8007f84:	da53      	bge.n	800802e <_dtoa_r+0x8f6>
 8007f86:	1e7b      	subs	r3, r7, #1
 8007f88:	9304      	str	r3, [sp, #16]
 8007f8a:	4649      	mov	r1, r9
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	220a      	movs	r2, #10
 8007f90:	4658      	mov	r0, fp
 8007f92:	f000 faf7 	bl	8008584 <__multadd>
 8007f96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f98:	4681      	mov	r9, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	f000 8172 	beq.w	8008284 <_dtoa_r+0xb4c>
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	4629      	mov	r1, r5
 8007fa4:	220a      	movs	r2, #10
 8007fa6:	4658      	mov	r0, fp
 8007fa8:	f000 faec 	bl	8008584 <__multadd>
 8007fac:	9b00      	ldr	r3, [sp, #0]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	4605      	mov	r5, r0
 8007fb2:	dc67      	bgt.n	8008084 <_dtoa_r+0x94c>
 8007fb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fb6:	2b02      	cmp	r3, #2
 8007fb8:	dc41      	bgt.n	800803e <_dtoa_r+0x906>
 8007fba:	e063      	b.n	8008084 <_dtoa_r+0x94c>
 8007fbc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007fbe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007fc2:	e746      	b.n	8007e52 <_dtoa_r+0x71a>
 8007fc4:	9b07      	ldr	r3, [sp, #28]
 8007fc6:	1e5c      	subs	r4, r3, #1
 8007fc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007fca:	42a3      	cmp	r3, r4
 8007fcc:	bfbf      	itttt	lt
 8007fce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007fd0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007fd2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007fd4:	1ae3      	sublt	r3, r4, r3
 8007fd6:	bfb4      	ite	lt
 8007fd8:	18d2      	addlt	r2, r2, r3
 8007fda:	1b1c      	subge	r4, r3, r4
 8007fdc:	9b07      	ldr	r3, [sp, #28]
 8007fde:	bfbc      	itt	lt
 8007fe0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007fe2:	2400      	movlt	r4, #0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	bfb5      	itete	lt
 8007fe8:	eba8 0603 	sublt.w	r6, r8, r3
 8007fec:	9b07      	ldrge	r3, [sp, #28]
 8007fee:	2300      	movlt	r3, #0
 8007ff0:	4646      	movge	r6, r8
 8007ff2:	e730      	b.n	8007e56 <_dtoa_r+0x71e>
 8007ff4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007ff6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007ff8:	4646      	mov	r6, r8
 8007ffa:	e735      	b.n	8007e68 <_dtoa_r+0x730>
 8007ffc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007ffe:	e75c      	b.n	8007eba <_dtoa_r+0x782>
 8008000:	2300      	movs	r3, #0
 8008002:	e788      	b.n	8007f16 <_dtoa_r+0x7de>
 8008004:	3fe00000 	.word	0x3fe00000
 8008008:	40240000 	.word	0x40240000
 800800c:	40140000 	.word	0x40140000
 8008010:	9b02      	ldr	r3, [sp, #8]
 8008012:	e780      	b.n	8007f16 <_dtoa_r+0x7de>
 8008014:	2300      	movs	r3, #0
 8008016:	930a      	str	r3, [sp, #40]	@ 0x28
 8008018:	e782      	b.n	8007f20 <_dtoa_r+0x7e8>
 800801a:	d099      	beq.n	8007f50 <_dtoa_r+0x818>
 800801c:	9a08      	ldr	r2, [sp, #32]
 800801e:	331c      	adds	r3, #28
 8008020:	441a      	add	r2, r3
 8008022:	4498      	add	r8, r3
 8008024:	441e      	add	r6, r3
 8008026:	9208      	str	r2, [sp, #32]
 8008028:	e792      	b.n	8007f50 <_dtoa_r+0x818>
 800802a:	4603      	mov	r3, r0
 800802c:	e7f6      	b.n	800801c <_dtoa_r+0x8e4>
 800802e:	9b07      	ldr	r3, [sp, #28]
 8008030:	9704      	str	r7, [sp, #16]
 8008032:	2b00      	cmp	r3, #0
 8008034:	dc20      	bgt.n	8008078 <_dtoa_r+0x940>
 8008036:	9300      	str	r3, [sp, #0]
 8008038:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800803a:	2b02      	cmp	r3, #2
 800803c:	dd1e      	ble.n	800807c <_dtoa_r+0x944>
 800803e:	9b00      	ldr	r3, [sp, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	f47f aec0 	bne.w	8007dc6 <_dtoa_r+0x68e>
 8008046:	4621      	mov	r1, r4
 8008048:	2205      	movs	r2, #5
 800804a:	4658      	mov	r0, fp
 800804c:	f000 fa9a 	bl	8008584 <__multadd>
 8008050:	4601      	mov	r1, r0
 8008052:	4604      	mov	r4, r0
 8008054:	4648      	mov	r0, r9
 8008056:	f000 fcf7 	bl	8008a48 <__mcmp>
 800805a:	2800      	cmp	r0, #0
 800805c:	f77f aeb3 	ble.w	8007dc6 <_dtoa_r+0x68e>
 8008060:	4656      	mov	r6, sl
 8008062:	2331      	movs	r3, #49	@ 0x31
 8008064:	f806 3b01 	strb.w	r3, [r6], #1
 8008068:	9b04      	ldr	r3, [sp, #16]
 800806a:	3301      	adds	r3, #1
 800806c:	9304      	str	r3, [sp, #16]
 800806e:	e6ae      	b.n	8007dce <_dtoa_r+0x696>
 8008070:	9c07      	ldr	r4, [sp, #28]
 8008072:	9704      	str	r7, [sp, #16]
 8008074:	4625      	mov	r5, r4
 8008076:	e7f3      	b.n	8008060 <_dtoa_r+0x928>
 8008078:	9b07      	ldr	r3, [sp, #28]
 800807a:	9300      	str	r3, [sp, #0]
 800807c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800807e:	2b00      	cmp	r3, #0
 8008080:	f000 8104 	beq.w	800828c <_dtoa_r+0xb54>
 8008084:	2e00      	cmp	r6, #0
 8008086:	dd05      	ble.n	8008094 <_dtoa_r+0x95c>
 8008088:	4629      	mov	r1, r5
 800808a:	4632      	mov	r2, r6
 800808c:	4658      	mov	r0, fp
 800808e:	f000 fc6f 	bl	8008970 <__lshift>
 8008092:	4605      	mov	r5, r0
 8008094:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008096:	2b00      	cmp	r3, #0
 8008098:	d05a      	beq.n	8008150 <_dtoa_r+0xa18>
 800809a:	6869      	ldr	r1, [r5, #4]
 800809c:	4658      	mov	r0, fp
 800809e:	f000 fa0f 	bl	80084c0 <_Balloc>
 80080a2:	4606      	mov	r6, r0
 80080a4:	b928      	cbnz	r0, 80080b2 <_dtoa_r+0x97a>
 80080a6:	4b84      	ldr	r3, [pc, #528]	@ (80082b8 <_dtoa_r+0xb80>)
 80080a8:	4602      	mov	r2, r0
 80080aa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80080ae:	f7ff bb5a 	b.w	8007766 <_dtoa_r+0x2e>
 80080b2:	692a      	ldr	r2, [r5, #16]
 80080b4:	3202      	adds	r2, #2
 80080b6:	0092      	lsls	r2, r2, #2
 80080b8:	f105 010c 	add.w	r1, r5, #12
 80080bc:	300c      	adds	r0, #12
 80080be:	f7ff fa9c 	bl	80075fa <memcpy>
 80080c2:	2201      	movs	r2, #1
 80080c4:	4631      	mov	r1, r6
 80080c6:	4658      	mov	r0, fp
 80080c8:	f000 fc52 	bl	8008970 <__lshift>
 80080cc:	f10a 0301 	add.w	r3, sl, #1
 80080d0:	9307      	str	r3, [sp, #28]
 80080d2:	9b00      	ldr	r3, [sp, #0]
 80080d4:	4453      	add	r3, sl
 80080d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80080d8:	9b02      	ldr	r3, [sp, #8]
 80080da:	f003 0301 	and.w	r3, r3, #1
 80080de:	462f      	mov	r7, r5
 80080e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80080e2:	4605      	mov	r5, r0
 80080e4:	9b07      	ldr	r3, [sp, #28]
 80080e6:	4621      	mov	r1, r4
 80080e8:	3b01      	subs	r3, #1
 80080ea:	4648      	mov	r0, r9
 80080ec:	9300      	str	r3, [sp, #0]
 80080ee:	f7ff fa99 	bl	8007624 <quorem>
 80080f2:	4639      	mov	r1, r7
 80080f4:	9002      	str	r0, [sp, #8]
 80080f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80080fa:	4648      	mov	r0, r9
 80080fc:	f000 fca4 	bl	8008a48 <__mcmp>
 8008100:	462a      	mov	r2, r5
 8008102:	9008      	str	r0, [sp, #32]
 8008104:	4621      	mov	r1, r4
 8008106:	4658      	mov	r0, fp
 8008108:	f000 fcba 	bl	8008a80 <__mdiff>
 800810c:	68c2      	ldr	r2, [r0, #12]
 800810e:	4606      	mov	r6, r0
 8008110:	bb02      	cbnz	r2, 8008154 <_dtoa_r+0xa1c>
 8008112:	4601      	mov	r1, r0
 8008114:	4648      	mov	r0, r9
 8008116:	f000 fc97 	bl	8008a48 <__mcmp>
 800811a:	4602      	mov	r2, r0
 800811c:	4631      	mov	r1, r6
 800811e:	4658      	mov	r0, fp
 8008120:	920e      	str	r2, [sp, #56]	@ 0x38
 8008122:	f000 fa0d 	bl	8008540 <_Bfree>
 8008126:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008128:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800812a:	9e07      	ldr	r6, [sp, #28]
 800812c:	ea43 0102 	orr.w	r1, r3, r2
 8008130:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008132:	4319      	orrs	r1, r3
 8008134:	d110      	bne.n	8008158 <_dtoa_r+0xa20>
 8008136:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800813a:	d029      	beq.n	8008190 <_dtoa_r+0xa58>
 800813c:	9b08      	ldr	r3, [sp, #32]
 800813e:	2b00      	cmp	r3, #0
 8008140:	dd02      	ble.n	8008148 <_dtoa_r+0xa10>
 8008142:	9b02      	ldr	r3, [sp, #8]
 8008144:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008148:	9b00      	ldr	r3, [sp, #0]
 800814a:	f883 8000 	strb.w	r8, [r3]
 800814e:	e63f      	b.n	8007dd0 <_dtoa_r+0x698>
 8008150:	4628      	mov	r0, r5
 8008152:	e7bb      	b.n	80080cc <_dtoa_r+0x994>
 8008154:	2201      	movs	r2, #1
 8008156:	e7e1      	b.n	800811c <_dtoa_r+0x9e4>
 8008158:	9b08      	ldr	r3, [sp, #32]
 800815a:	2b00      	cmp	r3, #0
 800815c:	db04      	blt.n	8008168 <_dtoa_r+0xa30>
 800815e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008160:	430b      	orrs	r3, r1
 8008162:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008164:	430b      	orrs	r3, r1
 8008166:	d120      	bne.n	80081aa <_dtoa_r+0xa72>
 8008168:	2a00      	cmp	r2, #0
 800816a:	dded      	ble.n	8008148 <_dtoa_r+0xa10>
 800816c:	4649      	mov	r1, r9
 800816e:	2201      	movs	r2, #1
 8008170:	4658      	mov	r0, fp
 8008172:	f000 fbfd 	bl	8008970 <__lshift>
 8008176:	4621      	mov	r1, r4
 8008178:	4681      	mov	r9, r0
 800817a:	f000 fc65 	bl	8008a48 <__mcmp>
 800817e:	2800      	cmp	r0, #0
 8008180:	dc03      	bgt.n	800818a <_dtoa_r+0xa52>
 8008182:	d1e1      	bne.n	8008148 <_dtoa_r+0xa10>
 8008184:	f018 0f01 	tst.w	r8, #1
 8008188:	d0de      	beq.n	8008148 <_dtoa_r+0xa10>
 800818a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800818e:	d1d8      	bne.n	8008142 <_dtoa_r+0xa0a>
 8008190:	9a00      	ldr	r2, [sp, #0]
 8008192:	2339      	movs	r3, #57	@ 0x39
 8008194:	7013      	strb	r3, [r2, #0]
 8008196:	4633      	mov	r3, r6
 8008198:	461e      	mov	r6, r3
 800819a:	3b01      	subs	r3, #1
 800819c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80081a0:	2a39      	cmp	r2, #57	@ 0x39
 80081a2:	d052      	beq.n	800824a <_dtoa_r+0xb12>
 80081a4:	3201      	adds	r2, #1
 80081a6:	701a      	strb	r2, [r3, #0]
 80081a8:	e612      	b.n	8007dd0 <_dtoa_r+0x698>
 80081aa:	2a00      	cmp	r2, #0
 80081ac:	dd07      	ble.n	80081be <_dtoa_r+0xa86>
 80081ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80081b2:	d0ed      	beq.n	8008190 <_dtoa_r+0xa58>
 80081b4:	9a00      	ldr	r2, [sp, #0]
 80081b6:	f108 0301 	add.w	r3, r8, #1
 80081ba:	7013      	strb	r3, [r2, #0]
 80081bc:	e608      	b.n	8007dd0 <_dtoa_r+0x698>
 80081be:	9b07      	ldr	r3, [sp, #28]
 80081c0:	9a07      	ldr	r2, [sp, #28]
 80081c2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80081c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d028      	beq.n	800821e <_dtoa_r+0xae6>
 80081cc:	4649      	mov	r1, r9
 80081ce:	2300      	movs	r3, #0
 80081d0:	220a      	movs	r2, #10
 80081d2:	4658      	mov	r0, fp
 80081d4:	f000 f9d6 	bl	8008584 <__multadd>
 80081d8:	42af      	cmp	r7, r5
 80081da:	4681      	mov	r9, r0
 80081dc:	f04f 0300 	mov.w	r3, #0
 80081e0:	f04f 020a 	mov.w	r2, #10
 80081e4:	4639      	mov	r1, r7
 80081e6:	4658      	mov	r0, fp
 80081e8:	d107      	bne.n	80081fa <_dtoa_r+0xac2>
 80081ea:	f000 f9cb 	bl	8008584 <__multadd>
 80081ee:	4607      	mov	r7, r0
 80081f0:	4605      	mov	r5, r0
 80081f2:	9b07      	ldr	r3, [sp, #28]
 80081f4:	3301      	adds	r3, #1
 80081f6:	9307      	str	r3, [sp, #28]
 80081f8:	e774      	b.n	80080e4 <_dtoa_r+0x9ac>
 80081fa:	f000 f9c3 	bl	8008584 <__multadd>
 80081fe:	4629      	mov	r1, r5
 8008200:	4607      	mov	r7, r0
 8008202:	2300      	movs	r3, #0
 8008204:	220a      	movs	r2, #10
 8008206:	4658      	mov	r0, fp
 8008208:	f000 f9bc 	bl	8008584 <__multadd>
 800820c:	4605      	mov	r5, r0
 800820e:	e7f0      	b.n	80081f2 <_dtoa_r+0xaba>
 8008210:	9b00      	ldr	r3, [sp, #0]
 8008212:	2b00      	cmp	r3, #0
 8008214:	bfcc      	ite	gt
 8008216:	461e      	movgt	r6, r3
 8008218:	2601      	movle	r6, #1
 800821a:	4456      	add	r6, sl
 800821c:	2700      	movs	r7, #0
 800821e:	4649      	mov	r1, r9
 8008220:	2201      	movs	r2, #1
 8008222:	4658      	mov	r0, fp
 8008224:	f000 fba4 	bl	8008970 <__lshift>
 8008228:	4621      	mov	r1, r4
 800822a:	4681      	mov	r9, r0
 800822c:	f000 fc0c 	bl	8008a48 <__mcmp>
 8008230:	2800      	cmp	r0, #0
 8008232:	dcb0      	bgt.n	8008196 <_dtoa_r+0xa5e>
 8008234:	d102      	bne.n	800823c <_dtoa_r+0xb04>
 8008236:	f018 0f01 	tst.w	r8, #1
 800823a:	d1ac      	bne.n	8008196 <_dtoa_r+0xa5e>
 800823c:	4633      	mov	r3, r6
 800823e:	461e      	mov	r6, r3
 8008240:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008244:	2a30      	cmp	r2, #48	@ 0x30
 8008246:	d0fa      	beq.n	800823e <_dtoa_r+0xb06>
 8008248:	e5c2      	b.n	8007dd0 <_dtoa_r+0x698>
 800824a:	459a      	cmp	sl, r3
 800824c:	d1a4      	bne.n	8008198 <_dtoa_r+0xa60>
 800824e:	9b04      	ldr	r3, [sp, #16]
 8008250:	3301      	adds	r3, #1
 8008252:	9304      	str	r3, [sp, #16]
 8008254:	2331      	movs	r3, #49	@ 0x31
 8008256:	f88a 3000 	strb.w	r3, [sl]
 800825a:	e5b9      	b.n	8007dd0 <_dtoa_r+0x698>
 800825c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800825e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80082bc <_dtoa_r+0xb84>
 8008262:	b11b      	cbz	r3, 800826c <_dtoa_r+0xb34>
 8008264:	f10a 0308 	add.w	r3, sl, #8
 8008268:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800826a:	6013      	str	r3, [r2, #0]
 800826c:	4650      	mov	r0, sl
 800826e:	b019      	add	sp, #100	@ 0x64
 8008270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008274:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008276:	2b01      	cmp	r3, #1
 8008278:	f77f ae37 	ble.w	8007eea <_dtoa_r+0x7b2>
 800827c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800827e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008280:	2001      	movs	r0, #1
 8008282:	e655      	b.n	8007f30 <_dtoa_r+0x7f8>
 8008284:	9b00      	ldr	r3, [sp, #0]
 8008286:	2b00      	cmp	r3, #0
 8008288:	f77f aed6 	ble.w	8008038 <_dtoa_r+0x900>
 800828c:	4656      	mov	r6, sl
 800828e:	4621      	mov	r1, r4
 8008290:	4648      	mov	r0, r9
 8008292:	f7ff f9c7 	bl	8007624 <quorem>
 8008296:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800829a:	f806 8b01 	strb.w	r8, [r6], #1
 800829e:	9b00      	ldr	r3, [sp, #0]
 80082a0:	eba6 020a 	sub.w	r2, r6, sl
 80082a4:	4293      	cmp	r3, r2
 80082a6:	ddb3      	ble.n	8008210 <_dtoa_r+0xad8>
 80082a8:	4649      	mov	r1, r9
 80082aa:	2300      	movs	r3, #0
 80082ac:	220a      	movs	r2, #10
 80082ae:	4658      	mov	r0, fp
 80082b0:	f000 f968 	bl	8008584 <__multadd>
 80082b4:	4681      	mov	r9, r0
 80082b6:	e7ea      	b.n	800828e <_dtoa_r+0xb56>
 80082b8:	0800aef5 	.word	0x0800aef5
 80082bc:	0800ae79 	.word	0x0800ae79

080082c0 <_free_r>:
 80082c0:	b538      	push	{r3, r4, r5, lr}
 80082c2:	4605      	mov	r5, r0
 80082c4:	2900      	cmp	r1, #0
 80082c6:	d041      	beq.n	800834c <_free_r+0x8c>
 80082c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082cc:	1f0c      	subs	r4, r1, #4
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	bfb8      	it	lt
 80082d2:	18e4      	addlt	r4, r4, r3
 80082d4:	f000 f8e8 	bl	80084a8 <__malloc_lock>
 80082d8:	4a1d      	ldr	r2, [pc, #116]	@ (8008350 <_free_r+0x90>)
 80082da:	6813      	ldr	r3, [r2, #0]
 80082dc:	b933      	cbnz	r3, 80082ec <_free_r+0x2c>
 80082de:	6063      	str	r3, [r4, #4]
 80082e0:	6014      	str	r4, [r2, #0]
 80082e2:	4628      	mov	r0, r5
 80082e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082e8:	f000 b8e4 	b.w	80084b4 <__malloc_unlock>
 80082ec:	42a3      	cmp	r3, r4
 80082ee:	d908      	bls.n	8008302 <_free_r+0x42>
 80082f0:	6820      	ldr	r0, [r4, #0]
 80082f2:	1821      	adds	r1, r4, r0
 80082f4:	428b      	cmp	r3, r1
 80082f6:	bf01      	itttt	eq
 80082f8:	6819      	ldreq	r1, [r3, #0]
 80082fa:	685b      	ldreq	r3, [r3, #4]
 80082fc:	1809      	addeq	r1, r1, r0
 80082fe:	6021      	streq	r1, [r4, #0]
 8008300:	e7ed      	b.n	80082de <_free_r+0x1e>
 8008302:	461a      	mov	r2, r3
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	b10b      	cbz	r3, 800830c <_free_r+0x4c>
 8008308:	42a3      	cmp	r3, r4
 800830a:	d9fa      	bls.n	8008302 <_free_r+0x42>
 800830c:	6811      	ldr	r1, [r2, #0]
 800830e:	1850      	adds	r0, r2, r1
 8008310:	42a0      	cmp	r0, r4
 8008312:	d10b      	bne.n	800832c <_free_r+0x6c>
 8008314:	6820      	ldr	r0, [r4, #0]
 8008316:	4401      	add	r1, r0
 8008318:	1850      	adds	r0, r2, r1
 800831a:	4283      	cmp	r3, r0
 800831c:	6011      	str	r1, [r2, #0]
 800831e:	d1e0      	bne.n	80082e2 <_free_r+0x22>
 8008320:	6818      	ldr	r0, [r3, #0]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	6053      	str	r3, [r2, #4]
 8008326:	4408      	add	r0, r1
 8008328:	6010      	str	r0, [r2, #0]
 800832a:	e7da      	b.n	80082e2 <_free_r+0x22>
 800832c:	d902      	bls.n	8008334 <_free_r+0x74>
 800832e:	230c      	movs	r3, #12
 8008330:	602b      	str	r3, [r5, #0]
 8008332:	e7d6      	b.n	80082e2 <_free_r+0x22>
 8008334:	6820      	ldr	r0, [r4, #0]
 8008336:	1821      	adds	r1, r4, r0
 8008338:	428b      	cmp	r3, r1
 800833a:	bf04      	itt	eq
 800833c:	6819      	ldreq	r1, [r3, #0]
 800833e:	685b      	ldreq	r3, [r3, #4]
 8008340:	6063      	str	r3, [r4, #4]
 8008342:	bf04      	itt	eq
 8008344:	1809      	addeq	r1, r1, r0
 8008346:	6021      	streq	r1, [r4, #0]
 8008348:	6054      	str	r4, [r2, #4]
 800834a:	e7ca      	b.n	80082e2 <_free_r+0x22>
 800834c:	bd38      	pop	{r3, r4, r5, pc}
 800834e:	bf00      	nop
 8008350:	200053a0 	.word	0x200053a0

08008354 <malloc>:
 8008354:	4b02      	ldr	r3, [pc, #8]	@ (8008360 <malloc+0xc>)
 8008356:	4601      	mov	r1, r0
 8008358:	6818      	ldr	r0, [r3, #0]
 800835a:	f000 b825 	b.w	80083a8 <_malloc_r>
 800835e:	bf00      	nop
 8008360:	2000001c 	.word	0x2000001c

08008364 <sbrk_aligned>:
 8008364:	b570      	push	{r4, r5, r6, lr}
 8008366:	4e0f      	ldr	r6, [pc, #60]	@ (80083a4 <sbrk_aligned+0x40>)
 8008368:	460c      	mov	r4, r1
 800836a:	6831      	ldr	r1, [r6, #0]
 800836c:	4605      	mov	r5, r0
 800836e:	b911      	cbnz	r1, 8008376 <sbrk_aligned+0x12>
 8008370:	f001 ffd2 	bl	800a318 <_sbrk_r>
 8008374:	6030      	str	r0, [r6, #0]
 8008376:	4621      	mov	r1, r4
 8008378:	4628      	mov	r0, r5
 800837a:	f001 ffcd 	bl	800a318 <_sbrk_r>
 800837e:	1c43      	adds	r3, r0, #1
 8008380:	d103      	bne.n	800838a <sbrk_aligned+0x26>
 8008382:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008386:	4620      	mov	r0, r4
 8008388:	bd70      	pop	{r4, r5, r6, pc}
 800838a:	1cc4      	adds	r4, r0, #3
 800838c:	f024 0403 	bic.w	r4, r4, #3
 8008390:	42a0      	cmp	r0, r4
 8008392:	d0f8      	beq.n	8008386 <sbrk_aligned+0x22>
 8008394:	1a21      	subs	r1, r4, r0
 8008396:	4628      	mov	r0, r5
 8008398:	f001 ffbe 	bl	800a318 <_sbrk_r>
 800839c:	3001      	adds	r0, #1
 800839e:	d1f2      	bne.n	8008386 <sbrk_aligned+0x22>
 80083a0:	e7ef      	b.n	8008382 <sbrk_aligned+0x1e>
 80083a2:	bf00      	nop
 80083a4:	2000539c 	.word	0x2000539c

080083a8 <_malloc_r>:
 80083a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083ac:	1ccd      	adds	r5, r1, #3
 80083ae:	f025 0503 	bic.w	r5, r5, #3
 80083b2:	3508      	adds	r5, #8
 80083b4:	2d0c      	cmp	r5, #12
 80083b6:	bf38      	it	cc
 80083b8:	250c      	movcc	r5, #12
 80083ba:	2d00      	cmp	r5, #0
 80083bc:	4606      	mov	r6, r0
 80083be:	db01      	blt.n	80083c4 <_malloc_r+0x1c>
 80083c0:	42a9      	cmp	r1, r5
 80083c2:	d904      	bls.n	80083ce <_malloc_r+0x26>
 80083c4:	230c      	movs	r3, #12
 80083c6:	6033      	str	r3, [r6, #0]
 80083c8:	2000      	movs	r0, #0
 80083ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80084a4 <_malloc_r+0xfc>
 80083d2:	f000 f869 	bl	80084a8 <__malloc_lock>
 80083d6:	f8d8 3000 	ldr.w	r3, [r8]
 80083da:	461c      	mov	r4, r3
 80083dc:	bb44      	cbnz	r4, 8008430 <_malloc_r+0x88>
 80083de:	4629      	mov	r1, r5
 80083e0:	4630      	mov	r0, r6
 80083e2:	f7ff ffbf 	bl	8008364 <sbrk_aligned>
 80083e6:	1c43      	adds	r3, r0, #1
 80083e8:	4604      	mov	r4, r0
 80083ea:	d158      	bne.n	800849e <_malloc_r+0xf6>
 80083ec:	f8d8 4000 	ldr.w	r4, [r8]
 80083f0:	4627      	mov	r7, r4
 80083f2:	2f00      	cmp	r7, #0
 80083f4:	d143      	bne.n	800847e <_malloc_r+0xd6>
 80083f6:	2c00      	cmp	r4, #0
 80083f8:	d04b      	beq.n	8008492 <_malloc_r+0xea>
 80083fa:	6823      	ldr	r3, [r4, #0]
 80083fc:	4639      	mov	r1, r7
 80083fe:	4630      	mov	r0, r6
 8008400:	eb04 0903 	add.w	r9, r4, r3
 8008404:	f001 ff88 	bl	800a318 <_sbrk_r>
 8008408:	4581      	cmp	r9, r0
 800840a:	d142      	bne.n	8008492 <_malloc_r+0xea>
 800840c:	6821      	ldr	r1, [r4, #0]
 800840e:	1a6d      	subs	r5, r5, r1
 8008410:	4629      	mov	r1, r5
 8008412:	4630      	mov	r0, r6
 8008414:	f7ff ffa6 	bl	8008364 <sbrk_aligned>
 8008418:	3001      	adds	r0, #1
 800841a:	d03a      	beq.n	8008492 <_malloc_r+0xea>
 800841c:	6823      	ldr	r3, [r4, #0]
 800841e:	442b      	add	r3, r5
 8008420:	6023      	str	r3, [r4, #0]
 8008422:	f8d8 3000 	ldr.w	r3, [r8]
 8008426:	685a      	ldr	r2, [r3, #4]
 8008428:	bb62      	cbnz	r2, 8008484 <_malloc_r+0xdc>
 800842a:	f8c8 7000 	str.w	r7, [r8]
 800842e:	e00f      	b.n	8008450 <_malloc_r+0xa8>
 8008430:	6822      	ldr	r2, [r4, #0]
 8008432:	1b52      	subs	r2, r2, r5
 8008434:	d420      	bmi.n	8008478 <_malloc_r+0xd0>
 8008436:	2a0b      	cmp	r2, #11
 8008438:	d917      	bls.n	800846a <_malloc_r+0xc2>
 800843a:	1961      	adds	r1, r4, r5
 800843c:	42a3      	cmp	r3, r4
 800843e:	6025      	str	r5, [r4, #0]
 8008440:	bf18      	it	ne
 8008442:	6059      	strne	r1, [r3, #4]
 8008444:	6863      	ldr	r3, [r4, #4]
 8008446:	bf08      	it	eq
 8008448:	f8c8 1000 	streq.w	r1, [r8]
 800844c:	5162      	str	r2, [r4, r5]
 800844e:	604b      	str	r3, [r1, #4]
 8008450:	4630      	mov	r0, r6
 8008452:	f000 f82f 	bl	80084b4 <__malloc_unlock>
 8008456:	f104 000b 	add.w	r0, r4, #11
 800845a:	1d23      	adds	r3, r4, #4
 800845c:	f020 0007 	bic.w	r0, r0, #7
 8008460:	1ac2      	subs	r2, r0, r3
 8008462:	bf1c      	itt	ne
 8008464:	1a1b      	subne	r3, r3, r0
 8008466:	50a3      	strne	r3, [r4, r2]
 8008468:	e7af      	b.n	80083ca <_malloc_r+0x22>
 800846a:	6862      	ldr	r2, [r4, #4]
 800846c:	42a3      	cmp	r3, r4
 800846e:	bf0c      	ite	eq
 8008470:	f8c8 2000 	streq.w	r2, [r8]
 8008474:	605a      	strne	r2, [r3, #4]
 8008476:	e7eb      	b.n	8008450 <_malloc_r+0xa8>
 8008478:	4623      	mov	r3, r4
 800847a:	6864      	ldr	r4, [r4, #4]
 800847c:	e7ae      	b.n	80083dc <_malloc_r+0x34>
 800847e:	463c      	mov	r4, r7
 8008480:	687f      	ldr	r7, [r7, #4]
 8008482:	e7b6      	b.n	80083f2 <_malloc_r+0x4a>
 8008484:	461a      	mov	r2, r3
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	42a3      	cmp	r3, r4
 800848a:	d1fb      	bne.n	8008484 <_malloc_r+0xdc>
 800848c:	2300      	movs	r3, #0
 800848e:	6053      	str	r3, [r2, #4]
 8008490:	e7de      	b.n	8008450 <_malloc_r+0xa8>
 8008492:	230c      	movs	r3, #12
 8008494:	6033      	str	r3, [r6, #0]
 8008496:	4630      	mov	r0, r6
 8008498:	f000 f80c 	bl	80084b4 <__malloc_unlock>
 800849c:	e794      	b.n	80083c8 <_malloc_r+0x20>
 800849e:	6005      	str	r5, [r0, #0]
 80084a0:	e7d6      	b.n	8008450 <_malloc_r+0xa8>
 80084a2:	bf00      	nop
 80084a4:	200053a0 	.word	0x200053a0

080084a8 <__malloc_lock>:
 80084a8:	4801      	ldr	r0, [pc, #4]	@ (80084b0 <__malloc_lock+0x8>)
 80084aa:	f7ff b8a4 	b.w	80075f6 <__retarget_lock_acquire_recursive>
 80084ae:	bf00      	nop
 80084b0:	20005398 	.word	0x20005398

080084b4 <__malloc_unlock>:
 80084b4:	4801      	ldr	r0, [pc, #4]	@ (80084bc <__malloc_unlock+0x8>)
 80084b6:	f7ff b89f 	b.w	80075f8 <__retarget_lock_release_recursive>
 80084ba:	bf00      	nop
 80084bc:	20005398 	.word	0x20005398

080084c0 <_Balloc>:
 80084c0:	b570      	push	{r4, r5, r6, lr}
 80084c2:	69c6      	ldr	r6, [r0, #28]
 80084c4:	4604      	mov	r4, r0
 80084c6:	460d      	mov	r5, r1
 80084c8:	b976      	cbnz	r6, 80084e8 <_Balloc+0x28>
 80084ca:	2010      	movs	r0, #16
 80084cc:	f7ff ff42 	bl	8008354 <malloc>
 80084d0:	4602      	mov	r2, r0
 80084d2:	61e0      	str	r0, [r4, #28]
 80084d4:	b920      	cbnz	r0, 80084e0 <_Balloc+0x20>
 80084d6:	4b18      	ldr	r3, [pc, #96]	@ (8008538 <_Balloc+0x78>)
 80084d8:	4818      	ldr	r0, [pc, #96]	@ (800853c <_Balloc+0x7c>)
 80084da:	216b      	movs	r1, #107	@ 0x6b
 80084dc:	f001 ff34 	bl	800a348 <__assert_func>
 80084e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084e4:	6006      	str	r6, [r0, #0]
 80084e6:	60c6      	str	r6, [r0, #12]
 80084e8:	69e6      	ldr	r6, [r4, #28]
 80084ea:	68f3      	ldr	r3, [r6, #12]
 80084ec:	b183      	cbz	r3, 8008510 <_Balloc+0x50>
 80084ee:	69e3      	ldr	r3, [r4, #28]
 80084f0:	68db      	ldr	r3, [r3, #12]
 80084f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80084f6:	b9b8      	cbnz	r0, 8008528 <_Balloc+0x68>
 80084f8:	2101      	movs	r1, #1
 80084fa:	fa01 f605 	lsl.w	r6, r1, r5
 80084fe:	1d72      	adds	r2, r6, #5
 8008500:	0092      	lsls	r2, r2, #2
 8008502:	4620      	mov	r0, r4
 8008504:	f001 ff3e 	bl	800a384 <_calloc_r>
 8008508:	b160      	cbz	r0, 8008524 <_Balloc+0x64>
 800850a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800850e:	e00e      	b.n	800852e <_Balloc+0x6e>
 8008510:	2221      	movs	r2, #33	@ 0x21
 8008512:	2104      	movs	r1, #4
 8008514:	4620      	mov	r0, r4
 8008516:	f001 ff35 	bl	800a384 <_calloc_r>
 800851a:	69e3      	ldr	r3, [r4, #28]
 800851c:	60f0      	str	r0, [r6, #12]
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d1e4      	bne.n	80084ee <_Balloc+0x2e>
 8008524:	2000      	movs	r0, #0
 8008526:	bd70      	pop	{r4, r5, r6, pc}
 8008528:	6802      	ldr	r2, [r0, #0]
 800852a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800852e:	2300      	movs	r3, #0
 8008530:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008534:	e7f7      	b.n	8008526 <_Balloc+0x66>
 8008536:	bf00      	nop
 8008538:	0800ae86 	.word	0x0800ae86
 800853c:	0800af06 	.word	0x0800af06

08008540 <_Bfree>:
 8008540:	b570      	push	{r4, r5, r6, lr}
 8008542:	69c6      	ldr	r6, [r0, #28]
 8008544:	4605      	mov	r5, r0
 8008546:	460c      	mov	r4, r1
 8008548:	b976      	cbnz	r6, 8008568 <_Bfree+0x28>
 800854a:	2010      	movs	r0, #16
 800854c:	f7ff ff02 	bl	8008354 <malloc>
 8008550:	4602      	mov	r2, r0
 8008552:	61e8      	str	r0, [r5, #28]
 8008554:	b920      	cbnz	r0, 8008560 <_Bfree+0x20>
 8008556:	4b09      	ldr	r3, [pc, #36]	@ (800857c <_Bfree+0x3c>)
 8008558:	4809      	ldr	r0, [pc, #36]	@ (8008580 <_Bfree+0x40>)
 800855a:	218f      	movs	r1, #143	@ 0x8f
 800855c:	f001 fef4 	bl	800a348 <__assert_func>
 8008560:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008564:	6006      	str	r6, [r0, #0]
 8008566:	60c6      	str	r6, [r0, #12]
 8008568:	b13c      	cbz	r4, 800857a <_Bfree+0x3a>
 800856a:	69eb      	ldr	r3, [r5, #28]
 800856c:	6862      	ldr	r2, [r4, #4]
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008574:	6021      	str	r1, [r4, #0]
 8008576:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800857a:	bd70      	pop	{r4, r5, r6, pc}
 800857c:	0800ae86 	.word	0x0800ae86
 8008580:	0800af06 	.word	0x0800af06

08008584 <__multadd>:
 8008584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008588:	690d      	ldr	r5, [r1, #16]
 800858a:	4607      	mov	r7, r0
 800858c:	460c      	mov	r4, r1
 800858e:	461e      	mov	r6, r3
 8008590:	f101 0c14 	add.w	ip, r1, #20
 8008594:	2000      	movs	r0, #0
 8008596:	f8dc 3000 	ldr.w	r3, [ip]
 800859a:	b299      	uxth	r1, r3
 800859c:	fb02 6101 	mla	r1, r2, r1, r6
 80085a0:	0c1e      	lsrs	r6, r3, #16
 80085a2:	0c0b      	lsrs	r3, r1, #16
 80085a4:	fb02 3306 	mla	r3, r2, r6, r3
 80085a8:	b289      	uxth	r1, r1
 80085aa:	3001      	adds	r0, #1
 80085ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80085b0:	4285      	cmp	r5, r0
 80085b2:	f84c 1b04 	str.w	r1, [ip], #4
 80085b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80085ba:	dcec      	bgt.n	8008596 <__multadd+0x12>
 80085bc:	b30e      	cbz	r6, 8008602 <__multadd+0x7e>
 80085be:	68a3      	ldr	r3, [r4, #8]
 80085c0:	42ab      	cmp	r3, r5
 80085c2:	dc19      	bgt.n	80085f8 <__multadd+0x74>
 80085c4:	6861      	ldr	r1, [r4, #4]
 80085c6:	4638      	mov	r0, r7
 80085c8:	3101      	adds	r1, #1
 80085ca:	f7ff ff79 	bl	80084c0 <_Balloc>
 80085ce:	4680      	mov	r8, r0
 80085d0:	b928      	cbnz	r0, 80085de <__multadd+0x5a>
 80085d2:	4602      	mov	r2, r0
 80085d4:	4b0c      	ldr	r3, [pc, #48]	@ (8008608 <__multadd+0x84>)
 80085d6:	480d      	ldr	r0, [pc, #52]	@ (800860c <__multadd+0x88>)
 80085d8:	21ba      	movs	r1, #186	@ 0xba
 80085da:	f001 feb5 	bl	800a348 <__assert_func>
 80085de:	6922      	ldr	r2, [r4, #16]
 80085e0:	3202      	adds	r2, #2
 80085e2:	f104 010c 	add.w	r1, r4, #12
 80085e6:	0092      	lsls	r2, r2, #2
 80085e8:	300c      	adds	r0, #12
 80085ea:	f7ff f806 	bl	80075fa <memcpy>
 80085ee:	4621      	mov	r1, r4
 80085f0:	4638      	mov	r0, r7
 80085f2:	f7ff ffa5 	bl	8008540 <_Bfree>
 80085f6:	4644      	mov	r4, r8
 80085f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80085fc:	3501      	adds	r5, #1
 80085fe:	615e      	str	r6, [r3, #20]
 8008600:	6125      	str	r5, [r4, #16]
 8008602:	4620      	mov	r0, r4
 8008604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008608:	0800aef5 	.word	0x0800aef5
 800860c:	0800af06 	.word	0x0800af06

08008610 <__s2b>:
 8008610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008614:	460c      	mov	r4, r1
 8008616:	4615      	mov	r5, r2
 8008618:	461f      	mov	r7, r3
 800861a:	2209      	movs	r2, #9
 800861c:	3308      	adds	r3, #8
 800861e:	4606      	mov	r6, r0
 8008620:	fb93 f3f2 	sdiv	r3, r3, r2
 8008624:	2100      	movs	r1, #0
 8008626:	2201      	movs	r2, #1
 8008628:	429a      	cmp	r2, r3
 800862a:	db09      	blt.n	8008640 <__s2b+0x30>
 800862c:	4630      	mov	r0, r6
 800862e:	f7ff ff47 	bl	80084c0 <_Balloc>
 8008632:	b940      	cbnz	r0, 8008646 <__s2b+0x36>
 8008634:	4602      	mov	r2, r0
 8008636:	4b19      	ldr	r3, [pc, #100]	@ (800869c <__s2b+0x8c>)
 8008638:	4819      	ldr	r0, [pc, #100]	@ (80086a0 <__s2b+0x90>)
 800863a:	21d3      	movs	r1, #211	@ 0xd3
 800863c:	f001 fe84 	bl	800a348 <__assert_func>
 8008640:	0052      	lsls	r2, r2, #1
 8008642:	3101      	adds	r1, #1
 8008644:	e7f0      	b.n	8008628 <__s2b+0x18>
 8008646:	9b08      	ldr	r3, [sp, #32]
 8008648:	6143      	str	r3, [r0, #20]
 800864a:	2d09      	cmp	r5, #9
 800864c:	f04f 0301 	mov.w	r3, #1
 8008650:	6103      	str	r3, [r0, #16]
 8008652:	dd16      	ble.n	8008682 <__s2b+0x72>
 8008654:	f104 0909 	add.w	r9, r4, #9
 8008658:	46c8      	mov	r8, r9
 800865a:	442c      	add	r4, r5
 800865c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008660:	4601      	mov	r1, r0
 8008662:	3b30      	subs	r3, #48	@ 0x30
 8008664:	220a      	movs	r2, #10
 8008666:	4630      	mov	r0, r6
 8008668:	f7ff ff8c 	bl	8008584 <__multadd>
 800866c:	45a0      	cmp	r8, r4
 800866e:	d1f5      	bne.n	800865c <__s2b+0x4c>
 8008670:	f1a5 0408 	sub.w	r4, r5, #8
 8008674:	444c      	add	r4, r9
 8008676:	1b2d      	subs	r5, r5, r4
 8008678:	1963      	adds	r3, r4, r5
 800867a:	42bb      	cmp	r3, r7
 800867c:	db04      	blt.n	8008688 <__s2b+0x78>
 800867e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008682:	340a      	adds	r4, #10
 8008684:	2509      	movs	r5, #9
 8008686:	e7f6      	b.n	8008676 <__s2b+0x66>
 8008688:	f814 3b01 	ldrb.w	r3, [r4], #1
 800868c:	4601      	mov	r1, r0
 800868e:	3b30      	subs	r3, #48	@ 0x30
 8008690:	220a      	movs	r2, #10
 8008692:	4630      	mov	r0, r6
 8008694:	f7ff ff76 	bl	8008584 <__multadd>
 8008698:	e7ee      	b.n	8008678 <__s2b+0x68>
 800869a:	bf00      	nop
 800869c:	0800aef5 	.word	0x0800aef5
 80086a0:	0800af06 	.word	0x0800af06

080086a4 <__hi0bits>:
 80086a4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80086a8:	4603      	mov	r3, r0
 80086aa:	bf36      	itet	cc
 80086ac:	0403      	lslcc	r3, r0, #16
 80086ae:	2000      	movcs	r0, #0
 80086b0:	2010      	movcc	r0, #16
 80086b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80086b6:	bf3c      	itt	cc
 80086b8:	021b      	lslcc	r3, r3, #8
 80086ba:	3008      	addcc	r0, #8
 80086bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086c0:	bf3c      	itt	cc
 80086c2:	011b      	lslcc	r3, r3, #4
 80086c4:	3004      	addcc	r0, #4
 80086c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086ca:	bf3c      	itt	cc
 80086cc:	009b      	lslcc	r3, r3, #2
 80086ce:	3002      	addcc	r0, #2
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	db05      	blt.n	80086e0 <__hi0bits+0x3c>
 80086d4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80086d8:	f100 0001 	add.w	r0, r0, #1
 80086dc:	bf08      	it	eq
 80086de:	2020      	moveq	r0, #32
 80086e0:	4770      	bx	lr

080086e2 <__lo0bits>:
 80086e2:	6803      	ldr	r3, [r0, #0]
 80086e4:	4602      	mov	r2, r0
 80086e6:	f013 0007 	ands.w	r0, r3, #7
 80086ea:	d00b      	beq.n	8008704 <__lo0bits+0x22>
 80086ec:	07d9      	lsls	r1, r3, #31
 80086ee:	d421      	bmi.n	8008734 <__lo0bits+0x52>
 80086f0:	0798      	lsls	r0, r3, #30
 80086f2:	bf49      	itett	mi
 80086f4:	085b      	lsrmi	r3, r3, #1
 80086f6:	089b      	lsrpl	r3, r3, #2
 80086f8:	2001      	movmi	r0, #1
 80086fa:	6013      	strmi	r3, [r2, #0]
 80086fc:	bf5c      	itt	pl
 80086fe:	6013      	strpl	r3, [r2, #0]
 8008700:	2002      	movpl	r0, #2
 8008702:	4770      	bx	lr
 8008704:	b299      	uxth	r1, r3
 8008706:	b909      	cbnz	r1, 800870c <__lo0bits+0x2a>
 8008708:	0c1b      	lsrs	r3, r3, #16
 800870a:	2010      	movs	r0, #16
 800870c:	b2d9      	uxtb	r1, r3
 800870e:	b909      	cbnz	r1, 8008714 <__lo0bits+0x32>
 8008710:	3008      	adds	r0, #8
 8008712:	0a1b      	lsrs	r3, r3, #8
 8008714:	0719      	lsls	r1, r3, #28
 8008716:	bf04      	itt	eq
 8008718:	091b      	lsreq	r3, r3, #4
 800871a:	3004      	addeq	r0, #4
 800871c:	0799      	lsls	r1, r3, #30
 800871e:	bf04      	itt	eq
 8008720:	089b      	lsreq	r3, r3, #2
 8008722:	3002      	addeq	r0, #2
 8008724:	07d9      	lsls	r1, r3, #31
 8008726:	d403      	bmi.n	8008730 <__lo0bits+0x4e>
 8008728:	085b      	lsrs	r3, r3, #1
 800872a:	f100 0001 	add.w	r0, r0, #1
 800872e:	d003      	beq.n	8008738 <__lo0bits+0x56>
 8008730:	6013      	str	r3, [r2, #0]
 8008732:	4770      	bx	lr
 8008734:	2000      	movs	r0, #0
 8008736:	4770      	bx	lr
 8008738:	2020      	movs	r0, #32
 800873a:	4770      	bx	lr

0800873c <__i2b>:
 800873c:	b510      	push	{r4, lr}
 800873e:	460c      	mov	r4, r1
 8008740:	2101      	movs	r1, #1
 8008742:	f7ff febd 	bl	80084c0 <_Balloc>
 8008746:	4602      	mov	r2, r0
 8008748:	b928      	cbnz	r0, 8008756 <__i2b+0x1a>
 800874a:	4b05      	ldr	r3, [pc, #20]	@ (8008760 <__i2b+0x24>)
 800874c:	4805      	ldr	r0, [pc, #20]	@ (8008764 <__i2b+0x28>)
 800874e:	f240 1145 	movw	r1, #325	@ 0x145
 8008752:	f001 fdf9 	bl	800a348 <__assert_func>
 8008756:	2301      	movs	r3, #1
 8008758:	6144      	str	r4, [r0, #20]
 800875a:	6103      	str	r3, [r0, #16]
 800875c:	bd10      	pop	{r4, pc}
 800875e:	bf00      	nop
 8008760:	0800aef5 	.word	0x0800aef5
 8008764:	0800af06 	.word	0x0800af06

08008768 <__multiply>:
 8008768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800876c:	4614      	mov	r4, r2
 800876e:	690a      	ldr	r2, [r1, #16]
 8008770:	6923      	ldr	r3, [r4, #16]
 8008772:	429a      	cmp	r2, r3
 8008774:	bfa8      	it	ge
 8008776:	4623      	movge	r3, r4
 8008778:	460f      	mov	r7, r1
 800877a:	bfa4      	itt	ge
 800877c:	460c      	movge	r4, r1
 800877e:	461f      	movge	r7, r3
 8008780:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008784:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008788:	68a3      	ldr	r3, [r4, #8]
 800878a:	6861      	ldr	r1, [r4, #4]
 800878c:	eb0a 0609 	add.w	r6, sl, r9
 8008790:	42b3      	cmp	r3, r6
 8008792:	b085      	sub	sp, #20
 8008794:	bfb8      	it	lt
 8008796:	3101      	addlt	r1, #1
 8008798:	f7ff fe92 	bl	80084c0 <_Balloc>
 800879c:	b930      	cbnz	r0, 80087ac <__multiply+0x44>
 800879e:	4602      	mov	r2, r0
 80087a0:	4b44      	ldr	r3, [pc, #272]	@ (80088b4 <__multiply+0x14c>)
 80087a2:	4845      	ldr	r0, [pc, #276]	@ (80088b8 <__multiply+0x150>)
 80087a4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80087a8:	f001 fdce 	bl	800a348 <__assert_func>
 80087ac:	f100 0514 	add.w	r5, r0, #20
 80087b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80087b4:	462b      	mov	r3, r5
 80087b6:	2200      	movs	r2, #0
 80087b8:	4543      	cmp	r3, r8
 80087ba:	d321      	bcc.n	8008800 <__multiply+0x98>
 80087bc:	f107 0114 	add.w	r1, r7, #20
 80087c0:	f104 0214 	add.w	r2, r4, #20
 80087c4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80087c8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80087cc:	9302      	str	r3, [sp, #8]
 80087ce:	1b13      	subs	r3, r2, r4
 80087d0:	3b15      	subs	r3, #21
 80087d2:	f023 0303 	bic.w	r3, r3, #3
 80087d6:	3304      	adds	r3, #4
 80087d8:	f104 0715 	add.w	r7, r4, #21
 80087dc:	42ba      	cmp	r2, r7
 80087de:	bf38      	it	cc
 80087e0:	2304      	movcc	r3, #4
 80087e2:	9301      	str	r3, [sp, #4]
 80087e4:	9b02      	ldr	r3, [sp, #8]
 80087e6:	9103      	str	r1, [sp, #12]
 80087e8:	428b      	cmp	r3, r1
 80087ea:	d80c      	bhi.n	8008806 <__multiply+0x9e>
 80087ec:	2e00      	cmp	r6, #0
 80087ee:	dd03      	ble.n	80087f8 <__multiply+0x90>
 80087f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d05b      	beq.n	80088b0 <__multiply+0x148>
 80087f8:	6106      	str	r6, [r0, #16]
 80087fa:	b005      	add	sp, #20
 80087fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008800:	f843 2b04 	str.w	r2, [r3], #4
 8008804:	e7d8      	b.n	80087b8 <__multiply+0x50>
 8008806:	f8b1 a000 	ldrh.w	sl, [r1]
 800880a:	f1ba 0f00 	cmp.w	sl, #0
 800880e:	d024      	beq.n	800885a <__multiply+0xf2>
 8008810:	f104 0e14 	add.w	lr, r4, #20
 8008814:	46a9      	mov	r9, r5
 8008816:	f04f 0c00 	mov.w	ip, #0
 800881a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800881e:	f8d9 3000 	ldr.w	r3, [r9]
 8008822:	fa1f fb87 	uxth.w	fp, r7
 8008826:	b29b      	uxth	r3, r3
 8008828:	fb0a 330b 	mla	r3, sl, fp, r3
 800882c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008830:	f8d9 7000 	ldr.w	r7, [r9]
 8008834:	4463      	add	r3, ip
 8008836:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800883a:	fb0a c70b 	mla	r7, sl, fp, ip
 800883e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008842:	b29b      	uxth	r3, r3
 8008844:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008848:	4572      	cmp	r2, lr
 800884a:	f849 3b04 	str.w	r3, [r9], #4
 800884e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008852:	d8e2      	bhi.n	800881a <__multiply+0xb2>
 8008854:	9b01      	ldr	r3, [sp, #4]
 8008856:	f845 c003 	str.w	ip, [r5, r3]
 800885a:	9b03      	ldr	r3, [sp, #12]
 800885c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008860:	3104      	adds	r1, #4
 8008862:	f1b9 0f00 	cmp.w	r9, #0
 8008866:	d021      	beq.n	80088ac <__multiply+0x144>
 8008868:	682b      	ldr	r3, [r5, #0]
 800886a:	f104 0c14 	add.w	ip, r4, #20
 800886e:	46ae      	mov	lr, r5
 8008870:	f04f 0a00 	mov.w	sl, #0
 8008874:	f8bc b000 	ldrh.w	fp, [ip]
 8008878:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800887c:	fb09 770b 	mla	r7, r9, fp, r7
 8008880:	4457      	add	r7, sl
 8008882:	b29b      	uxth	r3, r3
 8008884:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008888:	f84e 3b04 	str.w	r3, [lr], #4
 800888c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008890:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008894:	f8be 3000 	ldrh.w	r3, [lr]
 8008898:	fb09 330a 	mla	r3, r9, sl, r3
 800889c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80088a0:	4562      	cmp	r2, ip
 80088a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80088a6:	d8e5      	bhi.n	8008874 <__multiply+0x10c>
 80088a8:	9f01      	ldr	r7, [sp, #4]
 80088aa:	51eb      	str	r3, [r5, r7]
 80088ac:	3504      	adds	r5, #4
 80088ae:	e799      	b.n	80087e4 <__multiply+0x7c>
 80088b0:	3e01      	subs	r6, #1
 80088b2:	e79b      	b.n	80087ec <__multiply+0x84>
 80088b4:	0800aef5 	.word	0x0800aef5
 80088b8:	0800af06 	.word	0x0800af06

080088bc <__pow5mult>:
 80088bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088c0:	4615      	mov	r5, r2
 80088c2:	f012 0203 	ands.w	r2, r2, #3
 80088c6:	4607      	mov	r7, r0
 80088c8:	460e      	mov	r6, r1
 80088ca:	d007      	beq.n	80088dc <__pow5mult+0x20>
 80088cc:	4c25      	ldr	r4, [pc, #148]	@ (8008964 <__pow5mult+0xa8>)
 80088ce:	3a01      	subs	r2, #1
 80088d0:	2300      	movs	r3, #0
 80088d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80088d6:	f7ff fe55 	bl	8008584 <__multadd>
 80088da:	4606      	mov	r6, r0
 80088dc:	10ad      	asrs	r5, r5, #2
 80088de:	d03d      	beq.n	800895c <__pow5mult+0xa0>
 80088e0:	69fc      	ldr	r4, [r7, #28]
 80088e2:	b97c      	cbnz	r4, 8008904 <__pow5mult+0x48>
 80088e4:	2010      	movs	r0, #16
 80088e6:	f7ff fd35 	bl	8008354 <malloc>
 80088ea:	4602      	mov	r2, r0
 80088ec:	61f8      	str	r0, [r7, #28]
 80088ee:	b928      	cbnz	r0, 80088fc <__pow5mult+0x40>
 80088f0:	4b1d      	ldr	r3, [pc, #116]	@ (8008968 <__pow5mult+0xac>)
 80088f2:	481e      	ldr	r0, [pc, #120]	@ (800896c <__pow5mult+0xb0>)
 80088f4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80088f8:	f001 fd26 	bl	800a348 <__assert_func>
 80088fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008900:	6004      	str	r4, [r0, #0]
 8008902:	60c4      	str	r4, [r0, #12]
 8008904:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008908:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800890c:	b94c      	cbnz	r4, 8008922 <__pow5mult+0x66>
 800890e:	f240 2171 	movw	r1, #625	@ 0x271
 8008912:	4638      	mov	r0, r7
 8008914:	f7ff ff12 	bl	800873c <__i2b>
 8008918:	2300      	movs	r3, #0
 800891a:	f8c8 0008 	str.w	r0, [r8, #8]
 800891e:	4604      	mov	r4, r0
 8008920:	6003      	str	r3, [r0, #0]
 8008922:	f04f 0900 	mov.w	r9, #0
 8008926:	07eb      	lsls	r3, r5, #31
 8008928:	d50a      	bpl.n	8008940 <__pow5mult+0x84>
 800892a:	4631      	mov	r1, r6
 800892c:	4622      	mov	r2, r4
 800892e:	4638      	mov	r0, r7
 8008930:	f7ff ff1a 	bl	8008768 <__multiply>
 8008934:	4631      	mov	r1, r6
 8008936:	4680      	mov	r8, r0
 8008938:	4638      	mov	r0, r7
 800893a:	f7ff fe01 	bl	8008540 <_Bfree>
 800893e:	4646      	mov	r6, r8
 8008940:	106d      	asrs	r5, r5, #1
 8008942:	d00b      	beq.n	800895c <__pow5mult+0xa0>
 8008944:	6820      	ldr	r0, [r4, #0]
 8008946:	b938      	cbnz	r0, 8008958 <__pow5mult+0x9c>
 8008948:	4622      	mov	r2, r4
 800894a:	4621      	mov	r1, r4
 800894c:	4638      	mov	r0, r7
 800894e:	f7ff ff0b 	bl	8008768 <__multiply>
 8008952:	6020      	str	r0, [r4, #0]
 8008954:	f8c0 9000 	str.w	r9, [r0]
 8008958:	4604      	mov	r4, r0
 800895a:	e7e4      	b.n	8008926 <__pow5mult+0x6a>
 800895c:	4630      	mov	r0, r6
 800895e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008962:	bf00      	nop
 8008964:	0800af60 	.word	0x0800af60
 8008968:	0800ae86 	.word	0x0800ae86
 800896c:	0800af06 	.word	0x0800af06

08008970 <__lshift>:
 8008970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008974:	460c      	mov	r4, r1
 8008976:	6849      	ldr	r1, [r1, #4]
 8008978:	6923      	ldr	r3, [r4, #16]
 800897a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800897e:	68a3      	ldr	r3, [r4, #8]
 8008980:	4607      	mov	r7, r0
 8008982:	4691      	mov	r9, r2
 8008984:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008988:	f108 0601 	add.w	r6, r8, #1
 800898c:	42b3      	cmp	r3, r6
 800898e:	db0b      	blt.n	80089a8 <__lshift+0x38>
 8008990:	4638      	mov	r0, r7
 8008992:	f7ff fd95 	bl	80084c0 <_Balloc>
 8008996:	4605      	mov	r5, r0
 8008998:	b948      	cbnz	r0, 80089ae <__lshift+0x3e>
 800899a:	4602      	mov	r2, r0
 800899c:	4b28      	ldr	r3, [pc, #160]	@ (8008a40 <__lshift+0xd0>)
 800899e:	4829      	ldr	r0, [pc, #164]	@ (8008a44 <__lshift+0xd4>)
 80089a0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80089a4:	f001 fcd0 	bl	800a348 <__assert_func>
 80089a8:	3101      	adds	r1, #1
 80089aa:	005b      	lsls	r3, r3, #1
 80089ac:	e7ee      	b.n	800898c <__lshift+0x1c>
 80089ae:	2300      	movs	r3, #0
 80089b0:	f100 0114 	add.w	r1, r0, #20
 80089b4:	f100 0210 	add.w	r2, r0, #16
 80089b8:	4618      	mov	r0, r3
 80089ba:	4553      	cmp	r3, sl
 80089bc:	db33      	blt.n	8008a26 <__lshift+0xb6>
 80089be:	6920      	ldr	r0, [r4, #16]
 80089c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80089c4:	f104 0314 	add.w	r3, r4, #20
 80089c8:	f019 091f 	ands.w	r9, r9, #31
 80089cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80089d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80089d4:	d02b      	beq.n	8008a2e <__lshift+0xbe>
 80089d6:	f1c9 0e20 	rsb	lr, r9, #32
 80089da:	468a      	mov	sl, r1
 80089dc:	2200      	movs	r2, #0
 80089de:	6818      	ldr	r0, [r3, #0]
 80089e0:	fa00 f009 	lsl.w	r0, r0, r9
 80089e4:	4310      	orrs	r0, r2
 80089e6:	f84a 0b04 	str.w	r0, [sl], #4
 80089ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80089ee:	459c      	cmp	ip, r3
 80089f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80089f4:	d8f3      	bhi.n	80089de <__lshift+0x6e>
 80089f6:	ebac 0304 	sub.w	r3, ip, r4
 80089fa:	3b15      	subs	r3, #21
 80089fc:	f023 0303 	bic.w	r3, r3, #3
 8008a00:	3304      	adds	r3, #4
 8008a02:	f104 0015 	add.w	r0, r4, #21
 8008a06:	4584      	cmp	ip, r0
 8008a08:	bf38      	it	cc
 8008a0a:	2304      	movcc	r3, #4
 8008a0c:	50ca      	str	r2, [r1, r3]
 8008a0e:	b10a      	cbz	r2, 8008a14 <__lshift+0xa4>
 8008a10:	f108 0602 	add.w	r6, r8, #2
 8008a14:	3e01      	subs	r6, #1
 8008a16:	4638      	mov	r0, r7
 8008a18:	612e      	str	r6, [r5, #16]
 8008a1a:	4621      	mov	r1, r4
 8008a1c:	f7ff fd90 	bl	8008540 <_Bfree>
 8008a20:	4628      	mov	r0, r5
 8008a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a26:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	e7c5      	b.n	80089ba <__lshift+0x4a>
 8008a2e:	3904      	subs	r1, #4
 8008a30:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a34:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a38:	459c      	cmp	ip, r3
 8008a3a:	d8f9      	bhi.n	8008a30 <__lshift+0xc0>
 8008a3c:	e7ea      	b.n	8008a14 <__lshift+0xa4>
 8008a3e:	bf00      	nop
 8008a40:	0800aef5 	.word	0x0800aef5
 8008a44:	0800af06 	.word	0x0800af06

08008a48 <__mcmp>:
 8008a48:	690a      	ldr	r2, [r1, #16]
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	6900      	ldr	r0, [r0, #16]
 8008a4e:	1a80      	subs	r0, r0, r2
 8008a50:	b530      	push	{r4, r5, lr}
 8008a52:	d10e      	bne.n	8008a72 <__mcmp+0x2a>
 8008a54:	3314      	adds	r3, #20
 8008a56:	3114      	adds	r1, #20
 8008a58:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008a5c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008a60:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008a64:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008a68:	4295      	cmp	r5, r2
 8008a6a:	d003      	beq.n	8008a74 <__mcmp+0x2c>
 8008a6c:	d205      	bcs.n	8008a7a <__mcmp+0x32>
 8008a6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008a72:	bd30      	pop	{r4, r5, pc}
 8008a74:	42a3      	cmp	r3, r4
 8008a76:	d3f3      	bcc.n	8008a60 <__mcmp+0x18>
 8008a78:	e7fb      	b.n	8008a72 <__mcmp+0x2a>
 8008a7a:	2001      	movs	r0, #1
 8008a7c:	e7f9      	b.n	8008a72 <__mcmp+0x2a>
	...

08008a80 <__mdiff>:
 8008a80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a84:	4689      	mov	r9, r1
 8008a86:	4606      	mov	r6, r0
 8008a88:	4611      	mov	r1, r2
 8008a8a:	4648      	mov	r0, r9
 8008a8c:	4614      	mov	r4, r2
 8008a8e:	f7ff ffdb 	bl	8008a48 <__mcmp>
 8008a92:	1e05      	subs	r5, r0, #0
 8008a94:	d112      	bne.n	8008abc <__mdiff+0x3c>
 8008a96:	4629      	mov	r1, r5
 8008a98:	4630      	mov	r0, r6
 8008a9a:	f7ff fd11 	bl	80084c0 <_Balloc>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	b928      	cbnz	r0, 8008aae <__mdiff+0x2e>
 8008aa2:	4b3f      	ldr	r3, [pc, #252]	@ (8008ba0 <__mdiff+0x120>)
 8008aa4:	f240 2137 	movw	r1, #567	@ 0x237
 8008aa8:	483e      	ldr	r0, [pc, #248]	@ (8008ba4 <__mdiff+0x124>)
 8008aaa:	f001 fc4d 	bl	800a348 <__assert_func>
 8008aae:	2301      	movs	r3, #1
 8008ab0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ab4:	4610      	mov	r0, r2
 8008ab6:	b003      	add	sp, #12
 8008ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008abc:	bfbc      	itt	lt
 8008abe:	464b      	movlt	r3, r9
 8008ac0:	46a1      	movlt	r9, r4
 8008ac2:	4630      	mov	r0, r6
 8008ac4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008ac8:	bfba      	itte	lt
 8008aca:	461c      	movlt	r4, r3
 8008acc:	2501      	movlt	r5, #1
 8008ace:	2500      	movge	r5, #0
 8008ad0:	f7ff fcf6 	bl	80084c0 <_Balloc>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	b918      	cbnz	r0, 8008ae0 <__mdiff+0x60>
 8008ad8:	4b31      	ldr	r3, [pc, #196]	@ (8008ba0 <__mdiff+0x120>)
 8008ada:	f240 2145 	movw	r1, #581	@ 0x245
 8008ade:	e7e3      	b.n	8008aa8 <__mdiff+0x28>
 8008ae0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008ae4:	6926      	ldr	r6, [r4, #16]
 8008ae6:	60c5      	str	r5, [r0, #12]
 8008ae8:	f109 0310 	add.w	r3, r9, #16
 8008aec:	f109 0514 	add.w	r5, r9, #20
 8008af0:	f104 0e14 	add.w	lr, r4, #20
 8008af4:	f100 0b14 	add.w	fp, r0, #20
 8008af8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008afc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008b00:	9301      	str	r3, [sp, #4]
 8008b02:	46d9      	mov	r9, fp
 8008b04:	f04f 0c00 	mov.w	ip, #0
 8008b08:	9b01      	ldr	r3, [sp, #4]
 8008b0a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008b0e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008b12:	9301      	str	r3, [sp, #4]
 8008b14:	fa1f f38a 	uxth.w	r3, sl
 8008b18:	4619      	mov	r1, r3
 8008b1a:	b283      	uxth	r3, r0
 8008b1c:	1acb      	subs	r3, r1, r3
 8008b1e:	0c00      	lsrs	r0, r0, #16
 8008b20:	4463      	add	r3, ip
 8008b22:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008b26:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008b30:	4576      	cmp	r6, lr
 8008b32:	f849 3b04 	str.w	r3, [r9], #4
 8008b36:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b3a:	d8e5      	bhi.n	8008b08 <__mdiff+0x88>
 8008b3c:	1b33      	subs	r3, r6, r4
 8008b3e:	3b15      	subs	r3, #21
 8008b40:	f023 0303 	bic.w	r3, r3, #3
 8008b44:	3415      	adds	r4, #21
 8008b46:	3304      	adds	r3, #4
 8008b48:	42a6      	cmp	r6, r4
 8008b4a:	bf38      	it	cc
 8008b4c:	2304      	movcc	r3, #4
 8008b4e:	441d      	add	r5, r3
 8008b50:	445b      	add	r3, fp
 8008b52:	461e      	mov	r6, r3
 8008b54:	462c      	mov	r4, r5
 8008b56:	4544      	cmp	r4, r8
 8008b58:	d30e      	bcc.n	8008b78 <__mdiff+0xf8>
 8008b5a:	f108 0103 	add.w	r1, r8, #3
 8008b5e:	1b49      	subs	r1, r1, r5
 8008b60:	f021 0103 	bic.w	r1, r1, #3
 8008b64:	3d03      	subs	r5, #3
 8008b66:	45a8      	cmp	r8, r5
 8008b68:	bf38      	it	cc
 8008b6a:	2100      	movcc	r1, #0
 8008b6c:	440b      	add	r3, r1
 8008b6e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008b72:	b191      	cbz	r1, 8008b9a <__mdiff+0x11a>
 8008b74:	6117      	str	r7, [r2, #16]
 8008b76:	e79d      	b.n	8008ab4 <__mdiff+0x34>
 8008b78:	f854 1b04 	ldr.w	r1, [r4], #4
 8008b7c:	46e6      	mov	lr, ip
 8008b7e:	0c08      	lsrs	r0, r1, #16
 8008b80:	fa1c fc81 	uxtah	ip, ip, r1
 8008b84:	4471      	add	r1, lr
 8008b86:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008b8a:	b289      	uxth	r1, r1
 8008b8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008b90:	f846 1b04 	str.w	r1, [r6], #4
 8008b94:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b98:	e7dd      	b.n	8008b56 <__mdiff+0xd6>
 8008b9a:	3f01      	subs	r7, #1
 8008b9c:	e7e7      	b.n	8008b6e <__mdiff+0xee>
 8008b9e:	bf00      	nop
 8008ba0:	0800aef5 	.word	0x0800aef5
 8008ba4:	0800af06 	.word	0x0800af06

08008ba8 <__ulp>:
 8008ba8:	b082      	sub	sp, #8
 8008baa:	ed8d 0b00 	vstr	d0, [sp]
 8008bae:	9a01      	ldr	r2, [sp, #4]
 8008bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8008bf0 <__ulp+0x48>)
 8008bb2:	4013      	ands	r3, r2
 8008bb4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	dc08      	bgt.n	8008bce <__ulp+0x26>
 8008bbc:	425b      	negs	r3, r3
 8008bbe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008bc2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008bc6:	da04      	bge.n	8008bd2 <__ulp+0x2a>
 8008bc8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008bcc:	4113      	asrs	r3, r2
 8008bce:	2200      	movs	r2, #0
 8008bd0:	e008      	b.n	8008be4 <__ulp+0x3c>
 8008bd2:	f1a2 0314 	sub.w	r3, r2, #20
 8008bd6:	2b1e      	cmp	r3, #30
 8008bd8:	bfda      	itte	le
 8008bda:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008bde:	40da      	lsrle	r2, r3
 8008be0:	2201      	movgt	r2, #1
 8008be2:	2300      	movs	r3, #0
 8008be4:	4619      	mov	r1, r3
 8008be6:	4610      	mov	r0, r2
 8008be8:	ec41 0b10 	vmov	d0, r0, r1
 8008bec:	b002      	add	sp, #8
 8008bee:	4770      	bx	lr
 8008bf0:	7ff00000 	.word	0x7ff00000

08008bf4 <__b2d>:
 8008bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bf8:	6906      	ldr	r6, [r0, #16]
 8008bfa:	f100 0814 	add.w	r8, r0, #20
 8008bfe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008c02:	1f37      	subs	r7, r6, #4
 8008c04:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008c08:	4610      	mov	r0, r2
 8008c0a:	f7ff fd4b 	bl	80086a4 <__hi0bits>
 8008c0e:	f1c0 0320 	rsb	r3, r0, #32
 8008c12:	280a      	cmp	r0, #10
 8008c14:	600b      	str	r3, [r1, #0]
 8008c16:	491b      	ldr	r1, [pc, #108]	@ (8008c84 <__b2d+0x90>)
 8008c18:	dc15      	bgt.n	8008c46 <__b2d+0x52>
 8008c1a:	f1c0 0c0b 	rsb	ip, r0, #11
 8008c1e:	fa22 f30c 	lsr.w	r3, r2, ip
 8008c22:	45b8      	cmp	r8, r7
 8008c24:	ea43 0501 	orr.w	r5, r3, r1
 8008c28:	bf34      	ite	cc
 8008c2a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008c2e:	2300      	movcs	r3, #0
 8008c30:	3015      	adds	r0, #21
 8008c32:	fa02 f000 	lsl.w	r0, r2, r0
 8008c36:	fa23 f30c 	lsr.w	r3, r3, ip
 8008c3a:	4303      	orrs	r3, r0
 8008c3c:	461c      	mov	r4, r3
 8008c3e:	ec45 4b10 	vmov	d0, r4, r5
 8008c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c46:	45b8      	cmp	r8, r7
 8008c48:	bf3a      	itte	cc
 8008c4a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008c4e:	f1a6 0708 	subcc.w	r7, r6, #8
 8008c52:	2300      	movcs	r3, #0
 8008c54:	380b      	subs	r0, #11
 8008c56:	d012      	beq.n	8008c7e <__b2d+0x8a>
 8008c58:	f1c0 0120 	rsb	r1, r0, #32
 8008c5c:	fa23 f401 	lsr.w	r4, r3, r1
 8008c60:	4082      	lsls	r2, r0
 8008c62:	4322      	orrs	r2, r4
 8008c64:	4547      	cmp	r7, r8
 8008c66:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008c6a:	bf8c      	ite	hi
 8008c6c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008c70:	2200      	movls	r2, #0
 8008c72:	4083      	lsls	r3, r0
 8008c74:	40ca      	lsrs	r2, r1
 8008c76:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	e7de      	b.n	8008c3c <__b2d+0x48>
 8008c7e:	ea42 0501 	orr.w	r5, r2, r1
 8008c82:	e7db      	b.n	8008c3c <__b2d+0x48>
 8008c84:	3ff00000 	.word	0x3ff00000

08008c88 <__d2b>:
 8008c88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008c8c:	460f      	mov	r7, r1
 8008c8e:	2101      	movs	r1, #1
 8008c90:	ec59 8b10 	vmov	r8, r9, d0
 8008c94:	4616      	mov	r6, r2
 8008c96:	f7ff fc13 	bl	80084c0 <_Balloc>
 8008c9a:	4604      	mov	r4, r0
 8008c9c:	b930      	cbnz	r0, 8008cac <__d2b+0x24>
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	4b23      	ldr	r3, [pc, #140]	@ (8008d30 <__d2b+0xa8>)
 8008ca2:	4824      	ldr	r0, [pc, #144]	@ (8008d34 <__d2b+0xac>)
 8008ca4:	f240 310f 	movw	r1, #783	@ 0x30f
 8008ca8:	f001 fb4e 	bl	800a348 <__assert_func>
 8008cac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008cb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008cb4:	b10d      	cbz	r5, 8008cba <__d2b+0x32>
 8008cb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008cba:	9301      	str	r3, [sp, #4]
 8008cbc:	f1b8 0300 	subs.w	r3, r8, #0
 8008cc0:	d023      	beq.n	8008d0a <__d2b+0x82>
 8008cc2:	4668      	mov	r0, sp
 8008cc4:	9300      	str	r3, [sp, #0]
 8008cc6:	f7ff fd0c 	bl	80086e2 <__lo0bits>
 8008cca:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008cce:	b1d0      	cbz	r0, 8008d06 <__d2b+0x7e>
 8008cd0:	f1c0 0320 	rsb	r3, r0, #32
 8008cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd8:	430b      	orrs	r3, r1
 8008cda:	40c2      	lsrs	r2, r0
 8008cdc:	6163      	str	r3, [r4, #20]
 8008cde:	9201      	str	r2, [sp, #4]
 8008ce0:	9b01      	ldr	r3, [sp, #4]
 8008ce2:	61a3      	str	r3, [r4, #24]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	bf0c      	ite	eq
 8008ce8:	2201      	moveq	r2, #1
 8008cea:	2202      	movne	r2, #2
 8008cec:	6122      	str	r2, [r4, #16]
 8008cee:	b1a5      	cbz	r5, 8008d1a <__d2b+0x92>
 8008cf0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008cf4:	4405      	add	r5, r0
 8008cf6:	603d      	str	r5, [r7, #0]
 8008cf8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008cfc:	6030      	str	r0, [r6, #0]
 8008cfe:	4620      	mov	r0, r4
 8008d00:	b003      	add	sp, #12
 8008d02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d06:	6161      	str	r1, [r4, #20]
 8008d08:	e7ea      	b.n	8008ce0 <__d2b+0x58>
 8008d0a:	a801      	add	r0, sp, #4
 8008d0c:	f7ff fce9 	bl	80086e2 <__lo0bits>
 8008d10:	9b01      	ldr	r3, [sp, #4]
 8008d12:	6163      	str	r3, [r4, #20]
 8008d14:	3020      	adds	r0, #32
 8008d16:	2201      	movs	r2, #1
 8008d18:	e7e8      	b.n	8008cec <__d2b+0x64>
 8008d1a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008d1e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008d22:	6038      	str	r0, [r7, #0]
 8008d24:	6918      	ldr	r0, [r3, #16]
 8008d26:	f7ff fcbd 	bl	80086a4 <__hi0bits>
 8008d2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008d2e:	e7e5      	b.n	8008cfc <__d2b+0x74>
 8008d30:	0800aef5 	.word	0x0800aef5
 8008d34:	0800af06 	.word	0x0800af06

08008d38 <__ratio>:
 8008d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d3c:	b085      	sub	sp, #20
 8008d3e:	e9cd 1000 	strd	r1, r0, [sp]
 8008d42:	a902      	add	r1, sp, #8
 8008d44:	f7ff ff56 	bl	8008bf4 <__b2d>
 8008d48:	9800      	ldr	r0, [sp, #0]
 8008d4a:	a903      	add	r1, sp, #12
 8008d4c:	ec55 4b10 	vmov	r4, r5, d0
 8008d50:	f7ff ff50 	bl	8008bf4 <__b2d>
 8008d54:	9b01      	ldr	r3, [sp, #4]
 8008d56:	6919      	ldr	r1, [r3, #16]
 8008d58:	9b00      	ldr	r3, [sp, #0]
 8008d5a:	691b      	ldr	r3, [r3, #16]
 8008d5c:	1ac9      	subs	r1, r1, r3
 8008d5e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008d62:	1a9b      	subs	r3, r3, r2
 8008d64:	ec5b ab10 	vmov	sl, fp, d0
 8008d68:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	bfce      	itee	gt
 8008d70:	462a      	movgt	r2, r5
 8008d72:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008d76:	465a      	movle	r2, fp
 8008d78:	462f      	mov	r7, r5
 8008d7a:	46d9      	mov	r9, fp
 8008d7c:	bfcc      	ite	gt
 8008d7e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008d82:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008d86:	464b      	mov	r3, r9
 8008d88:	4652      	mov	r2, sl
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	4639      	mov	r1, r7
 8008d8e:	f7f7 fd85 	bl	800089c <__aeabi_ddiv>
 8008d92:	ec41 0b10 	vmov	d0, r0, r1
 8008d96:	b005      	add	sp, #20
 8008d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008d9c <__copybits>:
 8008d9c:	3901      	subs	r1, #1
 8008d9e:	b570      	push	{r4, r5, r6, lr}
 8008da0:	1149      	asrs	r1, r1, #5
 8008da2:	6914      	ldr	r4, [r2, #16]
 8008da4:	3101      	adds	r1, #1
 8008da6:	f102 0314 	add.w	r3, r2, #20
 8008daa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008dae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008db2:	1f05      	subs	r5, r0, #4
 8008db4:	42a3      	cmp	r3, r4
 8008db6:	d30c      	bcc.n	8008dd2 <__copybits+0x36>
 8008db8:	1aa3      	subs	r3, r4, r2
 8008dba:	3b11      	subs	r3, #17
 8008dbc:	f023 0303 	bic.w	r3, r3, #3
 8008dc0:	3211      	adds	r2, #17
 8008dc2:	42a2      	cmp	r2, r4
 8008dc4:	bf88      	it	hi
 8008dc6:	2300      	movhi	r3, #0
 8008dc8:	4418      	add	r0, r3
 8008dca:	2300      	movs	r3, #0
 8008dcc:	4288      	cmp	r0, r1
 8008dce:	d305      	bcc.n	8008ddc <__copybits+0x40>
 8008dd0:	bd70      	pop	{r4, r5, r6, pc}
 8008dd2:	f853 6b04 	ldr.w	r6, [r3], #4
 8008dd6:	f845 6f04 	str.w	r6, [r5, #4]!
 8008dda:	e7eb      	b.n	8008db4 <__copybits+0x18>
 8008ddc:	f840 3b04 	str.w	r3, [r0], #4
 8008de0:	e7f4      	b.n	8008dcc <__copybits+0x30>

08008de2 <__any_on>:
 8008de2:	f100 0214 	add.w	r2, r0, #20
 8008de6:	6900      	ldr	r0, [r0, #16]
 8008de8:	114b      	asrs	r3, r1, #5
 8008dea:	4298      	cmp	r0, r3
 8008dec:	b510      	push	{r4, lr}
 8008dee:	db11      	blt.n	8008e14 <__any_on+0x32>
 8008df0:	dd0a      	ble.n	8008e08 <__any_on+0x26>
 8008df2:	f011 011f 	ands.w	r1, r1, #31
 8008df6:	d007      	beq.n	8008e08 <__any_on+0x26>
 8008df8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008dfc:	fa24 f001 	lsr.w	r0, r4, r1
 8008e00:	fa00 f101 	lsl.w	r1, r0, r1
 8008e04:	428c      	cmp	r4, r1
 8008e06:	d10b      	bne.n	8008e20 <__any_on+0x3e>
 8008e08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d803      	bhi.n	8008e18 <__any_on+0x36>
 8008e10:	2000      	movs	r0, #0
 8008e12:	bd10      	pop	{r4, pc}
 8008e14:	4603      	mov	r3, r0
 8008e16:	e7f7      	b.n	8008e08 <__any_on+0x26>
 8008e18:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008e1c:	2900      	cmp	r1, #0
 8008e1e:	d0f5      	beq.n	8008e0c <__any_on+0x2a>
 8008e20:	2001      	movs	r0, #1
 8008e22:	e7f6      	b.n	8008e12 <__any_on+0x30>

08008e24 <sulp>:
 8008e24:	b570      	push	{r4, r5, r6, lr}
 8008e26:	4604      	mov	r4, r0
 8008e28:	460d      	mov	r5, r1
 8008e2a:	ec45 4b10 	vmov	d0, r4, r5
 8008e2e:	4616      	mov	r6, r2
 8008e30:	f7ff feba 	bl	8008ba8 <__ulp>
 8008e34:	ec51 0b10 	vmov	r0, r1, d0
 8008e38:	b17e      	cbz	r6, 8008e5a <sulp+0x36>
 8008e3a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008e3e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	dd09      	ble.n	8008e5a <sulp+0x36>
 8008e46:	051b      	lsls	r3, r3, #20
 8008e48:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008e4c:	2400      	movs	r4, #0
 8008e4e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008e52:	4622      	mov	r2, r4
 8008e54:	462b      	mov	r3, r5
 8008e56:	f7f7 fbf7 	bl	8000648 <__aeabi_dmul>
 8008e5a:	ec41 0b10 	vmov	d0, r0, r1
 8008e5e:	bd70      	pop	{r4, r5, r6, pc}

08008e60 <_strtod_l>:
 8008e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e64:	b09f      	sub	sp, #124	@ 0x7c
 8008e66:	460c      	mov	r4, r1
 8008e68:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	921a      	str	r2, [sp, #104]	@ 0x68
 8008e6e:	9005      	str	r0, [sp, #20]
 8008e70:	f04f 0a00 	mov.w	sl, #0
 8008e74:	f04f 0b00 	mov.w	fp, #0
 8008e78:	460a      	mov	r2, r1
 8008e7a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008e7c:	7811      	ldrb	r1, [r2, #0]
 8008e7e:	292b      	cmp	r1, #43	@ 0x2b
 8008e80:	d04a      	beq.n	8008f18 <_strtod_l+0xb8>
 8008e82:	d838      	bhi.n	8008ef6 <_strtod_l+0x96>
 8008e84:	290d      	cmp	r1, #13
 8008e86:	d832      	bhi.n	8008eee <_strtod_l+0x8e>
 8008e88:	2908      	cmp	r1, #8
 8008e8a:	d832      	bhi.n	8008ef2 <_strtod_l+0x92>
 8008e8c:	2900      	cmp	r1, #0
 8008e8e:	d03b      	beq.n	8008f08 <_strtod_l+0xa8>
 8008e90:	2200      	movs	r2, #0
 8008e92:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008e94:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008e96:	782a      	ldrb	r2, [r5, #0]
 8008e98:	2a30      	cmp	r2, #48	@ 0x30
 8008e9a:	f040 80b3 	bne.w	8009004 <_strtod_l+0x1a4>
 8008e9e:	786a      	ldrb	r2, [r5, #1]
 8008ea0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008ea4:	2a58      	cmp	r2, #88	@ 0x58
 8008ea6:	d16e      	bne.n	8008f86 <_strtod_l+0x126>
 8008ea8:	9302      	str	r3, [sp, #8]
 8008eaa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008eac:	9301      	str	r3, [sp, #4]
 8008eae:	ab1a      	add	r3, sp, #104	@ 0x68
 8008eb0:	9300      	str	r3, [sp, #0]
 8008eb2:	4a8e      	ldr	r2, [pc, #568]	@ (80090ec <_strtod_l+0x28c>)
 8008eb4:	9805      	ldr	r0, [sp, #20]
 8008eb6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008eb8:	a919      	add	r1, sp, #100	@ 0x64
 8008eba:	f001 fadf 	bl	800a47c <__gethex>
 8008ebe:	f010 060f 	ands.w	r6, r0, #15
 8008ec2:	4604      	mov	r4, r0
 8008ec4:	d005      	beq.n	8008ed2 <_strtod_l+0x72>
 8008ec6:	2e06      	cmp	r6, #6
 8008ec8:	d128      	bne.n	8008f1c <_strtod_l+0xbc>
 8008eca:	3501      	adds	r5, #1
 8008ecc:	2300      	movs	r3, #0
 8008ece:	9519      	str	r5, [sp, #100]	@ 0x64
 8008ed0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ed2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	f040 858e 	bne.w	80099f6 <_strtod_l+0xb96>
 8008eda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008edc:	b1cb      	cbz	r3, 8008f12 <_strtod_l+0xb2>
 8008ede:	4652      	mov	r2, sl
 8008ee0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008ee4:	ec43 2b10 	vmov	d0, r2, r3
 8008ee8:	b01f      	add	sp, #124	@ 0x7c
 8008eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eee:	2920      	cmp	r1, #32
 8008ef0:	d1ce      	bne.n	8008e90 <_strtod_l+0x30>
 8008ef2:	3201      	adds	r2, #1
 8008ef4:	e7c1      	b.n	8008e7a <_strtod_l+0x1a>
 8008ef6:	292d      	cmp	r1, #45	@ 0x2d
 8008ef8:	d1ca      	bne.n	8008e90 <_strtod_l+0x30>
 8008efa:	2101      	movs	r1, #1
 8008efc:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008efe:	1c51      	adds	r1, r2, #1
 8008f00:	9119      	str	r1, [sp, #100]	@ 0x64
 8008f02:	7852      	ldrb	r2, [r2, #1]
 8008f04:	2a00      	cmp	r2, #0
 8008f06:	d1c5      	bne.n	8008e94 <_strtod_l+0x34>
 8008f08:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008f0a:	9419      	str	r4, [sp, #100]	@ 0x64
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	f040 8570 	bne.w	80099f2 <_strtod_l+0xb92>
 8008f12:	4652      	mov	r2, sl
 8008f14:	465b      	mov	r3, fp
 8008f16:	e7e5      	b.n	8008ee4 <_strtod_l+0x84>
 8008f18:	2100      	movs	r1, #0
 8008f1a:	e7ef      	b.n	8008efc <_strtod_l+0x9c>
 8008f1c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008f1e:	b13a      	cbz	r2, 8008f30 <_strtod_l+0xd0>
 8008f20:	2135      	movs	r1, #53	@ 0x35
 8008f22:	a81c      	add	r0, sp, #112	@ 0x70
 8008f24:	f7ff ff3a 	bl	8008d9c <__copybits>
 8008f28:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008f2a:	9805      	ldr	r0, [sp, #20]
 8008f2c:	f7ff fb08 	bl	8008540 <_Bfree>
 8008f30:	3e01      	subs	r6, #1
 8008f32:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008f34:	2e04      	cmp	r6, #4
 8008f36:	d806      	bhi.n	8008f46 <_strtod_l+0xe6>
 8008f38:	e8df f006 	tbb	[pc, r6]
 8008f3c:	201d0314 	.word	0x201d0314
 8008f40:	14          	.byte	0x14
 8008f41:	00          	.byte	0x00
 8008f42:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008f46:	05e1      	lsls	r1, r4, #23
 8008f48:	bf48      	it	mi
 8008f4a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008f4e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008f52:	0d1b      	lsrs	r3, r3, #20
 8008f54:	051b      	lsls	r3, r3, #20
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d1bb      	bne.n	8008ed2 <_strtod_l+0x72>
 8008f5a:	f7fe fb21 	bl	80075a0 <__errno>
 8008f5e:	2322      	movs	r3, #34	@ 0x22
 8008f60:	6003      	str	r3, [r0, #0]
 8008f62:	e7b6      	b.n	8008ed2 <_strtod_l+0x72>
 8008f64:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008f68:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008f6c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008f70:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008f74:	e7e7      	b.n	8008f46 <_strtod_l+0xe6>
 8008f76:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80090f4 <_strtod_l+0x294>
 8008f7a:	e7e4      	b.n	8008f46 <_strtod_l+0xe6>
 8008f7c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008f80:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8008f84:	e7df      	b.n	8008f46 <_strtod_l+0xe6>
 8008f86:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f88:	1c5a      	adds	r2, r3, #1
 8008f8a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008f8c:	785b      	ldrb	r3, [r3, #1]
 8008f8e:	2b30      	cmp	r3, #48	@ 0x30
 8008f90:	d0f9      	beq.n	8008f86 <_strtod_l+0x126>
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d09d      	beq.n	8008ed2 <_strtod_l+0x72>
 8008f96:	2301      	movs	r3, #1
 8008f98:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f9c:	930c      	str	r3, [sp, #48]	@ 0x30
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	9308      	str	r3, [sp, #32]
 8008fa2:	930a      	str	r3, [sp, #40]	@ 0x28
 8008fa4:	461f      	mov	r7, r3
 8008fa6:	220a      	movs	r2, #10
 8008fa8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008faa:	7805      	ldrb	r5, [r0, #0]
 8008fac:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008fb0:	b2d9      	uxtb	r1, r3
 8008fb2:	2909      	cmp	r1, #9
 8008fb4:	d928      	bls.n	8009008 <_strtod_l+0x1a8>
 8008fb6:	494e      	ldr	r1, [pc, #312]	@ (80090f0 <_strtod_l+0x290>)
 8008fb8:	2201      	movs	r2, #1
 8008fba:	f001 f979 	bl	800a2b0 <strncmp>
 8008fbe:	2800      	cmp	r0, #0
 8008fc0:	d032      	beq.n	8009028 <_strtod_l+0x1c8>
 8008fc2:	2000      	movs	r0, #0
 8008fc4:	462a      	mov	r2, r5
 8008fc6:	4681      	mov	r9, r0
 8008fc8:	463d      	mov	r5, r7
 8008fca:	4603      	mov	r3, r0
 8008fcc:	2a65      	cmp	r2, #101	@ 0x65
 8008fce:	d001      	beq.n	8008fd4 <_strtod_l+0x174>
 8008fd0:	2a45      	cmp	r2, #69	@ 0x45
 8008fd2:	d114      	bne.n	8008ffe <_strtod_l+0x19e>
 8008fd4:	b91d      	cbnz	r5, 8008fde <_strtod_l+0x17e>
 8008fd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008fd8:	4302      	orrs	r2, r0
 8008fda:	d095      	beq.n	8008f08 <_strtod_l+0xa8>
 8008fdc:	2500      	movs	r5, #0
 8008fde:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008fe0:	1c62      	adds	r2, r4, #1
 8008fe2:	9219      	str	r2, [sp, #100]	@ 0x64
 8008fe4:	7862      	ldrb	r2, [r4, #1]
 8008fe6:	2a2b      	cmp	r2, #43	@ 0x2b
 8008fe8:	d077      	beq.n	80090da <_strtod_l+0x27a>
 8008fea:	2a2d      	cmp	r2, #45	@ 0x2d
 8008fec:	d07b      	beq.n	80090e6 <_strtod_l+0x286>
 8008fee:	f04f 0c00 	mov.w	ip, #0
 8008ff2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008ff6:	2909      	cmp	r1, #9
 8008ff8:	f240 8082 	bls.w	8009100 <_strtod_l+0x2a0>
 8008ffc:	9419      	str	r4, [sp, #100]	@ 0x64
 8008ffe:	f04f 0800 	mov.w	r8, #0
 8009002:	e0a2      	b.n	800914a <_strtod_l+0x2ea>
 8009004:	2300      	movs	r3, #0
 8009006:	e7c7      	b.n	8008f98 <_strtod_l+0x138>
 8009008:	2f08      	cmp	r7, #8
 800900a:	bfd5      	itete	le
 800900c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800900e:	9908      	ldrgt	r1, [sp, #32]
 8009010:	fb02 3301 	mlale	r3, r2, r1, r3
 8009014:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009018:	f100 0001 	add.w	r0, r0, #1
 800901c:	bfd4      	ite	le
 800901e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009020:	9308      	strgt	r3, [sp, #32]
 8009022:	3701      	adds	r7, #1
 8009024:	9019      	str	r0, [sp, #100]	@ 0x64
 8009026:	e7bf      	b.n	8008fa8 <_strtod_l+0x148>
 8009028:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800902a:	1c5a      	adds	r2, r3, #1
 800902c:	9219      	str	r2, [sp, #100]	@ 0x64
 800902e:	785a      	ldrb	r2, [r3, #1]
 8009030:	b37f      	cbz	r7, 8009092 <_strtod_l+0x232>
 8009032:	4681      	mov	r9, r0
 8009034:	463d      	mov	r5, r7
 8009036:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800903a:	2b09      	cmp	r3, #9
 800903c:	d912      	bls.n	8009064 <_strtod_l+0x204>
 800903e:	2301      	movs	r3, #1
 8009040:	e7c4      	b.n	8008fcc <_strtod_l+0x16c>
 8009042:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009044:	1c5a      	adds	r2, r3, #1
 8009046:	9219      	str	r2, [sp, #100]	@ 0x64
 8009048:	785a      	ldrb	r2, [r3, #1]
 800904a:	3001      	adds	r0, #1
 800904c:	2a30      	cmp	r2, #48	@ 0x30
 800904e:	d0f8      	beq.n	8009042 <_strtod_l+0x1e2>
 8009050:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009054:	2b08      	cmp	r3, #8
 8009056:	f200 84d3 	bhi.w	8009a00 <_strtod_l+0xba0>
 800905a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800905c:	930c      	str	r3, [sp, #48]	@ 0x30
 800905e:	4681      	mov	r9, r0
 8009060:	2000      	movs	r0, #0
 8009062:	4605      	mov	r5, r0
 8009064:	3a30      	subs	r2, #48	@ 0x30
 8009066:	f100 0301 	add.w	r3, r0, #1
 800906a:	d02a      	beq.n	80090c2 <_strtod_l+0x262>
 800906c:	4499      	add	r9, r3
 800906e:	eb00 0c05 	add.w	ip, r0, r5
 8009072:	462b      	mov	r3, r5
 8009074:	210a      	movs	r1, #10
 8009076:	4563      	cmp	r3, ip
 8009078:	d10d      	bne.n	8009096 <_strtod_l+0x236>
 800907a:	1c69      	adds	r1, r5, #1
 800907c:	4401      	add	r1, r0
 800907e:	4428      	add	r0, r5
 8009080:	2808      	cmp	r0, #8
 8009082:	dc16      	bgt.n	80090b2 <_strtod_l+0x252>
 8009084:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009086:	230a      	movs	r3, #10
 8009088:	fb03 2300 	mla	r3, r3, r0, r2
 800908c:	930a      	str	r3, [sp, #40]	@ 0x28
 800908e:	2300      	movs	r3, #0
 8009090:	e018      	b.n	80090c4 <_strtod_l+0x264>
 8009092:	4638      	mov	r0, r7
 8009094:	e7da      	b.n	800904c <_strtod_l+0x1ec>
 8009096:	2b08      	cmp	r3, #8
 8009098:	f103 0301 	add.w	r3, r3, #1
 800909c:	dc03      	bgt.n	80090a6 <_strtod_l+0x246>
 800909e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80090a0:	434e      	muls	r6, r1
 80090a2:	960a      	str	r6, [sp, #40]	@ 0x28
 80090a4:	e7e7      	b.n	8009076 <_strtod_l+0x216>
 80090a6:	2b10      	cmp	r3, #16
 80090a8:	bfde      	ittt	le
 80090aa:	9e08      	ldrle	r6, [sp, #32]
 80090ac:	434e      	mulle	r6, r1
 80090ae:	9608      	strle	r6, [sp, #32]
 80090b0:	e7e1      	b.n	8009076 <_strtod_l+0x216>
 80090b2:	280f      	cmp	r0, #15
 80090b4:	dceb      	bgt.n	800908e <_strtod_l+0x22e>
 80090b6:	9808      	ldr	r0, [sp, #32]
 80090b8:	230a      	movs	r3, #10
 80090ba:	fb03 2300 	mla	r3, r3, r0, r2
 80090be:	9308      	str	r3, [sp, #32]
 80090c0:	e7e5      	b.n	800908e <_strtod_l+0x22e>
 80090c2:	4629      	mov	r1, r5
 80090c4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80090c6:	1c50      	adds	r0, r2, #1
 80090c8:	9019      	str	r0, [sp, #100]	@ 0x64
 80090ca:	7852      	ldrb	r2, [r2, #1]
 80090cc:	4618      	mov	r0, r3
 80090ce:	460d      	mov	r5, r1
 80090d0:	e7b1      	b.n	8009036 <_strtod_l+0x1d6>
 80090d2:	f04f 0900 	mov.w	r9, #0
 80090d6:	2301      	movs	r3, #1
 80090d8:	e77d      	b.n	8008fd6 <_strtod_l+0x176>
 80090da:	f04f 0c00 	mov.w	ip, #0
 80090de:	1ca2      	adds	r2, r4, #2
 80090e0:	9219      	str	r2, [sp, #100]	@ 0x64
 80090e2:	78a2      	ldrb	r2, [r4, #2]
 80090e4:	e785      	b.n	8008ff2 <_strtod_l+0x192>
 80090e6:	f04f 0c01 	mov.w	ip, #1
 80090ea:	e7f8      	b.n	80090de <_strtod_l+0x27e>
 80090ec:	0800b078 	.word	0x0800b078
 80090f0:	0800b060 	.word	0x0800b060
 80090f4:	7ff00000 	.word	0x7ff00000
 80090f8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80090fa:	1c51      	adds	r1, r2, #1
 80090fc:	9119      	str	r1, [sp, #100]	@ 0x64
 80090fe:	7852      	ldrb	r2, [r2, #1]
 8009100:	2a30      	cmp	r2, #48	@ 0x30
 8009102:	d0f9      	beq.n	80090f8 <_strtod_l+0x298>
 8009104:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009108:	2908      	cmp	r1, #8
 800910a:	f63f af78 	bhi.w	8008ffe <_strtod_l+0x19e>
 800910e:	3a30      	subs	r2, #48	@ 0x30
 8009110:	920e      	str	r2, [sp, #56]	@ 0x38
 8009112:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009114:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009116:	f04f 080a 	mov.w	r8, #10
 800911a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800911c:	1c56      	adds	r6, r2, #1
 800911e:	9619      	str	r6, [sp, #100]	@ 0x64
 8009120:	7852      	ldrb	r2, [r2, #1]
 8009122:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009126:	f1be 0f09 	cmp.w	lr, #9
 800912a:	d939      	bls.n	80091a0 <_strtod_l+0x340>
 800912c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800912e:	1a76      	subs	r6, r6, r1
 8009130:	2e08      	cmp	r6, #8
 8009132:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009136:	dc03      	bgt.n	8009140 <_strtod_l+0x2e0>
 8009138:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800913a:	4588      	cmp	r8, r1
 800913c:	bfa8      	it	ge
 800913e:	4688      	movge	r8, r1
 8009140:	f1bc 0f00 	cmp.w	ip, #0
 8009144:	d001      	beq.n	800914a <_strtod_l+0x2ea>
 8009146:	f1c8 0800 	rsb	r8, r8, #0
 800914a:	2d00      	cmp	r5, #0
 800914c:	d14e      	bne.n	80091ec <_strtod_l+0x38c>
 800914e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009150:	4308      	orrs	r0, r1
 8009152:	f47f aebe 	bne.w	8008ed2 <_strtod_l+0x72>
 8009156:	2b00      	cmp	r3, #0
 8009158:	f47f aed6 	bne.w	8008f08 <_strtod_l+0xa8>
 800915c:	2a69      	cmp	r2, #105	@ 0x69
 800915e:	d028      	beq.n	80091b2 <_strtod_l+0x352>
 8009160:	dc25      	bgt.n	80091ae <_strtod_l+0x34e>
 8009162:	2a49      	cmp	r2, #73	@ 0x49
 8009164:	d025      	beq.n	80091b2 <_strtod_l+0x352>
 8009166:	2a4e      	cmp	r2, #78	@ 0x4e
 8009168:	f47f aece 	bne.w	8008f08 <_strtod_l+0xa8>
 800916c:	499b      	ldr	r1, [pc, #620]	@ (80093dc <_strtod_l+0x57c>)
 800916e:	a819      	add	r0, sp, #100	@ 0x64
 8009170:	f001 fba6 	bl	800a8c0 <__match>
 8009174:	2800      	cmp	r0, #0
 8009176:	f43f aec7 	beq.w	8008f08 <_strtod_l+0xa8>
 800917a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	2b28      	cmp	r3, #40	@ 0x28
 8009180:	d12e      	bne.n	80091e0 <_strtod_l+0x380>
 8009182:	4997      	ldr	r1, [pc, #604]	@ (80093e0 <_strtod_l+0x580>)
 8009184:	aa1c      	add	r2, sp, #112	@ 0x70
 8009186:	a819      	add	r0, sp, #100	@ 0x64
 8009188:	f001 fbae 	bl	800a8e8 <__hexnan>
 800918c:	2805      	cmp	r0, #5
 800918e:	d127      	bne.n	80091e0 <_strtod_l+0x380>
 8009190:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009192:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009196:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800919a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800919e:	e698      	b.n	8008ed2 <_strtod_l+0x72>
 80091a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80091a2:	fb08 2101 	mla	r1, r8, r1, r2
 80091a6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80091aa:	920e      	str	r2, [sp, #56]	@ 0x38
 80091ac:	e7b5      	b.n	800911a <_strtod_l+0x2ba>
 80091ae:	2a6e      	cmp	r2, #110	@ 0x6e
 80091b0:	e7da      	b.n	8009168 <_strtod_l+0x308>
 80091b2:	498c      	ldr	r1, [pc, #560]	@ (80093e4 <_strtod_l+0x584>)
 80091b4:	a819      	add	r0, sp, #100	@ 0x64
 80091b6:	f001 fb83 	bl	800a8c0 <__match>
 80091ba:	2800      	cmp	r0, #0
 80091bc:	f43f aea4 	beq.w	8008f08 <_strtod_l+0xa8>
 80091c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80091c2:	4989      	ldr	r1, [pc, #548]	@ (80093e8 <_strtod_l+0x588>)
 80091c4:	3b01      	subs	r3, #1
 80091c6:	a819      	add	r0, sp, #100	@ 0x64
 80091c8:	9319      	str	r3, [sp, #100]	@ 0x64
 80091ca:	f001 fb79 	bl	800a8c0 <__match>
 80091ce:	b910      	cbnz	r0, 80091d6 <_strtod_l+0x376>
 80091d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80091d2:	3301      	adds	r3, #1
 80091d4:	9319      	str	r3, [sp, #100]	@ 0x64
 80091d6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80093f8 <_strtod_l+0x598>
 80091da:	f04f 0a00 	mov.w	sl, #0
 80091de:	e678      	b.n	8008ed2 <_strtod_l+0x72>
 80091e0:	4882      	ldr	r0, [pc, #520]	@ (80093ec <_strtod_l+0x58c>)
 80091e2:	f001 f8a9 	bl	800a338 <nan>
 80091e6:	ec5b ab10 	vmov	sl, fp, d0
 80091ea:	e672      	b.n	8008ed2 <_strtod_l+0x72>
 80091ec:	eba8 0309 	sub.w	r3, r8, r9
 80091f0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80091f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80091f4:	2f00      	cmp	r7, #0
 80091f6:	bf08      	it	eq
 80091f8:	462f      	moveq	r7, r5
 80091fa:	2d10      	cmp	r5, #16
 80091fc:	462c      	mov	r4, r5
 80091fe:	bfa8      	it	ge
 8009200:	2410      	movge	r4, #16
 8009202:	f7f7 f9a7 	bl	8000554 <__aeabi_ui2d>
 8009206:	2d09      	cmp	r5, #9
 8009208:	4682      	mov	sl, r0
 800920a:	468b      	mov	fp, r1
 800920c:	dc13      	bgt.n	8009236 <_strtod_l+0x3d6>
 800920e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009210:	2b00      	cmp	r3, #0
 8009212:	f43f ae5e 	beq.w	8008ed2 <_strtod_l+0x72>
 8009216:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009218:	dd78      	ble.n	800930c <_strtod_l+0x4ac>
 800921a:	2b16      	cmp	r3, #22
 800921c:	dc5f      	bgt.n	80092de <_strtod_l+0x47e>
 800921e:	4974      	ldr	r1, [pc, #464]	@ (80093f0 <_strtod_l+0x590>)
 8009220:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009224:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009228:	4652      	mov	r2, sl
 800922a:	465b      	mov	r3, fp
 800922c:	f7f7 fa0c 	bl	8000648 <__aeabi_dmul>
 8009230:	4682      	mov	sl, r0
 8009232:	468b      	mov	fp, r1
 8009234:	e64d      	b.n	8008ed2 <_strtod_l+0x72>
 8009236:	4b6e      	ldr	r3, [pc, #440]	@ (80093f0 <_strtod_l+0x590>)
 8009238:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800923c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009240:	f7f7 fa02 	bl	8000648 <__aeabi_dmul>
 8009244:	4682      	mov	sl, r0
 8009246:	9808      	ldr	r0, [sp, #32]
 8009248:	468b      	mov	fp, r1
 800924a:	f7f7 f983 	bl	8000554 <__aeabi_ui2d>
 800924e:	4602      	mov	r2, r0
 8009250:	460b      	mov	r3, r1
 8009252:	4650      	mov	r0, sl
 8009254:	4659      	mov	r1, fp
 8009256:	f7f7 f841 	bl	80002dc <__adddf3>
 800925a:	2d0f      	cmp	r5, #15
 800925c:	4682      	mov	sl, r0
 800925e:	468b      	mov	fp, r1
 8009260:	ddd5      	ble.n	800920e <_strtod_l+0x3ae>
 8009262:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009264:	1b2c      	subs	r4, r5, r4
 8009266:	441c      	add	r4, r3
 8009268:	2c00      	cmp	r4, #0
 800926a:	f340 8096 	ble.w	800939a <_strtod_l+0x53a>
 800926e:	f014 030f 	ands.w	r3, r4, #15
 8009272:	d00a      	beq.n	800928a <_strtod_l+0x42a>
 8009274:	495e      	ldr	r1, [pc, #376]	@ (80093f0 <_strtod_l+0x590>)
 8009276:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800927a:	4652      	mov	r2, sl
 800927c:	465b      	mov	r3, fp
 800927e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009282:	f7f7 f9e1 	bl	8000648 <__aeabi_dmul>
 8009286:	4682      	mov	sl, r0
 8009288:	468b      	mov	fp, r1
 800928a:	f034 040f 	bics.w	r4, r4, #15
 800928e:	d073      	beq.n	8009378 <_strtod_l+0x518>
 8009290:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009294:	dd48      	ble.n	8009328 <_strtod_l+0x4c8>
 8009296:	2400      	movs	r4, #0
 8009298:	46a0      	mov	r8, r4
 800929a:	940a      	str	r4, [sp, #40]	@ 0x28
 800929c:	46a1      	mov	r9, r4
 800929e:	9a05      	ldr	r2, [sp, #20]
 80092a0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80093f8 <_strtod_l+0x598>
 80092a4:	2322      	movs	r3, #34	@ 0x22
 80092a6:	6013      	str	r3, [r2, #0]
 80092a8:	f04f 0a00 	mov.w	sl, #0
 80092ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	f43f ae0f 	beq.w	8008ed2 <_strtod_l+0x72>
 80092b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80092b6:	9805      	ldr	r0, [sp, #20]
 80092b8:	f7ff f942 	bl	8008540 <_Bfree>
 80092bc:	9805      	ldr	r0, [sp, #20]
 80092be:	4649      	mov	r1, r9
 80092c0:	f7ff f93e 	bl	8008540 <_Bfree>
 80092c4:	9805      	ldr	r0, [sp, #20]
 80092c6:	4641      	mov	r1, r8
 80092c8:	f7ff f93a 	bl	8008540 <_Bfree>
 80092cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80092ce:	9805      	ldr	r0, [sp, #20]
 80092d0:	f7ff f936 	bl	8008540 <_Bfree>
 80092d4:	9805      	ldr	r0, [sp, #20]
 80092d6:	4621      	mov	r1, r4
 80092d8:	f7ff f932 	bl	8008540 <_Bfree>
 80092dc:	e5f9      	b.n	8008ed2 <_strtod_l+0x72>
 80092de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092e0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80092e4:	4293      	cmp	r3, r2
 80092e6:	dbbc      	blt.n	8009262 <_strtod_l+0x402>
 80092e8:	4c41      	ldr	r4, [pc, #260]	@ (80093f0 <_strtod_l+0x590>)
 80092ea:	f1c5 050f 	rsb	r5, r5, #15
 80092ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80092f2:	4652      	mov	r2, sl
 80092f4:	465b      	mov	r3, fp
 80092f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092fa:	f7f7 f9a5 	bl	8000648 <__aeabi_dmul>
 80092fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009300:	1b5d      	subs	r5, r3, r5
 8009302:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009306:	e9d4 2300 	ldrd	r2, r3, [r4]
 800930a:	e78f      	b.n	800922c <_strtod_l+0x3cc>
 800930c:	3316      	adds	r3, #22
 800930e:	dba8      	blt.n	8009262 <_strtod_l+0x402>
 8009310:	4b37      	ldr	r3, [pc, #220]	@ (80093f0 <_strtod_l+0x590>)
 8009312:	eba9 0808 	sub.w	r8, r9, r8
 8009316:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800931a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800931e:	4650      	mov	r0, sl
 8009320:	4659      	mov	r1, fp
 8009322:	f7f7 fabb 	bl	800089c <__aeabi_ddiv>
 8009326:	e783      	b.n	8009230 <_strtod_l+0x3d0>
 8009328:	4b32      	ldr	r3, [pc, #200]	@ (80093f4 <_strtod_l+0x594>)
 800932a:	9308      	str	r3, [sp, #32]
 800932c:	2300      	movs	r3, #0
 800932e:	1124      	asrs	r4, r4, #4
 8009330:	4650      	mov	r0, sl
 8009332:	4659      	mov	r1, fp
 8009334:	461e      	mov	r6, r3
 8009336:	2c01      	cmp	r4, #1
 8009338:	dc21      	bgt.n	800937e <_strtod_l+0x51e>
 800933a:	b10b      	cbz	r3, 8009340 <_strtod_l+0x4e0>
 800933c:	4682      	mov	sl, r0
 800933e:	468b      	mov	fp, r1
 8009340:	492c      	ldr	r1, [pc, #176]	@ (80093f4 <_strtod_l+0x594>)
 8009342:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009346:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800934a:	4652      	mov	r2, sl
 800934c:	465b      	mov	r3, fp
 800934e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009352:	f7f7 f979 	bl	8000648 <__aeabi_dmul>
 8009356:	4b28      	ldr	r3, [pc, #160]	@ (80093f8 <_strtod_l+0x598>)
 8009358:	460a      	mov	r2, r1
 800935a:	400b      	ands	r3, r1
 800935c:	4927      	ldr	r1, [pc, #156]	@ (80093fc <_strtod_l+0x59c>)
 800935e:	428b      	cmp	r3, r1
 8009360:	4682      	mov	sl, r0
 8009362:	d898      	bhi.n	8009296 <_strtod_l+0x436>
 8009364:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009368:	428b      	cmp	r3, r1
 800936a:	bf86      	itte	hi
 800936c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009400 <_strtod_l+0x5a0>
 8009370:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8009374:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009378:	2300      	movs	r3, #0
 800937a:	9308      	str	r3, [sp, #32]
 800937c:	e07a      	b.n	8009474 <_strtod_l+0x614>
 800937e:	07e2      	lsls	r2, r4, #31
 8009380:	d505      	bpl.n	800938e <_strtod_l+0x52e>
 8009382:	9b08      	ldr	r3, [sp, #32]
 8009384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009388:	f7f7 f95e 	bl	8000648 <__aeabi_dmul>
 800938c:	2301      	movs	r3, #1
 800938e:	9a08      	ldr	r2, [sp, #32]
 8009390:	3208      	adds	r2, #8
 8009392:	3601      	adds	r6, #1
 8009394:	1064      	asrs	r4, r4, #1
 8009396:	9208      	str	r2, [sp, #32]
 8009398:	e7cd      	b.n	8009336 <_strtod_l+0x4d6>
 800939a:	d0ed      	beq.n	8009378 <_strtod_l+0x518>
 800939c:	4264      	negs	r4, r4
 800939e:	f014 020f 	ands.w	r2, r4, #15
 80093a2:	d00a      	beq.n	80093ba <_strtod_l+0x55a>
 80093a4:	4b12      	ldr	r3, [pc, #72]	@ (80093f0 <_strtod_l+0x590>)
 80093a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093aa:	4650      	mov	r0, sl
 80093ac:	4659      	mov	r1, fp
 80093ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b2:	f7f7 fa73 	bl	800089c <__aeabi_ddiv>
 80093b6:	4682      	mov	sl, r0
 80093b8:	468b      	mov	fp, r1
 80093ba:	1124      	asrs	r4, r4, #4
 80093bc:	d0dc      	beq.n	8009378 <_strtod_l+0x518>
 80093be:	2c1f      	cmp	r4, #31
 80093c0:	dd20      	ble.n	8009404 <_strtod_l+0x5a4>
 80093c2:	2400      	movs	r4, #0
 80093c4:	46a0      	mov	r8, r4
 80093c6:	940a      	str	r4, [sp, #40]	@ 0x28
 80093c8:	46a1      	mov	r9, r4
 80093ca:	9a05      	ldr	r2, [sp, #20]
 80093cc:	2322      	movs	r3, #34	@ 0x22
 80093ce:	f04f 0a00 	mov.w	sl, #0
 80093d2:	f04f 0b00 	mov.w	fp, #0
 80093d6:	6013      	str	r3, [r2, #0]
 80093d8:	e768      	b.n	80092ac <_strtod_l+0x44c>
 80093da:	bf00      	nop
 80093dc:	0800ae4d 	.word	0x0800ae4d
 80093e0:	0800b064 	.word	0x0800b064
 80093e4:	0800ae45 	.word	0x0800ae45
 80093e8:	0800ae7c 	.word	0x0800ae7c
 80093ec:	0800b20d 	.word	0x0800b20d
 80093f0:	0800af98 	.word	0x0800af98
 80093f4:	0800af70 	.word	0x0800af70
 80093f8:	7ff00000 	.word	0x7ff00000
 80093fc:	7ca00000 	.word	0x7ca00000
 8009400:	7fefffff 	.word	0x7fefffff
 8009404:	f014 0310 	ands.w	r3, r4, #16
 8009408:	bf18      	it	ne
 800940a:	236a      	movne	r3, #106	@ 0x6a
 800940c:	4ea9      	ldr	r6, [pc, #676]	@ (80096b4 <_strtod_l+0x854>)
 800940e:	9308      	str	r3, [sp, #32]
 8009410:	4650      	mov	r0, sl
 8009412:	4659      	mov	r1, fp
 8009414:	2300      	movs	r3, #0
 8009416:	07e2      	lsls	r2, r4, #31
 8009418:	d504      	bpl.n	8009424 <_strtod_l+0x5c4>
 800941a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800941e:	f7f7 f913 	bl	8000648 <__aeabi_dmul>
 8009422:	2301      	movs	r3, #1
 8009424:	1064      	asrs	r4, r4, #1
 8009426:	f106 0608 	add.w	r6, r6, #8
 800942a:	d1f4      	bne.n	8009416 <_strtod_l+0x5b6>
 800942c:	b10b      	cbz	r3, 8009432 <_strtod_l+0x5d2>
 800942e:	4682      	mov	sl, r0
 8009430:	468b      	mov	fp, r1
 8009432:	9b08      	ldr	r3, [sp, #32]
 8009434:	b1b3      	cbz	r3, 8009464 <_strtod_l+0x604>
 8009436:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800943a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800943e:	2b00      	cmp	r3, #0
 8009440:	4659      	mov	r1, fp
 8009442:	dd0f      	ble.n	8009464 <_strtod_l+0x604>
 8009444:	2b1f      	cmp	r3, #31
 8009446:	dd55      	ble.n	80094f4 <_strtod_l+0x694>
 8009448:	2b34      	cmp	r3, #52	@ 0x34
 800944a:	bfde      	ittt	le
 800944c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8009450:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009454:	4093      	lslle	r3, r2
 8009456:	f04f 0a00 	mov.w	sl, #0
 800945a:	bfcc      	ite	gt
 800945c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009460:	ea03 0b01 	andle.w	fp, r3, r1
 8009464:	2200      	movs	r2, #0
 8009466:	2300      	movs	r3, #0
 8009468:	4650      	mov	r0, sl
 800946a:	4659      	mov	r1, fp
 800946c:	f7f7 fb54 	bl	8000b18 <__aeabi_dcmpeq>
 8009470:	2800      	cmp	r0, #0
 8009472:	d1a6      	bne.n	80093c2 <_strtod_l+0x562>
 8009474:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009476:	9300      	str	r3, [sp, #0]
 8009478:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800947a:	9805      	ldr	r0, [sp, #20]
 800947c:	462b      	mov	r3, r5
 800947e:	463a      	mov	r2, r7
 8009480:	f7ff f8c6 	bl	8008610 <__s2b>
 8009484:	900a      	str	r0, [sp, #40]	@ 0x28
 8009486:	2800      	cmp	r0, #0
 8009488:	f43f af05 	beq.w	8009296 <_strtod_l+0x436>
 800948c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800948e:	2a00      	cmp	r2, #0
 8009490:	eba9 0308 	sub.w	r3, r9, r8
 8009494:	bfa8      	it	ge
 8009496:	2300      	movge	r3, #0
 8009498:	9312      	str	r3, [sp, #72]	@ 0x48
 800949a:	2400      	movs	r4, #0
 800949c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80094a0:	9316      	str	r3, [sp, #88]	@ 0x58
 80094a2:	46a0      	mov	r8, r4
 80094a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094a6:	9805      	ldr	r0, [sp, #20]
 80094a8:	6859      	ldr	r1, [r3, #4]
 80094aa:	f7ff f809 	bl	80084c0 <_Balloc>
 80094ae:	4681      	mov	r9, r0
 80094b0:	2800      	cmp	r0, #0
 80094b2:	f43f aef4 	beq.w	800929e <_strtod_l+0x43e>
 80094b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094b8:	691a      	ldr	r2, [r3, #16]
 80094ba:	3202      	adds	r2, #2
 80094bc:	f103 010c 	add.w	r1, r3, #12
 80094c0:	0092      	lsls	r2, r2, #2
 80094c2:	300c      	adds	r0, #12
 80094c4:	f7fe f899 	bl	80075fa <memcpy>
 80094c8:	ec4b ab10 	vmov	d0, sl, fp
 80094cc:	9805      	ldr	r0, [sp, #20]
 80094ce:	aa1c      	add	r2, sp, #112	@ 0x70
 80094d0:	a91b      	add	r1, sp, #108	@ 0x6c
 80094d2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80094d6:	f7ff fbd7 	bl	8008c88 <__d2b>
 80094da:	901a      	str	r0, [sp, #104]	@ 0x68
 80094dc:	2800      	cmp	r0, #0
 80094de:	f43f aede 	beq.w	800929e <_strtod_l+0x43e>
 80094e2:	9805      	ldr	r0, [sp, #20]
 80094e4:	2101      	movs	r1, #1
 80094e6:	f7ff f929 	bl	800873c <__i2b>
 80094ea:	4680      	mov	r8, r0
 80094ec:	b948      	cbnz	r0, 8009502 <_strtod_l+0x6a2>
 80094ee:	f04f 0800 	mov.w	r8, #0
 80094f2:	e6d4      	b.n	800929e <_strtod_l+0x43e>
 80094f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80094f8:	fa02 f303 	lsl.w	r3, r2, r3
 80094fc:	ea03 0a0a 	and.w	sl, r3, sl
 8009500:	e7b0      	b.n	8009464 <_strtod_l+0x604>
 8009502:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009504:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009506:	2d00      	cmp	r5, #0
 8009508:	bfab      	itete	ge
 800950a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800950c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800950e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009510:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009512:	bfac      	ite	ge
 8009514:	18ef      	addge	r7, r5, r3
 8009516:	1b5e      	sublt	r6, r3, r5
 8009518:	9b08      	ldr	r3, [sp, #32]
 800951a:	1aed      	subs	r5, r5, r3
 800951c:	4415      	add	r5, r2
 800951e:	4b66      	ldr	r3, [pc, #408]	@ (80096b8 <_strtod_l+0x858>)
 8009520:	3d01      	subs	r5, #1
 8009522:	429d      	cmp	r5, r3
 8009524:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009528:	da50      	bge.n	80095cc <_strtod_l+0x76c>
 800952a:	1b5b      	subs	r3, r3, r5
 800952c:	2b1f      	cmp	r3, #31
 800952e:	eba2 0203 	sub.w	r2, r2, r3
 8009532:	f04f 0101 	mov.w	r1, #1
 8009536:	dc3d      	bgt.n	80095b4 <_strtod_l+0x754>
 8009538:	fa01 f303 	lsl.w	r3, r1, r3
 800953c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800953e:	2300      	movs	r3, #0
 8009540:	9310      	str	r3, [sp, #64]	@ 0x40
 8009542:	18bd      	adds	r5, r7, r2
 8009544:	9b08      	ldr	r3, [sp, #32]
 8009546:	42af      	cmp	r7, r5
 8009548:	4416      	add	r6, r2
 800954a:	441e      	add	r6, r3
 800954c:	463b      	mov	r3, r7
 800954e:	bfa8      	it	ge
 8009550:	462b      	movge	r3, r5
 8009552:	42b3      	cmp	r3, r6
 8009554:	bfa8      	it	ge
 8009556:	4633      	movge	r3, r6
 8009558:	2b00      	cmp	r3, #0
 800955a:	bfc2      	ittt	gt
 800955c:	1aed      	subgt	r5, r5, r3
 800955e:	1af6      	subgt	r6, r6, r3
 8009560:	1aff      	subgt	r7, r7, r3
 8009562:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009564:	2b00      	cmp	r3, #0
 8009566:	dd16      	ble.n	8009596 <_strtod_l+0x736>
 8009568:	4641      	mov	r1, r8
 800956a:	9805      	ldr	r0, [sp, #20]
 800956c:	461a      	mov	r2, r3
 800956e:	f7ff f9a5 	bl	80088bc <__pow5mult>
 8009572:	4680      	mov	r8, r0
 8009574:	2800      	cmp	r0, #0
 8009576:	d0ba      	beq.n	80094ee <_strtod_l+0x68e>
 8009578:	4601      	mov	r1, r0
 800957a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800957c:	9805      	ldr	r0, [sp, #20]
 800957e:	f7ff f8f3 	bl	8008768 <__multiply>
 8009582:	900e      	str	r0, [sp, #56]	@ 0x38
 8009584:	2800      	cmp	r0, #0
 8009586:	f43f ae8a 	beq.w	800929e <_strtod_l+0x43e>
 800958a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800958c:	9805      	ldr	r0, [sp, #20]
 800958e:	f7fe ffd7 	bl	8008540 <_Bfree>
 8009592:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009594:	931a      	str	r3, [sp, #104]	@ 0x68
 8009596:	2d00      	cmp	r5, #0
 8009598:	dc1d      	bgt.n	80095d6 <_strtod_l+0x776>
 800959a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800959c:	2b00      	cmp	r3, #0
 800959e:	dd23      	ble.n	80095e8 <_strtod_l+0x788>
 80095a0:	4649      	mov	r1, r9
 80095a2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80095a4:	9805      	ldr	r0, [sp, #20]
 80095a6:	f7ff f989 	bl	80088bc <__pow5mult>
 80095aa:	4681      	mov	r9, r0
 80095ac:	b9e0      	cbnz	r0, 80095e8 <_strtod_l+0x788>
 80095ae:	f04f 0900 	mov.w	r9, #0
 80095b2:	e674      	b.n	800929e <_strtod_l+0x43e>
 80095b4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80095b8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80095bc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80095c0:	35e2      	adds	r5, #226	@ 0xe2
 80095c2:	fa01 f305 	lsl.w	r3, r1, r5
 80095c6:	9310      	str	r3, [sp, #64]	@ 0x40
 80095c8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80095ca:	e7ba      	b.n	8009542 <_strtod_l+0x6e2>
 80095cc:	2300      	movs	r3, #0
 80095ce:	9310      	str	r3, [sp, #64]	@ 0x40
 80095d0:	2301      	movs	r3, #1
 80095d2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80095d4:	e7b5      	b.n	8009542 <_strtod_l+0x6e2>
 80095d6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80095d8:	9805      	ldr	r0, [sp, #20]
 80095da:	462a      	mov	r2, r5
 80095dc:	f7ff f9c8 	bl	8008970 <__lshift>
 80095e0:	901a      	str	r0, [sp, #104]	@ 0x68
 80095e2:	2800      	cmp	r0, #0
 80095e4:	d1d9      	bne.n	800959a <_strtod_l+0x73a>
 80095e6:	e65a      	b.n	800929e <_strtod_l+0x43e>
 80095e8:	2e00      	cmp	r6, #0
 80095ea:	dd07      	ble.n	80095fc <_strtod_l+0x79c>
 80095ec:	4649      	mov	r1, r9
 80095ee:	9805      	ldr	r0, [sp, #20]
 80095f0:	4632      	mov	r2, r6
 80095f2:	f7ff f9bd 	bl	8008970 <__lshift>
 80095f6:	4681      	mov	r9, r0
 80095f8:	2800      	cmp	r0, #0
 80095fa:	d0d8      	beq.n	80095ae <_strtod_l+0x74e>
 80095fc:	2f00      	cmp	r7, #0
 80095fe:	dd08      	ble.n	8009612 <_strtod_l+0x7b2>
 8009600:	4641      	mov	r1, r8
 8009602:	9805      	ldr	r0, [sp, #20]
 8009604:	463a      	mov	r2, r7
 8009606:	f7ff f9b3 	bl	8008970 <__lshift>
 800960a:	4680      	mov	r8, r0
 800960c:	2800      	cmp	r0, #0
 800960e:	f43f ae46 	beq.w	800929e <_strtod_l+0x43e>
 8009612:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009614:	9805      	ldr	r0, [sp, #20]
 8009616:	464a      	mov	r2, r9
 8009618:	f7ff fa32 	bl	8008a80 <__mdiff>
 800961c:	4604      	mov	r4, r0
 800961e:	2800      	cmp	r0, #0
 8009620:	f43f ae3d 	beq.w	800929e <_strtod_l+0x43e>
 8009624:	68c3      	ldr	r3, [r0, #12]
 8009626:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009628:	2300      	movs	r3, #0
 800962a:	60c3      	str	r3, [r0, #12]
 800962c:	4641      	mov	r1, r8
 800962e:	f7ff fa0b 	bl	8008a48 <__mcmp>
 8009632:	2800      	cmp	r0, #0
 8009634:	da46      	bge.n	80096c4 <_strtod_l+0x864>
 8009636:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009638:	ea53 030a 	orrs.w	r3, r3, sl
 800963c:	d16c      	bne.n	8009718 <_strtod_l+0x8b8>
 800963e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009642:	2b00      	cmp	r3, #0
 8009644:	d168      	bne.n	8009718 <_strtod_l+0x8b8>
 8009646:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800964a:	0d1b      	lsrs	r3, r3, #20
 800964c:	051b      	lsls	r3, r3, #20
 800964e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009652:	d961      	bls.n	8009718 <_strtod_l+0x8b8>
 8009654:	6963      	ldr	r3, [r4, #20]
 8009656:	b913      	cbnz	r3, 800965e <_strtod_l+0x7fe>
 8009658:	6923      	ldr	r3, [r4, #16]
 800965a:	2b01      	cmp	r3, #1
 800965c:	dd5c      	ble.n	8009718 <_strtod_l+0x8b8>
 800965e:	4621      	mov	r1, r4
 8009660:	2201      	movs	r2, #1
 8009662:	9805      	ldr	r0, [sp, #20]
 8009664:	f7ff f984 	bl	8008970 <__lshift>
 8009668:	4641      	mov	r1, r8
 800966a:	4604      	mov	r4, r0
 800966c:	f7ff f9ec 	bl	8008a48 <__mcmp>
 8009670:	2800      	cmp	r0, #0
 8009672:	dd51      	ble.n	8009718 <_strtod_l+0x8b8>
 8009674:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009678:	9a08      	ldr	r2, [sp, #32]
 800967a:	0d1b      	lsrs	r3, r3, #20
 800967c:	051b      	lsls	r3, r3, #20
 800967e:	2a00      	cmp	r2, #0
 8009680:	d06b      	beq.n	800975a <_strtod_l+0x8fa>
 8009682:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009686:	d868      	bhi.n	800975a <_strtod_l+0x8fa>
 8009688:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800968c:	f67f ae9d 	bls.w	80093ca <_strtod_l+0x56a>
 8009690:	4b0a      	ldr	r3, [pc, #40]	@ (80096bc <_strtod_l+0x85c>)
 8009692:	4650      	mov	r0, sl
 8009694:	4659      	mov	r1, fp
 8009696:	2200      	movs	r2, #0
 8009698:	f7f6 ffd6 	bl	8000648 <__aeabi_dmul>
 800969c:	4b08      	ldr	r3, [pc, #32]	@ (80096c0 <_strtod_l+0x860>)
 800969e:	400b      	ands	r3, r1
 80096a0:	4682      	mov	sl, r0
 80096a2:	468b      	mov	fp, r1
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	f47f ae05 	bne.w	80092b4 <_strtod_l+0x454>
 80096aa:	9a05      	ldr	r2, [sp, #20]
 80096ac:	2322      	movs	r3, #34	@ 0x22
 80096ae:	6013      	str	r3, [r2, #0]
 80096b0:	e600      	b.n	80092b4 <_strtod_l+0x454>
 80096b2:	bf00      	nop
 80096b4:	0800b090 	.word	0x0800b090
 80096b8:	fffffc02 	.word	0xfffffc02
 80096bc:	39500000 	.word	0x39500000
 80096c0:	7ff00000 	.word	0x7ff00000
 80096c4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80096c8:	d165      	bne.n	8009796 <_strtod_l+0x936>
 80096ca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80096cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80096d0:	b35a      	cbz	r2, 800972a <_strtod_l+0x8ca>
 80096d2:	4a9f      	ldr	r2, [pc, #636]	@ (8009950 <_strtod_l+0xaf0>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d12b      	bne.n	8009730 <_strtod_l+0x8d0>
 80096d8:	9b08      	ldr	r3, [sp, #32]
 80096da:	4651      	mov	r1, sl
 80096dc:	b303      	cbz	r3, 8009720 <_strtod_l+0x8c0>
 80096de:	4b9d      	ldr	r3, [pc, #628]	@ (8009954 <_strtod_l+0xaf4>)
 80096e0:	465a      	mov	r2, fp
 80096e2:	4013      	ands	r3, r2
 80096e4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80096e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80096ec:	d81b      	bhi.n	8009726 <_strtod_l+0x8c6>
 80096ee:	0d1b      	lsrs	r3, r3, #20
 80096f0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80096f4:	fa02 f303 	lsl.w	r3, r2, r3
 80096f8:	4299      	cmp	r1, r3
 80096fa:	d119      	bne.n	8009730 <_strtod_l+0x8d0>
 80096fc:	4b96      	ldr	r3, [pc, #600]	@ (8009958 <_strtod_l+0xaf8>)
 80096fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009700:	429a      	cmp	r2, r3
 8009702:	d102      	bne.n	800970a <_strtod_l+0x8aa>
 8009704:	3101      	adds	r1, #1
 8009706:	f43f adca 	beq.w	800929e <_strtod_l+0x43e>
 800970a:	4b92      	ldr	r3, [pc, #584]	@ (8009954 <_strtod_l+0xaf4>)
 800970c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800970e:	401a      	ands	r2, r3
 8009710:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009714:	f04f 0a00 	mov.w	sl, #0
 8009718:	9b08      	ldr	r3, [sp, #32]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d1b8      	bne.n	8009690 <_strtod_l+0x830>
 800971e:	e5c9      	b.n	80092b4 <_strtod_l+0x454>
 8009720:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009724:	e7e8      	b.n	80096f8 <_strtod_l+0x898>
 8009726:	4613      	mov	r3, r2
 8009728:	e7e6      	b.n	80096f8 <_strtod_l+0x898>
 800972a:	ea53 030a 	orrs.w	r3, r3, sl
 800972e:	d0a1      	beq.n	8009674 <_strtod_l+0x814>
 8009730:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009732:	b1db      	cbz	r3, 800976c <_strtod_l+0x90c>
 8009734:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009736:	4213      	tst	r3, r2
 8009738:	d0ee      	beq.n	8009718 <_strtod_l+0x8b8>
 800973a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800973c:	9a08      	ldr	r2, [sp, #32]
 800973e:	4650      	mov	r0, sl
 8009740:	4659      	mov	r1, fp
 8009742:	b1bb      	cbz	r3, 8009774 <_strtod_l+0x914>
 8009744:	f7ff fb6e 	bl	8008e24 <sulp>
 8009748:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800974c:	ec53 2b10 	vmov	r2, r3, d0
 8009750:	f7f6 fdc4 	bl	80002dc <__adddf3>
 8009754:	4682      	mov	sl, r0
 8009756:	468b      	mov	fp, r1
 8009758:	e7de      	b.n	8009718 <_strtod_l+0x8b8>
 800975a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800975e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009762:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009766:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800976a:	e7d5      	b.n	8009718 <_strtod_l+0x8b8>
 800976c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800976e:	ea13 0f0a 	tst.w	r3, sl
 8009772:	e7e1      	b.n	8009738 <_strtod_l+0x8d8>
 8009774:	f7ff fb56 	bl	8008e24 <sulp>
 8009778:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800977c:	ec53 2b10 	vmov	r2, r3, d0
 8009780:	f7f6 fdaa 	bl	80002d8 <__aeabi_dsub>
 8009784:	2200      	movs	r2, #0
 8009786:	2300      	movs	r3, #0
 8009788:	4682      	mov	sl, r0
 800978a:	468b      	mov	fp, r1
 800978c:	f7f7 f9c4 	bl	8000b18 <__aeabi_dcmpeq>
 8009790:	2800      	cmp	r0, #0
 8009792:	d0c1      	beq.n	8009718 <_strtod_l+0x8b8>
 8009794:	e619      	b.n	80093ca <_strtod_l+0x56a>
 8009796:	4641      	mov	r1, r8
 8009798:	4620      	mov	r0, r4
 800979a:	f7ff facd 	bl	8008d38 <__ratio>
 800979e:	ec57 6b10 	vmov	r6, r7, d0
 80097a2:	2200      	movs	r2, #0
 80097a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80097a8:	4630      	mov	r0, r6
 80097aa:	4639      	mov	r1, r7
 80097ac:	f7f7 f9c8 	bl	8000b40 <__aeabi_dcmple>
 80097b0:	2800      	cmp	r0, #0
 80097b2:	d06f      	beq.n	8009894 <_strtod_l+0xa34>
 80097b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d17a      	bne.n	80098b0 <_strtod_l+0xa50>
 80097ba:	f1ba 0f00 	cmp.w	sl, #0
 80097be:	d158      	bne.n	8009872 <_strtod_l+0xa12>
 80097c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80097c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d15a      	bne.n	8009880 <_strtod_l+0xa20>
 80097ca:	4b64      	ldr	r3, [pc, #400]	@ (800995c <_strtod_l+0xafc>)
 80097cc:	2200      	movs	r2, #0
 80097ce:	4630      	mov	r0, r6
 80097d0:	4639      	mov	r1, r7
 80097d2:	f7f7 f9ab 	bl	8000b2c <__aeabi_dcmplt>
 80097d6:	2800      	cmp	r0, #0
 80097d8:	d159      	bne.n	800988e <_strtod_l+0xa2e>
 80097da:	4630      	mov	r0, r6
 80097dc:	4639      	mov	r1, r7
 80097de:	4b60      	ldr	r3, [pc, #384]	@ (8009960 <_strtod_l+0xb00>)
 80097e0:	2200      	movs	r2, #0
 80097e2:	f7f6 ff31 	bl	8000648 <__aeabi_dmul>
 80097e6:	4606      	mov	r6, r0
 80097e8:	460f      	mov	r7, r1
 80097ea:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80097ee:	9606      	str	r6, [sp, #24]
 80097f0:	9307      	str	r3, [sp, #28]
 80097f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80097f6:	4d57      	ldr	r5, [pc, #348]	@ (8009954 <_strtod_l+0xaf4>)
 80097f8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80097fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80097fe:	401d      	ands	r5, r3
 8009800:	4b58      	ldr	r3, [pc, #352]	@ (8009964 <_strtod_l+0xb04>)
 8009802:	429d      	cmp	r5, r3
 8009804:	f040 80b2 	bne.w	800996c <_strtod_l+0xb0c>
 8009808:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800980a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800980e:	ec4b ab10 	vmov	d0, sl, fp
 8009812:	f7ff f9c9 	bl	8008ba8 <__ulp>
 8009816:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800981a:	ec51 0b10 	vmov	r0, r1, d0
 800981e:	f7f6 ff13 	bl	8000648 <__aeabi_dmul>
 8009822:	4652      	mov	r2, sl
 8009824:	465b      	mov	r3, fp
 8009826:	f7f6 fd59 	bl	80002dc <__adddf3>
 800982a:	460b      	mov	r3, r1
 800982c:	4949      	ldr	r1, [pc, #292]	@ (8009954 <_strtod_l+0xaf4>)
 800982e:	4a4e      	ldr	r2, [pc, #312]	@ (8009968 <_strtod_l+0xb08>)
 8009830:	4019      	ands	r1, r3
 8009832:	4291      	cmp	r1, r2
 8009834:	4682      	mov	sl, r0
 8009836:	d942      	bls.n	80098be <_strtod_l+0xa5e>
 8009838:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800983a:	4b47      	ldr	r3, [pc, #284]	@ (8009958 <_strtod_l+0xaf8>)
 800983c:	429a      	cmp	r2, r3
 800983e:	d103      	bne.n	8009848 <_strtod_l+0x9e8>
 8009840:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009842:	3301      	adds	r3, #1
 8009844:	f43f ad2b 	beq.w	800929e <_strtod_l+0x43e>
 8009848:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009958 <_strtod_l+0xaf8>
 800984c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009850:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009852:	9805      	ldr	r0, [sp, #20]
 8009854:	f7fe fe74 	bl	8008540 <_Bfree>
 8009858:	9805      	ldr	r0, [sp, #20]
 800985a:	4649      	mov	r1, r9
 800985c:	f7fe fe70 	bl	8008540 <_Bfree>
 8009860:	9805      	ldr	r0, [sp, #20]
 8009862:	4641      	mov	r1, r8
 8009864:	f7fe fe6c 	bl	8008540 <_Bfree>
 8009868:	9805      	ldr	r0, [sp, #20]
 800986a:	4621      	mov	r1, r4
 800986c:	f7fe fe68 	bl	8008540 <_Bfree>
 8009870:	e618      	b.n	80094a4 <_strtod_l+0x644>
 8009872:	f1ba 0f01 	cmp.w	sl, #1
 8009876:	d103      	bne.n	8009880 <_strtod_l+0xa20>
 8009878:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800987a:	2b00      	cmp	r3, #0
 800987c:	f43f ada5 	beq.w	80093ca <_strtod_l+0x56a>
 8009880:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009930 <_strtod_l+0xad0>
 8009884:	4f35      	ldr	r7, [pc, #212]	@ (800995c <_strtod_l+0xafc>)
 8009886:	ed8d 7b06 	vstr	d7, [sp, #24]
 800988a:	2600      	movs	r6, #0
 800988c:	e7b1      	b.n	80097f2 <_strtod_l+0x992>
 800988e:	4f34      	ldr	r7, [pc, #208]	@ (8009960 <_strtod_l+0xb00>)
 8009890:	2600      	movs	r6, #0
 8009892:	e7aa      	b.n	80097ea <_strtod_l+0x98a>
 8009894:	4b32      	ldr	r3, [pc, #200]	@ (8009960 <_strtod_l+0xb00>)
 8009896:	4630      	mov	r0, r6
 8009898:	4639      	mov	r1, r7
 800989a:	2200      	movs	r2, #0
 800989c:	f7f6 fed4 	bl	8000648 <__aeabi_dmul>
 80098a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098a2:	4606      	mov	r6, r0
 80098a4:	460f      	mov	r7, r1
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d09f      	beq.n	80097ea <_strtod_l+0x98a>
 80098aa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80098ae:	e7a0      	b.n	80097f2 <_strtod_l+0x992>
 80098b0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009938 <_strtod_l+0xad8>
 80098b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80098b8:	ec57 6b17 	vmov	r6, r7, d7
 80098bc:	e799      	b.n	80097f2 <_strtod_l+0x992>
 80098be:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80098c2:	9b08      	ldr	r3, [sp, #32]
 80098c4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d1c1      	bne.n	8009850 <_strtod_l+0x9f0>
 80098cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80098d0:	0d1b      	lsrs	r3, r3, #20
 80098d2:	051b      	lsls	r3, r3, #20
 80098d4:	429d      	cmp	r5, r3
 80098d6:	d1bb      	bne.n	8009850 <_strtod_l+0x9f0>
 80098d8:	4630      	mov	r0, r6
 80098da:	4639      	mov	r1, r7
 80098dc:	f7f7 fa14 	bl	8000d08 <__aeabi_d2lz>
 80098e0:	f7f6 fe84 	bl	80005ec <__aeabi_l2d>
 80098e4:	4602      	mov	r2, r0
 80098e6:	460b      	mov	r3, r1
 80098e8:	4630      	mov	r0, r6
 80098ea:	4639      	mov	r1, r7
 80098ec:	f7f6 fcf4 	bl	80002d8 <__aeabi_dsub>
 80098f0:	460b      	mov	r3, r1
 80098f2:	4602      	mov	r2, r0
 80098f4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80098f8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80098fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098fe:	ea46 060a 	orr.w	r6, r6, sl
 8009902:	431e      	orrs	r6, r3
 8009904:	d06f      	beq.n	80099e6 <_strtod_l+0xb86>
 8009906:	a30e      	add	r3, pc, #56	@ (adr r3, 8009940 <_strtod_l+0xae0>)
 8009908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800990c:	f7f7 f90e 	bl	8000b2c <__aeabi_dcmplt>
 8009910:	2800      	cmp	r0, #0
 8009912:	f47f accf 	bne.w	80092b4 <_strtod_l+0x454>
 8009916:	a30c      	add	r3, pc, #48	@ (adr r3, 8009948 <_strtod_l+0xae8>)
 8009918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009920:	f7f7 f922 	bl	8000b68 <__aeabi_dcmpgt>
 8009924:	2800      	cmp	r0, #0
 8009926:	d093      	beq.n	8009850 <_strtod_l+0x9f0>
 8009928:	e4c4      	b.n	80092b4 <_strtod_l+0x454>
 800992a:	bf00      	nop
 800992c:	f3af 8000 	nop.w
 8009930:	00000000 	.word	0x00000000
 8009934:	bff00000 	.word	0xbff00000
 8009938:	00000000 	.word	0x00000000
 800993c:	3ff00000 	.word	0x3ff00000
 8009940:	94a03595 	.word	0x94a03595
 8009944:	3fdfffff 	.word	0x3fdfffff
 8009948:	35afe535 	.word	0x35afe535
 800994c:	3fe00000 	.word	0x3fe00000
 8009950:	000fffff 	.word	0x000fffff
 8009954:	7ff00000 	.word	0x7ff00000
 8009958:	7fefffff 	.word	0x7fefffff
 800995c:	3ff00000 	.word	0x3ff00000
 8009960:	3fe00000 	.word	0x3fe00000
 8009964:	7fe00000 	.word	0x7fe00000
 8009968:	7c9fffff 	.word	0x7c9fffff
 800996c:	9b08      	ldr	r3, [sp, #32]
 800996e:	b323      	cbz	r3, 80099ba <_strtod_l+0xb5a>
 8009970:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009974:	d821      	bhi.n	80099ba <_strtod_l+0xb5a>
 8009976:	a328      	add	r3, pc, #160	@ (adr r3, 8009a18 <_strtod_l+0xbb8>)
 8009978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800997c:	4630      	mov	r0, r6
 800997e:	4639      	mov	r1, r7
 8009980:	f7f7 f8de 	bl	8000b40 <__aeabi_dcmple>
 8009984:	b1a0      	cbz	r0, 80099b0 <_strtod_l+0xb50>
 8009986:	4639      	mov	r1, r7
 8009988:	4630      	mov	r0, r6
 800998a:	f7f7 f935 	bl	8000bf8 <__aeabi_d2uiz>
 800998e:	2801      	cmp	r0, #1
 8009990:	bf38      	it	cc
 8009992:	2001      	movcc	r0, #1
 8009994:	f7f6 fdde 	bl	8000554 <__aeabi_ui2d>
 8009998:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800999a:	4606      	mov	r6, r0
 800999c:	460f      	mov	r7, r1
 800999e:	b9fb      	cbnz	r3, 80099e0 <_strtod_l+0xb80>
 80099a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80099a4:	9014      	str	r0, [sp, #80]	@ 0x50
 80099a6:	9315      	str	r3, [sp, #84]	@ 0x54
 80099a8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80099ac:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80099b0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80099b2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80099b6:	1b5b      	subs	r3, r3, r5
 80099b8:	9311      	str	r3, [sp, #68]	@ 0x44
 80099ba:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80099be:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80099c2:	f7ff f8f1 	bl	8008ba8 <__ulp>
 80099c6:	4650      	mov	r0, sl
 80099c8:	ec53 2b10 	vmov	r2, r3, d0
 80099cc:	4659      	mov	r1, fp
 80099ce:	f7f6 fe3b 	bl	8000648 <__aeabi_dmul>
 80099d2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80099d6:	f7f6 fc81 	bl	80002dc <__adddf3>
 80099da:	4682      	mov	sl, r0
 80099dc:	468b      	mov	fp, r1
 80099de:	e770      	b.n	80098c2 <_strtod_l+0xa62>
 80099e0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80099e4:	e7e0      	b.n	80099a8 <_strtod_l+0xb48>
 80099e6:	a30e      	add	r3, pc, #56	@ (adr r3, 8009a20 <_strtod_l+0xbc0>)
 80099e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ec:	f7f7 f89e 	bl	8000b2c <__aeabi_dcmplt>
 80099f0:	e798      	b.n	8009924 <_strtod_l+0xac4>
 80099f2:	2300      	movs	r3, #0
 80099f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80099f6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80099f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80099fa:	6013      	str	r3, [r2, #0]
 80099fc:	f7ff ba6d 	b.w	8008eda <_strtod_l+0x7a>
 8009a00:	2a65      	cmp	r2, #101	@ 0x65
 8009a02:	f43f ab66 	beq.w	80090d2 <_strtod_l+0x272>
 8009a06:	2a45      	cmp	r2, #69	@ 0x45
 8009a08:	f43f ab63 	beq.w	80090d2 <_strtod_l+0x272>
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	f7ff bb9e 	b.w	800914e <_strtod_l+0x2ee>
 8009a12:	bf00      	nop
 8009a14:	f3af 8000 	nop.w
 8009a18:	ffc00000 	.word	0xffc00000
 8009a1c:	41dfffff 	.word	0x41dfffff
 8009a20:	94a03595 	.word	0x94a03595
 8009a24:	3fcfffff 	.word	0x3fcfffff

08009a28 <_strtod_r>:
 8009a28:	4b01      	ldr	r3, [pc, #4]	@ (8009a30 <_strtod_r+0x8>)
 8009a2a:	f7ff ba19 	b.w	8008e60 <_strtod_l>
 8009a2e:	bf00      	nop
 8009a30:	2000006c 	.word	0x2000006c

08009a34 <_strtol_l.constprop.0>:
 8009a34:	2b24      	cmp	r3, #36	@ 0x24
 8009a36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a3a:	4686      	mov	lr, r0
 8009a3c:	4690      	mov	r8, r2
 8009a3e:	d801      	bhi.n	8009a44 <_strtol_l.constprop.0+0x10>
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	d106      	bne.n	8009a52 <_strtol_l.constprop.0+0x1e>
 8009a44:	f7fd fdac 	bl	80075a0 <__errno>
 8009a48:	2316      	movs	r3, #22
 8009a4a:	6003      	str	r3, [r0, #0]
 8009a4c:	2000      	movs	r0, #0
 8009a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a52:	4834      	ldr	r0, [pc, #208]	@ (8009b24 <_strtol_l.constprop.0+0xf0>)
 8009a54:	460d      	mov	r5, r1
 8009a56:	462a      	mov	r2, r5
 8009a58:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a5c:	5d06      	ldrb	r6, [r0, r4]
 8009a5e:	f016 0608 	ands.w	r6, r6, #8
 8009a62:	d1f8      	bne.n	8009a56 <_strtol_l.constprop.0+0x22>
 8009a64:	2c2d      	cmp	r4, #45	@ 0x2d
 8009a66:	d12d      	bne.n	8009ac4 <_strtol_l.constprop.0+0x90>
 8009a68:	782c      	ldrb	r4, [r5, #0]
 8009a6a:	2601      	movs	r6, #1
 8009a6c:	1c95      	adds	r5, r2, #2
 8009a6e:	f033 0210 	bics.w	r2, r3, #16
 8009a72:	d109      	bne.n	8009a88 <_strtol_l.constprop.0+0x54>
 8009a74:	2c30      	cmp	r4, #48	@ 0x30
 8009a76:	d12a      	bne.n	8009ace <_strtol_l.constprop.0+0x9a>
 8009a78:	782a      	ldrb	r2, [r5, #0]
 8009a7a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009a7e:	2a58      	cmp	r2, #88	@ 0x58
 8009a80:	d125      	bne.n	8009ace <_strtol_l.constprop.0+0x9a>
 8009a82:	786c      	ldrb	r4, [r5, #1]
 8009a84:	2310      	movs	r3, #16
 8009a86:	3502      	adds	r5, #2
 8009a88:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009a8c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8009a90:	2200      	movs	r2, #0
 8009a92:	fbbc f9f3 	udiv	r9, ip, r3
 8009a96:	4610      	mov	r0, r2
 8009a98:	fb03 ca19 	mls	sl, r3, r9, ip
 8009a9c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009aa0:	2f09      	cmp	r7, #9
 8009aa2:	d81b      	bhi.n	8009adc <_strtol_l.constprop.0+0xa8>
 8009aa4:	463c      	mov	r4, r7
 8009aa6:	42a3      	cmp	r3, r4
 8009aa8:	dd27      	ble.n	8009afa <_strtol_l.constprop.0+0xc6>
 8009aaa:	1c57      	adds	r7, r2, #1
 8009aac:	d007      	beq.n	8009abe <_strtol_l.constprop.0+0x8a>
 8009aae:	4581      	cmp	r9, r0
 8009ab0:	d320      	bcc.n	8009af4 <_strtol_l.constprop.0+0xc0>
 8009ab2:	d101      	bne.n	8009ab8 <_strtol_l.constprop.0+0x84>
 8009ab4:	45a2      	cmp	sl, r4
 8009ab6:	db1d      	blt.n	8009af4 <_strtol_l.constprop.0+0xc0>
 8009ab8:	fb00 4003 	mla	r0, r0, r3, r4
 8009abc:	2201      	movs	r2, #1
 8009abe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ac2:	e7eb      	b.n	8009a9c <_strtol_l.constprop.0+0x68>
 8009ac4:	2c2b      	cmp	r4, #43	@ 0x2b
 8009ac6:	bf04      	itt	eq
 8009ac8:	782c      	ldrbeq	r4, [r5, #0]
 8009aca:	1c95      	addeq	r5, r2, #2
 8009acc:	e7cf      	b.n	8009a6e <_strtol_l.constprop.0+0x3a>
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d1da      	bne.n	8009a88 <_strtol_l.constprop.0+0x54>
 8009ad2:	2c30      	cmp	r4, #48	@ 0x30
 8009ad4:	bf0c      	ite	eq
 8009ad6:	2308      	moveq	r3, #8
 8009ad8:	230a      	movne	r3, #10
 8009ada:	e7d5      	b.n	8009a88 <_strtol_l.constprop.0+0x54>
 8009adc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009ae0:	2f19      	cmp	r7, #25
 8009ae2:	d801      	bhi.n	8009ae8 <_strtol_l.constprop.0+0xb4>
 8009ae4:	3c37      	subs	r4, #55	@ 0x37
 8009ae6:	e7de      	b.n	8009aa6 <_strtol_l.constprop.0+0x72>
 8009ae8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009aec:	2f19      	cmp	r7, #25
 8009aee:	d804      	bhi.n	8009afa <_strtol_l.constprop.0+0xc6>
 8009af0:	3c57      	subs	r4, #87	@ 0x57
 8009af2:	e7d8      	b.n	8009aa6 <_strtol_l.constprop.0+0x72>
 8009af4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009af8:	e7e1      	b.n	8009abe <_strtol_l.constprop.0+0x8a>
 8009afa:	1c53      	adds	r3, r2, #1
 8009afc:	d108      	bne.n	8009b10 <_strtol_l.constprop.0+0xdc>
 8009afe:	2322      	movs	r3, #34	@ 0x22
 8009b00:	f8ce 3000 	str.w	r3, [lr]
 8009b04:	4660      	mov	r0, ip
 8009b06:	f1b8 0f00 	cmp.w	r8, #0
 8009b0a:	d0a0      	beq.n	8009a4e <_strtol_l.constprop.0+0x1a>
 8009b0c:	1e69      	subs	r1, r5, #1
 8009b0e:	e006      	b.n	8009b1e <_strtol_l.constprop.0+0xea>
 8009b10:	b106      	cbz	r6, 8009b14 <_strtol_l.constprop.0+0xe0>
 8009b12:	4240      	negs	r0, r0
 8009b14:	f1b8 0f00 	cmp.w	r8, #0
 8009b18:	d099      	beq.n	8009a4e <_strtol_l.constprop.0+0x1a>
 8009b1a:	2a00      	cmp	r2, #0
 8009b1c:	d1f6      	bne.n	8009b0c <_strtol_l.constprop.0+0xd8>
 8009b1e:	f8c8 1000 	str.w	r1, [r8]
 8009b22:	e794      	b.n	8009a4e <_strtol_l.constprop.0+0x1a>
 8009b24:	0800b0b9 	.word	0x0800b0b9

08009b28 <_strtol_r>:
 8009b28:	f7ff bf84 	b.w	8009a34 <_strtol_l.constprop.0>

08009b2c <__ssputs_r>:
 8009b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b30:	688e      	ldr	r6, [r1, #8]
 8009b32:	461f      	mov	r7, r3
 8009b34:	42be      	cmp	r6, r7
 8009b36:	680b      	ldr	r3, [r1, #0]
 8009b38:	4682      	mov	sl, r0
 8009b3a:	460c      	mov	r4, r1
 8009b3c:	4690      	mov	r8, r2
 8009b3e:	d82d      	bhi.n	8009b9c <__ssputs_r+0x70>
 8009b40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009b44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009b48:	d026      	beq.n	8009b98 <__ssputs_r+0x6c>
 8009b4a:	6965      	ldr	r5, [r4, #20]
 8009b4c:	6909      	ldr	r1, [r1, #16]
 8009b4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b52:	eba3 0901 	sub.w	r9, r3, r1
 8009b56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b5a:	1c7b      	adds	r3, r7, #1
 8009b5c:	444b      	add	r3, r9
 8009b5e:	106d      	asrs	r5, r5, #1
 8009b60:	429d      	cmp	r5, r3
 8009b62:	bf38      	it	cc
 8009b64:	461d      	movcc	r5, r3
 8009b66:	0553      	lsls	r3, r2, #21
 8009b68:	d527      	bpl.n	8009bba <__ssputs_r+0x8e>
 8009b6a:	4629      	mov	r1, r5
 8009b6c:	f7fe fc1c 	bl	80083a8 <_malloc_r>
 8009b70:	4606      	mov	r6, r0
 8009b72:	b360      	cbz	r0, 8009bce <__ssputs_r+0xa2>
 8009b74:	6921      	ldr	r1, [r4, #16]
 8009b76:	464a      	mov	r2, r9
 8009b78:	f7fd fd3f 	bl	80075fa <memcpy>
 8009b7c:	89a3      	ldrh	r3, [r4, #12]
 8009b7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009b82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b86:	81a3      	strh	r3, [r4, #12]
 8009b88:	6126      	str	r6, [r4, #16]
 8009b8a:	6165      	str	r5, [r4, #20]
 8009b8c:	444e      	add	r6, r9
 8009b8e:	eba5 0509 	sub.w	r5, r5, r9
 8009b92:	6026      	str	r6, [r4, #0]
 8009b94:	60a5      	str	r5, [r4, #8]
 8009b96:	463e      	mov	r6, r7
 8009b98:	42be      	cmp	r6, r7
 8009b9a:	d900      	bls.n	8009b9e <__ssputs_r+0x72>
 8009b9c:	463e      	mov	r6, r7
 8009b9e:	6820      	ldr	r0, [r4, #0]
 8009ba0:	4632      	mov	r2, r6
 8009ba2:	4641      	mov	r1, r8
 8009ba4:	f000 fb6a 	bl	800a27c <memmove>
 8009ba8:	68a3      	ldr	r3, [r4, #8]
 8009baa:	1b9b      	subs	r3, r3, r6
 8009bac:	60a3      	str	r3, [r4, #8]
 8009bae:	6823      	ldr	r3, [r4, #0]
 8009bb0:	4433      	add	r3, r6
 8009bb2:	6023      	str	r3, [r4, #0]
 8009bb4:	2000      	movs	r0, #0
 8009bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bba:	462a      	mov	r2, r5
 8009bbc:	f000 ff41 	bl	800aa42 <_realloc_r>
 8009bc0:	4606      	mov	r6, r0
 8009bc2:	2800      	cmp	r0, #0
 8009bc4:	d1e0      	bne.n	8009b88 <__ssputs_r+0x5c>
 8009bc6:	6921      	ldr	r1, [r4, #16]
 8009bc8:	4650      	mov	r0, sl
 8009bca:	f7fe fb79 	bl	80082c0 <_free_r>
 8009bce:	230c      	movs	r3, #12
 8009bd0:	f8ca 3000 	str.w	r3, [sl]
 8009bd4:	89a3      	ldrh	r3, [r4, #12]
 8009bd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009bda:	81a3      	strh	r3, [r4, #12]
 8009bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009be0:	e7e9      	b.n	8009bb6 <__ssputs_r+0x8a>
	...

08009be4 <_svfiprintf_r>:
 8009be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be8:	4698      	mov	r8, r3
 8009bea:	898b      	ldrh	r3, [r1, #12]
 8009bec:	061b      	lsls	r3, r3, #24
 8009bee:	b09d      	sub	sp, #116	@ 0x74
 8009bf0:	4607      	mov	r7, r0
 8009bf2:	460d      	mov	r5, r1
 8009bf4:	4614      	mov	r4, r2
 8009bf6:	d510      	bpl.n	8009c1a <_svfiprintf_r+0x36>
 8009bf8:	690b      	ldr	r3, [r1, #16]
 8009bfa:	b973      	cbnz	r3, 8009c1a <_svfiprintf_r+0x36>
 8009bfc:	2140      	movs	r1, #64	@ 0x40
 8009bfe:	f7fe fbd3 	bl	80083a8 <_malloc_r>
 8009c02:	6028      	str	r0, [r5, #0]
 8009c04:	6128      	str	r0, [r5, #16]
 8009c06:	b930      	cbnz	r0, 8009c16 <_svfiprintf_r+0x32>
 8009c08:	230c      	movs	r3, #12
 8009c0a:	603b      	str	r3, [r7, #0]
 8009c0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c10:	b01d      	add	sp, #116	@ 0x74
 8009c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c16:	2340      	movs	r3, #64	@ 0x40
 8009c18:	616b      	str	r3, [r5, #20]
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c1e:	2320      	movs	r3, #32
 8009c20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009c24:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c28:	2330      	movs	r3, #48	@ 0x30
 8009c2a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009dc8 <_svfiprintf_r+0x1e4>
 8009c2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009c32:	f04f 0901 	mov.w	r9, #1
 8009c36:	4623      	mov	r3, r4
 8009c38:	469a      	mov	sl, r3
 8009c3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c3e:	b10a      	cbz	r2, 8009c44 <_svfiprintf_r+0x60>
 8009c40:	2a25      	cmp	r2, #37	@ 0x25
 8009c42:	d1f9      	bne.n	8009c38 <_svfiprintf_r+0x54>
 8009c44:	ebba 0b04 	subs.w	fp, sl, r4
 8009c48:	d00b      	beq.n	8009c62 <_svfiprintf_r+0x7e>
 8009c4a:	465b      	mov	r3, fp
 8009c4c:	4622      	mov	r2, r4
 8009c4e:	4629      	mov	r1, r5
 8009c50:	4638      	mov	r0, r7
 8009c52:	f7ff ff6b 	bl	8009b2c <__ssputs_r>
 8009c56:	3001      	adds	r0, #1
 8009c58:	f000 80a7 	beq.w	8009daa <_svfiprintf_r+0x1c6>
 8009c5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c5e:	445a      	add	r2, fp
 8009c60:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c62:	f89a 3000 	ldrb.w	r3, [sl]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	f000 809f 	beq.w	8009daa <_svfiprintf_r+0x1c6>
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009c72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c76:	f10a 0a01 	add.w	sl, sl, #1
 8009c7a:	9304      	str	r3, [sp, #16]
 8009c7c:	9307      	str	r3, [sp, #28]
 8009c7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009c82:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c84:	4654      	mov	r4, sl
 8009c86:	2205      	movs	r2, #5
 8009c88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c8c:	484e      	ldr	r0, [pc, #312]	@ (8009dc8 <_svfiprintf_r+0x1e4>)
 8009c8e:	f7f6 fac7 	bl	8000220 <memchr>
 8009c92:	9a04      	ldr	r2, [sp, #16]
 8009c94:	b9d8      	cbnz	r0, 8009cce <_svfiprintf_r+0xea>
 8009c96:	06d0      	lsls	r0, r2, #27
 8009c98:	bf44      	itt	mi
 8009c9a:	2320      	movmi	r3, #32
 8009c9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ca0:	0711      	lsls	r1, r2, #28
 8009ca2:	bf44      	itt	mi
 8009ca4:	232b      	movmi	r3, #43	@ 0x2b
 8009ca6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009caa:	f89a 3000 	ldrb.w	r3, [sl]
 8009cae:	2b2a      	cmp	r3, #42	@ 0x2a
 8009cb0:	d015      	beq.n	8009cde <_svfiprintf_r+0xfa>
 8009cb2:	9a07      	ldr	r2, [sp, #28]
 8009cb4:	4654      	mov	r4, sl
 8009cb6:	2000      	movs	r0, #0
 8009cb8:	f04f 0c0a 	mov.w	ip, #10
 8009cbc:	4621      	mov	r1, r4
 8009cbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cc2:	3b30      	subs	r3, #48	@ 0x30
 8009cc4:	2b09      	cmp	r3, #9
 8009cc6:	d94b      	bls.n	8009d60 <_svfiprintf_r+0x17c>
 8009cc8:	b1b0      	cbz	r0, 8009cf8 <_svfiprintf_r+0x114>
 8009cca:	9207      	str	r2, [sp, #28]
 8009ccc:	e014      	b.n	8009cf8 <_svfiprintf_r+0x114>
 8009cce:	eba0 0308 	sub.w	r3, r0, r8
 8009cd2:	fa09 f303 	lsl.w	r3, r9, r3
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	9304      	str	r3, [sp, #16]
 8009cda:	46a2      	mov	sl, r4
 8009cdc:	e7d2      	b.n	8009c84 <_svfiprintf_r+0xa0>
 8009cde:	9b03      	ldr	r3, [sp, #12]
 8009ce0:	1d19      	adds	r1, r3, #4
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	9103      	str	r1, [sp, #12]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	bfbb      	ittet	lt
 8009cea:	425b      	neglt	r3, r3
 8009cec:	f042 0202 	orrlt.w	r2, r2, #2
 8009cf0:	9307      	strge	r3, [sp, #28]
 8009cf2:	9307      	strlt	r3, [sp, #28]
 8009cf4:	bfb8      	it	lt
 8009cf6:	9204      	strlt	r2, [sp, #16]
 8009cf8:	7823      	ldrb	r3, [r4, #0]
 8009cfa:	2b2e      	cmp	r3, #46	@ 0x2e
 8009cfc:	d10a      	bne.n	8009d14 <_svfiprintf_r+0x130>
 8009cfe:	7863      	ldrb	r3, [r4, #1]
 8009d00:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d02:	d132      	bne.n	8009d6a <_svfiprintf_r+0x186>
 8009d04:	9b03      	ldr	r3, [sp, #12]
 8009d06:	1d1a      	adds	r2, r3, #4
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	9203      	str	r2, [sp, #12]
 8009d0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009d10:	3402      	adds	r4, #2
 8009d12:	9305      	str	r3, [sp, #20]
 8009d14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009dd8 <_svfiprintf_r+0x1f4>
 8009d18:	7821      	ldrb	r1, [r4, #0]
 8009d1a:	2203      	movs	r2, #3
 8009d1c:	4650      	mov	r0, sl
 8009d1e:	f7f6 fa7f 	bl	8000220 <memchr>
 8009d22:	b138      	cbz	r0, 8009d34 <_svfiprintf_r+0x150>
 8009d24:	9b04      	ldr	r3, [sp, #16]
 8009d26:	eba0 000a 	sub.w	r0, r0, sl
 8009d2a:	2240      	movs	r2, #64	@ 0x40
 8009d2c:	4082      	lsls	r2, r0
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	3401      	adds	r4, #1
 8009d32:	9304      	str	r3, [sp, #16]
 8009d34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d38:	4824      	ldr	r0, [pc, #144]	@ (8009dcc <_svfiprintf_r+0x1e8>)
 8009d3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009d3e:	2206      	movs	r2, #6
 8009d40:	f7f6 fa6e 	bl	8000220 <memchr>
 8009d44:	2800      	cmp	r0, #0
 8009d46:	d036      	beq.n	8009db6 <_svfiprintf_r+0x1d2>
 8009d48:	4b21      	ldr	r3, [pc, #132]	@ (8009dd0 <_svfiprintf_r+0x1ec>)
 8009d4a:	bb1b      	cbnz	r3, 8009d94 <_svfiprintf_r+0x1b0>
 8009d4c:	9b03      	ldr	r3, [sp, #12]
 8009d4e:	3307      	adds	r3, #7
 8009d50:	f023 0307 	bic.w	r3, r3, #7
 8009d54:	3308      	adds	r3, #8
 8009d56:	9303      	str	r3, [sp, #12]
 8009d58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d5a:	4433      	add	r3, r6
 8009d5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d5e:	e76a      	b.n	8009c36 <_svfiprintf_r+0x52>
 8009d60:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d64:	460c      	mov	r4, r1
 8009d66:	2001      	movs	r0, #1
 8009d68:	e7a8      	b.n	8009cbc <_svfiprintf_r+0xd8>
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	3401      	adds	r4, #1
 8009d6e:	9305      	str	r3, [sp, #20]
 8009d70:	4619      	mov	r1, r3
 8009d72:	f04f 0c0a 	mov.w	ip, #10
 8009d76:	4620      	mov	r0, r4
 8009d78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d7c:	3a30      	subs	r2, #48	@ 0x30
 8009d7e:	2a09      	cmp	r2, #9
 8009d80:	d903      	bls.n	8009d8a <_svfiprintf_r+0x1a6>
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d0c6      	beq.n	8009d14 <_svfiprintf_r+0x130>
 8009d86:	9105      	str	r1, [sp, #20]
 8009d88:	e7c4      	b.n	8009d14 <_svfiprintf_r+0x130>
 8009d8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d8e:	4604      	mov	r4, r0
 8009d90:	2301      	movs	r3, #1
 8009d92:	e7f0      	b.n	8009d76 <_svfiprintf_r+0x192>
 8009d94:	ab03      	add	r3, sp, #12
 8009d96:	9300      	str	r3, [sp, #0]
 8009d98:	462a      	mov	r2, r5
 8009d9a:	4b0e      	ldr	r3, [pc, #56]	@ (8009dd4 <_svfiprintf_r+0x1f0>)
 8009d9c:	a904      	add	r1, sp, #16
 8009d9e:	4638      	mov	r0, r7
 8009da0:	f7fc fb60 	bl	8006464 <_printf_float>
 8009da4:	1c42      	adds	r2, r0, #1
 8009da6:	4606      	mov	r6, r0
 8009da8:	d1d6      	bne.n	8009d58 <_svfiprintf_r+0x174>
 8009daa:	89ab      	ldrh	r3, [r5, #12]
 8009dac:	065b      	lsls	r3, r3, #25
 8009dae:	f53f af2d 	bmi.w	8009c0c <_svfiprintf_r+0x28>
 8009db2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009db4:	e72c      	b.n	8009c10 <_svfiprintf_r+0x2c>
 8009db6:	ab03      	add	r3, sp, #12
 8009db8:	9300      	str	r3, [sp, #0]
 8009dba:	462a      	mov	r2, r5
 8009dbc:	4b05      	ldr	r3, [pc, #20]	@ (8009dd4 <_svfiprintf_r+0x1f0>)
 8009dbe:	a904      	add	r1, sp, #16
 8009dc0:	4638      	mov	r0, r7
 8009dc2:	f7fc fde7 	bl	8006994 <_printf_i>
 8009dc6:	e7ed      	b.n	8009da4 <_svfiprintf_r+0x1c0>
 8009dc8:	0800b1b9 	.word	0x0800b1b9
 8009dcc:	0800b1c3 	.word	0x0800b1c3
 8009dd0:	08006465 	.word	0x08006465
 8009dd4:	08009b2d 	.word	0x08009b2d
 8009dd8:	0800b1bf 	.word	0x0800b1bf

08009ddc <__sfputc_r>:
 8009ddc:	6893      	ldr	r3, [r2, #8]
 8009dde:	3b01      	subs	r3, #1
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	b410      	push	{r4}
 8009de4:	6093      	str	r3, [r2, #8]
 8009de6:	da08      	bge.n	8009dfa <__sfputc_r+0x1e>
 8009de8:	6994      	ldr	r4, [r2, #24]
 8009dea:	42a3      	cmp	r3, r4
 8009dec:	db01      	blt.n	8009df2 <__sfputc_r+0x16>
 8009dee:	290a      	cmp	r1, #10
 8009df0:	d103      	bne.n	8009dfa <__sfputc_r+0x1e>
 8009df2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009df6:	f7fd ba96 	b.w	8007326 <__swbuf_r>
 8009dfa:	6813      	ldr	r3, [r2, #0]
 8009dfc:	1c58      	adds	r0, r3, #1
 8009dfe:	6010      	str	r0, [r2, #0]
 8009e00:	7019      	strb	r1, [r3, #0]
 8009e02:	4608      	mov	r0, r1
 8009e04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e08:	4770      	bx	lr

08009e0a <__sfputs_r>:
 8009e0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e0c:	4606      	mov	r6, r0
 8009e0e:	460f      	mov	r7, r1
 8009e10:	4614      	mov	r4, r2
 8009e12:	18d5      	adds	r5, r2, r3
 8009e14:	42ac      	cmp	r4, r5
 8009e16:	d101      	bne.n	8009e1c <__sfputs_r+0x12>
 8009e18:	2000      	movs	r0, #0
 8009e1a:	e007      	b.n	8009e2c <__sfputs_r+0x22>
 8009e1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e20:	463a      	mov	r2, r7
 8009e22:	4630      	mov	r0, r6
 8009e24:	f7ff ffda 	bl	8009ddc <__sfputc_r>
 8009e28:	1c43      	adds	r3, r0, #1
 8009e2a:	d1f3      	bne.n	8009e14 <__sfputs_r+0xa>
 8009e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009e30 <_vfiprintf_r>:
 8009e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e34:	460d      	mov	r5, r1
 8009e36:	b09d      	sub	sp, #116	@ 0x74
 8009e38:	4614      	mov	r4, r2
 8009e3a:	4698      	mov	r8, r3
 8009e3c:	4606      	mov	r6, r0
 8009e3e:	b118      	cbz	r0, 8009e48 <_vfiprintf_r+0x18>
 8009e40:	6a03      	ldr	r3, [r0, #32]
 8009e42:	b90b      	cbnz	r3, 8009e48 <_vfiprintf_r+0x18>
 8009e44:	f7fd f966 	bl	8007114 <__sinit>
 8009e48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e4a:	07d9      	lsls	r1, r3, #31
 8009e4c:	d405      	bmi.n	8009e5a <_vfiprintf_r+0x2a>
 8009e4e:	89ab      	ldrh	r3, [r5, #12]
 8009e50:	059a      	lsls	r2, r3, #22
 8009e52:	d402      	bmi.n	8009e5a <_vfiprintf_r+0x2a>
 8009e54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e56:	f7fd fbce 	bl	80075f6 <__retarget_lock_acquire_recursive>
 8009e5a:	89ab      	ldrh	r3, [r5, #12]
 8009e5c:	071b      	lsls	r3, r3, #28
 8009e5e:	d501      	bpl.n	8009e64 <_vfiprintf_r+0x34>
 8009e60:	692b      	ldr	r3, [r5, #16]
 8009e62:	b99b      	cbnz	r3, 8009e8c <_vfiprintf_r+0x5c>
 8009e64:	4629      	mov	r1, r5
 8009e66:	4630      	mov	r0, r6
 8009e68:	f7fd fa9c 	bl	80073a4 <__swsetup_r>
 8009e6c:	b170      	cbz	r0, 8009e8c <_vfiprintf_r+0x5c>
 8009e6e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e70:	07dc      	lsls	r4, r3, #31
 8009e72:	d504      	bpl.n	8009e7e <_vfiprintf_r+0x4e>
 8009e74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009e78:	b01d      	add	sp, #116	@ 0x74
 8009e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e7e:	89ab      	ldrh	r3, [r5, #12]
 8009e80:	0598      	lsls	r0, r3, #22
 8009e82:	d4f7      	bmi.n	8009e74 <_vfiprintf_r+0x44>
 8009e84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e86:	f7fd fbb7 	bl	80075f8 <__retarget_lock_release_recursive>
 8009e8a:	e7f3      	b.n	8009e74 <_vfiprintf_r+0x44>
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e90:	2320      	movs	r3, #32
 8009e92:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009e96:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e9a:	2330      	movs	r3, #48	@ 0x30
 8009e9c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a04c <_vfiprintf_r+0x21c>
 8009ea0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009ea4:	f04f 0901 	mov.w	r9, #1
 8009ea8:	4623      	mov	r3, r4
 8009eaa:	469a      	mov	sl, r3
 8009eac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009eb0:	b10a      	cbz	r2, 8009eb6 <_vfiprintf_r+0x86>
 8009eb2:	2a25      	cmp	r2, #37	@ 0x25
 8009eb4:	d1f9      	bne.n	8009eaa <_vfiprintf_r+0x7a>
 8009eb6:	ebba 0b04 	subs.w	fp, sl, r4
 8009eba:	d00b      	beq.n	8009ed4 <_vfiprintf_r+0xa4>
 8009ebc:	465b      	mov	r3, fp
 8009ebe:	4622      	mov	r2, r4
 8009ec0:	4629      	mov	r1, r5
 8009ec2:	4630      	mov	r0, r6
 8009ec4:	f7ff ffa1 	bl	8009e0a <__sfputs_r>
 8009ec8:	3001      	adds	r0, #1
 8009eca:	f000 80a7 	beq.w	800a01c <_vfiprintf_r+0x1ec>
 8009ece:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ed0:	445a      	add	r2, fp
 8009ed2:	9209      	str	r2, [sp, #36]	@ 0x24
 8009ed4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	f000 809f 	beq.w	800a01c <_vfiprintf_r+0x1ec>
 8009ede:	2300      	movs	r3, #0
 8009ee0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009ee4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ee8:	f10a 0a01 	add.w	sl, sl, #1
 8009eec:	9304      	str	r3, [sp, #16]
 8009eee:	9307      	str	r3, [sp, #28]
 8009ef0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009ef4:	931a      	str	r3, [sp, #104]	@ 0x68
 8009ef6:	4654      	mov	r4, sl
 8009ef8:	2205      	movs	r2, #5
 8009efa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009efe:	4853      	ldr	r0, [pc, #332]	@ (800a04c <_vfiprintf_r+0x21c>)
 8009f00:	f7f6 f98e 	bl	8000220 <memchr>
 8009f04:	9a04      	ldr	r2, [sp, #16]
 8009f06:	b9d8      	cbnz	r0, 8009f40 <_vfiprintf_r+0x110>
 8009f08:	06d1      	lsls	r1, r2, #27
 8009f0a:	bf44      	itt	mi
 8009f0c:	2320      	movmi	r3, #32
 8009f0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f12:	0713      	lsls	r3, r2, #28
 8009f14:	bf44      	itt	mi
 8009f16:	232b      	movmi	r3, #43	@ 0x2b
 8009f18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f1c:	f89a 3000 	ldrb.w	r3, [sl]
 8009f20:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f22:	d015      	beq.n	8009f50 <_vfiprintf_r+0x120>
 8009f24:	9a07      	ldr	r2, [sp, #28]
 8009f26:	4654      	mov	r4, sl
 8009f28:	2000      	movs	r0, #0
 8009f2a:	f04f 0c0a 	mov.w	ip, #10
 8009f2e:	4621      	mov	r1, r4
 8009f30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f34:	3b30      	subs	r3, #48	@ 0x30
 8009f36:	2b09      	cmp	r3, #9
 8009f38:	d94b      	bls.n	8009fd2 <_vfiprintf_r+0x1a2>
 8009f3a:	b1b0      	cbz	r0, 8009f6a <_vfiprintf_r+0x13a>
 8009f3c:	9207      	str	r2, [sp, #28]
 8009f3e:	e014      	b.n	8009f6a <_vfiprintf_r+0x13a>
 8009f40:	eba0 0308 	sub.w	r3, r0, r8
 8009f44:	fa09 f303 	lsl.w	r3, r9, r3
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	9304      	str	r3, [sp, #16]
 8009f4c:	46a2      	mov	sl, r4
 8009f4e:	e7d2      	b.n	8009ef6 <_vfiprintf_r+0xc6>
 8009f50:	9b03      	ldr	r3, [sp, #12]
 8009f52:	1d19      	adds	r1, r3, #4
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	9103      	str	r1, [sp, #12]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	bfbb      	ittet	lt
 8009f5c:	425b      	neglt	r3, r3
 8009f5e:	f042 0202 	orrlt.w	r2, r2, #2
 8009f62:	9307      	strge	r3, [sp, #28]
 8009f64:	9307      	strlt	r3, [sp, #28]
 8009f66:	bfb8      	it	lt
 8009f68:	9204      	strlt	r2, [sp, #16]
 8009f6a:	7823      	ldrb	r3, [r4, #0]
 8009f6c:	2b2e      	cmp	r3, #46	@ 0x2e
 8009f6e:	d10a      	bne.n	8009f86 <_vfiprintf_r+0x156>
 8009f70:	7863      	ldrb	r3, [r4, #1]
 8009f72:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f74:	d132      	bne.n	8009fdc <_vfiprintf_r+0x1ac>
 8009f76:	9b03      	ldr	r3, [sp, #12]
 8009f78:	1d1a      	adds	r2, r3, #4
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	9203      	str	r2, [sp, #12]
 8009f7e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009f82:	3402      	adds	r4, #2
 8009f84:	9305      	str	r3, [sp, #20]
 8009f86:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a05c <_vfiprintf_r+0x22c>
 8009f8a:	7821      	ldrb	r1, [r4, #0]
 8009f8c:	2203      	movs	r2, #3
 8009f8e:	4650      	mov	r0, sl
 8009f90:	f7f6 f946 	bl	8000220 <memchr>
 8009f94:	b138      	cbz	r0, 8009fa6 <_vfiprintf_r+0x176>
 8009f96:	9b04      	ldr	r3, [sp, #16]
 8009f98:	eba0 000a 	sub.w	r0, r0, sl
 8009f9c:	2240      	movs	r2, #64	@ 0x40
 8009f9e:	4082      	lsls	r2, r0
 8009fa0:	4313      	orrs	r3, r2
 8009fa2:	3401      	adds	r4, #1
 8009fa4:	9304      	str	r3, [sp, #16]
 8009fa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009faa:	4829      	ldr	r0, [pc, #164]	@ (800a050 <_vfiprintf_r+0x220>)
 8009fac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009fb0:	2206      	movs	r2, #6
 8009fb2:	f7f6 f935 	bl	8000220 <memchr>
 8009fb6:	2800      	cmp	r0, #0
 8009fb8:	d03f      	beq.n	800a03a <_vfiprintf_r+0x20a>
 8009fba:	4b26      	ldr	r3, [pc, #152]	@ (800a054 <_vfiprintf_r+0x224>)
 8009fbc:	bb1b      	cbnz	r3, 800a006 <_vfiprintf_r+0x1d6>
 8009fbe:	9b03      	ldr	r3, [sp, #12]
 8009fc0:	3307      	adds	r3, #7
 8009fc2:	f023 0307 	bic.w	r3, r3, #7
 8009fc6:	3308      	adds	r3, #8
 8009fc8:	9303      	str	r3, [sp, #12]
 8009fca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fcc:	443b      	add	r3, r7
 8009fce:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fd0:	e76a      	b.n	8009ea8 <_vfiprintf_r+0x78>
 8009fd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009fd6:	460c      	mov	r4, r1
 8009fd8:	2001      	movs	r0, #1
 8009fda:	e7a8      	b.n	8009f2e <_vfiprintf_r+0xfe>
 8009fdc:	2300      	movs	r3, #0
 8009fde:	3401      	adds	r4, #1
 8009fe0:	9305      	str	r3, [sp, #20]
 8009fe2:	4619      	mov	r1, r3
 8009fe4:	f04f 0c0a 	mov.w	ip, #10
 8009fe8:	4620      	mov	r0, r4
 8009fea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fee:	3a30      	subs	r2, #48	@ 0x30
 8009ff0:	2a09      	cmp	r2, #9
 8009ff2:	d903      	bls.n	8009ffc <_vfiprintf_r+0x1cc>
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d0c6      	beq.n	8009f86 <_vfiprintf_r+0x156>
 8009ff8:	9105      	str	r1, [sp, #20]
 8009ffa:	e7c4      	b.n	8009f86 <_vfiprintf_r+0x156>
 8009ffc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a000:	4604      	mov	r4, r0
 800a002:	2301      	movs	r3, #1
 800a004:	e7f0      	b.n	8009fe8 <_vfiprintf_r+0x1b8>
 800a006:	ab03      	add	r3, sp, #12
 800a008:	9300      	str	r3, [sp, #0]
 800a00a:	462a      	mov	r2, r5
 800a00c:	4b12      	ldr	r3, [pc, #72]	@ (800a058 <_vfiprintf_r+0x228>)
 800a00e:	a904      	add	r1, sp, #16
 800a010:	4630      	mov	r0, r6
 800a012:	f7fc fa27 	bl	8006464 <_printf_float>
 800a016:	4607      	mov	r7, r0
 800a018:	1c78      	adds	r0, r7, #1
 800a01a:	d1d6      	bne.n	8009fca <_vfiprintf_r+0x19a>
 800a01c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a01e:	07d9      	lsls	r1, r3, #31
 800a020:	d405      	bmi.n	800a02e <_vfiprintf_r+0x1fe>
 800a022:	89ab      	ldrh	r3, [r5, #12]
 800a024:	059a      	lsls	r2, r3, #22
 800a026:	d402      	bmi.n	800a02e <_vfiprintf_r+0x1fe>
 800a028:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a02a:	f7fd fae5 	bl	80075f8 <__retarget_lock_release_recursive>
 800a02e:	89ab      	ldrh	r3, [r5, #12]
 800a030:	065b      	lsls	r3, r3, #25
 800a032:	f53f af1f 	bmi.w	8009e74 <_vfiprintf_r+0x44>
 800a036:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a038:	e71e      	b.n	8009e78 <_vfiprintf_r+0x48>
 800a03a:	ab03      	add	r3, sp, #12
 800a03c:	9300      	str	r3, [sp, #0]
 800a03e:	462a      	mov	r2, r5
 800a040:	4b05      	ldr	r3, [pc, #20]	@ (800a058 <_vfiprintf_r+0x228>)
 800a042:	a904      	add	r1, sp, #16
 800a044:	4630      	mov	r0, r6
 800a046:	f7fc fca5 	bl	8006994 <_printf_i>
 800a04a:	e7e4      	b.n	800a016 <_vfiprintf_r+0x1e6>
 800a04c:	0800b1b9 	.word	0x0800b1b9
 800a050:	0800b1c3 	.word	0x0800b1c3
 800a054:	08006465 	.word	0x08006465
 800a058:	08009e0b 	.word	0x08009e0b
 800a05c:	0800b1bf 	.word	0x0800b1bf

0800a060 <__sflush_r>:
 800a060:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a068:	0716      	lsls	r6, r2, #28
 800a06a:	4605      	mov	r5, r0
 800a06c:	460c      	mov	r4, r1
 800a06e:	d454      	bmi.n	800a11a <__sflush_r+0xba>
 800a070:	684b      	ldr	r3, [r1, #4]
 800a072:	2b00      	cmp	r3, #0
 800a074:	dc02      	bgt.n	800a07c <__sflush_r+0x1c>
 800a076:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a078:	2b00      	cmp	r3, #0
 800a07a:	dd48      	ble.n	800a10e <__sflush_r+0xae>
 800a07c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a07e:	2e00      	cmp	r6, #0
 800a080:	d045      	beq.n	800a10e <__sflush_r+0xae>
 800a082:	2300      	movs	r3, #0
 800a084:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a088:	682f      	ldr	r7, [r5, #0]
 800a08a:	6a21      	ldr	r1, [r4, #32]
 800a08c:	602b      	str	r3, [r5, #0]
 800a08e:	d030      	beq.n	800a0f2 <__sflush_r+0x92>
 800a090:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a092:	89a3      	ldrh	r3, [r4, #12]
 800a094:	0759      	lsls	r1, r3, #29
 800a096:	d505      	bpl.n	800a0a4 <__sflush_r+0x44>
 800a098:	6863      	ldr	r3, [r4, #4]
 800a09a:	1ad2      	subs	r2, r2, r3
 800a09c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a09e:	b10b      	cbz	r3, 800a0a4 <__sflush_r+0x44>
 800a0a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a0a2:	1ad2      	subs	r2, r2, r3
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a0a8:	6a21      	ldr	r1, [r4, #32]
 800a0aa:	4628      	mov	r0, r5
 800a0ac:	47b0      	blx	r6
 800a0ae:	1c43      	adds	r3, r0, #1
 800a0b0:	89a3      	ldrh	r3, [r4, #12]
 800a0b2:	d106      	bne.n	800a0c2 <__sflush_r+0x62>
 800a0b4:	6829      	ldr	r1, [r5, #0]
 800a0b6:	291d      	cmp	r1, #29
 800a0b8:	d82b      	bhi.n	800a112 <__sflush_r+0xb2>
 800a0ba:	4a2a      	ldr	r2, [pc, #168]	@ (800a164 <__sflush_r+0x104>)
 800a0bc:	410a      	asrs	r2, r1
 800a0be:	07d6      	lsls	r6, r2, #31
 800a0c0:	d427      	bmi.n	800a112 <__sflush_r+0xb2>
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	6062      	str	r2, [r4, #4]
 800a0c6:	04d9      	lsls	r1, r3, #19
 800a0c8:	6922      	ldr	r2, [r4, #16]
 800a0ca:	6022      	str	r2, [r4, #0]
 800a0cc:	d504      	bpl.n	800a0d8 <__sflush_r+0x78>
 800a0ce:	1c42      	adds	r2, r0, #1
 800a0d0:	d101      	bne.n	800a0d6 <__sflush_r+0x76>
 800a0d2:	682b      	ldr	r3, [r5, #0]
 800a0d4:	b903      	cbnz	r3, 800a0d8 <__sflush_r+0x78>
 800a0d6:	6560      	str	r0, [r4, #84]	@ 0x54
 800a0d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a0da:	602f      	str	r7, [r5, #0]
 800a0dc:	b1b9      	cbz	r1, 800a10e <__sflush_r+0xae>
 800a0de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a0e2:	4299      	cmp	r1, r3
 800a0e4:	d002      	beq.n	800a0ec <__sflush_r+0x8c>
 800a0e6:	4628      	mov	r0, r5
 800a0e8:	f7fe f8ea 	bl	80082c0 <_free_r>
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	6363      	str	r3, [r4, #52]	@ 0x34
 800a0f0:	e00d      	b.n	800a10e <__sflush_r+0xae>
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	4628      	mov	r0, r5
 800a0f6:	47b0      	blx	r6
 800a0f8:	4602      	mov	r2, r0
 800a0fa:	1c50      	adds	r0, r2, #1
 800a0fc:	d1c9      	bne.n	800a092 <__sflush_r+0x32>
 800a0fe:	682b      	ldr	r3, [r5, #0]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d0c6      	beq.n	800a092 <__sflush_r+0x32>
 800a104:	2b1d      	cmp	r3, #29
 800a106:	d001      	beq.n	800a10c <__sflush_r+0xac>
 800a108:	2b16      	cmp	r3, #22
 800a10a:	d11e      	bne.n	800a14a <__sflush_r+0xea>
 800a10c:	602f      	str	r7, [r5, #0]
 800a10e:	2000      	movs	r0, #0
 800a110:	e022      	b.n	800a158 <__sflush_r+0xf8>
 800a112:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a116:	b21b      	sxth	r3, r3
 800a118:	e01b      	b.n	800a152 <__sflush_r+0xf2>
 800a11a:	690f      	ldr	r7, [r1, #16]
 800a11c:	2f00      	cmp	r7, #0
 800a11e:	d0f6      	beq.n	800a10e <__sflush_r+0xae>
 800a120:	0793      	lsls	r3, r2, #30
 800a122:	680e      	ldr	r6, [r1, #0]
 800a124:	bf08      	it	eq
 800a126:	694b      	ldreq	r3, [r1, #20]
 800a128:	600f      	str	r7, [r1, #0]
 800a12a:	bf18      	it	ne
 800a12c:	2300      	movne	r3, #0
 800a12e:	eba6 0807 	sub.w	r8, r6, r7
 800a132:	608b      	str	r3, [r1, #8]
 800a134:	f1b8 0f00 	cmp.w	r8, #0
 800a138:	dde9      	ble.n	800a10e <__sflush_r+0xae>
 800a13a:	6a21      	ldr	r1, [r4, #32]
 800a13c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a13e:	4643      	mov	r3, r8
 800a140:	463a      	mov	r2, r7
 800a142:	4628      	mov	r0, r5
 800a144:	47b0      	blx	r6
 800a146:	2800      	cmp	r0, #0
 800a148:	dc08      	bgt.n	800a15c <__sflush_r+0xfc>
 800a14a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a14e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a152:	81a3      	strh	r3, [r4, #12]
 800a154:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a15c:	4407      	add	r7, r0
 800a15e:	eba8 0800 	sub.w	r8, r8, r0
 800a162:	e7e7      	b.n	800a134 <__sflush_r+0xd4>
 800a164:	dfbffffe 	.word	0xdfbffffe

0800a168 <_fflush_r>:
 800a168:	b538      	push	{r3, r4, r5, lr}
 800a16a:	690b      	ldr	r3, [r1, #16]
 800a16c:	4605      	mov	r5, r0
 800a16e:	460c      	mov	r4, r1
 800a170:	b913      	cbnz	r3, 800a178 <_fflush_r+0x10>
 800a172:	2500      	movs	r5, #0
 800a174:	4628      	mov	r0, r5
 800a176:	bd38      	pop	{r3, r4, r5, pc}
 800a178:	b118      	cbz	r0, 800a182 <_fflush_r+0x1a>
 800a17a:	6a03      	ldr	r3, [r0, #32]
 800a17c:	b90b      	cbnz	r3, 800a182 <_fflush_r+0x1a>
 800a17e:	f7fc ffc9 	bl	8007114 <__sinit>
 800a182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d0f3      	beq.n	800a172 <_fflush_r+0xa>
 800a18a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a18c:	07d0      	lsls	r0, r2, #31
 800a18e:	d404      	bmi.n	800a19a <_fflush_r+0x32>
 800a190:	0599      	lsls	r1, r3, #22
 800a192:	d402      	bmi.n	800a19a <_fflush_r+0x32>
 800a194:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a196:	f7fd fa2e 	bl	80075f6 <__retarget_lock_acquire_recursive>
 800a19a:	4628      	mov	r0, r5
 800a19c:	4621      	mov	r1, r4
 800a19e:	f7ff ff5f 	bl	800a060 <__sflush_r>
 800a1a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a1a4:	07da      	lsls	r2, r3, #31
 800a1a6:	4605      	mov	r5, r0
 800a1a8:	d4e4      	bmi.n	800a174 <_fflush_r+0xc>
 800a1aa:	89a3      	ldrh	r3, [r4, #12]
 800a1ac:	059b      	lsls	r3, r3, #22
 800a1ae:	d4e1      	bmi.n	800a174 <_fflush_r+0xc>
 800a1b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a1b2:	f7fd fa21 	bl	80075f8 <__retarget_lock_release_recursive>
 800a1b6:	e7dd      	b.n	800a174 <_fflush_r+0xc>

0800a1b8 <__swhatbuf_r>:
 800a1b8:	b570      	push	{r4, r5, r6, lr}
 800a1ba:	460c      	mov	r4, r1
 800a1bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1c0:	2900      	cmp	r1, #0
 800a1c2:	b096      	sub	sp, #88	@ 0x58
 800a1c4:	4615      	mov	r5, r2
 800a1c6:	461e      	mov	r6, r3
 800a1c8:	da0d      	bge.n	800a1e6 <__swhatbuf_r+0x2e>
 800a1ca:	89a3      	ldrh	r3, [r4, #12]
 800a1cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a1d0:	f04f 0100 	mov.w	r1, #0
 800a1d4:	bf14      	ite	ne
 800a1d6:	2340      	movne	r3, #64	@ 0x40
 800a1d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a1dc:	2000      	movs	r0, #0
 800a1de:	6031      	str	r1, [r6, #0]
 800a1e0:	602b      	str	r3, [r5, #0]
 800a1e2:	b016      	add	sp, #88	@ 0x58
 800a1e4:	bd70      	pop	{r4, r5, r6, pc}
 800a1e6:	466a      	mov	r2, sp
 800a1e8:	f000 f874 	bl	800a2d4 <_fstat_r>
 800a1ec:	2800      	cmp	r0, #0
 800a1ee:	dbec      	blt.n	800a1ca <__swhatbuf_r+0x12>
 800a1f0:	9901      	ldr	r1, [sp, #4]
 800a1f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a1f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a1fa:	4259      	negs	r1, r3
 800a1fc:	4159      	adcs	r1, r3
 800a1fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a202:	e7eb      	b.n	800a1dc <__swhatbuf_r+0x24>

0800a204 <__smakebuf_r>:
 800a204:	898b      	ldrh	r3, [r1, #12]
 800a206:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a208:	079d      	lsls	r5, r3, #30
 800a20a:	4606      	mov	r6, r0
 800a20c:	460c      	mov	r4, r1
 800a20e:	d507      	bpl.n	800a220 <__smakebuf_r+0x1c>
 800a210:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a214:	6023      	str	r3, [r4, #0]
 800a216:	6123      	str	r3, [r4, #16]
 800a218:	2301      	movs	r3, #1
 800a21a:	6163      	str	r3, [r4, #20]
 800a21c:	b003      	add	sp, #12
 800a21e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a220:	ab01      	add	r3, sp, #4
 800a222:	466a      	mov	r2, sp
 800a224:	f7ff ffc8 	bl	800a1b8 <__swhatbuf_r>
 800a228:	9f00      	ldr	r7, [sp, #0]
 800a22a:	4605      	mov	r5, r0
 800a22c:	4639      	mov	r1, r7
 800a22e:	4630      	mov	r0, r6
 800a230:	f7fe f8ba 	bl	80083a8 <_malloc_r>
 800a234:	b948      	cbnz	r0, 800a24a <__smakebuf_r+0x46>
 800a236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a23a:	059a      	lsls	r2, r3, #22
 800a23c:	d4ee      	bmi.n	800a21c <__smakebuf_r+0x18>
 800a23e:	f023 0303 	bic.w	r3, r3, #3
 800a242:	f043 0302 	orr.w	r3, r3, #2
 800a246:	81a3      	strh	r3, [r4, #12]
 800a248:	e7e2      	b.n	800a210 <__smakebuf_r+0xc>
 800a24a:	89a3      	ldrh	r3, [r4, #12]
 800a24c:	6020      	str	r0, [r4, #0]
 800a24e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a252:	81a3      	strh	r3, [r4, #12]
 800a254:	9b01      	ldr	r3, [sp, #4]
 800a256:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a25a:	b15b      	cbz	r3, 800a274 <__smakebuf_r+0x70>
 800a25c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a260:	4630      	mov	r0, r6
 800a262:	f000 f849 	bl	800a2f8 <_isatty_r>
 800a266:	b128      	cbz	r0, 800a274 <__smakebuf_r+0x70>
 800a268:	89a3      	ldrh	r3, [r4, #12]
 800a26a:	f023 0303 	bic.w	r3, r3, #3
 800a26e:	f043 0301 	orr.w	r3, r3, #1
 800a272:	81a3      	strh	r3, [r4, #12]
 800a274:	89a3      	ldrh	r3, [r4, #12]
 800a276:	431d      	orrs	r5, r3
 800a278:	81a5      	strh	r5, [r4, #12]
 800a27a:	e7cf      	b.n	800a21c <__smakebuf_r+0x18>

0800a27c <memmove>:
 800a27c:	4288      	cmp	r0, r1
 800a27e:	b510      	push	{r4, lr}
 800a280:	eb01 0402 	add.w	r4, r1, r2
 800a284:	d902      	bls.n	800a28c <memmove+0x10>
 800a286:	4284      	cmp	r4, r0
 800a288:	4623      	mov	r3, r4
 800a28a:	d807      	bhi.n	800a29c <memmove+0x20>
 800a28c:	1e43      	subs	r3, r0, #1
 800a28e:	42a1      	cmp	r1, r4
 800a290:	d008      	beq.n	800a2a4 <memmove+0x28>
 800a292:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a296:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a29a:	e7f8      	b.n	800a28e <memmove+0x12>
 800a29c:	4402      	add	r2, r0
 800a29e:	4601      	mov	r1, r0
 800a2a0:	428a      	cmp	r2, r1
 800a2a2:	d100      	bne.n	800a2a6 <memmove+0x2a>
 800a2a4:	bd10      	pop	{r4, pc}
 800a2a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a2ae:	e7f7      	b.n	800a2a0 <memmove+0x24>

0800a2b0 <strncmp>:
 800a2b0:	b510      	push	{r4, lr}
 800a2b2:	b16a      	cbz	r2, 800a2d0 <strncmp+0x20>
 800a2b4:	3901      	subs	r1, #1
 800a2b6:	1884      	adds	r4, r0, r2
 800a2b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2bc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d103      	bne.n	800a2cc <strncmp+0x1c>
 800a2c4:	42a0      	cmp	r0, r4
 800a2c6:	d001      	beq.n	800a2cc <strncmp+0x1c>
 800a2c8:	2a00      	cmp	r2, #0
 800a2ca:	d1f5      	bne.n	800a2b8 <strncmp+0x8>
 800a2cc:	1ad0      	subs	r0, r2, r3
 800a2ce:	bd10      	pop	{r4, pc}
 800a2d0:	4610      	mov	r0, r2
 800a2d2:	e7fc      	b.n	800a2ce <strncmp+0x1e>

0800a2d4 <_fstat_r>:
 800a2d4:	b538      	push	{r3, r4, r5, lr}
 800a2d6:	4d07      	ldr	r5, [pc, #28]	@ (800a2f4 <_fstat_r+0x20>)
 800a2d8:	2300      	movs	r3, #0
 800a2da:	4604      	mov	r4, r0
 800a2dc:	4608      	mov	r0, r1
 800a2de:	4611      	mov	r1, r2
 800a2e0:	602b      	str	r3, [r5, #0]
 800a2e2:	f7f7 f9b3 	bl	800164c <_fstat>
 800a2e6:	1c43      	adds	r3, r0, #1
 800a2e8:	d102      	bne.n	800a2f0 <_fstat_r+0x1c>
 800a2ea:	682b      	ldr	r3, [r5, #0]
 800a2ec:	b103      	cbz	r3, 800a2f0 <_fstat_r+0x1c>
 800a2ee:	6023      	str	r3, [r4, #0]
 800a2f0:	bd38      	pop	{r3, r4, r5, pc}
 800a2f2:	bf00      	nop
 800a2f4:	20005394 	.word	0x20005394

0800a2f8 <_isatty_r>:
 800a2f8:	b538      	push	{r3, r4, r5, lr}
 800a2fa:	4d06      	ldr	r5, [pc, #24]	@ (800a314 <_isatty_r+0x1c>)
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	4604      	mov	r4, r0
 800a300:	4608      	mov	r0, r1
 800a302:	602b      	str	r3, [r5, #0]
 800a304:	f7f7 f9b2 	bl	800166c <_isatty>
 800a308:	1c43      	adds	r3, r0, #1
 800a30a:	d102      	bne.n	800a312 <_isatty_r+0x1a>
 800a30c:	682b      	ldr	r3, [r5, #0]
 800a30e:	b103      	cbz	r3, 800a312 <_isatty_r+0x1a>
 800a310:	6023      	str	r3, [r4, #0]
 800a312:	bd38      	pop	{r3, r4, r5, pc}
 800a314:	20005394 	.word	0x20005394

0800a318 <_sbrk_r>:
 800a318:	b538      	push	{r3, r4, r5, lr}
 800a31a:	4d06      	ldr	r5, [pc, #24]	@ (800a334 <_sbrk_r+0x1c>)
 800a31c:	2300      	movs	r3, #0
 800a31e:	4604      	mov	r4, r0
 800a320:	4608      	mov	r0, r1
 800a322:	602b      	str	r3, [r5, #0]
 800a324:	f7f7 f9ba 	bl	800169c <_sbrk>
 800a328:	1c43      	adds	r3, r0, #1
 800a32a:	d102      	bne.n	800a332 <_sbrk_r+0x1a>
 800a32c:	682b      	ldr	r3, [r5, #0]
 800a32e:	b103      	cbz	r3, 800a332 <_sbrk_r+0x1a>
 800a330:	6023      	str	r3, [r4, #0]
 800a332:	bd38      	pop	{r3, r4, r5, pc}
 800a334:	20005394 	.word	0x20005394

0800a338 <nan>:
 800a338:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a340 <nan+0x8>
 800a33c:	4770      	bx	lr
 800a33e:	bf00      	nop
 800a340:	00000000 	.word	0x00000000
 800a344:	7ff80000 	.word	0x7ff80000

0800a348 <__assert_func>:
 800a348:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a34a:	4614      	mov	r4, r2
 800a34c:	461a      	mov	r2, r3
 800a34e:	4b09      	ldr	r3, [pc, #36]	@ (800a374 <__assert_func+0x2c>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4605      	mov	r5, r0
 800a354:	68d8      	ldr	r0, [r3, #12]
 800a356:	b954      	cbnz	r4, 800a36e <__assert_func+0x26>
 800a358:	4b07      	ldr	r3, [pc, #28]	@ (800a378 <__assert_func+0x30>)
 800a35a:	461c      	mov	r4, r3
 800a35c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a360:	9100      	str	r1, [sp, #0]
 800a362:	462b      	mov	r3, r5
 800a364:	4905      	ldr	r1, [pc, #20]	@ (800a37c <__assert_func+0x34>)
 800a366:	f000 fba7 	bl	800aab8 <fiprintf>
 800a36a:	f000 fbb7 	bl	800aadc <abort>
 800a36e:	4b04      	ldr	r3, [pc, #16]	@ (800a380 <__assert_func+0x38>)
 800a370:	e7f4      	b.n	800a35c <__assert_func+0x14>
 800a372:	bf00      	nop
 800a374:	2000001c 	.word	0x2000001c
 800a378:	0800b20d 	.word	0x0800b20d
 800a37c:	0800b1df 	.word	0x0800b1df
 800a380:	0800b1d2 	.word	0x0800b1d2

0800a384 <_calloc_r>:
 800a384:	b570      	push	{r4, r5, r6, lr}
 800a386:	fba1 5402 	umull	r5, r4, r1, r2
 800a38a:	b93c      	cbnz	r4, 800a39c <_calloc_r+0x18>
 800a38c:	4629      	mov	r1, r5
 800a38e:	f7fe f80b 	bl	80083a8 <_malloc_r>
 800a392:	4606      	mov	r6, r0
 800a394:	b928      	cbnz	r0, 800a3a2 <_calloc_r+0x1e>
 800a396:	2600      	movs	r6, #0
 800a398:	4630      	mov	r0, r6
 800a39a:	bd70      	pop	{r4, r5, r6, pc}
 800a39c:	220c      	movs	r2, #12
 800a39e:	6002      	str	r2, [r0, #0]
 800a3a0:	e7f9      	b.n	800a396 <_calloc_r+0x12>
 800a3a2:	462a      	mov	r2, r5
 800a3a4:	4621      	mov	r1, r4
 800a3a6:	f7fd f853 	bl	8007450 <memset>
 800a3aa:	e7f5      	b.n	800a398 <_calloc_r+0x14>

0800a3ac <rshift>:
 800a3ac:	6903      	ldr	r3, [r0, #16]
 800a3ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a3b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a3b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a3ba:	f100 0414 	add.w	r4, r0, #20
 800a3be:	dd45      	ble.n	800a44c <rshift+0xa0>
 800a3c0:	f011 011f 	ands.w	r1, r1, #31
 800a3c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a3c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a3cc:	d10c      	bne.n	800a3e8 <rshift+0x3c>
 800a3ce:	f100 0710 	add.w	r7, r0, #16
 800a3d2:	4629      	mov	r1, r5
 800a3d4:	42b1      	cmp	r1, r6
 800a3d6:	d334      	bcc.n	800a442 <rshift+0x96>
 800a3d8:	1a9b      	subs	r3, r3, r2
 800a3da:	009b      	lsls	r3, r3, #2
 800a3dc:	1eea      	subs	r2, r5, #3
 800a3de:	4296      	cmp	r6, r2
 800a3e0:	bf38      	it	cc
 800a3e2:	2300      	movcc	r3, #0
 800a3e4:	4423      	add	r3, r4
 800a3e6:	e015      	b.n	800a414 <rshift+0x68>
 800a3e8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a3ec:	f1c1 0820 	rsb	r8, r1, #32
 800a3f0:	40cf      	lsrs	r7, r1
 800a3f2:	f105 0e04 	add.w	lr, r5, #4
 800a3f6:	46a1      	mov	r9, r4
 800a3f8:	4576      	cmp	r6, lr
 800a3fa:	46f4      	mov	ip, lr
 800a3fc:	d815      	bhi.n	800a42a <rshift+0x7e>
 800a3fe:	1a9a      	subs	r2, r3, r2
 800a400:	0092      	lsls	r2, r2, #2
 800a402:	3a04      	subs	r2, #4
 800a404:	3501      	adds	r5, #1
 800a406:	42ae      	cmp	r6, r5
 800a408:	bf38      	it	cc
 800a40a:	2200      	movcc	r2, #0
 800a40c:	18a3      	adds	r3, r4, r2
 800a40e:	50a7      	str	r7, [r4, r2]
 800a410:	b107      	cbz	r7, 800a414 <rshift+0x68>
 800a412:	3304      	adds	r3, #4
 800a414:	1b1a      	subs	r2, r3, r4
 800a416:	42a3      	cmp	r3, r4
 800a418:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a41c:	bf08      	it	eq
 800a41e:	2300      	moveq	r3, #0
 800a420:	6102      	str	r2, [r0, #16]
 800a422:	bf08      	it	eq
 800a424:	6143      	streq	r3, [r0, #20]
 800a426:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a42a:	f8dc c000 	ldr.w	ip, [ip]
 800a42e:	fa0c fc08 	lsl.w	ip, ip, r8
 800a432:	ea4c 0707 	orr.w	r7, ip, r7
 800a436:	f849 7b04 	str.w	r7, [r9], #4
 800a43a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a43e:	40cf      	lsrs	r7, r1
 800a440:	e7da      	b.n	800a3f8 <rshift+0x4c>
 800a442:	f851 cb04 	ldr.w	ip, [r1], #4
 800a446:	f847 cf04 	str.w	ip, [r7, #4]!
 800a44a:	e7c3      	b.n	800a3d4 <rshift+0x28>
 800a44c:	4623      	mov	r3, r4
 800a44e:	e7e1      	b.n	800a414 <rshift+0x68>

0800a450 <__hexdig_fun>:
 800a450:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a454:	2b09      	cmp	r3, #9
 800a456:	d802      	bhi.n	800a45e <__hexdig_fun+0xe>
 800a458:	3820      	subs	r0, #32
 800a45a:	b2c0      	uxtb	r0, r0
 800a45c:	4770      	bx	lr
 800a45e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a462:	2b05      	cmp	r3, #5
 800a464:	d801      	bhi.n	800a46a <__hexdig_fun+0x1a>
 800a466:	3847      	subs	r0, #71	@ 0x47
 800a468:	e7f7      	b.n	800a45a <__hexdig_fun+0xa>
 800a46a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a46e:	2b05      	cmp	r3, #5
 800a470:	d801      	bhi.n	800a476 <__hexdig_fun+0x26>
 800a472:	3827      	subs	r0, #39	@ 0x27
 800a474:	e7f1      	b.n	800a45a <__hexdig_fun+0xa>
 800a476:	2000      	movs	r0, #0
 800a478:	4770      	bx	lr
	...

0800a47c <__gethex>:
 800a47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a480:	b085      	sub	sp, #20
 800a482:	468a      	mov	sl, r1
 800a484:	9302      	str	r3, [sp, #8]
 800a486:	680b      	ldr	r3, [r1, #0]
 800a488:	9001      	str	r0, [sp, #4]
 800a48a:	4690      	mov	r8, r2
 800a48c:	1c9c      	adds	r4, r3, #2
 800a48e:	46a1      	mov	r9, r4
 800a490:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a494:	2830      	cmp	r0, #48	@ 0x30
 800a496:	d0fa      	beq.n	800a48e <__gethex+0x12>
 800a498:	eba9 0303 	sub.w	r3, r9, r3
 800a49c:	f1a3 0b02 	sub.w	fp, r3, #2
 800a4a0:	f7ff ffd6 	bl	800a450 <__hexdig_fun>
 800a4a4:	4605      	mov	r5, r0
 800a4a6:	2800      	cmp	r0, #0
 800a4a8:	d168      	bne.n	800a57c <__gethex+0x100>
 800a4aa:	49a0      	ldr	r1, [pc, #640]	@ (800a72c <__gethex+0x2b0>)
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	4648      	mov	r0, r9
 800a4b0:	f7ff fefe 	bl	800a2b0 <strncmp>
 800a4b4:	4607      	mov	r7, r0
 800a4b6:	2800      	cmp	r0, #0
 800a4b8:	d167      	bne.n	800a58a <__gethex+0x10e>
 800a4ba:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a4be:	4626      	mov	r6, r4
 800a4c0:	f7ff ffc6 	bl	800a450 <__hexdig_fun>
 800a4c4:	2800      	cmp	r0, #0
 800a4c6:	d062      	beq.n	800a58e <__gethex+0x112>
 800a4c8:	4623      	mov	r3, r4
 800a4ca:	7818      	ldrb	r0, [r3, #0]
 800a4cc:	2830      	cmp	r0, #48	@ 0x30
 800a4ce:	4699      	mov	r9, r3
 800a4d0:	f103 0301 	add.w	r3, r3, #1
 800a4d4:	d0f9      	beq.n	800a4ca <__gethex+0x4e>
 800a4d6:	f7ff ffbb 	bl	800a450 <__hexdig_fun>
 800a4da:	fab0 f580 	clz	r5, r0
 800a4de:	096d      	lsrs	r5, r5, #5
 800a4e0:	f04f 0b01 	mov.w	fp, #1
 800a4e4:	464a      	mov	r2, r9
 800a4e6:	4616      	mov	r6, r2
 800a4e8:	3201      	adds	r2, #1
 800a4ea:	7830      	ldrb	r0, [r6, #0]
 800a4ec:	f7ff ffb0 	bl	800a450 <__hexdig_fun>
 800a4f0:	2800      	cmp	r0, #0
 800a4f2:	d1f8      	bne.n	800a4e6 <__gethex+0x6a>
 800a4f4:	498d      	ldr	r1, [pc, #564]	@ (800a72c <__gethex+0x2b0>)
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	4630      	mov	r0, r6
 800a4fa:	f7ff fed9 	bl	800a2b0 <strncmp>
 800a4fe:	2800      	cmp	r0, #0
 800a500:	d13f      	bne.n	800a582 <__gethex+0x106>
 800a502:	b944      	cbnz	r4, 800a516 <__gethex+0x9a>
 800a504:	1c74      	adds	r4, r6, #1
 800a506:	4622      	mov	r2, r4
 800a508:	4616      	mov	r6, r2
 800a50a:	3201      	adds	r2, #1
 800a50c:	7830      	ldrb	r0, [r6, #0]
 800a50e:	f7ff ff9f 	bl	800a450 <__hexdig_fun>
 800a512:	2800      	cmp	r0, #0
 800a514:	d1f8      	bne.n	800a508 <__gethex+0x8c>
 800a516:	1ba4      	subs	r4, r4, r6
 800a518:	00a7      	lsls	r7, r4, #2
 800a51a:	7833      	ldrb	r3, [r6, #0]
 800a51c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a520:	2b50      	cmp	r3, #80	@ 0x50
 800a522:	d13e      	bne.n	800a5a2 <__gethex+0x126>
 800a524:	7873      	ldrb	r3, [r6, #1]
 800a526:	2b2b      	cmp	r3, #43	@ 0x2b
 800a528:	d033      	beq.n	800a592 <__gethex+0x116>
 800a52a:	2b2d      	cmp	r3, #45	@ 0x2d
 800a52c:	d034      	beq.n	800a598 <__gethex+0x11c>
 800a52e:	1c71      	adds	r1, r6, #1
 800a530:	2400      	movs	r4, #0
 800a532:	7808      	ldrb	r0, [r1, #0]
 800a534:	f7ff ff8c 	bl	800a450 <__hexdig_fun>
 800a538:	1e43      	subs	r3, r0, #1
 800a53a:	b2db      	uxtb	r3, r3
 800a53c:	2b18      	cmp	r3, #24
 800a53e:	d830      	bhi.n	800a5a2 <__gethex+0x126>
 800a540:	f1a0 0210 	sub.w	r2, r0, #16
 800a544:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a548:	f7ff ff82 	bl	800a450 <__hexdig_fun>
 800a54c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800a550:	fa5f fc8c 	uxtb.w	ip, ip
 800a554:	f1bc 0f18 	cmp.w	ip, #24
 800a558:	f04f 030a 	mov.w	r3, #10
 800a55c:	d91e      	bls.n	800a59c <__gethex+0x120>
 800a55e:	b104      	cbz	r4, 800a562 <__gethex+0xe6>
 800a560:	4252      	negs	r2, r2
 800a562:	4417      	add	r7, r2
 800a564:	f8ca 1000 	str.w	r1, [sl]
 800a568:	b1ed      	cbz	r5, 800a5a6 <__gethex+0x12a>
 800a56a:	f1bb 0f00 	cmp.w	fp, #0
 800a56e:	bf0c      	ite	eq
 800a570:	2506      	moveq	r5, #6
 800a572:	2500      	movne	r5, #0
 800a574:	4628      	mov	r0, r5
 800a576:	b005      	add	sp, #20
 800a578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a57c:	2500      	movs	r5, #0
 800a57e:	462c      	mov	r4, r5
 800a580:	e7b0      	b.n	800a4e4 <__gethex+0x68>
 800a582:	2c00      	cmp	r4, #0
 800a584:	d1c7      	bne.n	800a516 <__gethex+0x9a>
 800a586:	4627      	mov	r7, r4
 800a588:	e7c7      	b.n	800a51a <__gethex+0x9e>
 800a58a:	464e      	mov	r6, r9
 800a58c:	462f      	mov	r7, r5
 800a58e:	2501      	movs	r5, #1
 800a590:	e7c3      	b.n	800a51a <__gethex+0x9e>
 800a592:	2400      	movs	r4, #0
 800a594:	1cb1      	adds	r1, r6, #2
 800a596:	e7cc      	b.n	800a532 <__gethex+0xb6>
 800a598:	2401      	movs	r4, #1
 800a59a:	e7fb      	b.n	800a594 <__gethex+0x118>
 800a59c:	fb03 0002 	mla	r0, r3, r2, r0
 800a5a0:	e7ce      	b.n	800a540 <__gethex+0xc4>
 800a5a2:	4631      	mov	r1, r6
 800a5a4:	e7de      	b.n	800a564 <__gethex+0xe8>
 800a5a6:	eba6 0309 	sub.w	r3, r6, r9
 800a5aa:	3b01      	subs	r3, #1
 800a5ac:	4629      	mov	r1, r5
 800a5ae:	2b07      	cmp	r3, #7
 800a5b0:	dc0a      	bgt.n	800a5c8 <__gethex+0x14c>
 800a5b2:	9801      	ldr	r0, [sp, #4]
 800a5b4:	f7fd ff84 	bl	80084c0 <_Balloc>
 800a5b8:	4604      	mov	r4, r0
 800a5ba:	b940      	cbnz	r0, 800a5ce <__gethex+0x152>
 800a5bc:	4b5c      	ldr	r3, [pc, #368]	@ (800a730 <__gethex+0x2b4>)
 800a5be:	4602      	mov	r2, r0
 800a5c0:	21e4      	movs	r1, #228	@ 0xe4
 800a5c2:	485c      	ldr	r0, [pc, #368]	@ (800a734 <__gethex+0x2b8>)
 800a5c4:	f7ff fec0 	bl	800a348 <__assert_func>
 800a5c8:	3101      	adds	r1, #1
 800a5ca:	105b      	asrs	r3, r3, #1
 800a5cc:	e7ef      	b.n	800a5ae <__gethex+0x132>
 800a5ce:	f100 0a14 	add.w	sl, r0, #20
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	4655      	mov	r5, sl
 800a5d6:	469b      	mov	fp, r3
 800a5d8:	45b1      	cmp	r9, r6
 800a5da:	d337      	bcc.n	800a64c <__gethex+0x1d0>
 800a5dc:	f845 bb04 	str.w	fp, [r5], #4
 800a5e0:	eba5 050a 	sub.w	r5, r5, sl
 800a5e4:	10ad      	asrs	r5, r5, #2
 800a5e6:	6125      	str	r5, [r4, #16]
 800a5e8:	4658      	mov	r0, fp
 800a5ea:	f7fe f85b 	bl	80086a4 <__hi0bits>
 800a5ee:	016d      	lsls	r5, r5, #5
 800a5f0:	f8d8 6000 	ldr.w	r6, [r8]
 800a5f4:	1a2d      	subs	r5, r5, r0
 800a5f6:	42b5      	cmp	r5, r6
 800a5f8:	dd54      	ble.n	800a6a4 <__gethex+0x228>
 800a5fa:	1bad      	subs	r5, r5, r6
 800a5fc:	4629      	mov	r1, r5
 800a5fe:	4620      	mov	r0, r4
 800a600:	f7fe fbef 	bl	8008de2 <__any_on>
 800a604:	4681      	mov	r9, r0
 800a606:	b178      	cbz	r0, 800a628 <__gethex+0x1ac>
 800a608:	1e6b      	subs	r3, r5, #1
 800a60a:	1159      	asrs	r1, r3, #5
 800a60c:	f003 021f 	and.w	r2, r3, #31
 800a610:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a614:	f04f 0901 	mov.w	r9, #1
 800a618:	fa09 f202 	lsl.w	r2, r9, r2
 800a61c:	420a      	tst	r2, r1
 800a61e:	d003      	beq.n	800a628 <__gethex+0x1ac>
 800a620:	454b      	cmp	r3, r9
 800a622:	dc36      	bgt.n	800a692 <__gethex+0x216>
 800a624:	f04f 0902 	mov.w	r9, #2
 800a628:	4629      	mov	r1, r5
 800a62a:	4620      	mov	r0, r4
 800a62c:	f7ff febe 	bl	800a3ac <rshift>
 800a630:	442f      	add	r7, r5
 800a632:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a636:	42bb      	cmp	r3, r7
 800a638:	da42      	bge.n	800a6c0 <__gethex+0x244>
 800a63a:	9801      	ldr	r0, [sp, #4]
 800a63c:	4621      	mov	r1, r4
 800a63e:	f7fd ff7f 	bl	8008540 <_Bfree>
 800a642:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a644:	2300      	movs	r3, #0
 800a646:	6013      	str	r3, [r2, #0]
 800a648:	25a3      	movs	r5, #163	@ 0xa3
 800a64a:	e793      	b.n	800a574 <__gethex+0xf8>
 800a64c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a650:	2a2e      	cmp	r2, #46	@ 0x2e
 800a652:	d012      	beq.n	800a67a <__gethex+0x1fe>
 800a654:	2b20      	cmp	r3, #32
 800a656:	d104      	bne.n	800a662 <__gethex+0x1e6>
 800a658:	f845 bb04 	str.w	fp, [r5], #4
 800a65c:	f04f 0b00 	mov.w	fp, #0
 800a660:	465b      	mov	r3, fp
 800a662:	7830      	ldrb	r0, [r6, #0]
 800a664:	9303      	str	r3, [sp, #12]
 800a666:	f7ff fef3 	bl	800a450 <__hexdig_fun>
 800a66a:	9b03      	ldr	r3, [sp, #12]
 800a66c:	f000 000f 	and.w	r0, r0, #15
 800a670:	4098      	lsls	r0, r3
 800a672:	ea4b 0b00 	orr.w	fp, fp, r0
 800a676:	3304      	adds	r3, #4
 800a678:	e7ae      	b.n	800a5d8 <__gethex+0x15c>
 800a67a:	45b1      	cmp	r9, r6
 800a67c:	d8ea      	bhi.n	800a654 <__gethex+0x1d8>
 800a67e:	492b      	ldr	r1, [pc, #172]	@ (800a72c <__gethex+0x2b0>)
 800a680:	9303      	str	r3, [sp, #12]
 800a682:	2201      	movs	r2, #1
 800a684:	4630      	mov	r0, r6
 800a686:	f7ff fe13 	bl	800a2b0 <strncmp>
 800a68a:	9b03      	ldr	r3, [sp, #12]
 800a68c:	2800      	cmp	r0, #0
 800a68e:	d1e1      	bne.n	800a654 <__gethex+0x1d8>
 800a690:	e7a2      	b.n	800a5d8 <__gethex+0x15c>
 800a692:	1ea9      	subs	r1, r5, #2
 800a694:	4620      	mov	r0, r4
 800a696:	f7fe fba4 	bl	8008de2 <__any_on>
 800a69a:	2800      	cmp	r0, #0
 800a69c:	d0c2      	beq.n	800a624 <__gethex+0x1a8>
 800a69e:	f04f 0903 	mov.w	r9, #3
 800a6a2:	e7c1      	b.n	800a628 <__gethex+0x1ac>
 800a6a4:	da09      	bge.n	800a6ba <__gethex+0x23e>
 800a6a6:	1b75      	subs	r5, r6, r5
 800a6a8:	4621      	mov	r1, r4
 800a6aa:	9801      	ldr	r0, [sp, #4]
 800a6ac:	462a      	mov	r2, r5
 800a6ae:	f7fe f95f 	bl	8008970 <__lshift>
 800a6b2:	1b7f      	subs	r7, r7, r5
 800a6b4:	4604      	mov	r4, r0
 800a6b6:	f100 0a14 	add.w	sl, r0, #20
 800a6ba:	f04f 0900 	mov.w	r9, #0
 800a6be:	e7b8      	b.n	800a632 <__gethex+0x1b6>
 800a6c0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a6c4:	42bd      	cmp	r5, r7
 800a6c6:	dd6f      	ble.n	800a7a8 <__gethex+0x32c>
 800a6c8:	1bed      	subs	r5, r5, r7
 800a6ca:	42ae      	cmp	r6, r5
 800a6cc:	dc34      	bgt.n	800a738 <__gethex+0x2bc>
 800a6ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a6d2:	2b02      	cmp	r3, #2
 800a6d4:	d022      	beq.n	800a71c <__gethex+0x2a0>
 800a6d6:	2b03      	cmp	r3, #3
 800a6d8:	d024      	beq.n	800a724 <__gethex+0x2a8>
 800a6da:	2b01      	cmp	r3, #1
 800a6dc:	d115      	bne.n	800a70a <__gethex+0x28e>
 800a6de:	42ae      	cmp	r6, r5
 800a6e0:	d113      	bne.n	800a70a <__gethex+0x28e>
 800a6e2:	2e01      	cmp	r6, #1
 800a6e4:	d10b      	bne.n	800a6fe <__gethex+0x282>
 800a6e6:	9a02      	ldr	r2, [sp, #8]
 800a6e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a6ec:	6013      	str	r3, [r2, #0]
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	6123      	str	r3, [r4, #16]
 800a6f2:	f8ca 3000 	str.w	r3, [sl]
 800a6f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6f8:	2562      	movs	r5, #98	@ 0x62
 800a6fa:	601c      	str	r4, [r3, #0]
 800a6fc:	e73a      	b.n	800a574 <__gethex+0xf8>
 800a6fe:	1e71      	subs	r1, r6, #1
 800a700:	4620      	mov	r0, r4
 800a702:	f7fe fb6e 	bl	8008de2 <__any_on>
 800a706:	2800      	cmp	r0, #0
 800a708:	d1ed      	bne.n	800a6e6 <__gethex+0x26a>
 800a70a:	9801      	ldr	r0, [sp, #4]
 800a70c:	4621      	mov	r1, r4
 800a70e:	f7fd ff17 	bl	8008540 <_Bfree>
 800a712:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a714:	2300      	movs	r3, #0
 800a716:	6013      	str	r3, [r2, #0]
 800a718:	2550      	movs	r5, #80	@ 0x50
 800a71a:	e72b      	b.n	800a574 <__gethex+0xf8>
 800a71c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d1f3      	bne.n	800a70a <__gethex+0x28e>
 800a722:	e7e0      	b.n	800a6e6 <__gethex+0x26a>
 800a724:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a726:	2b00      	cmp	r3, #0
 800a728:	d1dd      	bne.n	800a6e6 <__gethex+0x26a>
 800a72a:	e7ee      	b.n	800a70a <__gethex+0x28e>
 800a72c:	0800b060 	.word	0x0800b060
 800a730:	0800aef5 	.word	0x0800aef5
 800a734:	0800b20e 	.word	0x0800b20e
 800a738:	1e6f      	subs	r7, r5, #1
 800a73a:	f1b9 0f00 	cmp.w	r9, #0
 800a73e:	d130      	bne.n	800a7a2 <__gethex+0x326>
 800a740:	b127      	cbz	r7, 800a74c <__gethex+0x2d0>
 800a742:	4639      	mov	r1, r7
 800a744:	4620      	mov	r0, r4
 800a746:	f7fe fb4c 	bl	8008de2 <__any_on>
 800a74a:	4681      	mov	r9, r0
 800a74c:	117a      	asrs	r2, r7, #5
 800a74e:	2301      	movs	r3, #1
 800a750:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a754:	f007 071f 	and.w	r7, r7, #31
 800a758:	40bb      	lsls	r3, r7
 800a75a:	4213      	tst	r3, r2
 800a75c:	4629      	mov	r1, r5
 800a75e:	4620      	mov	r0, r4
 800a760:	bf18      	it	ne
 800a762:	f049 0902 	orrne.w	r9, r9, #2
 800a766:	f7ff fe21 	bl	800a3ac <rshift>
 800a76a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a76e:	1b76      	subs	r6, r6, r5
 800a770:	2502      	movs	r5, #2
 800a772:	f1b9 0f00 	cmp.w	r9, #0
 800a776:	d047      	beq.n	800a808 <__gethex+0x38c>
 800a778:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a77c:	2b02      	cmp	r3, #2
 800a77e:	d015      	beq.n	800a7ac <__gethex+0x330>
 800a780:	2b03      	cmp	r3, #3
 800a782:	d017      	beq.n	800a7b4 <__gethex+0x338>
 800a784:	2b01      	cmp	r3, #1
 800a786:	d109      	bne.n	800a79c <__gethex+0x320>
 800a788:	f019 0f02 	tst.w	r9, #2
 800a78c:	d006      	beq.n	800a79c <__gethex+0x320>
 800a78e:	f8da 3000 	ldr.w	r3, [sl]
 800a792:	ea49 0903 	orr.w	r9, r9, r3
 800a796:	f019 0f01 	tst.w	r9, #1
 800a79a:	d10e      	bne.n	800a7ba <__gethex+0x33e>
 800a79c:	f045 0510 	orr.w	r5, r5, #16
 800a7a0:	e032      	b.n	800a808 <__gethex+0x38c>
 800a7a2:	f04f 0901 	mov.w	r9, #1
 800a7a6:	e7d1      	b.n	800a74c <__gethex+0x2d0>
 800a7a8:	2501      	movs	r5, #1
 800a7aa:	e7e2      	b.n	800a772 <__gethex+0x2f6>
 800a7ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7ae:	f1c3 0301 	rsb	r3, r3, #1
 800a7b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a7b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d0f0      	beq.n	800a79c <__gethex+0x320>
 800a7ba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a7be:	f104 0314 	add.w	r3, r4, #20
 800a7c2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a7c6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a7ca:	f04f 0c00 	mov.w	ip, #0
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7d4:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800a7d8:	d01b      	beq.n	800a812 <__gethex+0x396>
 800a7da:	3201      	adds	r2, #1
 800a7dc:	6002      	str	r2, [r0, #0]
 800a7de:	2d02      	cmp	r5, #2
 800a7e0:	f104 0314 	add.w	r3, r4, #20
 800a7e4:	d13c      	bne.n	800a860 <__gethex+0x3e4>
 800a7e6:	f8d8 2000 	ldr.w	r2, [r8]
 800a7ea:	3a01      	subs	r2, #1
 800a7ec:	42b2      	cmp	r2, r6
 800a7ee:	d109      	bne.n	800a804 <__gethex+0x388>
 800a7f0:	1171      	asrs	r1, r6, #5
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a7f8:	f006 061f 	and.w	r6, r6, #31
 800a7fc:	fa02 f606 	lsl.w	r6, r2, r6
 800a800:	421e      	tst	r6, r3
 800a802:	d13a      	bne.n	800a87a <__gethex+0x3fe>
 800a804:	f045 0520 	orr.w	r5, r5, #32
 800a808:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a80a:	601c      	str	r4, [r3, #0]
 800a80c:	9b02      	ldr	r3, [sp, #8]
 800a80e:	601f      	str	r7, [r3, #0]
 800a810:	e6b0      	b.n	800a574 <__gethex+0xf8>
 800a812:	4299      	cmp	r1, r3
 800a814:	f843 cc04 	str.w	ip, [r3, #-4]
 800a818:	d8d9      	bhi.n	800a7ce <__gethex+0x352>
 800a81a:	68a3      	ldr	r3, [r4, #8]
 800a81c:	459b      	cmp	fp, r3
 800a81e:	db17      	blt.n	800a850 <__gethex+0x3d4>
 800a820:	6861      	ldr	r1, [r4, #4]
 800a822:	9801      	ldr	r0, [sp, #4]
 800a824:	3101      	adds	r1, #1
 800a826:	f7fd fe4b 	bl	80084c0 <_Balloc>
 800a82a:	4681      	mov	r9, r0
 800a82c:	b918      	cbnz	r0, 800a836 <__gethex+0x3ba>
 800a82e:	4b1a      	ldr	r3, [pc, #104]	@ (800a898 <__gethex+0x41c>)
 800a830:	4602      	mov	r2, r0
 800a832:	2184      	movs	r1, #132	@ 0x84
 800a834:	e6c5      	b.n	800a5c2 <__gethex+0x146>
 800a836:	6922      	ldr	r2, [r4, #16]
 800a838:	3202      	adds	r2, #2
 800a83a:	f104 010c 	add.w	r1, r4, #12
 800a83e:	0092      	lsls	r2, r2, #2
 800a840:	300c      	adds	r0, #12
 800a842:	f7fc feda 	bl	80075fa <memcpy>
 800a846:	4621      	mov	r1, r4
 800a848:	9801      	ldr	r0, [sp, #4]
 800a84a:	f7fd fe79 	bl	8008540 <_Bfree>
 800a84e:	464c      	mov	r4, r9
 800a850:	6923      	ldr	r3, [r4, #16]
 800a852:	1c5a      	adds	r2, r3, #1
 800a854:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a858:	6122      	str	r2, [r4, #16]
 800a85a:	2201      	movs	r2, #1
 800a85c:	615a      	str	r2, [r3, #20]
 800a85e:	e7be      	b.n	800a7de <__gethex+0x362>
 800a860:	6922      	ldr	r2, [r4, #16]
 800a862:	455a      	cmp	r2, fp
 800a864:	dd0b      	ble.n	800a87e <__gethex+0x402>
 800a866:	2101      	movs	r1, #1
 800a868:	4620      	mov	r0, r4
 800a86a:	f7ff fd9f 	bl	800a3ac <rshift>
 800a86e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a872:	3701      	adds	r7, #1
 800a874:	42bb      	cmp	r3, r7
 800a876:	f6ff aee0 	blt.w	800a63a <__gethex+0x1be>
 800a87a:	2501      	movs	r5, #1
 800a87c:	e7c2      	b.n	800a804 <__gethex+0x388>
 800a87e:	f016 061f 	ands.w	r6, r6, #31
 800a882:	d0fa      	beq.n	800a87a <__gethex+0x3fe>
 800a884:	4453      	add	r3, sl
 800a886:	f1c6 0620 	rsb	r6, r6, #32
 800a88a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a88e:	f7fd ff09 	bl	80086a4 <__hi0bits>
 800a892:	42b0      	cmp	r0, r6
 800a894:	dbe7      	blt.n	800a866 <__gethex+0x3ea>
 800a896:	e7f0      	b.n	800a87a <__gethex+0x3fe>
 800a898:	0800aef5 	.word	0x0800aef5

0800a89c <L_shift>:
 800a89c:	f1c2 0208 	rsb	r2, r2, #8
 800a8a0:	0092      	lsls	r2, r2, #2
 800a8a2:	b570      	push	{r4, r5, r6, lr}
 800a8a4:	f1c2 0620 	rsb	r6, r2, #32
 800a8a8:	6843      	ldr	r3, [r0, #4]
 800a8aa:	6804      	ldr	r4, [r0, #0]
 800a8ac:	fa03 f506 	lsl.w	r5, r3, r6
 800a8b0:	432c      	orrs	r4, r5
 800a8b2:	40d3      	lsrs	r3, r2
 800a8b4:	6004      	str	r4, [r0, #0]
 800a8b6:	f840 3f04 	str.w	r3, [r0, #4]!
 800a8ba:	4288      	cmp	r0, r1
 800a8bc:	d3f4      	bcc.n	800a8a8 <L_shift+0xc>
 800a8be:	bd70      	pop	{r4, r5, r6, pc}

0800a8c0 <__match>:
 800a8c0:	b530      	push	{r4, r5, lr}
 800a8c2:	6803      	ldr	r3, [r0, #0]
 800a8c4:	3301      	adds	r3, #1
 800a8c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8ca:	b914      	cbnz	r4, 800a8d2 <__match+0x12>
 800a8cc:	6003      	str	r3, [r0, #0]
 800a8ce:	2001      	movs	r0, #1
 800a8d0:	bd30      	pop	{r4, r5, pc}
 800a8d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8d6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a8da:	2d19      	cmp	r5, #25
 800a8dc:	bf98      	it	ls
 800a8de:	3220      	addls	r2, #32
 800a8e0:	42a2      	cmp	r2, r4
 800a8e2:	d0f0      	beq.n	800a8c6 <__match+0x6>
 800a8e4:	2000      	movs	r0, #0
 800a8e6:	e7f3      	b.n	800a8d0 <__match+0x10>

0800a8e8 <__hexnan>:
 800a8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ec:	680b      	ldr	r3, [r1, #0]
 800a8ee:	6801      	ldr	r1, [r0, #0]
 800a8f0:	115e      	asrs	r6, r3, #5
 800a8f2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a8f6:	f013 031f 	ands.w	r3, r3, #31
 800a8fa:	b087      	sub	sp, #28
 800a8fc:	bf18      	it	ne
 800a8fe:	3604      	addne	r6, #4
 800a900:	2500      	movs	r5, #0
 800a902:	1f37      	subs	r7, r6, #4
 800a904:	4682      	mov	sl, r0
 800a906:	4690      	mov	r8, r2
 800a908:	9301      	str	r3, [sp, #4]
 800a90a:	f846 5c04 	str.w	r5, [r6, #-4]
 800a90e:	46b9      	mov	r9, r7
 800a910:	463c      	mov	r4, r7
 800a912:	9502      	str	r5, [sp, #8]
 800a914:	46ab      	mov	fp, r5
 800a916:	784a      	ldrb	r2, [r1, #1]
 800a918:	1c4b      	adds	r3, r1, #1
 800a91a:	9303      	str	r3, [sp, #12]
 800a91c:	b342      	cbz	r2, 800a970 <__hexnan+0x88>
 800a91e:	4610      	mov	r0, r2
 800a920:	9105      	str	r1, [sp, #20]
 800a922:	9204      	str	r2, [sp, #16]
 800a924:	f7ff fd94 	bl	800a450 <__hexdig_fun>
 800a928:	2800      	cmp	r0, #0
 800a92a:	d151      	bne.n	800a9d0 <__hexnan+0xe8>
 800a92c:	9a04      	ldr	r2, [sp, #16]
 800a92e:	9905      	ldr	r1, [sp, #20]
 800a930:	2a20      	cmp	r2, #32
 800a932:	d818      	bhi.n	800a966 <__hexnan+0x7e>
 800a934:	9b02      	ldr	r3, [sp, #8]
 800a936:	459b      	cmp	fp, r3
 800a938:	dd13      	ble.n	800a962 <__hexnan+0x7a>
 800a93a:	454c      	cmp	r4, r9
 800a93c:	d206      	bcs.n	800a94c <__hexnan+0x64>
 800a93e:	2d07      	cmp	r5, #7
 800a940:	dc04      	bgt.n	800a94c <__hexnan+0x64>
 800a942:	462a      	mov	r2, r5
 800a944:	4649      	mov	r1, r9
 800a946:	4620      	mov	r0, r4
 800a948:	f7ff ffa8 	bl	800a89c <L_shift>
 800a94c:	4544      	cmp	r4, r8
 800a94e:	d952      	bls.n	800a9f6 <__hexnan+0x10e>
 800a950:	2300      	movs	r3, #0
 800a952:	f1a4 0904 	sub.w	r9, r4, #4
 800a956:	f844 3c04 	str.w	r3, [r4, #-4]
 800a95a:	f8cd b008 	str.w	fp, [sp, #8]
 800a95e:	464c      	mov	r4, r9
 800a960:	461d      	mov	r5, r3
 800a962:	9903      	ldr	r1, [sp, #12]
 800a964:	e7d7      	b.n	800a916 <__hexnan+0x2e>
 800a966:	2a29      	cmp	r2, #41	@ 0x29
 800a968:	d157      	bne.n	800aa1a <__hexnan+0x132>
 800a96a:	3102      	adds	r1, #2
 800a96c:	f8ca 1000 	str.w	r1, [sl]
 800a970:	f1bb 0f00 	cmp.w	fp, #0
 800a974:	d051      	beq.n	800aa1a <__hexnan+0x132>
 800a976:	454c      	cmp	r4, r9
 800a978:	d206      	bcs.n	800a988 <__hexnan+0xa0>
 800a97a:	2d07      	cmp	r5, #7
 800a97c:	dc04      	bgt.n	800a988 <__hexnan+0xa0>
 800a97e:	462a      	mov	r2, r5
 800a980:	4649      	mov	r1, r9
 800a982:	4620      	mov	r0, r4
 800a984:	f7ff ff8a 	bl	800a89c <L_shift>
 800a988:	4544      	cmp	r4, r8
 800a98a:	d936      	bls.n	800a9fa <__hexnan+0x112>
 800a98c:	f1a8 0204 	sub.w	r2, r8, #4
 800a990:	4623      	mov	r3, r4
 800a992:	f853 1b04 	ldr.w	r1, [r3], #4
 800a996:	f842 1f04 	str.w	r1, [r2, #4]!
 800a99a:	429f      	cmp	r7, r3
 800a99c:	d2f9      	bcs.n	800a992 <__hexnan+0xaa>
 800a99e:	1b3b      	subs	r3, r7, r4
 800a9a0:	f023 0303 	bic.w	r3, r3, #3
 800a9a4:	3304      	adds	r3, #4
 800a9a6:	3401      	adds	r4, #1
 800a9a8:	3e03      	subs	r6, #3
 800a9aa:	42b4      	cmp	r4, r6
 800a9ac:	bf88      	it	hi
 800a9ae:	2304      	movhi	r3, #4
 800a9b0:	4443      	add	r3, r8
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	f843 2b04 	str.w	r2, [r3], #4
 800a9b8:	429f      	cmp	r7, r3
 800a9ba:	d2fb      	bcs.n	800a9b4 <__hexnan+0xcc>
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	b91b      	cbnz	r3, 800a9c8 <__hexnan+0xe0>
 800a9c0:	4547      	cmp	r7, r8
 800a9c2:	d128      	bne.n	800aa16 <__hexnan+0x12e>
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	603b      	str	r3, [r7, #0]
 800a9c8:	2005      	movs	r0, #5
 800a9ca:	b007      	add	sp, #28
 800a9cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9d0:	3501      	adds	r5, #1
 800a9d2:	2d08      	cmp	r5, #8
 800a9d4:	f10b 0b01 	add.w	fp, fp, #1
 800a9d8:	dd06      	ble.n	800a9e8 <__hexnan+0x100>
 800a9da:	4544      	cmp	r4, r8
 800a9dc:	d9c1      	bls.n	800a962 <__hexnan+0x7a>
 800a9de:	2300      	movs	r3, #0
 800a9e0:	f844 3c04 	str.w	r3, [r4, #-4]
 800a9e4:	2501      	movs	r5, #1
 800a9e6:	3c04      	subs	r4, #4
 800a9e8:	6822      	ldr	r2, [r4, #0]
 800a9ea:	f000 000f 	and.w	r0, r0, #15
 800a9ee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a9f2:	6020      	str	r0, [r4, #0]
 800a9f4:	e7b5      	b.n	800a962 <__hexnan+0x7a>
 800a9f6:	2508      	movs	r5, #8
 800a9f8:	e7b3      	b.n	800a962 <__hexnan+0x7a>
 800a9fa:	9b01      	ldr	r3, [sp, #4]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d0dd      	beq.n	800a9bc <__hexnan+0xd4>
 800aa00:	f1c3 0320 	rsb	r3, r3, #32
 800aa04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aa08:	40da      	lsrs	r2, r3
 800aa0a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800aa0e:	4013      	ands	r3, r2
 800aa10:	f846 3c04 	str.w	r3, [r6, #-4]
 800aa14:	e7d2      	b.n	800a9bc <__hexnan+0xd4>
 800aa16:	3f04      	subs	r7, #4
 800aa18:	e7d0      	b.n	800a9bc <__hexnan+0xd4>
 800aa1a:	2004      	movs	r0, #4
 800aa1c:	e7d5      	b.n	800a9ca <__hexnan+0xe2>

0800aa1e <__ascii_mbtowc>:
 800aa1e:	b082      	sub	sp, #8
 800aa20:	b901      	cbnz	r1, 800aa24 <__ascii_mbtowc+0x6>
 800aa22:	a901      	add	r1, sp, #4
 800aa24:	b142      	cbz	r2, 800aa38 <__ascii_mbtowc+0x1a>
 800aa26:	b14b      	cbz	r3, 800aa3c <__ascii_mbtowc+0x1e>
 800aa28:	7813      	ldrb	r3, [r2, #0]
 800aa2a:	600b      	str	r3, [r1, #0]
 800aa2c:	7812      	ldrb	r2, [r2, #0]
 800aa2e:	1e10      	subs	r0, r2, #0
 800aa30:	bf18      	it	ne
 800aa32:	2001      	movne	r0, #1
 800aa34:	b002      	add	sp, #8
 800aa36:	4770      	bx	lr
 800aa38:	4610      	mov	r0, r2
 800aa3a:	e7fb      	b.n	800aa34 <__ascii_mbtowc+0x16>
 800aa3c:	f06f 0001 	mvn.w	r0, #1
 800aa40:	e7f8      	b.n	800aa34 <__ascii_mbtowc+0x16>

0800aa42 <_realloc_r>:
 800aa42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa46:	4680      	mov	r8, r0
 800aa48:	4615      	mov	r5, r2
 800aa4a:	460c      	mov	r4, r1
 800aa4c:	b921      	cbnz	r1, 800aa58 <_realloc_r+0x16>
 800aa4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa52:	4611      	mov	r1, r2
 800aa54:	f7fd bca8 	b.w	80083a8 <_malloc_r>
 800aa58:	b92a      	cbnz	r2, 800aa66 <_realloc_r+0x24>
 800aa5a:	f7fd fc31 	bl	80082c0 <_free_r>
 800aa5e:	2400      	movs	r4, #0
 800aa60:	4620      	mov	r0, r4
 800aa62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa66:	f000 f840 	bl	800aaea <_malloc_usable_size_r>
 800aa6a:	4285      	cmp	r5, r0
 800aa6c:	4606      	mov	r6, r0
 800aa6e:	d802      	bhi.n	800aa76 <_realloc_r+0x34>
 800aa70:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800aa74:	d8f4      	bhi.n	800aa60 <_realloc_r+0x1e>
 800aa76:	4629      	mov	r1, r5
 800aa78:	4640      	mov	r0, r8
 800aa7a:	f7fd fc95 	bl	80083a8 <_malloc_r>
 800aa7e:	4607      	mov	r7, r0
 800aa80:	2800      	cmp	r0, #0
 800aa82:	d0ec      	beq.n	800aa5e <_realloc_r+0x1c>
 800aa84:	42b5      	cmp	r5, r6
 800aa86:	462a      	mov	r2, r5
 800aa88:	4621      	mov	r1, r4
 800aa8a:	bf28      	it	cs
 800aa8c:	4632      	movcs	r2, r6
 800aa8e:	f7fc fdb4 	bl	80075fa <memcpy>
 800aa92:	4621      	mov	r1, r4
 800aa94:	4640      	mov	r0, r8
 800aa96:	f7fd fc13 	bl	80082c0 <_free_r>
 800aa9a:	463c      	mov	r4, r7
 800aa9c:	e7e0      	b.n	800aa60 <_realloc_r+0x1e>

0800aa9e <__ascii_wctomb>:
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	4608      	mov	r0, r1
 800aaa2:	b141      	cbz	r1, 800aab6 <__ascii_wctomb+0x18>
 800aaa4:	2aff      	cmp	r2, #255	@ 0xff
 800aaa6:	d904      	bls.n	800aab2 <__ascii_wctomb+0x14>
 800aaa8:	228a      	movs	r2, #138	@ 0x8a
 800aaaa:	601a      	str	r2, [r3, #0]
 800aaac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aab0:	4770      	bx	lr
 800aab2:	700a      	strb	r2, [r1, #0]
 800aab4:	2001      	movs	r0, #1
 800aab6:	4770      	bx	lr

0800aab8 <fiprintf>:
 800aab8:	b40e      	push	{r1, r2, r3}
 800aaba:	b503      	push	{r0, r1, lr}
 800aabc:	4601      	mov	r1, r0
 800aabe:	ab03      	add	r3, sp, #12
 800aac0:	4805      	ldr	r0, [pc, #20]	@ (800aad8 <fiprintf+0x20>)
 800aac2:	f853 2b04 	ldr.w	r2, [r3], #4
 800aac6:	6800      	ldr	r0, [r0, #0]
 800aac8:	9301      	str	r3, [sp, #4]
 800aaca:	f7ff f9b1 	bl	8009e30 <_vfiprintf_r>
 800aace:	b002      	add	sp, #8
 800aad0:	f85d eb04 	ldr.w	lr, [sp], #4
 800aad4:	b003      	add	sp, #12
 800aad6:	4770      	bx	lr
 800aad8:	2000001c 	.word	0x2000001c

0800aadc <abort>:
 800aadc:	b508      	push	{r3, lr}
 800aade:	2006      	movs	r0, #6
 800aae0:	f000 f834 	bl	800ab4c <raise>
 800aae4:	2001      	movs	r0, #1
 800aae6:	f7f6 fd61 	bl	80015ac <_exit>

0800aaea <_malloc_usable_size_r>:
 800aaea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aaee:	1f18      	subs	r0, r3, #4
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	bfbc      	itt	lt
 800aaf4:	580b      	ldrlt	r3, [r1, r0]
 800aaf6:	18c0      	addlt	r0, r0, r3
 800aaf8:	4770      	bx	lr

0800aafa <_raise_r>:
 800aafa:	291f      	cmp	r1, #31
 800aafc:	b538      	push	{r3, r4, r5, lr}
 800aafe:	4605      	mov	r5, r0
 800ab00:	460c      	mov	r4, r1
 800ab02:	d904      	bls.n	800ab0e <_raise_r+0x14>
 800ab04:	2316      	movs	r3, #22
 800ab06:	6003      	str	r3, [r0, #0]
 800ab08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab0c:	bd38      	pop	{r3, r4, r5, pc}
 800ab0e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ab10:	b112      	cbz	r2, 800ab18 <_raise_r+0x1e>
 800ab12:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ab16:	b94b      	cbnz	r3, 800ab2c <_raise_r+0x32>
 800ab18:	4628      	mov	r0, r5
 800ab1a:	f000 f831 	bl	800ab80 <_getpid_r>
 800ab1e:	4622      	mov	r2, r4
 800ab20:	4601      	mov	r1, r0
 800ab22:	4628      	mov	r0, r5
 800ab24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab28:	f000 b818 	b.w	800ab5c <_kill_r>
 800ab2c:	2b01      	cmp	r3, #1
 800ab2e:	d00a      	beq.n	800ab46 <_raise_r+0x4c>
 800ab30:	1c59      	adds	r1, r3, #1
 800ab32:	d103      	bne.n	800ab3c <_raise_r+0x42>
 800ab34:	2316      	movs	r3, #22
 800ab36:	6003      	str	r3, [r0, #0]
 800ab38:	2001      	movs	r0, #1
 800ab3a:	e7e7      	b.n	800ab0c <_raise_r+0x12>
 800ab3c:	2100      	movs	r1, #0
 800ab3e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ab42:	4620      	mov	r0, r4
 800ab44:	4798      	blx	r3
 800ab46:	2000      	movs	r0, #0
 800ab48:	e7e0      	b.n	800ab0c <_raise_r+0x12>
	...

0800ab4c <raise>:
 800ab4c:	4b02      	ldr	r3, [pc, #8]	@ (800ab58 <raise+0xc>)
 800ab4e:	4601      	mov	r1, r0
 800ab50:	6818      	ldr	r0, [r3, #0]
 800ab52:	f7ff bfd2 	b.w	800aafa <_raise_r>
 800ab56:	bf00      	nop
 800ab58:	2000001c 	.word	0x2000001c

0800ab5c <_kill_r>:
 800ab5c:	b538      	push	{r3, r4, r5, lr}
 800ab5e:	4d07      	ldr	r5, [pc, #28]	@ (800ab7c <_kill_r+0x20>)
 800ab60:	2300      	movs	r3, #0
 800ab62:	4604      	mov	r4, r0
 800ab64:	4608      	mov	r0, r1
 800ab66:	4611      	mov	r1, r2
 800ab68:	602b      	str	r3, [r5, #0]
 800ab6a:	f7f6 fd0f 	bl	800158c <_kill>
 800ab6e:	1c43      	adds	r3, r0, #1
 800ab70:	d102      	bne.n	800ab78 <_kill_r+0x1c>
 800ab72:	682b      	ldr	r3, [r5, #0]
 800ab74:	b103      	cbz	r3, 800ab78 <_kill_r+0x1c>
 800ab76:	6023      	str	r3, [r4, #0]
 800ab78:	bd38      	pop	{r3, r4, r5, pc}
 800ab7a:	bf00      	nop
 800ab7c:	20005394 	.word	0x20005394

0800ab80 <_getpid_r>:
 800ab80:	f7f6 bcfc 	b.w	800157c <_getpid>

0800ab84 <_init>:
 800ab84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab86:	bf00      	nop
 800ab88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab8a:	bc08      	pop	{r3}
 800ab8c:	469e      	mov	lr, r3
 800ab8e:	4770      	bx	lr

0800ab90 <_fini>:
 800ab90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab92:	bf00      	nop
 800ab94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab96:	bc08      	pop	{r3}
 800ab98:	469e      	mov	lr, r3
 800ab9a:	4770      	bx	lr
